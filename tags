!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$FZF_DEFAULT_COMMAND	nvim/init.vim	/^let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'$/;"	v
$FZF_DEFAULT_COMMAND	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let $FZF_DEFAULT_COMMAND = a:grep_command$/;"	v
$FZF_DEFAULT_COMMAND	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let $FZF_DEFAULT_COMMAND = prev_default_command$/;"	v
$PERL6_EXCEPTIONS_HANDLER	nvim/plugged/ale/ale_linters/perl6/perl6.vim	/^let $PERL6_EXCEPTIONS_HANDLER = 'JSON'$/;"	v
$RAKUDO_ERROR_COLOR	nvim/plugged/ale/ale_linters/perl6/perl6.vim	/^let $RAKUDO_ERROR_COLOR = 0$/;"	v
$mid	nvim/plugged/coc.nvim/build/index.js	/^            $mid: 1$/;"	P
$removeConfigurationOption	nvim/plugged/coc.nvim/build/index.js	/^    $removeConfigurationOption(target, key) {$/;"	M
$removeConfigurationOption	nvim/plugged/coc.nvim/src/configuration/shape.ts	/^  public $removeConfigurationOption(target: ConfigurationTarget, key: string): void {$/;"	m
$updateConfigurationOption	nvim/plugged/coc.nvim/build/index.js	/^    $updateConfigurationOption(target, key, value) {$/;"	M
$updateConfigurationOption	nvim/plugged/coc.nvim/src/configuration/shape.ts	/^  public $updateConfigurationOption(target: ConfigurationTarget, key: string, value: any): void {$/;"	m
+	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> + <Plug>VimwikiNormalizeLink$/;"	m
+	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> + <Plug>VimwikiNormalizeLinkVisual$/;"	m
-	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> - <Plug>VimwikiRemoveHeaderLevel$/;"	m
-channel	Makefile	/^		sudo snap install spt --channel=edge$/;"	m
12	nvim/plugged/coc.nvim/build/index.js	/^  12: 0o77777777777,$/;"	P
8	nvim/plugged/coc.nvim/build/index.js	/^  8 : 0o7777777$/;"	P
<2-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nnoremap <silent><buffer> <2-LeftMouse>$/;"	m
<A-H>	nvim/init.vim	/^map <silent> <A-H> <C-w><$/;"	m
<A-J>	nvim/init.vim	/^map <silent> <A-J> <C-W>+$/;"	m
<A-K>	nvim/init.vim	/^map <silent> <A-K> <C-W>-$/;"	m
<A-L>	nvim/init.vim	/^map <silent> <A-L> <C-w>>$/;"	m
<A-Left>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <A-Left> <Plug>VimwikiTableMoveColumnLeft$/;"	m
<A-Right>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <A-Right> <Plug>VimwikiTableMoveColumnRight$/;"	m
<BS>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <BS> <Plug>VimwikiGoBackLink$/;"	m
<C-2-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nnoremap <silent><buffer> <C-2-LeftMouse> <LeftMouse>:VimwikiVSplitLink<CR>$/;"	m
<C-@>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^    nmap <silent><buffer> <C-@> <Plug>VimwikiToggleListItem$/;"	m
<C-@>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^    vmap <silent><buffer> <C-@> <Plug>VimwikiToggleListItem$/;"	m
<C-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-CR> <Plug>VimwikiVSplitLink$/;"	m
<C-D>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-D> <Plug>VimwikiDecreaseLvlSingleItem$/;"	m
<C-Down>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-Down> <Plug>VimwikiDiaryNextDay$/;"	m
<C-L><C-J>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-L><C-J> <Plug>VimwikiListNextSymbol$/;"	m
<C-L><C-K>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-L><C-K> <Plug>VimwikiListPrevSymbol$/;"	m
<C-L><C-M>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-L><C-M> <Plug>VimwikiListToggle$/;"	m
<C-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <buffer> <C-LeftMouse> <NOP>$/;"	m
<C-S-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-S-CR> <Plug>VimwikiTabnewLink$/;"	m
<C-Space>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-Space> <Plug>VimwikiToggleListItem$/;"	m
<C-Space>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> <C-Space> <Plug>VimwikiToggleListItem$/;"	m
<C-T>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-T> <Plug>VimwikiIncreaseLvlSingleItem$/;"	m
<C-Up>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-Up> <Plug>VimwikiDiaryPrevDay$/;"	m
<C-]>	nvim/init.vim	/^nnoremap <C-]> g<C-]>$/;"	m
<C-e>	nvim/init.vim	/^nnoremap <C-e> :NERDTreeToggle<CR>$/;"	m
<C-q>	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-q> <NOP>$/;"	m
<C-v>	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-v> <NOP>$/;"	m
<CR>	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <CR> :call ale#preview#OpenSelectionInBuffer()<CR>$/;"	m
<CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^    inoremap <silent><buffer> <CR> <Esc>:VimwikiReturn 1 5<CR>$/;"	m
<CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <CR> <Plug>VimwikiFollowLink$/;"	m
<CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> <CR> <Plug>VimwikiNormalizeLinkVisualCR$/;"	m
<D-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <D-CR> <Plug>VimwikiTabnewLink$/;"	m
<F3>	nvim/init.vim	/^noremap <F3> :Format<CR>$/;"	m
<Plug>(-fzf-complete-trigger)	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(GitGutterNextHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\\<C-U>execute v:count1 . 'GitGutterNextHunk'\\<CR>"$/;"	m
<Plug>(GitGutterPrevHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\\<C-U>execute v:count1 . 'GitGutterPrevHunk'\\<CR>"$/;"	m
<Plug>(GitGutterPreviewHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>$/;"	m
<Plug>(GitGutterStageHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>$/;"	m
<Plug>(GitGutterTextObjectInnerPending)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>$/;"	m
<Plug>(GitGutterTextObjectOuterPending)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>$/;"	m
<Plug>(GitGutterUndoHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>$/;"	m
<Plug>(ale_complete)	nvim/plugged/ale/plugin/ale.vim	/^inoremap <silent> <Plug>(ale_complete) <C-\\><C-O>:ALEComplete<Return>$/;"	m
<Plug>(ale_detail)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>$/;"	m
<Plug>(ale_disable)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>$/;"	m
<Plug>(ale_disable_buffer)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>$/;"	m
<Plug>(ale_documentation)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation<Return>$/;"	m
<Plug>(ale_enable)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>$/;"	m
<Plug>(ale_enable_buffer)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>$/;"	m
<Plug>(ale_find_references)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>$/;"	m
<Plug>(ale_first)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>$/;"	m
<Plug>(ale_fix)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>$/;"	m
<Plug>(ale_go_to_definition)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>$/;"	m
<Plug>(ale_go_to_definition_in_split)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinitionInSplit<Return>$/;"	m
<Plug>(ale_go_to_definition_in_tab)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinitionInTab<Return>$/;"	m
<Plug>(ale_go_to_definition_in_vsplit)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinitionInVSplit<Return>$/;"	m
<Plug>(ale_go_to_type_definition)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition<Return>$/;"	m
<Plug>(ale_go_to_type_definition_in_split)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinitionInSplit<Return>$/;"	m
<Plug>(ale_go_to_type_definition_in_tab)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinitionInTab<Return>$/;"	m
<Plug>(ale_go_to_type_definition_in_vsplit)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinitionInVSplit<Return>$/;"	m
<Plug>(ale_hover)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>$/;"	m
<Plug>(ale_last)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_last) :ALELast<Return>$/;"	m
<Plug>(ale_lint)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>$/;"	m
<Plug>(ale_next)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next) :ALENext<Return>$/;"	m
<Plug>(ale_next_error)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_error) :ALENext -error<Return>$/;"	m
<Plug>(ale_next_warning)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning<Return>$/;"	m
<Plug>(ale_next_wrap)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>$/;"	m
<Plug>(ale_next_wrap_error)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error<Return>$/;"	m
<Plug>(ale_next_wrap_warning)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning<Return>$/;"	m
<Plug>(ale_previous)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>$/;"	m
<Plug>(ale_previous_error)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error<Return>$/;"	m
<Plug>(ale_previous_warning)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning<Return>$/;"	m
<Plug>(ale_previous_wrap)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>$/;"	m
<Plug>(ale_previous_wrap_error)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error<Return>$/;"	m
<Plug>(ale_previous_wrap_warning)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning<Return>$/;"	m
<Plug>(ale_rename)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_rename) :ALERename<Return>$/;"	m
<Plug>(ale_reset)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>$/;"	m
<Plug>(ale_reset_buffer)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>$/;"	m
<Plug>(ale_show_completion_menu)	nvim/plugged/ale/autoload/ale/completion.vim	/^cnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_show_completion_menu)	nvim/plugged/ale/autoload/ale/completion.vim	/^inoremap <silent> <Plug>(ale_show_completion_menu) <C-x><C-o>$/;"	m
<Plug>(ale_show_completion_menu)	nvim/plugged/ale/autoload/ale/completion.vim	/^nnoremap <silent> <Plug>(ale_show_completion_menu) :call ale#completion#RestoreCompletionOptions()<CR>$/;"	m
<Plug>(ale_show_completion_menu)	nvim/plugged/ale/autoload/ale/completion.vim	/^onoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_show_completion_menu)	nvim/plugged/ale/autoload/ale/completion.vim	/^vnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_toggle)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>$/;"	m
<Plug>(ale_toggle_buffer)	nvim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>$/;"	m
<Plug>(coc-codeaction)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction)            :<C-u>call       CocActionAsync('codeAction',         '')<CR>$/;"	m
<Plug>(coc-codeaction-selected)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-selected)   :<C-u>set        operatorfunc=<SID>CodeActionFromSelected<CR>g@$/;"	m
<Plug>(coc-codeaction-selected)	nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-codeaction-selected)   :<C-u>call       CocActionAsync('codeAction',         visualmode())<CR>$/;"	m
<Plug>(coc-codelens-action)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codelens-action)       :<C-u>call       CocActionAsync('codeLensAction')<CR>$/;"	m
<Plug>(coc-command-repeat)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-command-repeat)        :<C-u>call       CocAction('repeatCommand')<CR>$/;"	m
<Plug>(coc-cursors-operator)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-operator) :<C-u>set operatorfunc=<SID>CursorRangeFromSelected<CR>g@$/;"	m
<Plug>(coc-cursors-position)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-position) :<C-u>call coc#rpc#request('cursorsSelect', [bufnr('%'), 'position', 'n'])<CR>$/;"	m
<Plug>(coc-cursors-range)	nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-cursors-range)    :<C-u>call coc#rpc#request('cursorsSelect', [bufnr('%'), 'range', visualmode()])<CR>$/;"	m
<Plug>(coc-cursors-word)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-word)     :<C-u>call coc#rpc#request('cursorsSelect', [bufnr('%'), 'word', 'n'])<CR>$/;"	m
<Plug>(coc-declaration)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-declaration)           :<C-u>call       CocAction('jumpDeclaration')<CR>$/;"	m
<Plug>(coc-definition)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-definition)            :<C-u>call       CocAction('jumpDefinition')<CR>$/;"	m
<Plug>(coc-diagnostic-info)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-info)       :<C-u>call       CocActionAsync('diagnosticInfo')<CR>$/;"	m
<Plug>(coc-diagnostic-next)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-next)       :<C-u>call       CocActionAsync('diagnosticNext')<CR>$/;"	m
<Plug>(coc-diagnostic-next-error)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-next-error) :<C-u>call       CocActionAsync('diagnosticNext',     'error')<CR>$/;"	m
<Plug>(coc-diagnostic-prev)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-prev)       :<C-u>call       CocActionAsync('diagnosticPrevious')<CR>$/;"	m
<Plug>(coc-diagnostic-prev-error)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-prev-error) :<C-u>call       CocActionAsync('diagnosticPrevious', 'error')<CR>$/;"	m
<Plug>(coc-fix-current)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-fix-current)           :<C-u>call       CocActionAsync('doQuickfix')<CR>$/;"	m
<Plug>(coc-float-hide)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-float-hide)            :<C-u>call       coc#util#float_hide()<CR>$/;"	m
<Plug>(coc-float-jump)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-float-jump)            :<c-u>call       coc#util#float_jump()<cr>$/;"	m
<Plug>(coc-format)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-format)                :<C-u>call       CocActionAsync('format')<CR>$/;"	m
<Plug>(coc-format-selected)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-format-selected)       :<C-u>set        operatorfunc=<SID>FormatFromSelected<CR>g@$/;"	m
<Plug>(coc-format-selected)	nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-format-selected)       :<C-u>call       CocActionAsync('formatSelected',     visualmode())<CR>$/;"	m
<Plug>(coc-funcobj-a)	nvim/plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call coc#rpc#request('selectFunction', [v:false, ''])<CR>$/;"	m
<Plug>(coc-funcobj-a)	nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call coc#rpc#request('selectFunction', [v:false, visualmode()])<CR>$/;"	m
<Plug>(coc-funcobj-i)	nvim/plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call coc#rpc#request('selectFunction', [v:true, ''])<CR>$/;"	m
<Plug>(coc-funcobj-i)	nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call coc#rpc#request('selectFunction', [v:true, visualmode()])<CR>$/;"	m
<Plug>(coc-implementation)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-implementation)        :<C-u>call       CocAction('jumpImplementation')<CR>$/;"	m
<Plug>(coc-openlink)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-openlink)              :<C-u>call       CocActionAsync('openLink')<CR>$/;"	m
<Plug>(coc-range-select)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-range-select)          :<C-u>call       CocAction('rangeSelect',     '', v:true)<CR>$/;"	m
<Plug>(coc-range-select)	nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-range-select)          :<C-u>call       CocAction('rangeSelect',     visualmode(), v:true)<CR>$/;"	m
<Plug>(coc-range-select-backward)	nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-range-select-backward) :<C-u>call       CocAction('rangeSelect',     visualmode(), v:false)<CR>$/;"	m
<Plug>(coc-refactor)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-refactor)              :<C-u>call       CocActionAsync('refactor')<CR>$/;"	m
<Plug>(coc-references)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-references)            :<C-u>call       CocAction('jumpReferences')<CR>$/;"	m
<Plug>(coc-rename)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-rename)                :<C-u>call       CocActionAsync('rename')<CR>$/;"	m
<Plug>(coc-type-definition)	nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-type-definition)       :<C-u>call       CocAction('jumpTypeDefinition')<CR>$/;"	m
<Plug>(jsdoc)	nvim/plugged/vim-jsdoc/ftplugin/javascript/jsdoc.vim	/^nnoremap <silent> <buffer> <Plug>(jsdoc) :call jsdoc#insert()<CR>$/;"	m
<Plug>(jsdoc)	nvim/plugged/vim-jsdoc/ftplugin/typescript/jsdoc.vim	/^nnoremap <silent> <buffer> <Plug>(jsdoc) :call jsdoc#insert()<CR>$/;"	m
<Plug>(multiple-cursors-apply)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-apply) <C-o>:call <SID>apply_user_input_next('i')<CR>$/;"	m
<Plug>(multiple-cursors-apply)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-apply) :call <SID>apply_user_input_next('n')<CR>$/;"	m
<Plug>(multiple-cursors-detect)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-detect) <C-o>:call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-detect)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-detect) :call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-input) <C-o>:call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-input) :call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-new)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new) :<C-u>call multiple_cursors#new('v', 0)<CR>$/;"	m
<Plug>(multiple-cursors-new-word)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new-word) :<C-u>call multiple_cursors#new('v', 1)<CR>$/;"	m
<Plug>(multiple-cursors-prev)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-prev) :<C-u>call multiple_cursors#prev()<CR>$/;"	m
<Plug>(multiple-cursors-skip)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-skip) :<C-u>call multiple_cursors#skip()<CR>$/;"	m
<Plug>(multiple-cursors-wait)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-wait) <C-o>:call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-wait)	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-wait) :call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug><cfile>	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',"\\022\\006",'')$/;"	m
<Plug><ctag>	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',"\\022\\027",'')$/;"	m
<Plug>AutoPairsReturn	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^imap <script> <Plug>AutoPairsReturn <SID>AutoPairsReturn$/;"	m
<Plug>ChangeCommentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>CocRefresh	nvim/plugged/coc.nvim/plugin/coc.vim	/^inoremap <silent>                          <Plug>CocRefresh <C-r>=coc#_complete()<CR>$/;"	m
<Plug>Commentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>Commentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==# 'c')<CR>$/;"	m
<Plug>CommentaryLine	nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'$/;"	m
<Plug>CommentaryUndo	nvim/plugged/vim-commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Commentary<Plug>Commentary"<CR>$/;"	m
<Plug>GitGutterNextHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\\<C-U>call gitgutter#utility#warn('please change your map \\<lt>Plug>GitGutterNextHunk to \\<lt>Plug>(GitGutterNextHunk)')\\<CR>"$/;"	m
<Plug>GitGutterPrevHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\\<C-U>call gitgutter#utility#warn('please change your map \\<lt>Plug>GitGutterPrevHunk to \\<lt>Plug>(GitGutterPrevHunk)')\\<CR>"$/;"	m
<Plug>GitGutterPreviewHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>$/;"	m
<Plug>GitGutterStageHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>$/;"	m
<Plug>GitGutterUndoHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>$/;"	m
<Plug>Vimwiki2HTML	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <script><buffer> <Plug>Vimwiki2HTML :Vimwiki2HTML<CR>$/;"	m
<Plug>Vimwiki2HTMLBrowse	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <script><buffer> <Plug>Vimwiki2HTMLBrowse :Vimwiki2HTMLBrowse<CR>$/;"	m
<Plug>VimwikiAddHeaderLevel	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiAddHeaderLevel :<C-U>call vimwiki#base#AddHeaderLevel()<CR>$/;"	m
<Plug>VimwikiDecreaseLvlSingleItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiDecreaseLvlSingleItem$/;"	m
<Plug>VimwikiDecrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiDecrementListItem :VimwikiDecrementListItem<CR>$/;"	m
<Plug>VimwikiDecrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><script><buffer> <Plug>VimwikiDecrementListItem :VimwikiDecrementListItem<CR>$/;"	m
<Plug>VimwikiDeleteLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiDeleteLink :VimwikiDeleteLink<CR>$/;"	m
<Plug>VimwikiDiaryGenerateLinks	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiDiaryGenerateLinks :VimwikiDiaryGenerateLinks<CR>$/;"	m
<Plug>VimwikiDiaryIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiDiaryIndex :VimwikiDiaryIndex<CR>$/;"	m
<Plug>VimwikiDiaryNextDay	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiDiaryNextDay :VimwikiDiaryNextDay<CR>$/;"	m
<Plug>VimwikiDiaryPrevDay	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiDiaryPrevDay :VimwikiDiaryPrevDay<CR>$/;"	m
<Plug>VimwikiFollowLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiFollowLink :VimwikiFollowLink<CR>$/;"	m
<Plug>VimwikiGoBackLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiGoBackLink :VimwikiGoBackLink<CR>$/;"	m
<Plug>VimwikiGoToNextHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToNextHeader :$/;"	m
<Plug>VimwikiGoToNextSiblingHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToNextSiblingHeader :$/;"	m
<Plug>VimwikiGoToParentHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToParentHeader :$/;"	m
<Plug>VimwikiGoToPrevHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToPrevHeader :$/;"	m
<Plug>VimwikiGoToPrevSiblingHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToPrevSiblingHeader :$/;"	m
<Plug>VimwikiIncreaseLvlSingleItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiIncreaseLvlSingleItem$/;"	m
<Plug>VimwikiIncrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiIncrementListItem :VimwikiIncrementListItem<CR>$/;"	m
<Plug>VimwikiIncrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><script><buffer> <Plug>VimwikiIncrementListItem :VimwikiIncrementListItem<CR>$/;"	m
<Plug>VimwikiIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiIndex :VimwikiIndex<CR>$/;"	m
<Plug>VimwikiListNextSymbol	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiListNextSymbol$/;"	m
<Plug>VimwikiListPrevSymbol	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiListPrevSymbol$/;"	m
<Plug>VimwikiListToggle	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiListToggle <Esc>:VimwikiListToggle<CR>$/;"	m
<Plug>VimwikiMakeDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiMakeDiaryNote :VimwikiMakeDiaryNote<CR>$/;"	m
<Plug>VimwikiMakeTomorrowDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiMakeTomorrowDiaryNote$/;"	m
<Plug>VimwikiMakeYesterdayDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiMakeYesterdayDiaryNote$/;"	m
<Plug>VimwikiNextLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiNextLink :VimwikiNextLink<CR>$/;"	m
<Plug>VimwikiNormalizeLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiNormalizeLink :VimwikiNormalizeLink 0<CR>$/;"	m
<Plug>VimwikiNormalizeLinkVisual	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><script><buffer> <Plug>VimwikiNormalizeLinkVisual :<C-U>VimwikiNormalizeLink 1<CR>$/;"	m
<Plug>VimwikiPrevLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiPrevLink :VimwikiPrevLink<CR>$/;"	m
<Plug>VimwikiRemoveCBInList	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^noremap <silent><script><buffer> <Plug>VimwikiRemoveCBInList :VimwikiRemoveCBInList<CR>$/;"	m
<Plug>VimwikiRemoveHeaderLevel	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiRemoveHeaderLevel :$/;"	m
<Plug>VimwikiRemoveSingleCB	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^noremap <silent><script><buffer> <Plug>VimwikiRemoveSingleCB :VimwikiRemoveSingleCB<CR>$/;"	m
<Plug>VimwikiRenameLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiRenameLink :VimwikiRenameLink<CR>$/;"	m
<Plug>VimwikiRenumberAllLists	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiRenumberAllLists :VimwikiRenumberAllLists<CR>$/;"	m
<Plug>VimwikiRenumberList	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiRenumberList :VimwikiRenumberList<CR>$/;"	m
<Plug>VimwikiSplitLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiSplitLink :VimwikiSplitLink<CR>$/;"	m
<Plug>VimwikiTabIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiTabIndex :VimwikiTabIndex<CR>$/;"	m
<Plug>VimwikiTabMakeDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiTabMakeDiaryNote$/;"	m
<Plug>VimwikiTableMoveColumnLeft	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiTableMoveColumnLeft :VimwikiTableMoveColumnLeft<CR>$/;"	m
<Plug>VimwikiTabnewLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiTabnewLink :VimwikiTabnewLink<CR>$/;"	m
<Plug>VimwikiToggleListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiToggleListItem :VimwikiToggleListItem<CR>$/;"	m
<Plug>VimwikiToggleListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><script><buffer> <Plug>VimwikiToggleListItem :VimwikiToggleListItem<CR>$/;"	m
<Plug>VimwikiUISelect	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiUISelect :VimwikiUISelect<CR>$/;"	m
<Plug>VimwikiVSplitLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiVSplitLink :VimwikiVSplitLink<CR>$/;"	m
<Plug>XTablineCdCurrent	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown1	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown2	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown3	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdHome	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineNextBuffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer$/;"	m
<Plug>XTablinePrevBuffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer$/;"	m
<Plug>XTablineReopen	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab$/;"	m
<Plug>XTablineSelectBuffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer$/;"	m
<Plug>XTablineToggleFiltering	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering$/;"	m
<Plug>XTablineToggleTabs	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs$/;"	m
<RightMouse><LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nnoremap <silent><buffer> <RightMouse><LeftMouse> :VimwikiGoBackLink<CR>$/;"	m
<S-2-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nnoremap <silent><buffer> <S-2-LeftMouse> <LeftMouse>:VimwikiSplitLink<CR>$/;"	m
<S-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^    inoremap <silent><buffer> <S-CR> <Esc>:VimwikiReturn 2 2<CR>$/;"	m
<S-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <S-CR> <Plug>VimwikiSplitLink$/;"	m
<S-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <buffer> <S-LeftMouse> <NOP>$/;"	m
<S-TAB>	nvim/init.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<S-TAB>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <S-TAB> <Plug>VimwikiPrevLink$/;"	m
<S-Tab>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^   inoremap <expr> <buffer> <S-Tab> vimwiki#tbl#kbd_shift_tab()$/;"	m
<S-v>	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <S-v> <NOP>$/;"	m
<SID>:	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>:	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>:  :<C-U>$/;"	m
<SID>AutoPairsReturn	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^inoremap <silent> <SID>AutoPairsReturn <C-R>=AutoPairsReturn()<CR>$/;"	m
<SID>NextBuffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>NextBuffer airline#extensions#tabline#xtabline#next_buffer(v:count1)$/;"	m
<SID>PrevBuffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>PrevBuffer airline#extensions#tabline#xtabline#prev_buffer(v:count1)$/;"	m
<SID>ReopenLastTab	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ReopenLastTab :XTabReopen<cr>$/;"	m
<SID>SelectBuffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>SelectBuffer g:xtabline_changing_buffer ? "\\<C-c>" : ":<C-u>call airline#extensions#tabline#xtabline#select_buffer(v:count)\\<cr>"$/;"	m
<SID>ToggleFiltering	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleFiltering :call airline#extensions#tabline#xtabline#toggle_buffers()<cr>$/;"	m
<SID>ToggleTabs	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleTabs :call airline#extensions#tabline#xtabline#toggle_tabs()<cr>$/;"	m
<SID>c:	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>tagzv	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''$/;"	m
<TAB>	nvim/init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<TAB>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <TAB> <Plug>VimwikiNextLink$/;"	m
<Tab>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^   inoremap <expr> <buffer> <Tab> vimwiki#tbl#kbd_tab()$/;"	m
<c-F>	nvim/init.vim	/^nnoremap <c-F> :Ag<cr>$/;"	m
<c-P>	nvim/init.vim	/^nnoremap <c-P> :Files<cr>$/;"	m
<c-d>	nvim/init.vim	/^noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>$/;"	m
<c-space>	nvim/init.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<c-u>	nvim/init.vim	/^noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>$/;"	m
<cr>	nvim/init.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>0	nvim/init.vim	/^noremap <leader>0 :tablast<cr>$/;"	m
<leader>1	nvim/init.vim	/^noremap <leader>1 1gt$/;"	m
<leader>2	nvim/init.vim	/^noremap <leader>2 2gt$/;"	m
<leader>3	nvim/init.vim	/^noremap <leader>3 3gt$/;"	m
<leader>4	nvim/init.vim	/^noremap <leader>4 4gt$/;"	m
<leader>5	nvim/init.vim	/^noremap <leader>5 5gt$/;"	m
<leader>6	nvim/init.vim	/^noremap <leader>6 6gt$/;"	m
<leader>7	nvim/init.vim	/^noremap <leader>7 7gt$/;"	m
<leader>8	nvim/init.vim	/^noremap <leader>8 8gt$/;"	m
<leader>9	nvim/init.vim	/^noremap <leader>9 9gt$/;"	m
<leader>T	nvim/init.vim	/^nnoremap <leader>T :Tags<CR>$/;"	m
<leader>b	nvim/init.vim	/^nnoremap <leader>b :Buffers<CR>$/;"	m
<leader>cd2	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd2 <Plug>XTablineCdDown2$/;"	m
<leader>cd3	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd3 <Plug>XTablineCdDown3$/;"	m
<leader>cdc	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdc <Plug>XTablineCdCurrent$/;"	m
<leader>cdd	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdd <Plug>XTablineCdDown1$/;"	m
<leader>cdh	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdh <Plug>XTablineCdHome$/;"	m
<leader>dg	nvim/init.vim	/^nnoremap <leader>dg :diffget<CR>$/;"	m
<leader>dp	nvim/init.vim	/^nnoremap <leader>dp :diffput<CR>$/;"	m
<leader>f	nvim/init.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>gb	nvim/init.vim	/^nnoremap <leader>gb :Gblame<CR>$/;"	m
<leader>gd	nvim/init.vim	/^nnoremap <leader>gd :Gdiff<CR>$/;"	m
<leader>gl	nvim/init.vim	/^nnoremap <leader>gl :Glog<CR>$/;"	m
<leader>gs	nvim/init.vim	/^nnoremap <leader>gs :Gstatus<CR>$/;"	m
<leader>h	nvim/init.vim	/^nnoremap <leader>h :bprev<CR>$/;"	m
<leader>l	nvim/init.vim	/^nnoremap <leader>l :bnext<CR>$/;"	m
<leader>m	nvim/init.vim	/^nnoremap <leader>m :NERDTreeFind<cr>$/;"	m
<leader>qf	nvim/init.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	nvim/init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>s	nvim/init.vim	/^nnoremap <leader>s :nohlsearch<cr>$/;"	m
<leader>t	nvim/init.vim	/^nnoremap <leader>t :BTags<CR>$/;"	m
<plug>(-fzf-/)	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print \\| sed 's:^..::'")$/;"	m
<plug>(fzf-complete-file)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -print \\| sed '1d;s:^..::'")$/;"	m
<plug>(fzf-complete-path)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
=	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> = <Plug>VimwikiAddHeaderLevel$/;"	m
A	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> A <NOP>$/;"	m
A	nvim/plugged/vim-elixir/large_file.ex	/^      defmodule A do$/;"	m
ALEBufferFixGroup	nvim/plugged/ale/autoload/ale/fix.vim	/^augroup ALEBufferFixGroup$/;"	a
ALECleanupGroup	nvim/plugged/ale/plugin/ale.vim	/^augroup ALECleanupGroup$/;"	a
ALEComplete	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEComplete :call ale#completion#GetCompletions('ale-manual')$/;"	c
ALECompletionActions	nvim/plugged/ale/autoload/ale/completion.vim	/^augroup ALECompletionActions$/;"	a
ALEDetail	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEDetail :call ale#cursor#ShowCursorDetail()$/;"	c
ALEDisable	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEDisable :call ale#toggle#Disable()$/;"	c
ALEDisableBuffer	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEDisableBuffer :call ale#toggle#DisableBuffer(bufnr(''))$/;"	c
ALEDocumentation	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEDocumentation :call ale#hover#ShowDocumentationAtCursor()$/;"	c
ALEEnable	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEEnable :call ale#toggle#Enable()$/;"	c
ALEEnableBuffer	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEEnableBuffer :call ale#toggle#EnableBuffer(bufnr(''))$/;"	c
ALEFindReferences	nvim/plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEFindReferences :call ale#references#Find(<f-args>)$/;"	c
ALEFirst	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEFirst :call ale#loclist_jumping#JumpToIndex(0)$/;"	c
ALEFix	nvim/plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* -complete=customlist,ale#fix#registry#CompleteFixers ALEFix :call ale#fix#Fix(bufnr(''), '', <f-args>)$/;"	c
ALEFixSuggest	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEFixSuggest :call ale#fix#registry#Suggest(&filetype)$/;"	c
ALEGoToDefinition	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEGoToDefinition :call ale#definition#GoTo({})$/;"	c
ALEGoToDefinitionInSplit	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEGoToDefinitionInSplit :call ale#definition#GoTo({'open_in': 'horizontal-split'})$/;"	c
ALEGoToDefinitionInTab	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEGoToDefinitionInTab :call ale#definition#GoTo({'open_in': 'tab'})$/;"	c
ALEGoToDefinitionInVSplit	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEGoToDefinitionInVSplit :call ale#definition#GoTo({'open_in': 'vertical-split'})$/;"	c
ALEGoToTypeDefinition	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEGoToTypeDefinition :call ale#definition#GoToType({})$/;"	c
ALEGoToTypeDefinitionInSplit	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEGoToTypeDefinitionInSplit :call ale#definition#GoToType({'open_in': 'horizontal-split'})$/;"	c
ALEGoToTypeDefinitionInTab	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEGoToTypeDefinitionInTab :call ale#definition#GoToType({'open_in': 'tab'})$/;"	c
ALEGoToTypeDefinitionInVSplit	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEGoToTypeDefinitionInVSplit :call ale#definition#GoToType({'open_in': 'vertical-split'})$/;"	c
ALEHighlightBufferGroup	nvim/plugged/ale/autoload/ale/highlight.vim	/^augroup ALEHighlightBufferGroup$/;"	a
ALEHover	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEHover :call ale#hover#ShowAtCursor()$/;"	c
ALEInfo	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEInfo :call ale#debugging#Info()$/;"	c
ALEInfoToClipboard	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEInfoToClipboard :call ale#debugging#InfoToClipboard()$/;"	c
ALEInfoToFile	nvim/plugged/ale/plugin/ale.vim	/^command! -bar -nargs=1 ALEInfoToFile :call ale#debugging#InfoToFile(<f-args>)$/;"	c
ALELast	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALELast :call ale#loclist_jumping#JumpToIndex(-1)$/;"	c
ALELint	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALELint :call ale#Queue(0, 'lint_file')$/;"	c
ALENext	nvim/plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALENext$/;"	c
ALENextWrap	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALENextWrap :call ale#loclist_jumping#Jump('after', 1)$/;"	c
ALEOrganizeImports	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEOrganizeImports :call ale#organize_imports#Execute()$/;"	c
ALEPrevious	nvim/plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEPrevious$/;"	c
ALEPreviousWrap	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEPreviousWrap :call ale#loclist_jumping#Jump('before', 1)$/;"	c
ALERename	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALERename :call ale#rename#Execute()$/;"	c
ALEReset	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEReset :call ale#toggle#Reset()$/;"	c
ALEResetBuffer	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEResetBuffer :call ale#toggle#ResetBuffer(bufnr(''))$/;"	c
ALEStopAllLSPs	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEStopAllLSPs :call ale#lsp#reset#StopAllLSPs()$/;"	c
ALESymbolSearch	nvim/plugged/ale/plugin/ale.vim	/^command! -nargs=1 ALESymbolSearch :call ale#symbol#Search(<q-args>)$/;"	c
ALEToggle	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEToggle :call ale#toggle#Toggle()$/;"	c
ALEToggleBuffer	nvim/plugged/ale/plugin/ale.vim	/^command! -bar ALEToggleBuffer :call ale#toggle#ToggleBuffer(bufnr(''))$/;"	c
ALL	nvim/plugged/coc.nvim/build/index.js	/^  ALL: { value: Number.MIN_VALUE, colour: 'grey' },$/;"	P
ANY	nvim/plugged/coc.nvim/build/index.js	/^var ANY = {}$/;"	O
API	nvim/plugged/coc.nvim/src/extensions.ts	/^export type API = { [index: string]: any } | void | null | undefined$/;"	t
ASDF_DIR	Makefile	/^ASDF_DIR := $(HOME)\/.asdf$/;"	m
AbstractMessageReader	nvim/plugged/coc.nvim/build/index.js	/^class AbstractMessageReader {$/;"	C
AbstractMessageType	nvim/plugged/coc.nvim/build/index.js	/^class AbstractMessageType {$/;"	C
AbstractMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^class AbstractMessageWriter {$/;"	C
AccessModifier	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AccessModifier(cline_info) abort$/;"	f
Accumulator	nvim/plugged/coc.nvim/build/index.js	/^function Accumulator(initsize) {$/;"	F
ActionOptions	nvim/plugged/coc.nvim/src/list/basic.ts	/^interface ActionOptions {$/;"	i
ActionsList	nvim/plugged/coc.nvim/build/index.js	/^class ActionsList extends basic_1.default {$/;"	C
ActionsList	nvim/plugged/coc.nvim/src/list/source/actions.ts	/^export default class ActionsList extends BasicList {$/;"	c
AddAnsiGroups	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:AddAnsiGroups() abort$/;"	f
AddBlockTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
AddHeader	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
AddHintsForTypeScriptParsingErrors	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:AddHintsForTypeScriptParsingErrors(output) abort$/;"	f
AddITags	nvim/plugged/html5.vim/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
AddProblemsFromOtherBuffers	nvim/plugged/ale/autoload/ale/engine.vim	/^function! s:AddProblemsFromOtherBuffers(buffer, linters) abort$/;"	f
AddSection	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
AddSubCallbacks	nvim/plugged/ale/autoload/ale/fix.vim	/^function! s:AddSubCallbacks(full_list, callbacks) abort$/;"	f
AfterAccessModifier	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterAccessModifier(pline_info) abort$/;"	f
AfterBlockOpening	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterBlockOpening(pline_info) abort$/;"	f
AfterEndKeyword	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterEndKeyword(pline_info) abort$/;"	f
AfterHangingSplat	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterHangingSplat(pline_info) abort$/;"	f
AfterIndentKeyword	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterIndentKeyword(pline_info) abort$/;"	f
AfterLeadingOperator	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterLeadingOperator(pline_info) abort$/;"	f
AfterUnbalancedBracket	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterUnbalancedBracket(pline_info) abort$/;"	f
AirlineExtensions	nvim/plugged/vim-airline/plugin/airline.vim	/^command! AirlineExtensions   call s:airline_extensions()$/;"	c
AirlineRefresh	nvim/plugged/vim-airline/plugin/airline.vim	/^command! -bar -bang AirlineRefresh call s:airline_refresh(<q-bang>)$/;"	c
AirlineTheme	nvim/plugged/vim-airline/plugin/airline.vim	/^command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airline_theme(<f-args>)$/;"	c
AirlineToggle	nvim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggle  call s:airline_toggle()$/;"	c
AirlineToggleWhitespace	nvim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()$/;"	c
Aliases	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Aliases(dir) abort$/;"	f
Alien2	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien2()$/;"	f
Alien3	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien3()$/;"	f
Alien4	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien4()$/;"	f
Alien5	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien5()$/;"	f
Alien6	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien6()$/;"	f
Align	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Align(left, right)$/;"	f
AllEvents	nvim/plugged/coc.nvim/src/events.ts	/^export type AllEvents = BufEvents | EmptyEvents | MoveEvents | TaskEvents |$/;"	t
AlternatePair	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:AlternatePair()$/;"	f
AnsiHighlight	nvim/plugged/coc.nvim/src/types.ts	/^export interface AnsiHighlight {$/;"	i
AnsiItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface AnsiItem {$/;"	i
ApplyPartialTimer	nvim/plugged/ale/autoload/ale/util.vim	/^function! s:ApplyPartialTimer(timer_id) abort$/;"	f
ApplyWorkspaceEditRequest	nvim/plugged/coc.nvim/build/index.js	/^var ApplyWorkspaceEditRequest;$/;"	V
ArgumentItem	nvim/plugged/coc.nvim/src/list/basic.ts	/^interface ArgumentItem {$/;"	i
Around	nvim/plugged/coc.nvim/build/index.js	/^class Around extends source_1.default {$/;"	C
Around	nvim/plugged/coc.nvim/src/source/around.ts	/^export default class Around extends Source {$/;"	c
AskPassArgs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
AsyncRequest	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:AsyncRequest(name, args) abort$/;"	f
AsyncResponse	nvim/plugged/coc.nvim/build/index.js	/^class AsyncResponse {$/;"	C
AutoPairsBackInsert	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsBackInsert()$/;"	f
AutoPairsDefaultPairs	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefaultPairs()$/;"	f
AutoPairsDefine	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefine(pairs, ...)$/;"	f
AutoPairsDelete	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDelete()$/;"	f
AutoPairsFastWrap	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsFastWrap()$/;"	f
AutoPairsInit	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInit()$/;"	f
AutoPairsInsert	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInsert(key)$/;"	f
AutoPairsJump	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsJump()$/;"	f
AutoPairsMap	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMap(key)$/;"	f
AutoPairsMoveCharacter	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMoveCharacter(key)$/;"	f
AutoPairsReturn	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsReturn()$/;"	f
AutoPairsSpace	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsSpace()$/;"	f
AutoPairsToggle	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsToggle()$/;"	f
AutoPairsTryInit	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsTryInit()$/;"	f
AutoUpdate	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
Autocmd	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Autocmd(...) abort$/;"	f
Autocmd	nvim/plugged/coc.nvim/src/types.ts	/^export interface Autocmd {$/;"	i
B	nvim/plugged/vim-elixir/large_file.ex	/^      defmodule B do$/;"	m
BIT24	nvim/plugged/coc.nvim/build/index.js	/^  var BIT24 = 16777216;$/;"	V
BIT32	nvim/plugged/coc.nvim/build/index.js	/^  var BIT32 = 4294967296;$/;"	V
BSER_ARRAY	nvim/plugged/coc.nvim/build/index.js	/^var BSER_ARRAY     = 0x00;$/;"	V
BSER_FALSE	nvim/plugged/coc.nvim/build/index.js	/^var BSER_FALSE     = 0x09;$/;"	V
BSER_INT16	nvim/plugged/coc.nvim/build/index.js	/^var BSER_INT16     = 0x04;$/;"	V
BSER_INT32	nvim/plugged/coc.nvim/build/index.js	/^var BSER_INT32     = 0x05;$/;"	V
BSER_INT64	nvim/plugged/coc.nvim/build/index.js	/^var BSER_INT64     = 0x06;$/;"	V
BSER_INT8	nvim/plugged/coc.nvim/build/index.js	/^var BSER_INT8      = 0x03;$/;"	V
BSER_NULL	nvim/plugged/coc.nvim/build/index.js	/^var BSER_NULL      = 0x0a;$/;"	V
BSER_OBJECT	nvim/plugged/coc.nvim/build/index.js	/^var BSER_OBJECT    = 0x01;$/;"	V
BSER_REAL	nvim/plugged/coc.nvim/build/index.js	/^var BSER_REAL      = 0x07;$/;"	V
BSER_SKIP	nvim/plugged/coc.nvim/build/index.js	/^var BSER_SKIP      = 0x0c;$/;"	V
BSER_STRING	nvim/plugged/coc.nvim/build/index.js	/^var BSER_STRING    = 0x02;$/;"	V
BSER_TEMPLATE	nvim/plugged/coc.nvim/build/index.js	/^var BSER_TEMPLATE  = 0x0b;$/;"	V
BSER_TRUE	nvim/plugged/coc.nvim/build/index.js	/^var BSER_TRUE      = 0x08;$/;"	V
BUFFER_SHORTAGE	nvim/plugged/coc.nvim/build/index.js	/^var BUFFER_SHORTAGE = "BUFFER_SHORTAGE";$/;"	V
BUF_LENGTH	nvim/plugged/coc.nvim/build/index.js	/^  const BUF_LENGTH = 64 * 1024$/;"	V
BUILD_INVERTED_INDEX	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
Balanced	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:Balanced(lnum)$/;"	f
Balanced	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
Bar	nvim/plugged/vim-jsdoc/test/test.ts	/^class Bar extends Foo implements IFoo {$/;"	c
Base	nvim/plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    class Base(object):$/;"	c
BaseApi	nvim/plugged/coc.nvim/build/index.js	/^class BaseApi extends events_1.EventEmitter {$/;"	C
BaseCalss	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^class BaseCalss:$/;"	c	file:
BaseLanguageClient	nvim/plugged/coc.nvim/build/index.js	/^class BaseLanguageClient {$/;"	C
BaseLanguageClient	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export abstract class BaseLanguageClient {$/;"	c
BasicList	nvim/plugged/coc.nvim/build/index.js	/^class BasicList {$/;"	C
Baz	nvim/plugged/vim-jsdoc/test/test.ts	/^class Baz extends Foo implements IFoo {$/;"	c
BlameBufnr	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
BlameCommit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
BlameCommitFileLnum	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
BlameFileType	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameFileType() abort$/;"	f
BlameJump	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
BlameLeave	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
BlameQuit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
BlameRehighlight	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
BlameSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, args) abort$/;"	f
BlobTemp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
BlockComment	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:BlockComment(cline_info) abort$/;"	f
BlurStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
Bookmark.AddBookmark	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.CompareBookmarksByName	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
Bookmark.Edit	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
Bookmark.GetNodeForName	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
Bookmark.GetSelected	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.SortBookmarksList	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
Bookmark.ToRoot	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
Bookmark.Write	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
Bookmark.delete	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.open	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
Bookmark.openInNewTab	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
Bookmark.validate	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
Bounding	nvim/plugged/coc.nvim/src/completion/floating.ts	/^interface Bounding {$/;"	i
Broadcaster	nvim/plugged/vim-elixir/large_file.ex	/^      defmodule Broadcaster do$/;"	m
BufEvents	nvim/plugged/coc.nvim/src/events.ts	/^export type BufEvents = 'TextChangedI' | 'BufHidden' | 'BufEnter' | 'TextChanged'$/;"	t
BufName	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
Buffer	nvim/plugged/coc.nvim/build/index.js	/^class Buffer extends Base_1.BaseApi {$/;"	C
Buffer	nvim/plugged/coc.nvim/build/index.js	/^class Buffer extends source_1.default {$/;"	C
Buffer	nvim/plugged/coc.nvim/src/source/buffer.ts	/^export default class Buffer extends Source {$/;"	c
Buffer	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^class Buffer$/;"	c
BufferCacheExists	nvim/plugged/ale/autoload/ale/statusline.vim	/^function! s:BufferCacheExists(buffer) abort$/;"	f
BufferChannel	nvim/plugged/coc.nvim/build/index.js	/^class BufferChannel {$/;"	C
BufferChannel	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^export default class BufferChannel implements OutputChannel {$/;"	c
BufferOption	nvim/plugged/coc.nvim/src/types.ts	/^export interface BufferOption {$/;"	i
Buffered	nvim/plugged/coc.nvim/build/index.js	/^class Buffered extends stream_1.Transform {$/;"	C
BuildClassPathOption	nvim/plugged/ale/ale_linters/java/javac.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
BuildClassPathOption	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
BuildShell	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, args) abort$/;"	f
BuildSignMap	nvim/plugged/ale/autoload/ale/sign.vim	/^function! s:BuildSignMap(buffer, current_sign_list, grouped_items) abort$/;"	f
BuildText	nvim/plugged/ale/ale_linters/ruby/reek.vim	/^function! s:BuildText(buffer, error) abort$/;"	f
BunserBuf	nvim/plugged/coc.nvim/build/index.js	/^function BunserBuf() {$/;"	F
C	nvim/plugged/vim-elixir/large_file.ex	/^      defmodule C do$/;"	m
COMMAND_RE	nvim/plugged/ale/test/script/block-padding-checker	/^COMMAND_RE = re.compile(r'^ *([a-zA-Z\\\\]+)')$/;"	v
COMMENT_LINE_RE	nvim/plugged/ale/test/script/block-padding-checker	/^COMMENT_LINE_RE = re.compile(r'^ *"')$/;"	v
CONFIG_FILE	nvim/plugged/html5.vim/Makefile	/^CONFIG_FILE=config.mk$/;"	m
CONFIG_FILE_NAME	nvim/plugged/coc.nvim/build/index.js	/^const CONFIG_FILE_NAME = 'coc-settings.json';$/;"	V
CR	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! s:CR(normal, just_mrkr)$/;"	f
CRLF	nvim/plugged/coc.nvim/build/index.js	/^let CRLF = '\\r\\n';$/;"	V
CSCOPE_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CSSIndent	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CSSIndent()$/;"	f
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CURL_OPT	nvim/plugged/html5.vim/Makefile	/^CURL_OPT=$/;"	m
CURRENT_MONTH	nvim/plugged/coc.nvim/build/index.js	/^            CURRENT_MONTH: (currentDate.getMonth() + 1).toString(),$/;"	M
CURRENT_YEAR_SHORT	nvim/plugged/coc.nvim/build/index.js	/^            CURRENT_YEAR_SHORT: currentDate$/;"	P
Call	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:Call(method, args)$/;"	f
CallHierarchyDirection	nvim/plugged/coc.nvim/build/index.js	/^    let CallHierarchyDirection;$/;"	V
CallHierarchyDirection	nvim/plugged/coc.nvim/build/index.js	/^var CallHierarchyDirection;$/;"	V
CallHierarchyRequest	nvim/plugged/coc.nvim/build/index.js	/^    let CallHierarchyRequest;$/;"	V
CallHierarchyRequest	nvim/plugged/coc.nvim/build/index.js	/^var CallHierarchyRequest;$/;"	V
CallSequence	nvim/plugged/coc.nvim/build/index.js	/^class CallSequence {$/;"	C
CallSequence	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^export default class CallSequence {$/;"	c
Callback	nvim/plugged/coc.nvim/src/completion/complete.ts	/^export type Callback = () => void$/;"	t
Callback	nvim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^export type Callback = (event: TextDocumentWillSaveEvent) => void$/;"	t
CallbackList	nvim/plugged/coc.nvim/build/index.js	/^class CallbackList {$/;"	C
CancelNotification	nvim/plugged/coc.nvim/build/index.js	/^var CancelNotification;$/;"	V
CancellationToken	nvim/plugged/coc.nvim/build/index.js	/^var CancellationToken;$/;"	V
CancellationTokenSource	nvim/plugged/coc.nvim/build/index.js	/^class CancellationTokenSource {$/;"	C
Cd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Cd(...) abort$/;"	f
Change	nvim/plugged/coc.nvim/src/util/diff.ts	/^interface Change {$/;"	i
ChangeCallback	nvim/plugged/coc.nvim/src/watchman.ts	/^export type ChangeCallback = (FileChange) => void$/;"	t
ChangeFoldLevel	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
ChangeInfo	nvim/plugged/coc.nvim/src/types.ts	/^export interface ChangeInfo {$/;"	i
ChangeItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface ChangeItem {$/;"	i
ChangedLines	nvim/plugged/coc.nvim/src/types.ts	/^export interface ChangedLines {$/;"	i
ChannelSet	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! s:ChannelSet(dict, key, val)$/;"	f
Chars	nvim/plugged/coc.nvim/build/index.js	/^class Chars {$/;"	C
Chars	nvim/plugged/coc.nvim/src/model/chars.ts	/^export class Chars {$/;"	c
CheckBlockTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
CheckCustomTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
CheckDefined	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:CheckDefined(colors)$/;"	f
CheckExCtagsVersion	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
CheckFTCtags	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
CheckForBadConfig	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:CheckForBadConfig(buffer, lines) abort$/;"	f
CheckForExCtags	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
CheckMouseClick	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
CheckTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
CheckWithLSP	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:CheckWithLSP(linter, details) abort$/;"	f
ChildProcessInfo	nvim/plugged/coc.nvim/build/index.js	/^var ChildProcessInfo;$/;"	V
ChildProcessInfo	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export interface ChildProcessInfo {$/;"	i
ChildProcessInfo	nvim/plugged/coc.nvim/src/language-client/index.ts	/^namespace ChildProcessInfo {$/;"	c
Choice	nvim/plugged/coc.nvim/build/index.js	/^class Choice extends Marker {$/;"	C
Choice	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Choice extends Marker {$/;"	c
ChompDefault	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
ChompError	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompError(...) abort$/;"	f
Class	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^    Class(T val, typename std::enable_if<std::is_floating_point<T>::value, T>::type* = 0)$/;"	f	class:Class
Class	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^    Class(int val): value(val) {$/;"	f	class:Class	file:
Class	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^class Class {$/;"	c	file:
CleanUp	nvim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Client	nvim/plugged/coc.nvim/build/index.js	/^function Client(options) {$/;"	F
ClientState	nvim/plugged/coc.nvim/build/index.js	/^var ClientState;$/;"	V
ClientState	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export enum ClientState {$/;"	e
CloseAction	nvim/plugged/coc.nvim/build/index.js	/^var CloseAction;$/;"	V
CloseAction	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export enum CloseAction {$/;"	e
CloseFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
CloseWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
CloseWindowIfNeeded	nvim/plugged/ale/autoload/ale/list.vim	/^function! s:CloseWindowIfNeeded(buffer) abort$/;"	f
ClosingBracketOnEmptyLine	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
ClosingHeredocDelimiter	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ClosingHeredocDelimiter(cline_info) abort$/;"	f
CmpPatterns	nvim/plugged/ale/autoload/ale/pattern_options.vim	/^function! s:CmpPatterns(left_item, right_item) abort$/;"	f
CocAction	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocAction :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, <f-args>])$/;"	c
CocAction	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocAction(...) abort$/;"	f
CocActionAsync	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocActionAsync(...) abort$/;"	f
CocCommand	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,s:CommandList -range CocCommand :call coc#rpc#notify('runCommand', [<f-args>])$/;"	c
CocConfig	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocConfig       :call s:OpenConfig()$/;"	c
CocDisable	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocDisable      :call s:Disable()$/;"	c
CocEnable	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocEnable       :call s:Enable()$/;"	c
CocFix	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocFix    :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, 'quickfix'])$/;"	c
CocHasProvider	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocHasProvider(name) abort$/;"	f
CocInfo	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocInfo         :call s:ShowInfo()$/;"	c
CocInstall	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -bar -complete=custom,s:InstallOptions CocInstall   :call coc#util#install_extension([<f-args>])$/;"	c
CocList	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,coc#list#options CocList      :call coc#rpc#notify('openList',  [<f-args>])$/;"	c
CocListResume	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocListResume   :call coc#rpc#notify('listResume', [])$/;"	c
CocLocalConfig	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocLocalConfig  :call s:OpenLocalConfig()$/;"	c
CocLocations	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocLocations(id, method, ...) abort$/;"	f
CocLocationsAsync	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocLocationsAsync(id, method, ...) abort$/;"	f
CocNext	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocNext         :call coc#rpc#notify('listNext', [])$/;"	c
CocOpenLog	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocOpenLog      :call coc#rpc#notify('openLog',  [])$/;"	c
CocPrev	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocPrev         :call coc#rpc#notify('listPrev', [])$/;"	c
CocRebuild	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRebuild      :call coc#util#rebuild()$/;"	c
CocRegistNotification	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRegistNotification(id, method, cb) abort$/;"	f
CocRequest	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRequest(...) abort$/;"	f
CocRequestAsync	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRequestAsync(...)$/;"	f
CocRestart	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRestart      :call coc#rpc#restart()$/;"	c
CocSearch	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:SearchOptions  CocSearch    :call coc#rpc#notify('search', [<f-args>])$/;"	c
CocSnippet	nvim/plugged/coc.nvim/build/index.js	/^class CocSnippet {$/;"	C
CocSnippet	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^export class CocSnippet {$/;"	c
CocSnippetPlaceholder	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^export interface CocSnippetPlaceholder {$/;"	i
CocStart	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocStart        :call coc#rpc#start_server()$/;"	c
CocUninstall	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:ExtensionList  CocUninstall :call coc#rpc#notify('CocAction', ['uninstallExtension', <f-args>])$/;"	c
CocUpdate	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocUpdate       :call coc#util#update_extensions(1)$/;"	c
CocUpdateSync	nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 -bar CocUpdateSync   :call coc#util#update_extensions()$/;"	c
CodeAction	nvim/plugged/coc.nvim/build/index.js	/^var CodeAction;$/;"	V
CodeAction	nvim/plugged/coc.nvim/src/types.ts	/^export interface CodeAction extends protocol.CodeAction {$/;"	i
CodeActionContext	nvim/plugged/coc.nvim/build/index.js	/^var CodeActionContext;$/;"	V
CodeActionFeature	nvim/plugged/coc.nvim/build/index.js	/^class CodeActionFeature extends TextDocumentFeature {$/;"	C
CodeActionFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class CodeActionFeature extends TextDocumentFeature<CodeActionRegistrationOptions> {$/;"	c
CodeActionFromSelected	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:CodeActionFromSelected(type)$/;"	f
CodeActionKind	nvim/plugged/coc.nvim/build/index.js	/^var CodeActionKind;$/;"	V
CodeActionManager	nvim/plugged/coc.nvim/build/index.js	/^class CodeActionManager extends manager_1.default {$/;"	C
CodeActionManager	nvim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^export default class CodeActionManager extends Manager<CodeActionProvider> implements Disposable {$/;"	c
CodeActionProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface CodeActionProvider {$/;"	i
CodeActionProviderMetadata	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface CodeActionProviderMetadata {$/;"	i
CodeActionRequest	nvim/plugged/coc.nvim/build/index.js	/^var CodeActionRequest;$/;"	V
CodeLens	nvim/plugged/coc.nvim/build/index.js	/^var CodeLens;$/;"	V
CodeLensFeature	nvim/plugged/coc.nvim/build/index.js	/^class CodeLensFeature extends TextDocumentFeature {$/;"	C
CodeLensFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class CodeLensFeature extends TextDocumentFeature<CodeLensRegistrationOptions> {$/;"	c
CodeLensInfo	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^export interface CodeLensInfo {$/;"	i
CodeLensManager	nvim/plugged/coc.nvim/build/index.js	/^class CodeLensManager extends manager_1.default {$/;"	C
CodeLensManager	nvim/plugged/coc.nvim/build/index.js	/^class CodeLensManager {$/;"	C
CodeLensManager	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^export default class CodeLensManager {$/;"	c
CodeLensManager	nvim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^export default class CodeLensManager extends Manager<CodeLensProvider> implements Disposable {$/;"	c
CodeLensProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface CodeLensProvider {$/;"	i
CodeLensRequest	nvim/plugged/coc.nvim/build/index.js	/^var CodeLensRequest;$/;"	V
CodeLensResolveRequest	nvim/plugged/coc.nvim/build/index.js	/^var CodeLensResolveRequest;$/;"	V
Codec	nvim/plugged/coc.nvim/build/index.js	/^function Codec(options) {$/;"	F
Collection	nvim/plugged/coc.nvim/build/index.js	/^class Collection {$/;"	C
Collection	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^export default class Collection implements DiagnosticCollection {$/;"	c
Color	nvim/plugged/coc.nvim/build/index.js	/^var Color;$/;"	V
ColorInformation	nvim/plugged/coc.nvim/build/index.js	/^var ColorInformation;$/;"	V
ColorPresentation	nvim/plugged/coc.nvim/build/index.js	/^var ColorPresentation;$/;"	V
ColorPresentationRequest	nvim/plugged/coc.nvim/build/index.js	/^var ColorPresentationRequest;$/;"	V
ColorProviderFeature	nvim/plugged/coc.nvim/build/index.js	/^class ColorProviderFeature extends client_1.TextDocumentFeature {$/;"	C
ColorProviderFeature	nvim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^export class ColorProviderFeature extends TextDocumentFeature<$/;"	c
ColorProviderMiddleware	nvim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^export interface ColorProviderMiddleware {$/;"	i
ColorRanges	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^export interface ColorRanges {$/;"	i
Colors	nvim/plugged/coc.nvim/build/index.js	/^class Colors {$/;"	C
Colors	nvim/plugged/coc.nvim/src/handler/colors.ts	/^export default class Colors {$/;"	c
Command	nvim/plugged/coc.nvim/build/index.js	/^var Command;$/;"	V
Command	nvim/plugged/coc.nvim/src/commands.ts	/^export interface Command {$/;"	i
CommandItem	nvim/plugged/coc.nvim/build/index.js	/^class CommandItem {$/;"	C
CommandItem	nvim/plugged/coc.nvim/src/commands.ts	/^class CommandItem implements Disposable, Command {$/;"	c
CommandItem	nvim/plugged/coc.nvim/src/handler/index.ts	/^interface CommandItem {$/;"	i
CommandList	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:CommandList(...) abort$/;"	f
CommandManager	nvim/plugged/coc.nvim/build/index.js	/^class CommandManager {$/;"	C
CommandManager	nvim/plugged/coc.nvim/src/commands.ts	/^export class CommandManager implements Disposable {$/;"	c
CommandsList	nvim/plugged/coc.nvim/build/index.js	/^class CommandsList extends basic_1.default {$/;"	C
CommandsList	nvim/plugged/coc.nvim/src/list/source/commands.ts	/^export default class CommandsList extends BasicList {$/;"	c
Commentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^command! -range -bar Commentary call s:go(<line1>,<line2>)$/;"	c
CommitInteractive	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, args, patch) abort$/;"	f
CommitSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, args, ...) abort$/;"	f
Comparator	nvim/plugged/coc.nvim/build/index.js	/^function Comparator (comp, options) {$/;"	F
CompareAge	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompareAge(mine, theirs) abort$/;"	f
CompilerSet	nvim/plugged/typescript-vim/compiler/typescript.vim	/^  command! -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-elixir/compiler/credo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-elixir/compiler/exunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-elixir/compiler/mix.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-javascript/compiler/eslint.vim	/^  command! -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-ruby/compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-ruby/compiler/rake.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-ruby/compiler/rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-ruby/compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Complete	nvim/plugged/coc.nvim/build/index.js	/^class Complete {$/;"	C
Complete	nvim/plugged/coc.nvim/src/completion/complete.ts	/^export default class Complete {$/;"	c
CompleteConfig	nvim/plugged/coc.nvim/src/languages.ts	/^interface CompleteConfig {$/;"	i
CompleteConfig	nvim/plugged/coc.nvim/src/types.ts	/^export interface CompleteConfig {$/;"	i
CompleteHeads	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
CompleteOption	nvim/plugged/coc.nvim/src/types.ts	/^export interface CompleteOption {$/;"	i
CompleteRemote	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P) abort$/;"	f
CompleteResult	nvim/plugged/coc.nvim/src/types.ts	/^export interface CompleteResult {$/;"	i
CompleteRevision	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
CompleteSub	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
Complete_wikifiles	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! Complete_wikifiles(findstart, base)$/;"	f
Completion	nvim/plugged/coc.nvim/build/index.js	/^class Completion {$/;"	C
Completion	nvim/plugged/coc.nvim/src/completion/index.ts	/^export class Completion implements Disposable {$/;"	c
CompletionContext	nvim/plugged/coc.nvim/src/types.ts	/^export interface CompletionContext {$/;"	i
CompletionItem	nvim/plugged/coc.nvim/build/index.js	/^var CompletionItem;$/;"	V
CompletionItemFeature	nvim/plugged/coc.nvim/build/index.js	/^class CompletionItemFeature extends TextDocumentFeature {$/;"	C
CompletionItemFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class CompletionItemFeature extends TextDocumentFeature<$/;"	c
CompletionItemKind	nvim/plugged/coc.nvim/build/index.js	/^var CompletionItemKind;$/;"	V
CompletionItemProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface CompletionItemProvider {$/;"	i
CompletionList	nvim/plugged/coc.nvim/build/index.js	/^var CompletionList;$/;"	V
CompletionRequest	nvim/plugged/coc.nvim/build/index.js	/^var CompletionRequest;$/;"	V
CompletionResolveRequest	nvim/plugged/coc.nvim/build/index.js	/^var CompletionResolveRequest;$/;"	V
CompletionSource	nvim/plugged/coc.nvim/src/languages.ts	/^export interface CompletionSource {$/;"	i
CompletionStillValid	nvim/plugged/ale/autoload/ale/completion.vim	/^function! s:CompletionStillValid(request_id) abort$/;"	f
CompletionTriggerKind	nvim/plugged/coc.nvim/build/index.js	/^var CompletionTriggerKind;$/;"	V
Config	nvim/plugged/coc.nvim/src/cursors/index.ts	/^interface Config {$/;"	i
Config	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^function! s:Config() abort$/;"	f
ConfigTimestamps	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
Configuration	nvim/plugged/coc.nvim/build/index.js	/^class Configuration {$/;"	C
Configuration	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^export class Configuration {$/;"	c
ConfigurationChangeEvent	nvim/plugged/coc.nvim/src/types.ts	/^export interface ConfigurationChangeEvent {$/;"	i
ConfigurationFeature	nvim/plugged/coc.nvim/build/index.js	/^class ConfigurationFeature {$/;"	C
ConfigurationFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class ConfigurationFeature$/;"	c
ConfigurationFeature	nvim/plugged/coc.nvim/src/language-client/configuration.ts	/^export class ConfigurationFeature implements StaticFeature {$/;"	c
ConfigurationInspect	nvim/plugged/coc.nvim/src/types.ts	/^export interface ConfigurationInspect<T> {$/;"	i
ConfigurationModel	nvim/plugged/coc.nvim/build/index.js	/^class ConfigurationModel {$/;"	C
ConfigurationModel	nvim/plugged/coc.nvim/src/configuration/model.ts	/^export class ConfigurationModel implements IConfigurationModel {$/;"	c
ConfigurationProxy	nvim/plugged/coc.nvim/build/index.js	/^class ConfigurationProxy {$/;"	C
ConfigurationProxy	nvim/plugged/coc.nvim/src/configuration/shape.ts	/^export default class ConfigurationProxy implements ConfigurationShape {$/;"	c
ConfigurationRequest	nvim/plugged/coc.nvim/build/index.js	/^var ConfigurationRequest;$/;"	V
ConfigurationShape	nvim/plugged/coc.nvim/src/types.ts	/^export interface ConfigurationShape {$/;"	i
ConfigurationTarget	nvim/plugged/coc.nvim/build/index.js	/^var ConfigurationTarget;$/;"	V
ConfigurationTarget	nvim/plugged/coc.nvim/src/types.ts	/^export enum ConfigurationTarget {$/;"	e
ConfigurationWorkspaceMiddleware	nvim/plugged/coc.nvim/src/language-client/configuration.ts	/^export interface ConfigurationWorkspaceMiddleware {$/;"	i
Configurations	nvim/plugged/coc.nvim/build/index.js	/^class Configurations {$/;"	C
Configurations	nvim/plugged/coc.nvim/src/configuration/index.ts	/^export default class Configurations {$/;"	c
Connection	nvim/plugged/coc.nvim/build/index.js	/^class Connection extends events_1.default {$/;"	C
ConnectionCloseHandler	nvim/plugged/coc.nvim/src/language-client/client.ts	/^interface ConnectionCloseHandler {$/;"	i
ConnectionError	nvim/plugged/coc.nvim/build/index.js	/^class ConnectionError extends Error {$/;"	C
ConnectionErrorHandler	nvim/plugged/coc.nvim/src/language-client/client.ts	/^interface ConnectionErrorHandler {$/;"	i
ConnectionErrors	nvim/plugged/coc.nvim/build/index.js	/^var ConnectionErrors;$/;"	V
ConnectionState	nvim/plugged/coc.nvim/build/index.js	/^var ConnectionState;$/;"	V
ConnectionStrategy	nvim/plugged/coc.nvim/build/index.js	/^var ConnectionStrategy;$/;"	V
ConsoleLogger	nvim/plugged/coc.nvim/build/index.js	/^class ConsoleLogger {$/;"	C
ConsoleLogger	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class ConsoleLogger implements Logger {$/;"	c
ContainingCommit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
ContentLength	nvim/plugged/coc.nvim/build/index.js	/^let ContentLength = 'Content-Length: ';$/;"	V
ContinuedHangingOperator	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ContinuedHangingOperator(msl_info) abort$/;"	f
ContinuedLine	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ContinuedLine(pline_info) abort$/;"	f
Continues	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Continues()$/;"	f
CorrectFocusOnStartup	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
CountITags	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CountITags(text)$/;"	f
CountTagsAndState	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
CreateAutocommands	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
CreateCountDict	nvim/plugged/ale/autoload/ale/statusline.vim	/^function! s:CreateCountDict() abort$/;"	f
CreateFile	nvim/plugged/coc.nvim/build/index.js	/^var CreateFile;$/;"	V
CreateParamsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^interface CreateParamsSignature<E, P> {$/;"	i
CreateTSServerMessageData	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! s:CreateTSServerMessageData(message) abort$/;"	f
CreateTabTreeVCS	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
Creator.BufNamePrefix	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
Creator.CreateMirror	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
Creator.CreateTabTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
Creator.CreateWindowTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
Creator.New	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
Creator.ToggleTabTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
Creator._bindMappings	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
Creator._broadcastInitEvent	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
Creator._createNERDTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
Creator._createTreeWin	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
Creator._isBufHidden	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
Creator._nextBufferName	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
Creator._nextBufferNumber	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
Creator._pathForString	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
Creator._removeTreeBufForTab	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
Creator._setCommonBufOptions	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
Creator._setupStatusline	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
Creator._tabpagevar	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
Creator._uniq	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
Creator.createMirror	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
Creator.createTabTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
Creator.createWindowTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
Creator.toggleTabTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
CssFirstUnfinished	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
CssPrevNonComment	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
CssUnfinished	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
CtagsErrMsg	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
Cursor.column	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.column() dict$/;"	f
Cursor.line	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.line() dict$/;"	f
Cursor.move	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.move(line, column) dict$/;"	f
Cursor.new	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.new(position)$/;"	f
Cursor.remove_visual_selection	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.remove_visual_selection() dict$/;"	f
Cursor.restore_unnamed_register	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.restore_unnamed_register() dict$/;"	f
Cursor.save_unnamed_register	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.save_unnamed_register() dict$/;"	f
Cursor.update_highlight	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_highlight() dict$/;"	f
Cursor.update_line_length	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_line_length() dict$/;"	f
Cursor.update_position	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_position(pos) dict$/;"	f
Cursor.update_visual_selection	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_visual_selection(region) dict$/;"	f
CursorHasGroup	nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^function! s:CursorHasGroup(group) abort$/;"	f
CursorManager.add	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.add(pos, ...) dict$/;"	f
CursorManager.debug	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.debug() dict$/;"	f
CursorManager.delete_current	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.delete_current() dict$/;"	f
CursorManager.get	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get(i) dict$/;"	f
CursorManager.get_current	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get_current() dict$/;"	f
CursorManager.initialize	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.initialize() dict$/;"	f
CursorManager.is_empty	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.is_empty() dict$/;"	f
CursorManager.loop_done	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.loop_done() dict$/;"	f
CursorManager.new	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.new()$/;"	f
CursorManager.next	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.next() dict$/;"	f
CursorManager.reapply_visual_selection	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reapply_visual_selection() dict$/;"	f
CursorManager.remove_highlight	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.remove_highlight(hi_id) dict$/;"	f
CursorManager.reposition_all_within_region	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reposition_all_within_region(start) dict$/;"	f
CursorManager.reset	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reset(restore_view, restore_setting, ...) dict$/;"	f
CursorManager.restore_user_settings	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.restore_user_settings() dict$/;"	f
CursorManager.size	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.size() dict$/;"	f
CursorManager.start_loop	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.start_loop() dict$/;"	f
CursorManager.update_current	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.update_current() dict$/;"	f
CursorPosition	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^export interface CursorPosition {$/;"	i
CursorPosition	nvim/plugged/coc.nvim/src/events.ts	/^export interface CursorPosition {$/;"	i
CursorRangeFromSelected	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:CursorRangeFromSelected(type, ...) abort$/;"	f
Cursors	nvim/plugged/coc.nvim/build/index.js	/^class Cursors {$/;"	C
Cursors	nvim/plugged/coc.nvim/src/cursors/index.ts	/^export default class Cursors {$/;"	c
CwdError	nvim/plugged/coc.nvim/build/index.js	/^class CwdError extends Error {$/;"	C
D	nvim/plugged/coc.nvim/build/index.js	/^    let D = new Array(n);$/;"	V
DB	nvim/plugged/coc.nvim/build/index.js	/^class DB {$/;"	C
DB	nvim/plugged/coc.nvim/src/model/db.ts	/^export default class DB {$/;"	c
DB_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	nvim/plugged/coc.nvim/build/index.js	/^  DEBUG: { value: 10000, colour: 'cyan' },$/;"	P
DEFAULT	nvim/plugged/coc.nvim/build/index.js	/^    ParseOptions.DEFAULT = {$/;"	P
DEFAULT_OPTIONS	nvim/plugged/coc.nvim/build/index.js	/^var DEFAULT_OPTIONS = {objectMode: true};$/;"	O
DEFLATE	nvim/plugged/coc.nvim/build/index.js	/^  DEFLATE: 1,$/;"	P
DEFLATERAW	nvim/plugged/coc.nvim/build/index.js	/^  DEFLATERAW: 5,$/;"	P
DEPEND_DIR	nvim/plugged/html5.vim/Makefile	/^DEPEND_DIR=\/tmp\/vim-deps$/;"	m
DIFF_EQUAL	nvim/plugged/coc.nvim/build/index.js	/^var DIFF_EQUAL = 0;$/;"	V
DIFF_INSERT	nvim/plugged/coc.nvim/build/index.js	/^var DIFF_INSERT = 1;$/;"	V
DIRS	nvim/plugged/html5.vim/Makefile	/^DIRS=`ls -1F | grep \/ | sed -e 's\/\\\/\/\/'`$/;"	m
DateRollingFileStream	nvim/plugged/coc.nvim/build/index.js	/^class DateRollingFileStream extends RollingFileWriteStream {$/;"	C
DeclarationFeature	nvim/plugged/coc.nvim/build/index.js	/^class DeclarationFeature extends client_1.TextDocumentFeature {$/;"	C
DeclarationFeature	nvim/plugged/coc.nvim/src/language-client/declaration.ts	/^export class DeclarationFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
DeclarationManager	nvim/plugged/coc.nvim/build/index.js	/^class DeclarationManager extends manager_1.default {$/;"	C
DeclarationManager	nvim/plugged/coc.nvim/src/provider/declarationManager.ts	/^export default class DeclarationManager extends Manager<DeclarationProvider> implements Disposable {$/;"	c
DeclarationMiddleware	nvim/plugged/coc.nvim/src/language-client/declaration.ts	/^export interface DeclarationMiddleware {$/;"	i
DeclarationProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface DeclarationProvider {$/;"	i
DeclarationRequest	nvim/plugged/coc.nvim/build/index.js	/^var DeclarationRequest;$/;"	V
DecodeBuffer	nvim/plugged/coc.nvim/build/index.js	/^function DecodeBuffer(options) {$/;"	F
DecodeStream	nvim/plugged/coc.nvim/build/index.js	/^function DecodeStream(options) {$/;"	F
Decoder	nvim/plugged/coc.nvim/build/index.js	/^function Decoder(options) {$/;"	F
DefRuby	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
DefaultErrorHandler	nvim/plugged/coc.nvim/build/index.js	/^class DefaultErrorHandler {$/;"	C
DefaultErrorHandler	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DefaultErrorHandler implements ErrorHandler {$/;"	c
DefaultOption	nvim/plugged/ale/autoload/ale/fixers/shfmt.vim	/^function! s:DefaultOption(buffer) abort$/;"	f
DefaultSize	nvim/plugged/coc.nvim/build/index.js	/^let DefaultSize = 8192;$/;"	V
DeferredLanguageClientServerOptions	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export interface DeferredLanguageClientServerOptions {$/;"	i
DefinitionFeature	nvim/plugged/coc.nvim/build/index.js	/^class DefinitionFeature extends TextDocumentFeature {$/;"	C
DefinitionFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DefinitionFeature extends TextDocumentFeature<$/;"	c
DefinitionManager	nvim/plugged/coc.nvim/build/index.js	/^class DefinitionManager extends manager_1.default {$/;"	C
DefinitionManager	nvim/plugged/coc.nvim/src/provider/definitionManager.ts	/^export default class DefinitionManager extends Manager<DefinitionProvider> implements Disposable {$/;"	c
DefinitionProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface DefinitionProvider {$/;"	i
DefinitionRequest	nvim/plugged/coc.nvim/build/index.js	/^var DefinitionRequest;$/;"	V
Deflate	nvim/plugged/coc.nvim/build/index.js	/^class Deflate extends Zlib {$/;"	C
DeflateRaw	nvim/plugged/coc.nvim/build/index.js	/^class DeflateRaw extends Zlib {$/;"	C
DeindentingKeyword	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:DeindentingKeyword(cline_info) abort$/;"	f
Delayer	nvim/plugged/coc.nvim/build/index.js	/^class Delayer {$/;"	C
Delayer	nvim/plugged/coc.nvim/src/language-client/utils/async.ts	/^export class Delayer<T> implements Disposable {$/;"	c
DeleteFile	nvim/plugged/coc.nvim/build/index.js	/^var DeleteFile;$/;"	V
DeopleteSourceTest	nvim/plugged/ale/test/python/test_deoplete_source.py	/^class DeopleteSourceTest(unittest.TestCase):$/;"	c
DetectElixir	nvim/plugged/vim-elixir/ftdetect/elixir.vim	/^function! s:DetectElixir()$/;"	f
DetectFiletype	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
Diagnostic	nvim/plugged/coc.nvim/build/index.js	/^var Diagnostic;$/;"	V
DiagnosticBuffer	nvim/plugged/coc.nvim/build/index.js	/^class DiagnosticBuffer {$/;"	C
DiagnosticBuffer	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^export class DiagnosticBuffer implements Disposable {$/;"	c
DiagnosticCollection	nvim/plugged/coc.nvim/src/types.ts	/^export interface DiagnosticCollection {$/;"	i
DiagnosticConfig	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^export interface DiagnosticConfig {$/;"	i
DiagnosticInfo	nvim/plugged/coc.nvim/src/types.ts	/^export interface DiagnosticInfo {$/;"	i
DiagnosticItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface DiagnosticItem {$/;"	i
DiagnosticKind	nvim/plugged/coc.nvim/build/index.js	/^var DiagnosticKind;$/;"	V
DiagnosticKind	nvim/plugged/coc.nvim/src/types.ts	/^export enum DiagnosticKind {$/;"	e
DiagnosticManager	nvim/plugged/coc.nvim/build/index.js	/^class DiagnosticManager {$/;"	C
DiagnosticManager	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^export class DiagnosticManager implements Disposable {$/;"	c
DiagnosticRelatedInformation	nvim/plugged/coc.nvim/build/index.js	/^var DiagnosticRelatedInformation;$/;"	V
DiagnosticSeverity	nvim/plugged/coc.nvim/build/index.js	/^var DiagnosticSeverity;$/;"	V
DiagnosticTag	nvim/plugged/coc.nvim/build/index.js	/^var DiagnosticTag;$/;"	V
DiagnosticsList	nvim/plugged/coc.nvim/build/index.js	/^class DiagnosticsList extends location_1.default {$/;"	C
DiagnosticsList	nvim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^export default class DiagnosticsList extends LocationList {$/;"	c
DidChangeConfigurationNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidChangeConfigurationNotification;$/;"	V
DidChangeConfigurationSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface DidChangeConfigurationSignature {$/;"	i
DidChangeTextDocumentData	nvim/plugged/coc.nvim/src/language-client/client.ts	/^interface DidChangeTextDocumentData {$/;"	i
DidChangeTextDocumentFeature	nvim/plugged/coc.nvim/build/index.js	/^class DidChangeTextDocumentFeature {$/;"	C
DidChangeTextDocumentFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DidChangeTextDocumentFeature$/;"	c
DidChangeTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidChangeTextDocumentNotification;$/;"	V
DidChangeTextDocumentParams	nvim/plugged/coc.nvim/src/types.ts	/^export interface DidChangeTextDocumentParams extends protocol.DidChangeTextDocumentParams {$/;"	i
DidChangeWatchedFilesNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidChangeWatchedFilesNotification;$/;"	V
DidChangeWorkspaceFoldersNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidChangeWorkspaceFoldersNotification;$/;"	V
DidCloseTextDocumentFeature	nvim/plugged/coc.nvim/build/index.js	/^class DidCloseTextDocumentFeature extends DocumentNotifiactions {$/;"	C
DidCloseTextDocumentFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DidCloseTextDocumentFeature extends DocumentNotifiactions<$/;"	c
DidCloseTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidCloseTextDocumentNotification;$/;"	V
DidOpenTextDocumentFeature	nvim/plugged/coc.nvim/build/index.js	/^class DidOpenTextDocumentFeature extends DocumentNotifiactions {$/;"	C
DidOpenTextDocumentFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DidOpenTextDocumentFeature extends DocumentNotifiactions<DidOpenTextDocumentParams, TextDocument> {$/;"	c
DidOpenTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidOpenTextDocumentNotification;$/;"	V
DidSaveTextDocumentFeature	nvim/plugged/coc.nvim/build/index.js	/^class DidSaveTextDocumentFeature extends DocumentNotifiactions {$/;"	C
DidSaveTextDocumentFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DidSaveTextDocumentFeature extends DocumentNotifiactions<$/;"	c
DidSaveTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidSaveTextDocumentNotification;$/;"	V
DiffClose	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DiffClose() abort$/;"	f
Differ	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^class Differ$/;"	c
Dir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
DirCheck	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
DirCommitFile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
DirRev	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
Disable	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Disable() abort$/;"	f
DisablePostamble	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! s:DisablePostamble() abort$/;"	f
Dispatch	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dispatch(bang, cmd, args) abort$/;"	f
Disposable	nvim/plugged/coc.nvim/build/index.js	/^var Disposable;$/;"	V
Do	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:Do(action)$/;"	f
Do	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
DoAutocmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(cmd) abort$/;"	f
DoAutocmdChanged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
DoStageUnpushed	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
DoStageUnpushedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
DoStageUnstaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
DoStageUnstagedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
DoStageUntracked	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
DoStageUntrackedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
DoToggleHeadHeader	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
DoToggleStaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
DoToggleStagedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
DoToggleUnpulled	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
DoToggleUnpulledHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
DoToggleUnpushed	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
DoToggleUnpushedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
DoToggleUnstaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
DoToggleUnstagedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
DoToggleUntracked	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
DoToggleUntrackedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
DoUnstageStaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
DoUnstageStagedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
DoUnstageUnpulled	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
DoUnstageUnpulledHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
DoUnstageUnpushed	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
DoUnstageUnstaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
DoWhile	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:DoWhile()$/;"	f
DockerfileIndent	nvim/plugged/Dockerfile.vim/indent/Dockerfile.vim	/^function! DockerfileIndent(line)$/;"	f
DockerfileReplaceInstruction	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^function! DockerfileReplaceInstruction(original, replacement)$/;"	f
Document	nvim/plugged/coc.nvim/build/index.js	/^class Document {$/;"	C
Document	nvim/plugged/coc.nvim/src/model/document.ts	/^export default class Document {$/;"	c
DocumentColorManager	nvim/plugged/coc.nvim/build/index.js	/^class DocumentColorManager extends manager_1.default {$/;"	C
DocumentColorManager	nvim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^export default class DocumentColorManager extends Manager<DocumentColorProvider> implements Disposable {$/;"	c
DocumentColorProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentColorProvider {$/;"	i
DocumentColorRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentColorRequest;$/;"	V
DocumentFilter	nvim/plugged/coc.nvim/build/index.js	/^var DocumentFilter;$/;"	V
DocumentFormattingEditProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentFormattingEditProvider {$/;"	i
DocumentFormattingFeature	nvim/plugged/coc.nvim/build/index.js	/^class DocumentFormattingFeature extends TextDocumentFeature {$/;"	C
DocumentFormattingFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentFormattingFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
DocumentFormattingRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentFormattingRequest;$/;"	V
DocumentHighlight	nvim/plugged/coc.nvim/build/index.js	/^var DocumentHighlight;$/;"	V
DocumentHighlightFeature	nvim/plugged/coc.nvim/build/index.js	/^class DocumentHighlightFeature extends TextDocumentFeature {$/;"	C
DocumentHighlightFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentHighlightFeature extends TextDocumentFeature<$/;"	c
DocumentHighlightKind	nvim/plugged/coc.nvim/build/index.js	/^var DocumentHighlightKind;$/;"	V
DocumentHighlightManager	nvim/plugged/coc.nvim/build/index.js	/^class DocumentHighlightManager extends manager_1.default {$/;"	C
DocumentHighlightManager	nvim/plugged/coc.nvim/src/provider/documentHighlightManager.ts	/^export default class DocumentHighlightManager extends Manager<DocumentHighlightProvider> implements Disposable {$/;"	c
DocumentHighlightProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentHighlightProvider {$/;"	i
DocumentHighlightRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentHighlightRequest;$/;"	V
DocumentHighlighter	nvim/plugged/coc.nvim/build/index.js	/^class DocumentHighlighter {$/;"	C
DocumentHighlighter	nvim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^export default class DocumentHighlighter {$/;"	c
DocumentLink	nvim/plugged/coc.nvim/build/index.js	/^    function DocumentLink() {$/;"	F
DocumentLink	nvim/plugged/coc.nvim/build/index.js	/^var DocumentLink = \/** @class *\/ (function () {$/;"	V
DocumentLinkFeature	nvim/plugged/coc.nvim/build/index.js	/^class DocumentLinkFeature extends TextDocumentFeature {$/;"	C
DocumentLinkFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentLinkFeature extends TextDocumentFeature<$/;"	c
DocumentLinkManager	nvim/plugged/coc.nvim/build/index.js	/^class DocumentLinkManager extends manager_1.default {$/;"	C
DocumentLinkManager	nvim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^export default class DocumentLinkManager extends Manager<DocumentLinkProvider> implements Disposable {$/;"	c
DocumentLinkProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentLinkProvider {$/;"	i
DocumentLinkRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentLinkRequest;$/;"	V
DocumentLinkResolveRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentLinkResolveRequest;$/;"	V
DocumentNotifiactions	nvim/plugged/coc.nvim/build/index.js	/^class DocumentNotifiactions {$/;"	C
DocumentOnTypeFormattingFeature	nvim/plugged/coc.nvim/build/index.js	/^class DocumentOnTypeFormattingFeature extends TextDocumentFeature {$/;"	C
DocumentOnTypeFormattingFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentOnTypeFormattingFeature extends TextDocumentFeature<DocumentOnTypeFormattingRegistrationOptions> {$/;"	c
DocumentOnTypeFormattingRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentOnTypeFormattingRequest;$/;"	V
DocumentRangeFormattingEditProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentRangeFormattingEditProvider {$/;"	i
DocumentRangeFormattingFeature	nvim/plugged/coc.nvim/build/index.js	/^class DocumentRangeFormattingFeature extends TextDocumentFeature {$/;"	C
DocumentRangeFormattingFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentRangeFormattingFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
DocumentRangeFormattingRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentRangeFormattingRequest;$/;"	V
DocumentSymbol	nvim/plugged/coc.nvim/build/index.js	/^    function DocumentSymbol() {$/;"	F
DocumentSymbol	nvim/plugged/coc.nvim/build/index.js	/^var DocumentSymbol = \/** @class *\/ (function () {$/;"	V
DocumentSymbolFeature	nvim/plugged/coc.nvim/build/index.js	/^class DocumentSymbolFeature extends TextDocumentFeature {$/;"	C
DocumentSymbolFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentSymbolFeature extends TextDocumentFeature<$/;"	c
DocumentSymbolManager	nvim/plugged/coc.nvim/build/index.js	/^class DocumentSymbolManager extends manager_1.default {$/;"	C
DocumentSymbolManager	nvim/plugged/coc.nvim/src/provider/documentSymbolManager.ts	/^export default class DocumentSymbolManager extends Manager<DocumentSymbolProvider> implements Disposable {$/;"	c
DocumentSymbolProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentSymbolProvider {$/;"	i
DocumentSymbolRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentSymbolRequest;$/;"	V
Documentation	nvim/plugged/coc.nvim/src/types.ts	/^export interface Documentation {$/;"	i
DoneParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
DotRelative	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
DownloadOptions	nvim/plugged/coc.nvim/src/types.ts	/^export interface DownloadOptions extends RequestOptions {$/;"	i
DynamicFeature	nvim/plugged/coc.nvim/build/index.js	/^var DynamicFeature;$/;"	V
DynamicFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface DynamicFeature<T> {$/;"	i
DynamicFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^namespace DynamicFeature {$/;"	c
END_BLOCKS	nvim/plugged/ale/test/script/block-padding-checker	/^END_BLOCKS = set(['endif', 'endfor', 'endwhile', 'endtry', 'endfunction'])$/;"	v
EOL	nvim/plugged/coc.nvim/build/index.js	/^  var EOL = '\\n'$/;"	V
EOL	nvim/plugged/coc.nvim/build/index.js	/^var EOL = ['\\n', '\\r\\n', '\\r'];$/;"	A
ERROR	nvim/plugged/coc.nvim/build/index.js	/^  ERROR: { value: 40000, colour: 'red' },$/;"	P
ERROR_COLUMNS	nvim/plugged/coc.nvim/build/index.js	/^var ERROR_COLUMNS = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};$/;"	O
Echo	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:Echo(message) abort$/;"	f
EchoCommand	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoCommand(item) abort$/;"	f
EchoCommandHistory	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoCommandHistory() abort$/;"	f
EchoExec	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:EchoExec(...) abort$/;"	f
EchoExecutable	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoExecutable(item) abort$/;"	f
EchoGlobalVariables	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
EchoLSPErrorMessages	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLSPErrorMessages(all_linter_names) abort$/;"	f
EchoLinterAliases	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterAliases(all_linters) abort$/;"	f
EchoLinterVariables	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterVariables(variable_list) abort$/;"	f
EditerState	nvim/plugged/coc.nvim/src/types.ts	/^export interface EditerState {$/;"	i
EexBuffer	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^module EexBuffer$/;"	m	class:Differ
Emitter	nvim/plugged/coc.nvim/build/index.js	/^class Emitter {$/;"	C
Emmet	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  command! -nargs=1 Emmet call emmet#expandAbbr(4, <q-args>)$/;"	c
EmmetInstall	nvim/plugged/emmet-vim/plugin/emmet.vim	/^command! -nargs=0 -bar EmmetInstall call <SID>install_plugin(get(g:, 'user_emmet_mode', 'a'), 1)$/;"	c
EmmetUnitTest	nvim/plugged/emmet-vim/unittest.vim	/^command! -bang -nargs=* -complete=customlist,<SID>emmet_unittest_complete EmmetUnitTest call s:do_tests("<bang>", <f-args>)$/;"	c
EmptyEvents	nvim/plugged/coc.nvim/src/events.ts	/^export type EmptyEvents = 'FocusGained'$/;"	t
EmptyInsideString	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:EmptyInsideString(pline_info) abort$/;"	f
Enable	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Enable()$/;"	f
EnablePreamble	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! s:EnablePreamble() abort$/;"	f
EncodeBuffer	nvim/plugged/coc.nvim/build/index.js	/^function EncodeBuffer(options) {$/;"	F
EncodeStream	nvim/plugged/coc.nvim/build/index.js	/^function EncodeStream(options) {$/;"	F
Encoder	nvim/plugged/coc.nvim/build/index.js	/^function Encoder(options) {$/;"	F
Env	nvim/plugged/coc.nvim/src/types.ts	/^export interface Env {$/;"	i
Env	nvim/plugged/coc.nvim/src/util/highlight.ts	/^interface Env {$/;"	i
ErrMsg	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
ErrorAction	nvim/plugged/coc.nvim/build/index.js	/^var ErrorAction;$/;"	V
ErrorAction	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export enum ErrorAction {$/;"	e
ErrorCodes	nvim/plugged/coc.nvim/build/index.js	/^var ErrorCodes;$/;"	V
ErrorHandler	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ErrorHandler {$/;"	i
ErrorItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface ErrorItem {$/;"	i
ErrorList	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^class ErrorList extends BasicList {$/;"	c
ErrorTaskList	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^class ErrorTaskList extends BasicList {$/;"	c
ErubyAtCursor	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^function! ErubyAtCursor() abort$/;"	f
EscapeCtagsCmd	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
EscapeSignText	nvim/plugged/ale/autoload/ale/sign.vim	/^function! s:EscapeSignText(sign_text) abort$/;"	f
Event	nvim/plugged/coc.nvim/build/index.js	/^var Event;$/;"	V
Event.New	nvim/plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
EventLite	nvim/plugged/coc.nvim/build/index.js	/^function EventLite() {$/;"	F
Events	nvim/plugged/coc.nvim/build/index.js	/^class Events {$/;"	C
Events	nvim/plugged/coc.nvim/src/events.ts	/^class Events {$/;"	c
ExBuffer	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^module ExBuffer$/;"	m	class:Differ
Exception	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Exception()$/;"	f
ExcludeOther	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludeOther(nr, exclude_preview)$/;"	f
ExcludePaths	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludePaths(nr, exclude_paths)$/;"	f
ExecPath	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
Executable	nvim/plugged/coc.nvim/build/index.js	/^var Executable;$/;"	V
Executable	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export interface Executable {$/;"	i
Executable	nvim/plugged/coc.nvim/src/language-client/index.ts	/^namespace Executable {$/;"	c
ExecuteCommandFeature	nvim/plugged/coc.nvim/build/index.js	/^class ExecuteCommandFeature {$/;"	C
ExecuteCommandFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class ExecuteCommandFeature$/;"	c
ExecuteCommandRequest	nvim/plugged/coc.nvim/build/index.js	/^var ExecuteCommandRequest;$/;"	V
ExecuteCtags	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
ExecuteCtagsOnFile	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
ExecuteRename	nvim/plugged/ale/autoload/ale/rename.vim	/^function! s:ExecuteRename(linter, old_name, new_name) abort$/;"	f
ExitCallback	nvim/plugged/ale/autoload/ale/command.vim	/^function! s:ExitCallback(buffer, line_list, Callback, data) abort$/;"	f
ExitNotification	nvim/plugged/coc.nvim/build/index.js	/^var ExitNotification;$/;"	V
Expand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
ExpandMap	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:ExpandMap(map)$/;"	f
ExpandSplit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandSplit(string, ...) abort$/;"	f
ExpandVar	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
ExpandVarLegacy	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
ExpireStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
ExprCol	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:ExprCol()$/;"	f
ExtBuffer	nvim/plugged/coc.nvim/build/index.js	/^function ExtBuffer(buffer, type) {$/;"	F
ExtType	nvim/plugged/coc.nvim/build/index.js	/^var ExtType;$/;"	V
ExtendedItem	nvim/plugged/coc.nvim/src/list/worker.ts	/^export interface ExtendedItem extends ListItem {$/;"	i
Extension	nvim/plugged/coc.nvim/src/types.ts	/^export interface Extension<T> {$/;"	i
ExtensionContext	nvim/plugged/coc.nvim/src/types.ts	/^export interface ExtensionContext {$/;"	i
ExtensionExport	nvim/plugged/coc.nvim/src/util/factory.ts	/^export interface ExtensionExport {$/;"	i
ExtensionInfo	nvim/plugged/coc.nvim/src/types.ts	/^export interface ExtensionInfo {$/;"	i
ExtensionItem	nvim/plugged/coc.nvim/src/extensions.ts	/^export interface ExtensionItem {$/;"	i
ExtensionList	nvim/plugged/coc.nvim/build/index.js	/^class ExtensionList extends basic_1.default {$/;"	C
ExtensionList	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:ExtensionList(...) abort$/;"	f
ExtensionList	nvim/plugged/coc.nvim/src/list/source/extensions.ts	/^export default class ExtensionList extends BasicList {$/;"	c
ExtensionManager	nvim/plugged/coc.nvim/build/index.js	/^class ExtensionManager {$/;"	C
ExtensionManager	nvim/plugged/coc.nvim/src/model/extension.ts	/^export default class ExtensionManager {$/;"	c
ExtensionState	nvim/plugged/coc.nvim/src/types.ts	/^export type ExtensionState = 'disabled' | 'loaded' | 'activated' | 'unknown'$/;"	t
Extensions	nvim/plugged/coc.nvim/build/index.js	/^class Extensions {$/;"	C
Extensions	nvim/plugged/coc.nvim/src/extensions.ts	/^export class Extensions {$/;"	c
ExtraBrackets	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ExtraBrackets(lnum) abort$/;"	f
ExtraErrorMsg	nvim/plugged/ale/ale_linters/javascript/flow.vim	/^function! s:ExtraErrorMsg(current, new) abort$/;"	f
FATAL	nvim/plugged/coc.nvim/build/index.js	/^  FATAL: { value: 50000, colour: 'magenta' },$/;"	P
FILENAME_SEP	nvim/plugged/coc.nvim/build/index.js	/^const FILENAME_SEP = ".";$/;"	V
FILES	nvim/plugged/html5.vim/Makefile	/^FILES=`ls -1 | grep '.vim$$'`$/;"	m
FILESIZE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FIRST_TIMEOUT	nvim/plugged/coc.nvim/build/index.js	/^const FIRST_TIMEOUT = 500;$/;"	V
FailureHandlingKind	nvim/plugged/coc.nvim/build/index.js	/^var FailureHandlingKind;$/;"	V
FetchSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FetchSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
File	nvim/plugged/coc.nvim/build/index.js	/^class File extends source_1.default {$/;"	C
File	nvim/plugged/coc.nvim/src/source/file.ts	/^export default class File extends Source {$/;"	c
FileChange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^export interface FileChange {$/;"	i
FileChange	nvim/plugged/coc.nvim/src/watchman.ts	/^export interface FileChange {$/;"	i
FileChangeItem	nvim/plugged/coc.nvim/src/watchman.ts	/^export interface FileChangeItem {$/;"	i
FileChangeType	nvim/plugged/coc.nvim/build/index.js	/^var FileChangeType;$/;"	V
FileItem	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^export interface FileItem {$/;"	i
FileRange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^export interface FileRange {$/;"	i
FileSystemWatcher	nvim/plugged/coc.nvim/build/index.js	/^class FileSystemWatcher {$/;"	C
FileSystemWatcher	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^export default class FileSystemWatcher implements Disposable {$/;"	c
FileSystemWatcherFeature	nvim/plugged/coc.nvim/build/index.js	/^class FileSystemWatcherFeature {$/;"	C
FileSystemWatcherFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class FileSystemWatcherFeature$/;"	c
FilterEscape	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
FilterResult	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:FilterResult(buffer, obj) abort$/;"	f
FindConfig	nvim/plugged/ale/ale_linters/pug/puglint.vim	/^function! s:FindConfig(buffer) abort$/;"	f
FindContainingClass	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:FindContainingClass() abort$/;"	f
FindHistoryItem	nvim/plugged/ale/autoload/ale/history.vim	/^function! s:FindHistoryItem(buffer, job_id) abort$/;"	f
FindParentVCSRoot	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
FindSpan	nvim/plugged/ale/autoload/ale/handlers/rust.vim	/^function! s:FindSpan(buffer, span) abort$/;"	f
FinishCommit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FinishCommit() abort$/;"	f
FixList	nvim/plugged/ale/autoload/ale/list.vim	/^function! s:FixList(buffer, list) abort$/;"	f
FlagSet.New	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
FlagSet._flagsForScope	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
FlagSet.addFlag	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
FlagSet.clearFlags	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
FlagSet.removeFlag	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
FlagSet.renderToString	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
Flatted	nvim/plugged/coc.nvim/build/index.js	/^  var Flatted = {$/;"	O
FlexDecoder	nvim/plugged/coc.nvim/build/index.js	/^function FlexDecoder() {$/;"	F
FlexEncoder	nvim/plugged/coc.nvim/build/index.js	/^function FlexEncoder() {$/;"	F
FloatBuffer	nvim/plugged/coc.nvim/build/index.js	/^class FloatBuffer {$/;"	C
FloatBuffer	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^export default class FloatBuffer {$/;"	c
FloatFactory	nvim/plugged/coc.nvim/build/index.js	/^class FloatFactory {$/;"	C
FloatFactory	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^export default class FloatFactory implements Disposable {$/;"	c
Floating	nvim/plugged/coc.nvim/build/index.js	/^class Floating {$/;"	C
Floating	nvim/plugged/coc.nvim/src/completion/floating.ts	/^export default class Floating {$/;"	c
FloatingConfig	nvim/plugged/coc.nvim/src/completion/floating.ts	/^export interface FloatingConfig {$/;"	i
FocusGainedHandler	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:FocusGainedHandler(timer)$/;"	f
Fold	nvim/init.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
FoldList	nvim/plugged/coc.nvim/build/index.js	/^class FoldList extends basic_1.default {$/;"	C
FoldList	nvim/plugged/coc.nvim/src/list/source/folders.ts	/^export default class FoldList extends BasicList {$/;"	c
FoldingContext	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface FoldingContext { }$/;"	i
FoldingRange	nvim/plugged/coc.nvim/build/index.js	/^var FoldingRange;$/;"	V
FoldingRangeFeature	nvim/plugged/coc.nvim/build/index.js	/^class FoldingRangeFeature extends client_1.TextDocumentFeature {$/;"	C
FoldingRangeFeature	nvim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^export class FoldingRangeFeature extends TextDocumentFeature<$/;"	c
FoldingRangeKind	nvim/plugged/coc.nvim/build/index.js	/^var FoldingRangeKind;$/;"	V
FoldingRangeManager	nvim/plugged/coc.nvim/build/index.js	/^class FoldingRangeManager extends manager_1.default {$/;"	C
FoldingRangeManager	nvim/plugged/coc.nvim/src/provider/foldingRangeManager.ts	/^export default class FoldingRangeManager extends Manager<FoldingRangeProvider> implements Disposable {$/;"	c
FoldingRangeProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface FoldingRangeProvider {$/;"	i
FoldingRangeProviderMiddleware	nvim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^export interface FoldingRangeProviderMiddleware {$/;"	i
FoldingRangeRequest	nvim/plugged/coc.nvim/build/index.js	/^var FoldingRangeRequest;$/;"	V
Foo	nvim/plugged/vim-jsdoc/test/test.js	/^class Foo extends Bar { }$/;"	C
Foo	nvim/plugged/vim-jsdoc/test/test.js	/^class Foo {$/;"	C
Foo	nvim/plugged/vim-jsdoc/test/test.ts	/^class Foo {$/;"	c
Foo	nvim/plugged/vim-ruby/spec/indent/method_definitions_spec.rb	/^      class Foo$/;"	c
Foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        class Foo < Bar$/;"	c
FooBar	nvim/plugged/vim-jsdoc/test/flow.js	/^class FooBar {$/;"	C
ForkOptions	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export interface ForkOptions {$/;"	i
Format	nvim/init.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
Format	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
FormatEntry	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! s:FormatEntry(key, entry) abort$/;"	f
FormatExe	nvim/plugged/ale/autoload/ale/assert.vim	/^function! s:FormatExe(command, executable) abort$/;"	f
FormatFile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
FormatFromSelected	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:FormatFromSelected(type)$/;"	f
FormatLog	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
FormatManager	nvim/plugged/coc.nvim/build/index.js	/^class FormatManager extends manager_1.default {$/;"	C
FormatManager	nvim/plugged/coc.nvim/src/provider/formatManager.ts	/^export default class FormatManager extends Manager<DocumentFormattingEditProvider> implements Disposable {$/;"	c
FormatRangeManager	nvim/plugged/coc.nvim/build/index.js	/^class FormatRangeManager extends manager_1.default {$/;"	C
FormatRangeManager	nvim/plugged/coc.nvim/src/provider/formatRangeManager.ts	/^export default class FormatRangeManager extends Manager<DocumentRangeFormattingEditProvider> implements Disposable {$/;"	c
FormatRebase	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
FormatString	nvim/plugged/coc.nvim/build/index.js	/^class FormatString extends Marker {$/;"	C
FormatString	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class FormatString extends Marker {$/;"	c
FormattingOptions	nvim/plugged/coc.nvim/build/index.js	/^var FormattingOptions;$/;"	V
Fragment	nvim/plugged/coc.nvim/src/types.ts	/^export interface Fragment {$/;"	i
FreshState	nvim/plugged/html5.vim/indent/html.vim	/^func! s:FreshState(lnum)$/;"	f
FriendlyName	nvim/plugged/vim-gitgutter/test/runner.vim	/^function FriendlyName(test_name)$/;"	f
FugitiveCommonDir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveDetect	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(path) abort$/;"	f
FugitiveExtractGitDir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveHead	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(path) abort$/;"	f
FugitiveParse	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitivePrepare	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveReal	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemoteUrl	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveStatusline	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
FullTextDocument	nvim/plugged/coc.nvim/build/index.js	/^    function FullTextDocument(uri, languageId, version, content) {$/;"	F
FullTextDocument	nvim/plugged/coc.nvim/build/index.js	/^var FullTextDocument = \/** @class *\/ (function () {$/;"	V
Function	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^void Class::Function(double variable) {$/;"	f	class:Class
GF	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GIT_SOURCES	nvim/plugged/html5.vim/Makefile	/^GIT_SOURCES=$/;"	m
GUNZIP	nvim/plugged/coc.nvim/build/index.js	/^  GUNZIP: 4,$/;"	P
GZIP	nvim/plugged/coc.nvim/build/index.js	/^  GZIP: 3,$/;"	P
GatherOutput	nvim/plugged/ale/autoload/ale/command.vim	/^function! s:GatherOutput(line_list, job_id, line) abort$/;"	f
GenStage	nvim/plugged/vim-elixir/large_file.ex	/^defmodule GenStage do$/;"	m
Generate	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Generate(rev, ...) abort$/;"	f
GetALEProjectDir	nvim/plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! s:GetALEProjectDir(buffer) abort$/;"	f
GetAlarm	nvim/plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:GetAlarm(buffer, timeout) abort$/;"	f
GetAliasedFiletype	nvim/plugged/ale/autoload/ale/linter.vim	/^function! s:GetAliasedFiletype(original_filetype) abort$/;"	f
GetBufferRubyClass	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubyEntity	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
GetBufferRubyModule	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubySingletonMethods	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetCachedExtensionMap	nvim/plugged/ale/autoload/ale/filetypes.vim	/^function! s:GetCachedExtensionMap() abort$/;"	f
GetCallbacks	nvim/plugged/ale/autoload/ale/fix.vim	/^function! s:GetCallbacks(buffer, fixing_flag, fixers) abort$/;"	f
GetConfig	nvim/plugged/ale/ale_linters/java/checkstyle.vim	/^function! s:GetConfig(buffer, config) abort$/;"	f
GetCounts	nvim/plugged/ale/autoload/ale/statusline.vim	/^function! s:GetCounts(buffer) abort$/;"	f
GetDetails	nvim/plugged/ale/ale_linters/javascript/flow.vim	/^function! s:GetDetails(error) abort$/;"	f
GetDir	nvim/plugged/ale/ale_linters/python/mypy.vim	/^function! s:GetDir(buffer) abort$/;"	f
GetDir	nvim/plugged/ale/ale_linters/python/vulture.vim	/^function! s:GetDir(buffer) abort$/;"	f
GetEelixirIndent	nvim/plugged/vim-elixir/indent/eelixir.vim	/^function! GetEelixirIndent(...)$/;"	f
GetErrMsg	nvim/plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:GetErrMsg(i, lines, text) abort$/;"	f
GetErubyIndent	nvim/plugged/vim-ruby/indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
GetExecutable	nvim/plugged/ale/autoload/ale/handlers/sml.vim	/^function! s:GetExecutable(buffer, source) abort$/;"	f
GetFileWinnr	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
GetFiletypeValue	nvim/plugged/ale/autoload/ale/completion.vim	/^function! s:GetFiletypeValue(map, filetype) abort$/;"	f
GetFirstProblems	nvim/plugged/ale/autoload/ale/statusline.vim	/^function! s:GetFirstProblems(buffer) abort$/;"	f
GetHiCmd	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:GetHiCmd(list)$/;"	f
GetJSONLines	nvim/plugged/ale/ale_linters/javascript/flow.vim	/^function! s:GetJSONLines(lines) abort$/;"	f
GetJavascriptIndent	nvim/plugged/vim-javascript/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
GetLinter	nvim/plugged/ale/autoload/ale/assert.vim	/^function! s:GetLinter() abort$/;"	f
GetLinterNames	nvim/plugged/ale/autoload/ale/linter.vim	/^function! s:GetLinterNames(original_filetype) abort$/;"	f
GetLinterVariables	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! s:GetLinterVariables(filetype, exclude_linter_names) abort$/;"	f
GetLookupFromCompileCommandsFile	nvim/plugged/ale/autoload/ale/c.vim	/^function! s:GetLookupFromCompileCommandsFile(compile_commands_file) abort$/;"	f
GetMSL	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:GetMSL(lnum) abort$/;"	f
GetNearbyTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(all, forcecurrent, ...) abort$/;"	f
GetPair	nvim/plugged/typescript-vim/indent/typescript.vim	/^  function s:GetPair(start,end,flags,skip,...)$/;"	f
GetPair	nvim/plugged/typescript-vim/indent/typescript.vim	/^  function s:GetPair(start,end,flags,skip,time,...)$/;"	f
GetPair	nvim/plugged/vim-javascript/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
GetPugIndent	nvim/plugged/vim-pug/indent/pug.vim	/^function! GetPugIndent()$/;"	f
GetRubyIndent	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! GetRubyIndent(...) abort$/;"	f
GetRubyVarType	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
GetSCSSIndent	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^function GetSCSSIndent()$/;"	f
GetScriptType	nvim/plugged/html5.vim/indent/html.vim	/^func! s:GetScriptType(str)$/;"	f
GetSupportedFiletypes	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
GetTagInfo	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
GetTypescriptIndent	nvim/plugged/typescript-vim/indent/typescript.vim	/^function GetTypescriptIndent()$/;"	f
GetVars	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:GetVars()$/;"	f
GetVersion	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! s:GetVersion(executable, version_lines) abort$/;"	f
GetVersion	nvim/plugged/ale/autoload/ale/semver.vim	/^function! s:GetVersion(executable, version_lines) abort$/;"	f
GetVueIndent	nvim/plugged/vim-vue/indent/vue.vim	/^function! GetVueIndent()$/;"	f
GetWorkingDirectory	nvim/plugged/ale/ale_linters/cs/csc.vim	/^function! s:GetWorkingDirectory(buffer) abort$/;"	f
GetWorkingDirectory	nvim/plugged/ale/ale_linters/cs/mcsc.vim	/^function! s:GetWorkingDirectory(buffer) abort$/;"	f
GitGutter	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 1)$/;"	c
GitGutterAll	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterAll call gitgutter#all(1)$/;"	c
GitGutterBufferDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferDisable call gitgutter#buffer_disable()$/;"	c
GitGutterBufferEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferEnable  call gitgutter#buffer_enable()$/;"	c
GitGutterBufferToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferToggle  call gitgutter#buffer_toggle()$/;"	c
GitGutterDebug	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDebug call gitgutter#debug#debug()$/;"	c
GitGutterDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDisable call gitgutter#disable()$/;"	c
GitGutterEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterEnable  call gitgutter#enable()$/;"	c
GitGutterFold	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterFold call gitgutter#fold#toggle()$/;"	c
GitGutterGetHunkSummary	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunkSummary()$/;"	f
GitGutterGetHunks	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunks()$/;"	f
GitGutterLineHighlightsDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsDisable call gitgutter#highlight#line_disable()$/;"	c
GitGutterLineHighlightsEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsEnable  call gitgutter#highlight#line_enable()$/;"	c
GitGutterLineHighlightsToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsToggle  call gitgutter#highlight#line_toggle()$/;"	c
GitGutterLineNrHighlightsDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsDisable call gitgutter#highlight#linenr_disable()$/;"	c
GitGutterLineNrHighlightsEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsEnable  call gitgutter#highlight#linenr_enable()$/;"	c
GitGutterLineNrHighlightsToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsToggle  call gitgutter#highlight#linenr_toggle()$/;"	c
GitGutterNextHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)$/;"	c
GitGutterPrevHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)$/;"	c
GitGutterPreviewHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterPreviewHunk call gitgutter#hunk#preview()$/;"	c
GitGutterQuickFix	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFix call gitgutter#quickfix()$/;"	c
GitGutterSignsDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsDisable call gitgutter#sign#disable()$/;"	c
GitGutterSignsEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsEnable  call gitgutter#sign#enable()$/;"	c
GitGutterSignsToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsToggle  call gitgutter#sign#toggle()$/;"	c
GitGutterStageHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -range=% GitGutterStageHunk call gitgutter#hunk#stage(<line1>,<line2>)$/;"	c
GitGutterToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterToggle  call gitgutter#toggle()$/;"	c
GitGutterUndoHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterUndoHunk    call gitgutter#hunk#undo()$/;"	c
Glob	nvim/plugged/coc.nvim/build/index.js	/^function Glob (pattern, options, cb) {$/;"	F
GlobComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern) abort$/;"	f
GlobSync	nvim/plugged/coc.nvim/build/index.js	/^function GlobSync (pattern, options) {$/;"	F
GlobalChange	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! s:GlobalChange(dict, key, val)$/;"	f
GoToLSPDefinition	nvim/plugged/ale/autoload/ale/definition.vim	/^function! s:GoToLSPDefinition(linter, options, capability) abort$/;"	f
GotoFileWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
GotoNextFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
GotoNextToplevelTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
GotoPrevFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
GrepParseLine	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(prefix, name_only, dir, line) abort$/;"	f
GrepSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
GroupCmd	nvim/plugged/ale/autoload/ale/sign.vim	/^function! s:GroupCmd() abort$/;"	f
GroupLoclistItems	nvim/plugged/ale/autoload/ale/sign.vim	/^function! s:GroupLoclistItems(buffer, loclist) abort$/;"	f
GruvboxHlsHideCursor	nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! GruvboxHlsHideCursor()$/;"	f
GruvboxHlsShowCursor	nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! GruvboxHlsShowCursor()$/;"	f
Gunzip	nvim/plugged/coc.nvim/build/index.js	/^class Gunzip extends Zlib {$/;"	C
GutentagsToggleEnabled	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
Gzip	nvim/plugged/coc.nvim/build/index.js	/^class Gzip extends Zlib {$/;"	C
HL	nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! s:HL(group, fg, ...)$/;"	f
HandleBufDelete	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
HandleBufWrite	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
HandleDiagnosticsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface HandleDiagnosticsSignature {$/;"	i
HandleESLintOutput	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:HandleESLintOutput(buffer, lines, type) abort$/;"	f
HandleExit	nvim/plugged/ale/autoload/ale/engine.vim	/^function! s:HandleExit(job_info, buffer, output, data) abort$/;"	f
HandleExit	nvim/plugged/ale/autoload/ale/fix.vim	/^function! s:HandleExit(job_info, buffer, job_output, data) abort$/;"	f
HandleLSPDiagnostics	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPDiagnostics(conn_id, response) abort$/;"	f
HandleLSPErrorMessage	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPErrorMessage(linter_name, response) abort$/;"	f
HandleLSPResponseToCustomRequests	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPResponseToCustomRequests(conn_id, response) abort$/;"	f
HandleOnlyWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
HandleSyntaxError	nvim/plugged/ale/autoload/ale/handlers/ruby.vim	/^function! s:HandleSyntaxError(buffer, lines) abort$/;"	f
HandleTSServerDiagnostics	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleTSServerDiagnostics(response, error_type) abort$/;"	f
HandleUnixFormat	nvim/plugged/ale/autoload/ale/handlers/unix.vim	/^function! s:HandleUnixFormat(buffer, lines, type) abort$/;"	f
Handler	nvim/plugged/coc.nvim/build/index.js	/^class Handler {$/;"	C
Handler	nvim/plugged/coc.nvim/src/handler/index.ts	/^export default class Handler {$/;"	c
HasOpenFileWindows	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
HasOpt	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
Header	nvim/plugged/coc.nvim/build/index.js	/^class Header {$/;"	C
Helper	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^export class Helper extends Emitter {$/;"	c
HiLink	nvim/plugged/typescript-vim/syntax/typescript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	nvim/plugged/typescript-vim/syntax/typescript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/extras/flow.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/extras/flow.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
Highlight	nvim/plugged/coc.nvim/src/util/highlight.ts	/^export interface Highlight {$/;"	i
HighlightItem	nvim/plugged/coc.nvim/src/model/highligher.ts	/^export interface HighlightItem {$/;"	i
HighlightTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
Highlighter	nvim/plugged/coc.nvim/build/index.js	/^class Highlighter {$/;"	C
Highlighter	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^export default class Highlighter implements Disposable {$/;"	c
Highlighter	nvim/plugged/coc.nvim/src/model/highligher.ts	/^export default class Highlighter {$/;"	c
History	nvim/plugged/coc.nvim/build/index.js	/^class History {$/;"	C
History	nvim/plugged/coc.nvim/src/list/history.ts	/^export default class History {$/;"	c
Hover	nvim/plugged/coc.nvim/build/index.js	/^var Hover;$/;"	V
HoverFeature	nvim/plugged/coc.nvim/build/index.js	/^class HoverFeature extends TextDocumentFeature {$/;"	C
HoverFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class HoverFeature extends TextDocumentFeature<$/;"	c
HoverManager	nvim/plugged/coc.nvim/build/index.js	/^class HoverManager extends manager_1.default {$/;"	C
HoverManager	nvim/plugged/coc.nvim/src/provider/hoverManager.ts	/^export default class HoverManager extends Manager<HoverProvider> implements Disposable {$/;"	c
HoverProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface HoverProvider {$/;"	i
HoverRequest	nvim/plugged/coc.nvim/build/index.js	/^var HoverRequest;$/;"	V
HtmlIndent	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent()$/;"	f
HtmlIndent_CheckUserSettings	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
HtmlIndent_CountBraces	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
HtmlIndent_FindStartTag	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindTagEnd	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
HtmlIndent_FindTagStart	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_IsOpenTag	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
I	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> I <NOP>$/;"	m
IConfigurationData	nvim/plugged/coc.nvim/src/types.ts	/^export interface IConfigurationData {$/;"	i
IConfigurationModel	nvim/plugged/coc.nvim/src/types.ts	/^export interface IConfigurationModel {$/;"	i
IConnection	nvim/plugged/coc.nvim/src/language-client/client.ts	/^interface IConnection {$/;"	i
IFoo	nvim/plugged/vim-jsdoc/test/test.ts	/^interface IFoo {$/;"	i
IList	nvim/plugged/coc.nvim/src/types.ts	/^export interface IList {$/;"	i
IModule	nvim/plugged/coc.nvim/src/util/factory.ts	/^export interface IModule {$/;"	i
INDENTATION_RE	nvim/plugged/ale/test/script/block-padding-checker	/^INDENTATION_RE = re.compile(r'^ *')$/;"	v
INDEX_WHOLE_PROJECT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
INFLATE	nvim/plugged/coc.nvim/build/index.js	/^  INFLATE: 2,$/;"	P
INFLATERAW	nvim/plugged/coc.nvim/build/index.js	/^  INFLATERAW: 6,$/;"	P
INFO	nvim/plugged/coc.nvim/build/index.js	/^  INFO: { value: 20000, colour: 'green' },$/;"	P
INVALID_PATH_CHARS	nvim/plugged/coc.nvim/build/index.js	/^const INVALID_PATH_CHARS = \/[<>:"|?*]\/$/;"	V
INavigator	nvim/plugged/coc.nvim/src/util/platform.ts	/^interface INavigator {$/;"	i
INodeProcess	nvim/plugged/coc.nvim/src/util/platform.ts	/^interface INodeProcess {$/;"	i
IOverrides	nvim/plugged/coc.nvim/src/types.ts	/^export interface IOverrides {$/;"	i
IPCMessageReader	nvim/plugged/coc.nvim/build/index.js	/^class IPCMessageReader extends AbstractMessageReader {$/;"	C
IPCMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^class IPCMessageWriter extends AbstractMessageWriter {$/;"	C
IProcessEnvironment	nvim/plugged/coc.nvim/src/util/platform.ts	/^export interface IProcessEnvironment {$/;"	i
IPv6FiveHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;$/;"	V
IPv6FourHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;$/;"	V
IPv6NoneHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;$/;"	V
IPv6NoneHex2	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;$/;"	V
IPv6NoneHex3	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';$/;"	V
IPv6OneHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;$/;"	V
IPv6SixHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;$/;"	V
IPv6ThreeHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;$/;"	V
IPv6TwoHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;$/;"	V
ISandbox	nvim/plugged/coc.nvim/src/util/factory.ts	/^export interface ISandbox {$/;"	i
IServiceProvider	nvim/plugged/coc.nvim/src/types.ts	/^export interface IServiceProvider {$/;"	i
ISource	nvim/plugged/coc.nvim/src/types.ts	/^export interface ISource {$/;"	i
IWorkspace	nvim/plugged/coc.nvim/src/types.ts	/^export interface IWorkspace {$/;"	i
Ignore	nvim/plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Ignore(item) abort$/;"	f
IgnoreFixers	nvim/plugged/ale/autoload/ale/fix.vim	/^function! s:IgnoreFixers(callback_list, filetype, config) abort$/;"	f
ImplementationFeature	nvim/plugged/coc.nvim/build/index.js	/^class ImplementationFeature extends client_1.TextDocumentFeature {$/;"	C
ImplementationFeature	nvim/plugged/coc.nvim/src/language-client/implementation.ts	/^export class ImplementationFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
ImplementationManager	nvim/plugged/coc.nvim/build/index.js	/^class ImplementationManager extends manager_1.default {$/;"	C
ImplementationManager	nvim/plugged/coc.nvim/src/provider/implementationManager.ts	/^export default class ImplementationManager extends Manager<ImplementationProvider> implements Disposable {$/;"	c
ImplementationMiddleware	nvim/plugged/coc.nvim/src/language-client/implementation.ts	/^export interface ImplementationMiddleware {$/;"	i
ImplementationProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface ImplementationProvider {$/;"	i
ImplementationRequest	nvim/plugged/coc.nvim/build/index.js	/^var ImplementationRequest;$/;"	V
IndentingKeywordInMSL	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IndentingKeywordInMSL(msl_info) abort$/;"	f
Inflate	nvim/plugged/coc.nvim/build/index.js	/^class Inflate extends Zlib {$/;"	C
InflateRaw	nvim/plugged/coc.nvim/build/index.js	/^class InflateRaw extends Zlib {$/;"	C
Info	nvim/plugged/coc.nvim/src/model/extension.ts	/^export interface Info {$/;"	i
Init	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
InitCwds	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:InitCwds()$/;"	f
InitTypes	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
InitWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
InitializationFailedHandler	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface InitializationFailedHandler {$/;"	i
InitializeError	nvim/plugged/coc.nvim/build/index.js	/^var InitializeError;$/;"	V
InitializeRequest	nvim/plugged/coc.nvim/build/index.js	/^var InitializeRequest;$/;"	V
InitializedNotification	nvim/plugged/coc.nvim/build/index.js	/^var InitializedNotification;$/;"	V
InnerClass	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        class InnerClass$/;"	c	class:OuterClass
InsertTextFormat	nvim/plugged/coc.nvim/build/index.js	/^var InsertTextFormat;$/;"	V
InsideTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
InstallOptions	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:InstallOptions(...)abort$/;"	f
Int64	nvim/plugged/coc.nvim/build/index.js	/^    function Int64(buffer, offset, value, raddix) {$/;"	F
Int64BE	nvim/plugged/coc.nvim/build/index.js	/^var Uint64BE, Int64BE, Uint64LE, Int64LE;$/;"	V
InteractiveList	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^class InteractiveList extends BasicList {$/;"	c
InterfaceBar	nvim/plugged/vim-jsdoc/test/test.ts	/^interface InterfaceBar extends IFoo {$/;"	i
Is	nvim/plugged/coc.nvim/build/index.js	/^var Is;$/;"	V
IsAssignment	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsAssignment(str, pos) abort$/;"	f
IsBlock	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:IsBlock()$/;"	f
IsBlock	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:IsBlock()$/;"	f
IsBoolean	nvim/plugged/ale/autoload/ale/linter.vim	/^function! s:IsBoolean(value) abort$/;"	f
IsCallback	nvim/plugged/ale/autoload/ale/linter.vim	/^function! s:IsCallback(value) abort$/;"	f
IsConflicted	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
IsContOne	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:IsContOne(cont)$/;"	f
IsGenericFixer	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! s:IsGenericFixer(suggested_filetypes) abort$/;"	f
IsHeaderFile	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:IsHeaderFile(filename) abort$/;"	f
IsInClassDef	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsInComment	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsInComment(pos)$/;"	f
IsInRubyGroup	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInRubyGroup(groups, lnum, col) abort$/;"	f
IsInString	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInString(lnum, col) abort$/;"	f
IsInStringDelimiter	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringDelimiter(lnum, col) abort$/;"	f
IsInStringOrComment	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringOrComment(lnum, col) abort$/;"	f
IsInStringOrDocumentation	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringOrDocumentation(lnum, col) abort$/;"	f
IsPosInClassDef	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
IsSbt	nvim/plugged/ale/ale_linters/scala/fsc.vim	/^function! s:IsSbt(buffer) abort$/;"	f
IsSbt	nvim/plugged/ale/ale_linters/scala/scalac.vim	/^function! s:IsSbt(buffer) abort$/;"	f
IsSwitch	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:IsSwitch()$/;"	f
IsValidFile	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
JsDoc	nvim/plugged/vim-jsdoc/ftplugin/javascript/jsdoc.vim	/^command! -nargs=0 -buffer -complete=customlist,jsdoc#insert JsDoc call jsdoc#insert()$/;"	c
JsDoc	nvim/plugged/vim-jsdoc/ftplugin/typescript/jsdoc.vim	/^command! -nargs=0 -buffer -complete=customlist,jsdoc#insert JsDoc call jsdoc#insert()$/;"	c
JumpToTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar) abort$/;"	f
K	nvim/init.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
K	nvim/plugged/coc.nvim/build/index.js	/^    K: 1024,$/;"	P
KeyMap.Add	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
KeyMap.All	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Compare	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
KeyMap.Create	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.FindFor	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
KeyMap.Invoke	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
KeyMap.Remove	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
KeyMap.bind	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
KeyMap.invoke	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
KeymapOption	nvim/plugged/coc.nvim/src/types.ts	/^export interface KeymapOption {$/;"	i
Keywordprg	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
KillHandler	nvim/plugged/ale/autoload/ale/job.vim	/^function! s:KillHandler(timer) abort$/;"	f
LISTENERS	nvim/plugged/coc.nvim/build/index.js	/^  var LISTENERS = "listeners";$/;"	V
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
LOOP	nvim/plugged/coc.nvim/build/index.js	/^  function LOOP() {$/;"	F
LanguageClient	nvim/plugged/coc.nvim/build/index.js	/^class LanguageClient extends client_1.BaseLanguageClient {$/;"	C
LanguageClient	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export class LanguageClient extends BaseLanguageClient {$/;"	c
LanguageClientOptions	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface LanguageClientOptions {$/;"	i
LanguageGetter	nvim/plugged/ale/autoload/ale/linter.vim	/^function! s:LanguageGetter(buffer) dict abort$/;"	f
LanguageServerConfig	nvim/plugged/coc.nvim/src/types.ts	/^export interface LanguageServerConfig {$/;"	i
Languages	nvim/plugged/coc.nvim/build/index.js	/^class Languages {$/;"	C
Languages	nvim/plugged/coc.nvim/src/languages.ts	/^class Languages {$/;"	c
LastChangeType	nvim/plugged/coc.nvim/src/model/document.ts	/^export type LastChangeType = 'insert' | 'change' | 'delete'$/;"	t
LastInsert	nvim/plugged/coc.nvim/src/completion/index.ts	/^export interface LastInsert {$/;"	i
Lazy	nvim/plugged/coc.nvim/src/util/lazy.ts	/^export class Lazy<T> {$/;"	c
LeadingOperator	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:LeadingOperator(cline_info) abort$/;"	f
Level	nvim/plugged/coc.nvim/build/index.js	/^class Level {$/;"	C
LineChange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^export interface LineChange {$/;"	i
LinesError	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
LinkedMap	nvim/plugged/coc.nvim/build/index.js	/^class LinkedMap {$/;"	C
LinksList	nvim/plugged/coc.nvim/build/index.js	/^class LinksList extends basic_1.default {$/;"	C
LinksList	nvim/plugged/coc.nvim/src/list/source/links.ts	/^export default class LinksList extends BasicList {$/;"	c
LinksList	nvim/plugged/coc.nvim/src/list/source/lists.ts	/^export default class LinksList extends BasicList {$/;"	c
Lint	nvim/plugged/ale/autoload/ale.vim	/^function! s:Lint(buffer, should_lint_file, timer_id) abort$/;"	f
ListAction	nvim/plugged/coc.nvim/src/types.ts	/^export interface ListAction {$/;"	i
ListArgument	nvim/plugged/coc.nvim/src/types.ts	/^export interface ListArgument {$/;"	i
ListConfiguration	nvim/plugged/coc.nvim/build/index.js	/^class ListConfiguration {$/;"	C
ListConfiguration	nvim/plugged/coc.nvim/src/list/configuration.ts	/^export default class ListConfiguration {$/;"	c
ListContext	nvim/plugged/coc.nvim/src/types.ts	/^export interface ListContext {$/;"	i
ListHighlights	nvim/plugged/coc.nvim/src/types.ts	/^export interface ListHighlights {$/;"	i
ListItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface ListItem {$/;"	i
ListItemsEvent	nvim/plugged/coc.nvim/src/types.ts	/^export interface ListItemsEvent {$/;"	i
ListManager	nvim/plugged/coc.nvim/build/index.js	/^class ListManager {$/;"	C
ListManager	nvim/plugged/coc.nvim/src/list/manager.ts	/^export class ListManager implements Disposable {$/;"	c
ListMode	nvim/plugged/coc.nvim/src/types.ts	/^export type ListMode = 'normal' | 'insert'$/;"	t
ListOptions	nvim/plugged/coc.nvim/src/types.ts	/^export interface ListOptions {$/;"	i
ListTask	nvim/plugged/coc.nvim/src/types.ts	/^export interface ListTask {$/;"	i
ListUI	nvim/plugged/coc.nvim/build/index.js	/^class ListUI {$/;"	C
ListUI	nvim/plugged/coc.nvim/src/list/ui.ts	/^export default class ListUI {$/;"	c
LoadArgCount	nvim/plugged/ale/autoload/ale/util.vim	/^function! s:LoadArgCount(function) abort$/;"	f
LoadRepos	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^defmodule LoadRepos do$/;"	m
LoadUserTypeDefs	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
Location	nvim/plugged/coc.nvim/build/index.js	/^var Location;$/;"	V
LocationLink	nvim/plugged/coc.nvim/build/index.js	/^var LocationLink;$/;"	V
LocationList	nvim/plugged/coc.nvim/build/index.js	/^class LocationList extends basic_1.default {$/;"	C
LocationList	nvim/plugged/coc.nvim/src/list/source/location.ts	/^export default class LocationList extends BasicList {$/;"	c
LocationListItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface LocationListItem {$/;"	i
LocationWithLine	nvim/plugged/coc.nvim/src/types.ts	/^export interface LocationWithLine {$/;"	i
Log	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Log(msg)$/;"	f
LogFlushQueue	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state) abort$/;"	f
LogMessageNotification	nvim/plugged/coc.nvim/build/index.js	/^var LogMessageNotification;$/;"	V
LogParse	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, line) abort$/;"	f
LogTraceNotification	nvim/plugged/coc.nvim/build/index.js	/^var LogTraceNotification;$/;"	V
Logger	nvim/plugged/coc.nvim/build/index.js	/^class Logger {$/;"	C
LoggingEvent	nvim/plugged/coc.nvim/build/index.js	/^class LoggingEvent {$/;"	C
LookingAt	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:LookingAt()$/;"	f
LoopParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
M	nvim/plugged/coc.nvim/build/index.js	/^    let M = new Array(n);$/;"	V
MARK	nvim/plugged/coc.nvim/build/index.js	/^  MARK: { value: 9007199254740992, colour: 'grey' }, \/\/ 2^53$/;"	P
MASK31	nvim/plugged/coc.nvim/build/index.js	/^var MASK31 =  0x7fffffff, VAL31 = 0x80000000;$/;"	V
MASK32	nvim/plugged/coc.nvim/build/index.js	/^var MASK32 =  0xffffffff, VAL32 = 0x100000000;$/;"	V
MAXBUFLEN	nvim/plugged/coc.nvim/build/index.js	/^var MAXBUFLEN = 8192;$/;"	V
MAXNUM	nvim/plugged/coc.nvim/build/index.js	/^const MAXNUM = {$/;"	O
MAX_BUFFER_SIZE	nvim/plugged/coc.nvim/build/index.js	/^var MAX_BUFFER_SIZE = 65536;$/;"	V
MAX_INT16	nvim/plugged/coc.nvim/build/index.js	/^var MAX_INT16 = 32767;$/;"	V
MAX_INT32	nvim/plugged/coc.nvim/build/index.js	/^var MAX_INT32 = 2147483647;$/;"	V
MAX_INT8	nvim/plugged/coc.nvim/build/index.js	/^var MAX_INT8 = 127;$/;"	V
MAX_LENGTH	nvim/plugged/coc.nvim/build/index.js	/^var MAX_LENGTH = 256$/;"	V
MAX_LOG_BACKUPS	nvim/plugged/coc.nvim/build/index.js	/^const MAX_LOG_BACKUPS = 10;$/;"	V
MAX_LOG_SIZE	nvim/plugged/coc.nvim/build/index.js	/^const MAX_LOG_SIZE = 1024 * 1024;$/;"	V
MAX_SAFE_COMPONENT_LENGTH	nvim/plugged/coc.nvim/build/index.js	/^var MAX_SAFE_COMPONENT_LENGTH = 16$/;"	V
MIDDLE_BLOCKS	nvim/plugged/ale/test/script/block-padding-checker	/^MIDDLE_BLOCKS = set(['else', 'elseif', 'catch', 'finally'])$/;"	v
MIN_BUFFER_SIZE	nvim/plugged/coc.nvim/build/index.js	/^var MIN_BUFFER_SIZE = 2048;$/;"	V
MKFILES	nvim/plugged/html5.vim/Makefile	/^MKFILES=Makefile `ls -1 | grep '.mk$$'`$/;"	m
Manager	nvim/plugged/coc.nvim/build/index.js	/^class Manager {$/;"	C
Manager	nvim/plugged/coc.nvim/src/provider/manager.ts	/^export default class Manager<T> {$/;"	c
Map	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
Map	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
MapKeys	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
MapMode	nvim/plugged/coc.nvim/src/types.ts	/^export type MapMode = 'n' | 'i' | 'v' | 'x' | 's' | 'o'$/;"	t
MapMotion	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
Mappings	nvim/plugged/coc.nvim/build/index.js	/^class Mappings {$/;"	C
Mappings	nvim/plugged/coc.nvim/src/list/mappings.ts	/^export default class Mappings {$/;"	c
MarkedString	nvim/plugged/coc.nvim/build/index.js	/^var MarkedString;$/;"	V
Marker	nvim/plugged/coc.nvim/build/index.js	/^class Marker {$/;"	C
Marker	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export abstract class Marker {$/;"	c
MarkupContent	nvim/plugged/coc.nvim/build/index.js	/^var MarkupContent;$/;"	V
MarkupKind	nvim/plugged/coc.nvim/build/index.js	/^var MarkupKind;$/;"	V
Match	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:Match(lnum, regex) abort$/;"	f
MatchResult	nvim/plugged/coc.nvim/src/util/score.ts	/^export interface MatchResult {$/;"	i
Matcher	nvim/plugged/coc.nvim/src/types.ts	/^export type Matcher = 'strict' | 'fuzzy' | 'regex'$/;"	t
Memento	nvim/plugged/coc.nvim/src/types.ts	/^export interface Memento {$/;"	i
Memos	nvim/plugged/coc.nvim/build/index.js	/^class Memos {$/;"	C
Memos	nvim/plugged/coc.nvim/src/model/memos.ts	/^export default class Memos {$/;"	c
MenuController.New	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.isMinimal	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
MenuController.showMenu	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
MergeHead	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeHead(...) abort$/;"	f
MergeRebase	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeRebase(cmd, bang, mods, args, ...) abort$/;"	f
MergeSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
MessageBuffer	nvim/plugged/coc.nvim/build/index.js	/^class MessageBuffer {$/;"	C
MessageCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MessageCfile(...) abort$/;"	f
MessageLevel	nvim/plugged/coc.nvim/build/index.js	/^var MessageLevel;$/;"	V
MessageLevel	nvim/plugged/coc.nvim/src/types.ts	/^export enum MessageLevel {$/;"	e
MessageReader	nvim/plugged/coc.nvim/build/index.js	/^var MessageReader;$/;"	V
MessageTransports	nvim/plugged/coc.nvim/build/index.js	/^var MessageTransports;$/;"	V
MessageTransports	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface MessageTransports {$/;"	i
MessageType	nvim/plugged/coc.nvim/build/index.js	/^var MessageType;$/;"	V
MessageWriter	nvim/plugged/coc.nvim/build/index.js	/^var MessageWriter;$/;"	V
Middleware	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export type Middleware = _Middleware &$/;"	t
Minimatch	nvim/plugged/coc.nvim/build/index.js	/^  m.Minimatch = function Minimatch (pattern, options) {$/;"	M
Minimatch	nvim/plugged/coc.nvim/build/index.js	/^function Minimatch (pattern, options) {$/;"	F
MinimizeMaxFoldLevel	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
MixProject	nvim/plugged/ale/test/command_callback/elixir_paths/mix_project/mix.exs	/^defmodule Test.MixProject do$/;"	m
ModifierFlags	nvim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! s:ModifierFlags()$/;"	f
Mods	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
ModuleResolve	nvim/plugged/coc.nvim/src/types.ts	/^export type ModuleResolve = () => Promise<string>$/;"	t
MouseEvent	nvim/plugged/coc.nvim/src/list/ui.ts	/^export type MouseEvent = 'mouseDown' | 'mouseDrag' | 'mouseUp' | 'doubleClick'$/;"	t
MousePosition	nvim/plugged/coc.nvim/src/list/ui.ts	/^export interface MousePosition {$/;"	i
Move	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
MoveEvents	nvim/plugged/coc.nvim/src/events.ts	/^export type MoveEvents = 'CursorMoved' | 'CursorMovedI'$/;"	t
Mru	nvim/plugged/coc.nvim/build/index.js	/^class Mru {$/;"	C
Mru	nvim/plugged/coc.nvim/src/model/mru.ts	/^export default class Mru {$/;"	c
MsgTypes	nvim/plugged/coc.nvim/src/types.ts	/^export type MsgTypes = 'error' | 'warning' | 'more'$/;"	t
MultilineStringOrLineComment	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:MultilineStringOrLineComment(cline_info) abort$/;"	f
MultipleCursorsFind	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^command! -nargs=1 -range=% MultipleCursorsFind$/;"	c
MutableToken	nvim/plugged/coc.nvim/build/index.js	/^class MutableToken {$/;"	C
Mutex	nvim/plugged/coc.nvim/build/index.js	/^class Mutex extends Semaphore {$/;"	C
MyAppend1	nvim/plugged/vim-airline/t/airline.vim	/^function! MyAppend1(...)$/;"	f
MyAppend2	nvim/plugged/vim-airline/t/airline.vim	/^function! MyAppend2(...)$/;"	f
MyFuncref	nvim/plugged/vim-airline/t/airline.vim	/^function! MyFuncref(...)$/;"	f
MyIgnoreFuncref	nvim/plugged/vim-airline/t/airline.vim	/^function! MyIgnoreFuncref(...)$/;"	f
MyTest	nvim/plugged/vim-elixir/spec/syntax/exunit_spec.rb	/^    module MyTest do$/;"	m
N	nvim/plugged/coc.nvim/build/index.js	/^  var N;$/;"	V
NAME	nvim/plugged/html5.vim/Makefile	/^NAME=`basename \\`pwd\\``$/;"	m
NAME_SPACE	nvim/plugged/coc.nvim/build/index.js	/^let NAME_SPACE = 1080;$/;"	V
NERDTree	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree.AddPathFilter	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
NERDTree.Close	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
NERDTree.CloseIfQuitOnOpen	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CloseIfQuitOnOpen()$/;"	f
NERDTree.CursorToBookmarkTable	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
NERDTree.CursorToTreeWin	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin()$/;"	f
NERDTree.ExistsForBuf	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
NERDTree.ExistsForTab	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
NERDTree.ForCurrentBuf	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
NERDTree.ForCurrentTab	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
NERDTree.GetWinNum	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
NERDTree.IsOpen	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
NERDTree.MustBeOpen	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
NERDTree.New	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
NERDTree.PathFilters	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
NERDTree.changeRoot	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
NERDTree.getRoot	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
NERDTree.isTabTree	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
NERDTree.isWinTree	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
NERDTree.previousBuf	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
NERDTree.render	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
NERDTree.setPreviousBuf	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
NERDTreeAddKeyMap	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeCopyNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDeleteNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeDirArrows	nvim/init.vim	/^let NERDTreeDirArrows = 1$/;"	v
NERDTreeExecFile	nvim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	nvim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeFocus	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeHijackNetrw	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMinimalUI	nvim/init.vim	/^let NERDTreeMinimalUI = 1$/;"	v
NERDTreeMoveNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeShowHidden	nvim/init.vim	/^let NERDTreeShowHidden=1$/;"	v
NERDTreeToggleVCS	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeVCS	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
NERDTreeWinSize	nvim/init.vim	/^let NERDTreeWinSize=30$/;"	v
NODE_VERSION_MAJOR_WITH_BIGINT	nvim/plugged/coc.nvim/build/index.js	/^const NODE_VERSION_MAJOR_WITH_BIGINT = 10$/;"	V
NODE_VERSION_MINOR_WITH_BIGINT	nvim/plugged/coc.nvim/build/index.js	/^const NODE_VERSION_MINOR_WITH_BIGINT = 5$/;"	V
NODE_VERSION_PATCH_WITH_BIGINT	nvim/plugged/coc.nvim/build/index.js	/^const NODE_VERSION_PATCH_WITH_BIGINT = 0$/;"	V
NULLS	nvim/plugged/coc.nvim/build/index.js	/^const NULLS = new Array(156).join('\\0')$/;"	V
NVM_DIR	Makefile	/^NVM_DIR := $(HOME)\/.nvm$/;"	m
Name	nvim/plugged/coc.nvim/build/index.js	/^                    functionName = `${label} ${functionName}`;$/;"	F
Name	nvim/plugged/coc.nvim/build/index.js	/^                functionName = sym.text;$/;"	F
Nat	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Nat(int)$/;"	f
NavigateUp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
NeoVimCallback	nvim/plugged/ale/autoload/ale/job.vim	/^function! s:NeoVimCallback(job, data, event) abort$/;"	f
NeoVimOutputCallback	nvim/plugged/ale/autoload/ale/socket.vim	/^function! s:NeoVimOutputCallback(channel_id, data, event) abort$/;"	f
Neovim	nvim/plugged/coc.nvim/build/index.js	/^class Neovim extends Base_1.BaseApi {$/;"	C
NeovimClient	nvim/plugged/coc.nvim/build/index.js	/^class NeovimClient extends Neovim_1.Neovim {$/;"	C
NextExpandedHunk	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
NextFile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
NextHunk	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
NextItem	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
NextSection	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
NextSectionEnd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
NextSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface NextSignature<P, R> {$/;"	i
Node	nvim/plugged/coc.nvim/build/index.js	/^function Node (value, prev, next, list) {$/;"	F
NodeModule	nvim/plugged/coc.nvim/build/index.js	/^var NodeModule;$/;"	V
NodeModule	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export interface NodeModule {$/;"	i
NodeModule	nvim/plugged/coc.nvim/src/language-client/index.ts	/^namespace NodeModule {$/;"	c
None	nvim/plugged/coc.nvim/build/index.js	/^    Event.None = function () { return _disposable; };$/;"	M
NotEnoughBuffers	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:NotEnoughBuffers()$/;"	f
NotificationType	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType extends AbstractMessageType {$/;"	C
NotificationType0	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType0 extends AbstractMessageType {$/;"	C
NotificationType1	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType1 extends AbstractMessageType {$/;"	C
NotificationType2	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType2 extends AbstractMessageType {$/;"	C
NotificationType3	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType3 extends AbstractMessageType {$/;"	C
NotificationType4	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType4 extends AbstractMessageType {$/;"	C
NotificationType5	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType5 extends AbstractMessageType {$/;"	C
NotificationType6	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType6 extends AbstractMessageType {$/;"	C
NotificationType7	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType7 extends AbstractMessageType {$/;"	C
NotificationType8	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType8 extends AbstractMessageType {$/;"	C
NotificationType9	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType9 extends AbstractMessageType {$/;"	C
Notifier.AddListener	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
Notifier.GetListenersForEvent	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
Notifier.GetListenersMap	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
Notifier.NotifyListeners	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
NullError	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NullError(...) abort$/;"	f
NvimTransport	nvim/plugged/coc.nvim/build/index.js	/^class NvimTransport extends base_1.default {$/;"	C
O	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> O <NOP>$/;"	m
O	nvim/plugged/coc.nvim/build/index.js	/^formatters.O = function (v) {$/;"	M
O	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent> <buffer> O :<C-U>call vimwiki#lst#kbd_O()<CR>$/;"	m
OFF	nvim/plugged/coc.nvim/build/index.js	/^  OFF: { value: Number.MAX_VALUE, colour: 'grey' }$/;"	P
OPERATOR_END_RE	nvim/plugged/ale/test/script/block-padding-checker	/^OPERATOR_END_RE = re.compile(r'(&&|\\|\\||\\+|-|\\*\\| \/)$')$/;"	v
OR	nvim/init.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
OS	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const OS = _isMacintosh$/;"	v
OnReadLine	nvim/plugged/coc.nvim/src/util/fs.ts	/^export type OnReadLine = (line: string) => void$/;"	t
OnReady	nvim/plugged/ale/autoload/ale/completion.vim	/^function! s:OnReady(linter, lsp_details) abort$/;"	f
OnReady	nvim/plugged/ale/autoload/ale/definition.vim	/^function! s:OnReady(line, column, options, capability, linter, lsp_details) abort$/;"	f
OnReady	nvim/plugged/ale/autoload/ale/hover.vim	/^function! s:OnReady(line, column, opt, linter, lsp_details) abort$/;"	f
OnReady	nvim/plugged/ale/autoload/ale/organize_imports.vim	/^function! s:OnReady(linter, lsp_details) abort$/;"	f
OnReady	nvim/plugged/ale/autoload/ale/references.vim	/^function! s:OnReady(line, column, options, linter, lsp_details) abort$/;"	f
OnReady	nvim/plugged/ale/autoload/ale/rename.vim	/^function! s:OnReady(line, column, old_name, new_name, linter, lsp_details) abort$/;"	f
OnReady	nvim/plugged/ale/autoload/ale/symbol.vim	/^function! s:OnReady(query, options, linter, lsp_details) abort$/;"	f
OnReady	nvim/plugged/coc.nvim/build/index.js	/^class OnReady {$/;"	C
OnReady	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class OnReady {$/;"	c
OnReadyForCustomRequests	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:OnReadyForCustomRequests(args, linter, lsp_details) abort$/;"	f
OnTypeFormatManager	nvim/plugged/coc.nvim/build/index.js	/^class OnTypeFormatManager {$/;"	C
OnTypeFormatManager	nvim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^export default class OnTypeFormatManager implements Disposable {$/;"	c
OnTypeFormattingEditProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface OnTypeFormattingEditProvider {$/;"	i
OneScope	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:OneScope(lnum)$/;"	f
OneScope	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:OneScope()$/;"	f
Open	nvim/plugged/ale/autoload/ale/preview.vim	/^function! s:Open(open_in_tab) abort$/;"	f
OpenConfig	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:OpenConfig()$/;"	f
OpenExec	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenExec(cmd, mods, args, ...) abort$/;"	f
OpenFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
OpenLocalConfig	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:OpenLocalConfig()$/;"	f
OpenParents	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
OpenParse	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenParse(args, wants_cmd) abort$/;"	f
OpenWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
Opener.New	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
Opener._bufInWindows	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
Opener._checkToCloseTree	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
Opener._firstUsableWindow	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
Opener._gotoTargetWin	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
Opener._isWindowUsable	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
Opener._newSplit	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
Opener._newVSplit	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
Opener._openDirectory	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
Opener._openFile	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
Opener._previousWindow	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
Opener._restoreCursorPos	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
Opener._reuseWindow	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
Opener._saveCursorPos	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
Opener.open	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
OptionList	nvim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^class OptionList extends BasicList {$/;"	c
OptionValue	nvim/plugged/coc.nvim/src/events.ts	/^export type OptionValue = string | number | boolean$/;"	t
OrganizeImports	nvim/plugged/ale/autoload/ale/organize_imports.vim	/^function! s:OrganizeImports(linter) abort$/;"	f
OuterClass	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^      class OuterClass$/;"	c
Outline	nvim/plugged/coc.nvim/build/index.js	/^class Outline extends location_1.default {$/;"	C
Outline	nvim/plugged/coc.nvim/src/list/source/outline.ts	/^export default class Outline extends LocationList {$/;"	c
OutputChannel	nvim/plugged/coc.nvim/src/types.ts	/^export interface OutputChannel {$/;"	i
OutputList	nvim/plugged/coc.nvim/build/index.js	/^class OutputList extends basic_1.default {$/;"	C
OutputList	nvim/plugged/coc.nvim/src/list/source/output.ts	/^export default class OutputList extends BasicList {$/;"	c
Owner	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
PAUSE_BEFORE_EXIT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PWD	nvim/plugged/html5.vim/Makefile	/^PWD=`pwd`$/;"	m
PackJob	nvim/plugged/coc.nvim/build/index.js	/^class PackJob {$/;"	C
PackSync	nvim/plugged/coc.nvim/build/index.js	/^class PackSync extends Pack {$/;"	C
ParameterInformation	nvim/plugged/coc.nvim/build/index.js	/^var ParameterInformation;$/;"	V
ParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseCino	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:ParseCino(f)$/;"	f
ParseInlinedFunctionProblems	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:ParseInlinedFunctionProblems(buffer, lines) abort$/;"	f
ParseOptions	nvim/plugged/coc.nvim/build/index.js	/^var ParseOptions;$/;"	V
ParseProblemsInHeaders	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:ParseProblemsInHeaders(buffer, lines) abort$/;"	f
ParseTagline	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
PatchSearchExpr	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
Path.AbsolutePathFor	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
Path.CopyingSupported	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
Path.Resolve	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
Path.Slash	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._escChars	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
Path._ignorePatternMatches	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
Path._splitChunks	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
Path._str	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
Path.addDelimiter	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
Path.bookmarkNames	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
Path.changeToDir	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.createParentDirectories	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
Path.delete	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
Path.edit	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
Path.equals	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortKey	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
Path.getSortOrderIndex	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
Path.isAncestor	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(path)$/;"	f
Path.isHiddenUnder	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
Path.isUnder	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.isUnixHiddenFile	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
Path.isUnixHiddenPath	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
Path.readInfoFromDisk	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
Path.refreshFlags	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
Path.rename	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
Path.tabnr	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
PathInfo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
PathOption	nvim/plugged/coc.nvim/src/source/file.ts	/^interface PathOption {$/;"	i
PatternType	nvim/plugged/coc.nvim/build/index.js	/^var PatternType;$/;"	V
PatternType	nvim/plugged/coc.nvim/src/types.ts	/^export enum PatternType {$/;"	e
Pax	nvim/plugged/coc.nvim/build/index.js	/^class Pax {$/;"	C
Placeholder	nvim/plugged/coc.nvim/build/index.js	/^class Placeholder extends TransformableMarker {$/;"	C
Placeholder	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Placeholder extends TransformableMarker {$/;"	c
Platform	nvim/plugged/coc.nvim/build/index.js	/^var Platform;$/;"	V
Platform	nvim/plugged/coc.nvim/src/util/platform.ts	/^export enum Platform {$/;"	e
Plugin	nvim/plugged/coc.nvim/build/index.js	/^class Plugin extends events_1.EventEmitter {$/;"	C
Plugin	nvim/plugged/coc.nvim/src/plugin.ts	/^export default class Plugin extends EventEmitter {$/;"	c
Popup	nvim/plugged/coc.nvim/build/index.js	/^class Popup {$/;"	C
Popup	nvim/plugged/coc.nvim/src/model/popup.ts	/^export class Popup {$/;"	c
PopupChangeEvent	nvim/plugged/coc.nvim/src/types.ts	/^export interface PopupChangeEvent {$/;"	i
PopupOptions	nvim/plugged/coc.nvim/src/types.ts	/^export interface PopupOptions {$/;"	i
PopupProps	nvim/plugged/coc.nvim/src/types.ts	/^export interface PopupProps {$/;"	i
Position	nvim/plugged/coc.nvim/build/index.js	/^var Position;$/;"	V
Preferences	nvim/plugged/coc.nvim/src/handler/index.ts	/^interface Preferences {$/;"	i
PreiewOptions	nvim/plugged/coc.nvim/src/types.ts	/^export interface PreiewOptions {$/;"	i
PreparePathArgs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal) abort$/;"	f
PrepareRenameRequest	nvim/plugged/coc.nvim/build/index.js	/^var PrepareRenameRequest;$/;"	V
PrepareRenameSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface PrepareRenameSignature {$/;"	i
PrepareWrappedCommand	nvim/plugged/ale/autoload/ale/job.vim	/^function! s:PrepareWrappedCommand(original_wrapper, command) abort$/;"	f
PrevCodeLine	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:PrevCodeLine(lnum)$/;"	f
PrevNonBlankNonString	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:PrevNonBlankNonString(lnum) abort$/;"	f
PreviousFile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
PreviousHunk	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
PreviousItem	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
PreviousNotMSL	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:PreviousNotMSL(msl_info) abort$/;"	f
PreviousSection	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
PreviousSectionEnd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
PreviousToken	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:PreviousToken(...)$/;"	f
Primitives	nvim/plugged/coc.nvim/build/index.js	/^  function Primitives(key, value) {$/;"	F
PrintHelp	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
PrintKinds	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
PrintTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
Printer	nvim/plugged/vim-elixir/large_file.ex	/^      defmodule Printer do$/;"	m
PriorityCmd	nvim/plugged/ale/autoload/ale/sign.vim	/^function! s:PriorityCmd() abort$/;"	f
ProcessDeferredCommands	nvim/plugged/ale/autoload/ale/assert.vim	/^function! s:ProcessDeferredCommands(initial_result) abort$/;"	f
ProcessFile	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
ProcessTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
ProgressCancelNotification	nvim/plugged/coc.nvim/build/index.js	/^    let ProgressCancelNotification;$/;"	V
ProgressCancelNotification	nvim/plugged/coc.nvim/build/index.js	/^var ProgressCancelNotification;$/;"	V
ProgressDoneNotification	nvim/plugged/coc.nvim/build/index.js	/^    let ProgressDoneNotification;$/;"	V
ProgressDoneNotification	nvim/plugged/coc.nvim/build/index.js	/^var ProgressDoneNotification;$/;"	V
ProgressReportNotification	nvim/plugged/coc.nvim/build/index.js	/^    let ProgressReportNotification;$/;"	V
ProgressReportNotification	nvim/plugged/coc.nvim/build/index.js	/^var ProgressReportNotification;$/;"	V
ProgressStartNotification	nvim/plugged/coc.nvim/build/index.js	/^    let ProgressStartNotification;$/;"	V
ProgressStartNotification	nvim/plugged/coc.nvim/build/index.js	/^var ProgressStartNotification;$/;"	V
ProjectionistDetect	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
PromiseCallback	nvim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^export type PromiseCallback = (event: TextDocumentWillSaveEvent) => Promise<void>$/;"	t
Prompt	nvim/plugged/coc.nvim/build/index.js	/^class Prompt {$/;"	C
Prompt	nvim/plugged/coc.nvim/src/list/prompt.ts	/^export default class Prompt {$/;"	c
PropertyScheme	nvim/plugged/coc.nvim/src/extensions.ts	/^export interface PropertyScheme {$/;"	i
Proposed	nvim/plugged/coc.nvim/build/index.js	/^var Proposed;$/;"	V
ProposedFeatures	nvim/plugged/coc.nvim/build/index.js	/^var ProposedFeatures;$/;"	V
ProvideCodeActionsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideCodeActionsSignature {$/;"	i
ProvideCodeLensesSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideCodeLensesSignature {$/;"	i
ProvideColorPresentationSignature	nvim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^export type ProvideColorPresentationSignature = ($/;"	t
ProvideCompletionItemsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideCompletionItemsSignature {$/;"	i
ProvideDeclarationSignature	nvim/plugged/coc.nvim/src/language-client/declaration.ts	/^export interface ProvideDeclarationSignature {$/;"	i
ProvideDefinitionSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideDefinitionSignature {$/;"	i
ProvideDocumentColorsSignature	nvim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^export type ProvideDocumentColorsSignature = (document: TextDocument, token: CancellationToken) => ProviderResult<ColorInformation[]>$/;"	t
ProvideDocumentFormattingEditsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideDocumentFormattingEditsSignature {$/;"	i
ProvideDocumentHighlightsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideDocumentHighlightsSignature {$/;"	i
ProvideDocumentLinksSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideDocumentLinksSignature {$/;"	i
ProvideDocumentRangeFormattingEditsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideDocumentRangeFormattingEditsSignature {$/;"	i
ProvideDocumentSymbolsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideDocumentSymbolsSignature {$/;"	i
ProvideFoldingRangeSignature	nvim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^export type ProvideFoldingRangeSignature = ($/;"	t
ProvideHoverSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideHoverSignature {$/;"	i
ProvideImplementationSignature	nvim/plugged/coc.nvim/src/language-client/implementation.ts	/^export interface ProvideImplementationSignature {$/;"	i
ProvideOnTypeFormattingEditsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideOnTypeFormattingEditsSignature {$/;"	i
ProvideReferencesSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideReferencesSignature {$/;"	i
ProvideRenameEditsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideRenameEditsSignature {$/;"	i
ProvideSelectionRangeSignature	nvim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^export interface ProvideSelectionRangeSignature {$/;"	i
ProvideSignatureHelpSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideSignatureHelpSignature {$/;"	i
ProvideTypeDefinitionSignature	nvim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^export interface ProvideTypeDefinitionSignature {$/;"	i
ProvideWorkspaceSymbolsSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ProvideWorkspaceSymbolsSignature {$/;"	i
ProviderItem	nvim/plugged/coc.nvim/src/provider/manager.ts	/^export interface ProviderItem<T> {$/;"	i
ProviderItem	nvim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^export interface ProviderItem {$/;"	i
ProviderResult	nvim/plugged/coc.nvim/src/provider/index.ts	/^export type ProviderResult<T> =$/;"	t
PublishDiagnosticsNotification	nvim/plugged/coc.nvim/build/index.js	/^var PublishDiagnosticsNotification;$/;"	V
PullSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PullSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
PumBounding	nvim/plugged/coc.nvim/src/types.ts	/^export interface PumBounding {$/;"	i
Pure	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Pure(f,...)$/;"	f
PushSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PushSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
QueryLog	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec) abort$/;"	f
QueueBroadcaster	nvim/plugged/vim-elixir/large_file.ex	/^      defmodule QueueBroadcaster do$/;"	m
QuickfixCreate	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
QuickfixGet	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
QuickfixItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface QuickfixItem {$/;"	i
QuickfixSet	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
QuickfixStream	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, title, cmd, first, callback, ...) abort$/;"	f
R	nvim/plugged/coc.nvim/build/index.js	/^var R = 0$/;"	V
README_FILES	nvim/plugged/html5.vim/Makefile	/^README_FILES=`ls -1 | grep -i readme`$/;"	m
RECORD_FILE	nvim/plugged/html5.vim/Makefile	/^RECORD_FILE=.record$/;"	m
RECORD_SCRIPT	nvim/plugged/html5.vim/Makefile	/^RECORD_SCRIPT=.mkrecord$/;"	m
REMOVED_GLOBALS	nvim/plugged/coc.nvim/build/index.js	/^const REMOVED_GLOBALS = [$/;"	A
RUN_TESTS	nvim/plugged/ale/run-tests.bat	/^:RUN_TESTS$/;"	l
RVM_DIR	Makefile	/^RVM_DIR := $(HOME)\/.rvm$/;"	m
Random	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Random(min, max)$/;"	f
Range	nvim/plugged/coc.nvim/build/index.js	/^class Range {$/;"	C
Range	nvim/plugged/coc.nvim/build/index.js	/^function Range (range, options) {$/;"	F
Range	nvim/plugged/coc.nvim/build/index.js	/^var Range;$/;"	V
Range	nvim/plugged/coc.nvim/src/model/chars.ts	/^export class Range {$/;"	c
RateLimiter	nvim/plugged/vim-elixir/large_file.ex	/^      defmodule RateLimiter do$/;"	m
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^    ReadStream: ReadStream,$/;"	P
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^  function ReadStream (path, options) {$/;"	F
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^class ReadStream extends MiniPass {$/;"	C
ReadStream$open	nvim/plugged/coc.nvim/build/index.js	/^  function ReadStream$open () {$/;"	F
ReadStreamSync	nvim/plugged/coc.nvim/build/index.js	/^class ReadStreamSync extends ReadStream {$/;"	C
RebaseArgument	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
RebaseClean	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseClean(file) abort$/;"	f
RebaseEdit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseEdit(cmd, dir) abort$/;"	f
RebaseSequenceAborter	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSequenceAborter() abort$/;"	f
RebaseSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
RecentScore	nvim/plugged/coc.nvim/src/types.ts	/^export interface RecentScore {$/;"	i
RedirectableRequest	nvim/plugged/coc.nvim/build/index.js	/^function RedirectableRequest(options, responseCallback) {$/;"	F
Refactor	nvim/plugged/coc.nvim/build/index.js	/^class Refactor {$/;"	C
Refactor	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^export default class Refactor {$/;"	c
RefactorConfig	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^export interface RefactorConfig {$/;"	i
ReferenceContext	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface ReferenceContext {$/;"	i
ReferenceManager	nvim/plugged/coc.nvim/build/index.js	/^class ReferenceManager extends manager_1.default {$/;"	C
ReferenceManager	nvim/plugged/coc.nvim/src/provider/referenceManager.ts	/^export default class ReferenceManager extends Manager<ReferenceProvider> implements Disposable {$/;"	c
ReferenceProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface ReferenceProvider {$/;"	i
ReferencesFeature	nvim/plugged/coc.nvim/build/index.js	/^class ReferencesFeature extends TextDocumentFeature {$/;"	C
ReferencesFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class ReferencesFeature extends TextDocumentFeature<$/;"	c
ReferencesRequest	nvim/plugged/coc.nvim/build/index.js	/^var ReferencesRequest;$/;"	V
RefreshTabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:RefreshTabline()$/;"	f
RegistrationData	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface RegistrationData<T> {$/;"	i
RegistrationRequest	nvim/plugged/coc.nvim/build/index.js	/^var RegistrationRequest;$/;"	V
Relative	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
ReloadStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
ReloadStatusBuffer	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
ReloadTabStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
ReloadWinStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
RemapItemTypes	nvim/plugged/ale/autoload/ale/engine.vim	/^function! s:RemapItemTypes(type_map, loclist) abort$/;"	f
Remote	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remote(dir) abort$/;"	f
Remove	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
RemoveITags	nvim/plugged/html5.vim/indent/html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
RemoveModule	nvim/plugged/ale/autoload/ale/test.vim	/^function! s:RemoveModule(results) abort$/;"	f
RemoveProblemsForDisabledLinters	nvim/plugged/ale/autoload/ale/engine.vim	/^function! s:RemoveProblemsForDisabledLinters(buffer, linters) abort$/;"	f
RemoveUnicodeQuotes	nvim/plugged/ale/autoload/ale/handlers/flawfinder.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
RemoveUnicodeQuotes	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
RemoveUnicodeQuotes	nvim/plugged/ale/autoload/ale/handlers/pony.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
RenameEvent	nvim/plugged/coc.nvim/src/types.ts	/^export interface RenameEvent {$/;"	i
RenameFeature	nvim/plugged/coc.nvim/build/index.js	/^class RenameFeature extends TextDocumentFeature {$/;"	C
RenameFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class RenameFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
RenameFile	nvim/plugged/coc.nvim/build/index.js	/^var RenameFile;$/;"	V
RenameManager	nvim/plugged/coc.nvim/build/index.js	/^class RenameManager extends manager_1.default {$/;"	C
RenameManager	nvim/plugged/coc.nvim/src/provider/renameManager.ts	/^export default class RenameManager extends Manager<RenameProvider> implements Disposable {$/;"	c
RenameProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface RenameProvider {$/;"	i
RenameRequest	nvim/plugged/coc.nvim/build/index.js	/^var RenameRequest;$/;"	V
RenderContent	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
RenderKeepView	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
ReopenWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
ReplaceCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
ReplaceCompletionOptions	nvim/plugged/ale/autoload/ale/completion.vim	/^function! s:ReplaceCompletionOptions() abort$/;"	f
Request	nvim/plugged/coc.nvim/build/index.js	/^class Request {$/;"	C
RequestType	nvim/plugged/coc.nvim/build/index.js	/^class RequestType extends AbstractMessageType {$/;"	C
RequestType0	nvim/plugged/coc.nvim/build/index.js	/^class RequestType0 extends AbstractMessageType {$/;"	C
RequestType1	nvim/plugged/coc.nvim/build/index.js	/^class RequestType1 extends AbstractMessageType {$/;"	C
RequestType2	nvim/plugged/coc.nvim/build/index.js	/^class RequestType2 extends AbstractMessageType {$/;"	C
RequestType3	nvim/plugged/coc.nvim/build/index.js	/^class RequestType3 extends AbstractMessageType {$/;"	C
RequestType4	nvim/plugged/coc.nvim/build/index.js	/^class RequestType4 extends AbstractMessageType {$/;"	C
RequestType5	nvim/plugged/coc.nvim/build/index.js	/^class RequestType5 extends AbstractMessageType {$/;"	C
RequestType6	nvim/plugged/coc.nvim/build/index.js	/^class RequestType6 extends AbstractMessageType {$/;"	C
RequestType7	nvim/plugged/coc.nvim/build/index.js	/^class RequestType7 extends AbstractMessageType {$/;"	C
RequestType8	nvim/plugged/coc.nvim/build/index.js	/^class RequestType8 extends AbstractMessageType {$/;"	C
RequestType9	nvim/plugged/coc.nvim/build/index.js	/^class RequestType9 extends AbstractMessageType {$/;"	C
Resolve	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
ResolveCodeLensSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ResolveCodeLensSignature {$/;"	i
ResolveCompletionItemSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ResolveCompletionItemSignature {$/;"	i
ResolveDocumentLinkSignature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ResolveDocumentLinkSignature {$/;"	i
ResolvedClientOptions	nvim/plugged/coc.nvim/src/language-client/client.ts	/^interface ResolvedClientOptions {$/;"	i
ResolvedTextDocumentSyncCapabilities	nvim/plugged/coc.nvim/src/language-client/client.ts	/^interface ResolvedTextDocumentSyncCapabilities {$/;"	i
Resolver	nvim/plugged/coc.nvim/build/index.js	/^class Resolver {$/;"	C
Resolver	nvim/plugged/coc.nvim/src/model/resolver.ts	/^export default class Resolver {$/;"	c
ResourceOperationKind	nvim/plugged/coc.nvim/build/index.js	/^var ResourceOperationKind;$/;"	V
ResponseError	nvim/plugged/coc.nvim/build/index.js	/^class ResponseError extends Error {$/;"	C
RestoreSession	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
RestoreViewIfNeeded	nvim/plugged/ale/autoload/ale/list.vim	/^function! s:RestoreViewIfNeeded(buffer) abort$/;"	f
Result	nvim/plugged/coc.nvim/src/events.ts	/^export type Result = void | Promise<void>$/;"	t
RevealOutputChannelOn	nvim/plugged/coc.nvim/build/index.js	/^var RevealOutputChannelOn;$/;"	V
RevealOutputChannelOn	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export enum RevealOutputChannelOn {$/;"	e
RevertSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
RollingFileStream	nvim/plugged/coc.nvim/build/index.js	/^class RollingFileStream extends RollingFileWriteStream {$/;"	C
RollingFileWriteStream	nvim/plugged/coc.nvim/build/index.js	/^class RollingFileWriteStream extends Writable {$/;"	C
RubyBalloonexpr	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyBalloonexpr() abort$/;"	f
RubyCursorFile	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorFile() abort$/;"	f
RubyCursorIdentifier	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorIdentifier() abort$/;"	f
RubyCursorTag	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorTag() abort$/;"	f
RunFixer	nvim/plugged/ale/autoload/ale/fix.vim	/^function! s:RunFixer(options) abort$/;"	f
RunIfExecutable	nvim/plugged/ale/autoload/ale/engine.vim	/^function! s:RunIfExecutable(buffer, linter, executable) abort$/;"	f
RunJob	nvim/plugged/ale/autoload/ale/engine.vim	/^function! s:RunJob(command, options) abort$/;"	f
RunJob	nvim/plugged/ale/autoload/ale/fix.vim	/^function! s:RunJob(result, options) abort$/;"	f
RunLinter	nvim/plugged/ale/autoload/ale/engine.vim	/^function! s:RunLinter(buffer, linter) abort$/;"	f
RunTest	nvim/plugged/vim-gitgutter/test/runner.vim	/^function RunTest(test)$/;"	f
SAFE_METHODS	nvim/plugged/coc.nvim/build/index.js	/^var SAFE_METHODS = { GET: true, HEAD: true, OPTIONS: true, TRACE: true };$/;"	O
SAME_INDENTATION_SET	nvim/plugged/ale/test/script/block-padding-checker	/^SAME_INDENTATION_SET = set(['\\\\'])$/;"	v
SCORE_MATCH_CAPITAL	nvim/plugged/coc.nvim/build/index.js	/^let SCORE_MATCH_CAPITAL = 0.7;$/;"	V
SCORE_MATCH_CONSECUTIVE	nvim/plugged/coc.nvim/build/index.js	/^let SCORE_MATCH_CONSECUTIVE = 1;$/;"	V
SCORE_MATCH_DOT	nvim/plugged/coc.nvim/build/index.js	/^let SCORE_MATCH_DOT = 0.6;$/;"	V
SCORE_MATCH_SLASH	nvim/plugged/coc.nvim/build/index.js	/^let SCORE_MATCH_SLASH = 0.9;$/;"	V
SCORE_MATCH_WORD	nvim/plugged/coc.nvim/build/index.js	/^let SCORE_MATCH_WORD = 0.8;$/;"	V
SHELL	nvim/plugged/html5.vim/Makefile	/^SHELL=bash$/;"	m
SHOW_RESULTS	nvim/plugged/ale/run-tests.bat	/^:SHOW_RESULTS$/;"	l
SID	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function s:SID()$/;"	f
START_BLOCKS	nvim/plugged/ale/test/script/block-padding-checker	/^START_BLOCKS = set(['if', 'for', 'while', 'try', 'function'])$/;"	v
ST_FILL_PDU	nvim/plugged/coc.nvim/build/index.js	/^var ST_FILL_PDU = 1; \/\/ Know the length, need to read whole content$/;"	V
ST_NEED_PDU	nvim/plugged/coc.nvim/build/index.js	/^var ST_NEED_PDU = 0; \/\/ Need to read and decode PDU length$/;"	V
SUBPARSE	nvim/plugged/coc.nvim/build/index.js	/^var SUBPARSE = {}$/;"	O
SafeBuffer	nvim/plugged/coc.nvim/build/index.js	/^function SafeBuffer (arg, encodingOrOffset, length) {$/;"	F
Scanner	nvim/plugged/coc.nvim/build/index.js	/^class Scanner {$/;"	C
Scanner	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Scanner {$/;"	c
Search	nvim/plugged/coc.nvim/build/index.js	/^class Search {$/;"	C
Search	nvim/plugged/coc.nvim/src/handler/search.ts	/^export default class Search {$/;"	c
SearchLoop	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
SearchOptions	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:SearchOptions(...) abort$/;"	f
SectionSpec	nvim/plugged/vim-airline/t/section.vim	/^function! SectionSpec()$/;"	f
SelectJavascript	nvim/plugged/vim-javascript/ftdetect/javascript.vim	/^fun! s:SelectJavascript()$/;"	f
Selection	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
SelectionRange	nvim/plugged/coc.nvim/build/index.js	/^var SelectionRange;$/;"	V
SelectionRangeFeature	nvim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^export class SelectionRangeFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
SelectionRangeManager	nvim/plugged/coc.nvim/build/index.js	/^class SelectionRangeManager extends manager_1.default {$/;"	C
SelectionRangeManager	nvim/plugged/coc.nvim/src/provider/rangeManager.ts	/^export default class SelectionRangeManager extends Manager<SelectionRangeProvider> implements Disposable {$/;"	c
SelectionRangeProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface SelectionRangeProvider {$/;"	i
SelectionRangeProviderMiddleware	nvim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^export interface SelectionRangeProviderMiddleware {$/;"	i
SelectionRangeRequest	nvim/plugged/coc.nvim/build/index.js	/^var SelectionRangeRequest;$/;"	V
SemVer	nvim/plugged/coc.nvim/build/index.js	/^function SemVer (version, options) {$/;"	F
Semaphore	nvim/plugged/coc.nvim/build/index.js	/^class Semaphore {$/;"	C
SendInitMessage	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! s:SendInitMessage(conn) abort$/;"	f
SendMessageData	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! s:SendMessageData(conn, data) abort$/;"	f
ServerOptions	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export type ServerOptions =$/;"	t
ServiceInfo	nvim/plugged/coc.nvim/src/services.ts	/^interface ServiceInfo {$/;"	i
ServiceManager	nvim/plugged/coc.nvim/build/index.js	/^class ServiceManager extends events_1.EventEmitter {$/;"	C
ServiceManager	nvim/plugged/coc.nvim/src/services.ts	/^export class ServiceManager extends EventEmitter implements Disposable {$/;"	c
ServiceStat	nvim/plugged/coc.nvim/build/index.js	/^var ServiceStat;$/;"	V
ServiceStat	nvim/plugged/coc.nvim/src/types.ts	/^export enum ServiceStat {$/;"	e
ServicesList	nvim/plugged/coc.nvim/build/index.js	/^class ServicesList extends basic_1.default {$/;"	C
ServicesList	nvim/plugged/coc.nvim/src/list/source/services.ts	/^export default class ServicesList extends BasicList {$/;"	c
SetDefault	nvim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! s:SetDefault(var, val)$/;"	f
SetFoldLevel	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
SetFoldLevelRecursive	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
SetListsImpl	nvim/plugged/ale/autoload/ale/list.vim	/^function! s:SetListsImpl(timer_id, buffer, loclist) abort$/;"	f
SetStatusLine	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine() abort$/;"	f
SetTraceNotification	nvim/plugged/coc.nvim/build/index.js	/^var SetTraceNotification;$/;"	V
SetUp	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function SetUp()$/;"	f
SettingMonitor	nvim/plugged/coc.nvim/build/index.js	/^class SettingMonitor {$/;"	C
SettingMonitor	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export class SettingMonitor {$/;"	c
Setup	nvim/plugged/ale/autoload/ale/completion.vim	/^function! s:Setup(enabled) abort$/;"	f
ShouldIgnore	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:ShouldIgnore(buffer, linter_name) abort$/;"	f
ShouldOpen	nvim/plugged/ale/autoload/ale/list.vim	/^function! s:ShouldOpen(buffer) abort$/;"	f
ShouldSuggestForType	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! s:ShouldSuggestForType(suggested_filetypes, type_list) abort$/;"	f
ShowCursorDetailForItem	nvim/plugged/ale/autoload/ale/cursor.vim	/^function! s:ShowCursorDetailForItem(loc, options) abort$/;"	f
ShowError	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export type ShowError = (errors: ErrorItem[]) => void$/;"	t
ShowInPreviewWin	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
ShowInfo	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:ShowInfo()$/;"	f
ShowMessageNotification	nvim/plugged/coc.nvim/build/index.js	/^var ShowMessageNotification;$/;"	V
ShowMessageRequest	nvim/plugged/coc.nvim/build/index.js	/^var ShowMessageRequest;$/;"	V
ShowPrototype	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
ShowUsage	nvim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	nvim/plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
ShrinkIfExpanded	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
Shuffle	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Shuffle(list)$/;"	f
ShutdownRequest	nvim/plugged/coc.nvim/build/index.js	/^var ShutdownRequest;$/;"	V
SignatureHelpFeature	nvim/plugged/coc.nvim/build/index.js	/^class SignatureHelpFeature extends TextDocumentFeature {$/;"	C
SignatureHelpFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class SignatureHelpFeature extends TextDocumentFeature<$/;"	c
SignatureHelpProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface SignatureHelpProvider {$/;"	i
SignatureHelpRequest	nvim/plugged/coc.nvim/build/index.js	/^var SignatureHelpRequest;$/;"	V
SignatureInformation	nvim/plugged/coc.nvim/build/index.js	/^var SignatureInformation;$/;"	V
SignatureManager	nvim/plugged/coc.nvim/build/index.js	/^class SignatureManager extends manager_1.default {$/;"	C
SignatureManager	nvim/plugged/coc.nvim/src/provider/signatureManager.ts	/^export default class SignatureManager extends Manager<SignatureHelpProvider> implements Disposable {$/;"	c
SignaturePart	nvim/plugged/coc.nvim/src/handler/index.ts	/^interface SignaturePart {$/;"	i
SkipFunc	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:SkipFunc()$/;"	f
Slash	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Slash(path) abort$/;"	f
Slash	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Slash(path) abort$/;"	f
Snippet	nvim/plugged/coc.nvim/src/types.ts	/^export interface Snippet {$/;"	i
SnippetManager	nvim/plugged/coc.nvim/build/index.js	/^class SnippetManager {$/;"	C
SnippetManager	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^export class SnippetManager implements types.SnippetManager {$/;"	c
SnippetManager	nvim/plugged/coc.nvim/src/types.ts	/^export interface SnippetManager {$/;"	i
SnippetParser	nvim/plugged/coc.nvim/build/index.js	/^class SnippetParser {$/;"	C
SnippetParser	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class SnippetParser {$/;"	c
SnippetProvider	nvim/plugged/coc.nvim/src/types.ts	/^export interface SnippetProvider {$/;"	i
SnippetSession	nvim/plugged/coc.nvim/build/index.js	/^class SnippetSession {$/;"	C
SnippetSession	nvim/plugged/coc.nvim/src/snippets/session.ts	/^export class SnippetSession {$/;"	c
SnippetVariableResolver	nvim/plugged/coc.nvim/build/index.js	/^class SnippetVariableResolver {$/;"	C
SnippetVariableResolver	nvim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^export class SnippetVariableResolver implements VariableResolver {$/;"	c
SocketMessageReader	nvim/plugged/coc.nvim/build/index.js	/^class SocketMessageReader extends StreamMessageReader {$/;"	C
SocketMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^class SocketMessageWriter extends AbstractMessageWriter {$/;"	C
SocketTransport	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export interface SocketTransport {$/;"	i
Source	nvim/plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^class Source(Base):$/;"	c
Source	nvim/plugged/coc.nvim/build/index.js	/^class Source {$/;"	C
Source	nvim/plugged/coc.nvim/src/model/source.ts	/^export default class Source implements ISource {$/;"	c
SourceConfig	nvim/plugged/coc.nvim/src/types.ts	/^export interface SourceConfig extends ISource {$/;"	i
SourceStat	nvim/plugged/coc.nvim/src/types.ts	/^export interface SourceStat {$/;"	i
SourceType	nvim/plugged/coc.nvim/build/index.js	/^var SourceType;$/;"	V
SourceType	nvim/plugged/coc.nvim/src/types.ts	/^export enum SourceType {$/;"	e
Sources	nvim/plugged/coc.nvim/build/index.js	/^class Sources {$/;"	C
Sources	nvim/plugged/coc.nvim/src/sources.ts	/^export class Sources {$/;"	c
SourcesList	nvim/plugged/coc.nvim/build/index.js	/^class SourcesList extends basic_1.default {$/;"	C
SourcesList	nvim/plugged/coc.nvim/src/list/source/sources.ts	/^export default class SourcesList extends BasicList {$/;"	c
SpawnOptions	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export interface SpawnOptions {$/;"	i
SplitExpand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpand(string, ...) abort$/;"	f
SplitExpandChain	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
SquashArgument	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
StageApply	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
StageArgs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
StageDelete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
StageDiff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
StageDiffEdit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
StageIgnore	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
StageInfo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
StageInline	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
StageJump	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
StagePatch	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageReveal	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
StageSeek	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
StarSetf	nvim/plugged/vim-ruby/ftdetect/ruby.vim	/^func! s:StarSetf(ft)$/;"	f
StartIfExecutable	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartIfExecutable(options, executable) abort$/;"	f
StartLSP	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartLSP(options, address, executable, command) abort$/;"	f
StartOfFile	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:StartOfFile(pline_info) abort$/;"	f
StartWithAddress	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartWithAddress(options, address) abort$/;"	f
StartWithCommand	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartWithCommand(options, executable, command) abort$/;"	f
State	nvim/plugged/coc.nvim/build/index.js	/^var State;$/;"	V
State	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export enum State {$/;"	e
State.New	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
State.getCurrent	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
State.setCurrentFile	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
State.setPaused	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
StateChangeEvent	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface StateChangeEvent {$/;"	i
StaticFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface StaticFeature {$/;"	i
StatusBarItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface StatusBarItem {$/;"	i
StatusCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
StatusCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
StatusItemOption	nvim/plugged/coc.nvim/src/types.ts	/^export interface StatusItemOption {$/;"	i
StatusLine	nvim/plugged/coc.nvim/build/index.js	/^class StatusLine {$/;"	C
StatusLine	nvim/plugged/coc.nvim/src/model/status.ts	/^export default class StatusLine implements Disposable {$/;"	c
StopCurrentJobs	nvim/plugged/ale/autoload/ale/engine.vim	/^function! s:StopCurrentJobs(buffer, clear_lint_file_jobs) abort$/;"	f
StopCursorTimer	nvim/plugged/ale/autoload/ale/cursor.vim	/^function! s:StopCursorTimer() abort$/;"	f
StopCursorTimer	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^function! s:StopCursorTimer() abort$/;"	f
StreamInfo	nvim/plugged/coc.nvim/build/index.js	/^var StreamInfo;$/;"	V
StreamInfo	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export interface StreamInfo {$/;"	i
StreamInfo	nvim/plugged/coc.nvim/src/language-client/index.ts	/^namespace StreamInfo {$/;"	c
StreamMessageReader	nvim/plugged/coc.nvim/build/index.js	/^class StreamMessageReader extends AbstractMessageReader {$/;"	C
StreamMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^class StreamMessageWriter extends AbstractMessageWriter {$/;"	C
Subcommands	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Subcommands() abort$/;"	f
Subst	nvim/plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Subst(format, vars) abort$/;"	f
SupporedSymbolKinds	nvim/plugged/coc.nvim/build/index.js	/^const SupporedSymbolKinds = [$/;"	A
SupportedCompletionItemKinds	nvim/plugged/coc.nvim/build/index.js	/^const SupportedCompletionItemKinds = [$/;"	A
SymbolInfo	nvim/plugged/coc.nvim/src/handler/index.ts	/^interface SymbolInfo {$/;"	i
SymbolInformation	nvim/plugged/coc.nvim/build/index.js	/^var SymbolInformation;$/;"	V
SymbolKind	nvim/plugged/coc.nvim/build/index.js	/^var SymbolKind;$/;"	V
Symbols	nvim/plugged/coc.nvim/build/index.js	/^class Symbols extends location_1.default {$/;"	C
Symbols	nvim/plugged/coc.nvim/src/list/source/symbols.ts	/^export default class Symbols extends LocationList {$/;"	c
SymlinkError	nvim/plugged/coc.nvim/build/index.js	/^class SymlinkError extends Error {$/;"	C
SynAt	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:SynAt(l,c)$/;"	f
SynFold	nvim/plugged/vim-ruby/syntax/ruby.vim	/^com! -nargs=* SynFold call s:run_syntax_fold(<q-args>)$/;"	c
SyncAutocmd	nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:SyncAutocmd(...)$/;"	f
SynchronizeOptions	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface SynchronizeOptions {$/;"	i
SystemError	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
TAGS_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TAR	nvim/plugged/html5.vim/Makefile	/^TAR=tar czvf$/;"	m
TERMINATORS	nvim/plugged/ale/test/script/block-padding-checker	/^TERMINATORS = set(['return', 'throw'])$/;"	v
TM_CURRENT_LINE	nvim/plugged/coc.nvim/build/index.js	/^            TM_CURRENT_LINE: line,$/;"	P
TM_CURRENT_WORD	nvim/plugged/coc.nvim/build/index.js	/^            TM_CURRENT_WORD: cword,$/;"	P
TM_FILEPATH	nvim/plugged/coc.nvim/build/index.js	/^            TM_FILEPATH: filepath,$/;"	P
TM_LINE_INDEX	nvim/plugged/coc.nvim/build/index.js	/^            TM_LINE_INDEX: (lnum - 1).toString(),$/;"	M
TODO	nvim/plugged/coc.nvim/build/index.js	/^                \/\/ TODO: DRY.$/;"	T
TODO	nvim/plugged/coc.nvim/build/index.js	/^                \/\/ TODO: this can be simplified by modifying state here.$/;"	T
TODO	nvim/plugged/coc.nvim/build/index.js	/^          \/\/ TODO: It would probably be faster to determine this$/;"	T
TODO	nvim/plugged/coc.nvim/build/index.js	/^        \/\/ TODO: Error checking$/;"	T
TODO	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ TODO: add type$/;"	T
TODO	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ TODO: is an absolute `cwd` supposed to be resolved against `root`?$/;"	T
TODO	nvim/plugged/coc.nvim/build/index.js	/^\/\/ TODO: This should probably be a class, not functionally$/;"	T
TODO	nvim/plugged/coc.nvim/build/index.js	/^\/\/ TODO: expand to include the rest$/;"	T
TRACE	nvim/plugged/coc.nvim/build/index.js	/^  TRACE: { value: 5000, colour: 'blue' },$/;"	P
TTCC_CONVERSION_PATTERN	nvim/plugged/coc.nvim/build/index.js	/^  const TTCC_CONVERSION_PATTERN = '%r %p %c - %m%n';$/;"	V
TabBuffers	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:TabBuffers()$/;"	f
Tabpage	nvim/plugged/coc.nvim/build/index.js	/^class Tabpage extends Base_1.BaseApi {$/;"	C
Tagbar	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 Tagbar              call tagbar#ToggleWindow()$/;"	c
TagbarBalloonExpr	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarBufName	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
TagbarClose	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarGetTypeConfig	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarOpen	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	nvim/plugged/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call tagbar#ToggleWindow()$/;"	c
TagbarTogglePause	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
Task	nvim/plugged/coc.nvim/build/index.js	/^class Task extends events_1.EventEmitter {$/;"	C
Task	nvim/plugged/coc.nvim/build/index.js	/^class Task {$/;"	C
Task	nvim/plugged/coc.nvim/src/handler/search.ts	/^class Task extends EventEmitter {$/;"	c
Task	nvim/plugged/coc.nvim/src/language-client/utils/async.ts	/^export interface Task<T> {$/;"	i
Task	nvim/plugged/coc.nvim/src/model/task.ts	/^export default class Task implements Disposable {$/;"	c
TaskEvents	nvim/plugged/coc.nvim/src/events.ts	/^export type TaskEvents = 'TaskExit' | 'TaskStderr' | 'TaskStdout'$/;"	t
TaskList	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^class TaskList extends BasicList {$/;"	c
TaskOptions	nvim/plugged/coc.nvim/src/types.ts	/^export interface TaskOptions {$/;"	i
TearDown	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function TearDown()$/;"	f
TelemetryEventNotification	nvim/plugged/coc.nvim/build/index.js	/^var TelemetryEventNotification;$/;"	V
TempCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempCmd(out, cmd) abort$/;"	f
TempCtor	nvim/plugged/coc.nvim/build/index.js	/^    var TempCtor = function () {}$/;"	C
TempReadPost	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
TempReadPre	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
TempState	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
TemporaryFilename	nvim/plugged/ale/autoload/ale/command.vim	/^function! s:TemporaryFilename(buffer) abort$/;"	f
TemporaryPSScript	nvim/plugged/ale/autoload/ale/powershell.vim	/^function! s:TemporaryPSScript(buffer, input) abort$/;"	f
Terminal	nvim/plugged/coc.nvim/src/types.ts	/^export interface Terminal {$/;"	i
TerminalModel	nvim/plugged/coc.nvim/build/index.js	/^class TerminalModel {$/;"	C
TerminalModel	nvim/plugged/coc.nvim/src/model/terminal.ts	/^export default class TerminalModel implements Terminal {$/;"	c
TerminalOptions	nvim/plugged/coc.nvim/src/types.ts	/^export interface TerminalOptions {$/;"	i
TerminalResult	nvim/plugged/coc.nvim/src/types.ts	/^export interface TerminalResult {$/;"	i
TestList	nvim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^class TestList extends BasicList {$/;"	c
TestSyntax	nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^function! TestSyntax(pattern, group) abort$/;"	f
Test_add_lines	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines()$/;"	f
Test_add_lines_fish	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines_fish()$/;"	f
Test_around_text_object	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_around_text_object()$/;"	f
Test_common_prefix	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_prefix()$/;"	f
Test_common_suffix	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_suffix()$/;"	f
Test_diff_highlight	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_diff_highlight()$/;"	f
Test_edit_file_with_same_name_as_a_branch	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_edit_file_with_same_name_as_a_branch()$/;"	f
Test_empty_file	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_empty_file()$/;"	f
Test_encoding	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_encoding()$/;"	f
Test_file_added_to_git	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_added_to_git()$/;"	f
Test_filename_leading_dash	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_leading_dash()$/;"	f
Test_filename_umlaut	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_umlaut()$/;"	f
Test_filename_with_equals	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_equals()$/;"	f
Test_filename_with_square_brackets	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_square_brackets()$/;"	f
Test_fix_file_references	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_fix_file_references()$/;"	f
Test_foldtext	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_foldtext()$/;"	f
Test_follow_symlink	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_follow_symlink()$/;"	f
Test_hunk_outside_noop	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_outside_noop()$/;"	f
Test_hunk_stage	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage()$/;"	f
Test_hunk_stage_nearby_hunk	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_nearby_hunk()$/;"	f
Test_hunk_stage_partial_cmd_added	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_cmd_added()$/;"	f
Test_hunk_stage_partial_preview_added	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added()$/;"	f
Test_hunk_stage_partial_preview_added_removed	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added_removed()$/;"	f
Test_hunk_stage_partial_visual_added	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_visual_added()$/;"	f
Test_hunk_stage_preview_write	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_preview_write()$/;"	f
Test_hunk_undo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo()$/;"	f
Test_hunk_undo_dos	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo_dos()$/;"	f
Test_inner_text_object	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_inner_text_object()$/;"	f
Test_keep_alt	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_alt()$/;"	f
Test_keep_modified	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_modified()$/;"	f
Test_keep_op_marks	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_op_marks()$/;"	f
Test_lcs	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_lcs()$/;"	f
Test_modify_lines	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_modify_lines()$/;"	f
Test_no_modifications	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_no_modifications()$/;"	f
Test_orphaned_signs	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_orphaned_signs()$/;"	f
Test_overlapping_hunk_op	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunk_op()$/;"	f
Test_overlapping_hunks	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunks()$/;"	f
Test_preview	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview()$/;"	f
Test_preview_dos	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview_dos()$/;"	f
Test_priority	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_priority()$/;"	f
Test_quickfix	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_quickfix()$/;"	f
Test_remove_first_lines	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_first_lines()$/;"	f
Test_remove_lines	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_lines()$/;"	f
Test_split	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_split()$/;"	f
Test_undo_nearby_hunk	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_undo_nearby_hunk()$/;"	f
Test_untracked_file_outside_repo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_outside_repo()$/;"	f
Test_untracked_file_square_brackets_within_repo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_square_brackets_within_repo()$/;"	f
Test_untracked_file_within_repo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_within_repo()$/;"	f
Test_user_autocmd	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_user_autocmd()$/;"	f
Test_write_option	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_write_option()$/;"	f
Testfile	nvim/plugged/ale/test/ocaml-test-files/testfile.ml	1;"	M
Text	nvim/plugged/coc.nvim/build/index.js	/^class Text extends Marker {$/;"	C
Text	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Text extends Marker {$/;"	c
TextChangedEvent	nvim/plugged/coc.nvim/src/events.ts	/^export type TextChangedEvent = 'TextChanged'$/;"	t
TextDocument	nvim/plugged/coc.nvim/build/index.js	/^var TextDocument;$/;"	V
TextDocumentContentProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface TextDocumentContentProvider {$/;"	i
TextDocumentEdit	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentEdit;$/;"	V
TextDocumentFeature	nvim/plugged/coc.nvim/build/index.js	/^class TextDocumentFeature {$/;"	C
TextDocumentFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export abstract class TextDocumentFeature<$/;"	c
TextDocumentIdentifier	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentIdentifier;$/;"	V
TextDocumentItem	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentItem;$/;"	V
TextDocumentSaveReason	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentSaveReason;$/;"	V
TextDocumentSyncKind	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentSyncKind;$/;"	V
TextDocumentWillSaveEvent	nvim/plugged/coc.nvim/src/types.ts	/^export interface TextDocumentWillSaveEvent {$/;"	i
TextEdit	nvim/plugged/coc.nvim/build/index.js	/^var TextEdit;$/;"	V
TextEditChangeImpl	nvim/plugged/coc.nvim/build/index.js	/^    function TextEditChangeImpl(edits) {$/;"	F
TextEditChangeImpl	nvim/plugged/coc.nvim/build/index.js	/^var TextEditChangeImpl = \/** @class *\/ (function () {$/;"	V
TextItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface TextItem {$/;"	i
TextRange	nvim/plugged/coc.nvim/build/index.js	/^class TextRange {$/;"	C
TextRange	nvim/plugged/coc.nvim/src/cursors/range.ts	/^export default class TextRange {$/;"	c
TextmateSnippet	nvim/plugged/coc.nvim/build/index.js	/^class TextmateSnippet extends Marker {$/;"	C
TextmateSnippet	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class TextmateSnippet extends Marker {$/;"	c
Thenable	nvim/plugged/coc.nvim/src/types.ts	/^export interface Thenable<T> {$/;"	i
TimerHandler	nvim/plugged/ale/autoload/ale/completion.vim	/^function! s:TimerHandler(...) abort$/;"	f
ToggleAutoclose	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
ToggleCaseInsensitive	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
ToggleFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
ToggleHelp	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
ToggleHideNonPublicTags	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
TogglePause	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:TogglePause() abort$/;"	f
ToggleSort	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
ToggleTabTreeVCS	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
ToggleWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
Token	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export interface Token {$/;"	i
Token	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Token()$/;"	f
Touch	nvim/plugged/coc.nvim/build/index.js	/^var Touch;$/;"	V
Trace	nvim/plugged/coc.nvim/build/index.js	/^var Trace;$/;"	V
TraceFormat	nvim/plugged/coc.nvim/build/index.js	/^var TraceFormat;$/;"	V
Transform	nvim/plugged/coc.nvim/build/index.js	/^class Transform extends Marker {$/;"	C
Transform	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Transform extends Marker {$/;"	c
TransformUserTypeDef	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
TransformableMarker	nvim/plugged/coc.nvim/build/index.js	/^class TransformableMarker extends Marker {$/;"	C
TransformableMarker	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export abstract class TransformableMarker extends Marker {$/;"	c
Transport	nvim/plugged/coc.nvim/build/index.js	/^class Transport extends events_1.EventEmitter {$/;"	C
Transport	nvim/plugged/coc.nvim/build/index.js	/^var Transport;$/;"	V
Transport	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export type Transport = TransportKind | SocketTransport$/;"	t
Transport	nvim/plugged/coc.nvim/src/language-client/index.ts	/^namespace Transport {$/;"	c
TransportKind	nvim/plugged/coc.nvim/build/index.js	/^var TransportKind;$/;"	V
TransportKind	nvim/plugged/coc.nvim/src/language-client/index.ts	/^export enum TransportKind {$/;"	e
Tree	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
Tree	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
TreeChomp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
TreeDirNode.AbsoluteTreeRoot	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
TreeDirNode._glob	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
TreeDirNode._initChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openInNewTab	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
TreeDirNode.activate	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
TreeDirNode.addChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.displayString	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
TreeDirNode.findNode	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getCascade	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
TreeDirNode.getCascadeRoot	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
TreeDirNode.getChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getDirChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
TreeDirNode.getVisibleChildCount	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.isCascadable	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
TreeDirNode.open	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
TreeDirNode.openAlong	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
TreeDirNode.openExplorer	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.refreshDirFlags	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
TreeDirNode.refreshFlags	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
TreeDirNode.removeChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
TreeDirNode.sortChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
TreeDirNode.transplantChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetSelected	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
TreeFileNode._renderToString	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
TreeFileNode.activate	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
TreeFileNode.bookmark	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBookmarks	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
TreeFileNode.copy	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findSibling	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getNerdtree	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
TreeFileNode.isRoot	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.open	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
TreeFileNode.openExplorer	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
TreeFileNode.openInNewTab	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.refreshFlags	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
TreeFileNode.rename	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeInfo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
Trim	nvim/plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Trim(str) abort$/;"	f
Trim	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:Trim(ln)$/;"	f
TunnelingAgent	nvim/plugged/coc.nvim/build/index.js	/^function TunnelingAgent(options) {$/;"	F
TypeDefinitionFeature	nvim/plugged/coc.nvim/build/index.js	/^class TypeDefinitionFeature extends client_1.TextDocumentFeature {$/;"	C
TypeDefinitionFeature	nvim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^export class TypeDefinitionFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
TypeDefinitionManager	nvim/plugged/coc.nvim/build/index.js	/^class TypeDefinitionManager extends manager_1.default {$/;"	C
TypeDefinitionManager	nvim/plugged/coc.nvim/src/provider/typeDefinitionManager.ts	/^export default class TypeDefinitionManager extends Manager<TypeDefinitionProvider> implements Disposable {$/;"	c
TypeDefinitionMiddleware	nvim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^export interface TypeDefinitionMiddleware {$/;"	i
TypeDefinitionProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface TypeDefinitionProvider {$/;"	i
TypeDefinitionRequest	nvim/plugged/coc.nvim/build/index.js	/^var TypeDefinitionRequest;$/;"	V
UI.IndentWid	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
UI.MarkupReg	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
UI.New	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
UI.UpDirLine	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
UI._dumpHelp	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
UI._indentLevelFor	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
UI._renderBookmarks	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
UI._stripMarkup	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
UI.centerView	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
UI.getLineNum	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
UI.getPath	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
UI.getRootLineNum	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
UI.getShowBookmarks	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
UI.getShowFiles	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
UI.getShowHelp	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
UI.getShowHidden	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
UI.isIgnoreFilterEnabled	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
UI.isMinimal	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
UI.render	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
UI.renderViewSavingPosition	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
UI.restoreScreenState	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
UI.saveScreenState	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
UI.setShowHidden	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
UI.toggleHelp	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
UI.toggleIgnoreFilter	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
UI.toggleShowBookmarks	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
UI.toggleShowFiles	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
UI.toggleShowHidden	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
UI.toggleZoom	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
UNDEFINED	nvim/plugged/coc.nvim/build/index.js	/^  var UNDEFINED = "undefined";$/;"	V
UNZIP	nvim/plugged/coc.nvim/build/index.js	/^  UNZIP: 7,$/;"	P
UPDATED_SOURCE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
URI	nvim/plugged/coc.nvim/build/index.js	/^    function URI(schemeOrData, authority, path, query, fragment, _strict) {$/;"	F
Uint64BE	nvim/plugged/coc.nvim/build/index.js	/^var Uint64BE, Int64BE, Uint64LE, Int64LE;$/;"	V
Uint64LE	nvim/plugged/coc.nvim/build/index.js	/^var Uint64BE, Int64BE, Uint64LE, Int64LE;$/;"	V
Uniq	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
Unlock	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unpack	nvim/plugged/coc.nvim/build/index.js	/^class Unpack extends Parser {$/;"	C
UnpackSync	nvim/plugged/coc.nvim/build/index.js	/^class UnpackSync extends Unpack {$/;"	C
UnregistrationRequest	nvim/plugged/coc.nvim/build/index.js	/^var UnregistrationRequest;$/;"	V
Unzip	nvim/plugged/coc.nvim/build/index.js	/^class Unzip extends Zlib {$/;"	C
UpdateCacheIfNecessary	nvim/plugged/ale/autoload/ale/statusline.vim	/^function! s:UpdateCacheIfNecessary(buffer) abort$/;"	f
UpdateCapabilities	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! s:UpdateCapabilities(conn, capabilities) abort$/;"	f
UpdateCursor	nvim/plugged/ale/autoload/ale/code_action.vim	/^function! s:UpdateCursor(cursor, start, end, offset) abort$/;"	f
UpdateLineNumbers	nvim/plugged/ale/autoload/ale/sign.vim	/^function! s:UpdateLineNumbers(buffer, current_sign_list, loclist) abort$/;"	f
Uri	nvim/plugged/coc.nvim/build/index.js	/^    Uri: {$/;"	P
UsableWin	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
Usage	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
UserCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommand(...) abort$/;"	f
UserCommandList	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
UsingModule	nvim/plugged/ale/ale_linters/python/flake8.vim	/^function! s:UsingModule(buffer) abort$/;"	f
Util1	nvim/plugged/vim-airline/t/util.vim	/^function! Util1()$/;"	f
Util2	nvim/plugged/vim-airline/t/util.vim	/^function! Util2()$/;"	f
Util3	nvim/plugged/vim-airline/t/util.vim	/^function! Util3(...)$/;"	f
VADER_OUTPUT_FILE	nvim/plugged/ale/run-tests.bat	/^set VADER_OUTPUT_FILE=%~dp0\\vader_output$/;"	v
VADER_OUTPUT_FILE	nvim/plugged/vim-vue/Makefile	/^	VADER_OUTPUT_FILE=\/dev\/stderr nvim -u test\/vimrc -c 'Vader! test\/*.vader' --headless$/;"	m
VERSION	nvim/plugged/html5.vim/Makefile	/^VERSION=0.1$/;"	m
VERSION	nvim/plugged/html5.vim/config.mk	/^VERSION=0.26$/;"	m
VIMRUNTIME	nvim/plugged/html5.vim/Makefile	/^VIMRUNTIME=~\/.vim$/;"	m
VWB	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=0 VWB call vimwiki#base#backlinks()$/;"	c
Variable	nvim/plugged/coc.nvim/build/index.js	/^class Variable extends TransformableMarker {$/;"	C
Variable	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Variable extends TransformableMarker {$/;"	c
VariableResolver	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export interface VariableResolver {$/;"	i
Vcfg	nvim/init.vim	/^command! -nargs=* Vcfg execute "vsplit $MYVIMRC"$/;"	c
VersionedTextDocumentIdentifier	nvim/plugged/coc.nvim/build/index.js	/^var VersionedTextDocumentIdentifier;$/;"	V
VimCSS3Syntax	nvim/init.vim	/^augroup VimCSS3Syntax$/;"	a
VimCloseCallback	nvim/plugged/ale/autoload/ale/job.vim	/^function! s:VimCloseCallback(channel) abort$/;"	f
VimCompleteItem	nvim/plugged/coc.nvim/src/types.ts	/^export interface VimCompleteItem {$/;"	i
VimErrorCallback	nvim/plugged/ale/autoload/ale/job.vim	/^function! s:VimErrorCallback(channel, data) abort$/;"	f
VimExitCallback	nvim/plugged/ale/autoload/ale/job.vim	/^function! s:VimExitCallback(job, exit_code) abort$/;"	f
VimMock	nvim/plugged/ale/test/python/test_deoplete_source.py	/^class VimMock(object):$/;"	c
VimOutputCallback	nvim/plugged/ale/autoload/ale/job.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
VimOutputCallback	nvim/plugged/ale/autoload/ale/socket.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
VimSource	nvim/plugged/coc.nvim/build/index.js	/^class VimSource extends source_1.default {$/;"	C
VimSource	nvim/plugged/coc.nvim/src/model/source-vim.ts	/^export default class VimSource extends Source {$/;"	c
VimTransport	nvim/plugged/coc.nvim/build/index.js	/^class VimTransport extends base_1.default {$/;"	C
Vimwiki2HTML	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer Vimwiki2HTML$/;"	c
Vimwiki2HTMLBrowse	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer Vimwiki2HTMLBrowse$/;"	c
VimwikiAll2HTML	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiAll2HTML$/;"	c
VimwikiBacklinks	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=0 VimwikiBacklinks call vimwiki#base#backlinks()$/;"	c
VimwikiCatUrl	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiCatUrl call vimwiki#html#CatUrl(expand('%:p'))$/;"	c
VimwikiChangeSymbolInListTo	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=1 VimwikiChangeSymbolInListTo$/;"	c
VimwikiChangeSymbolTo	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range -nargs=1 VimwikiChangeSymbolTo$/;"	c
VimwikiCheckLinks	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiCheckLinks call vimwiki#base#check_links()$/;"	c
VimwikiDecrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiDecrementListItem call vimwiki#lst#decrement_cb(<line1>, <line2>)$/;"	c
VimwikiDeleteLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiDeleteLink call vimwiki#base#delete_link()$/;"	c
VimwikiDiaryGenerateLinks	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! VimwikiDiaryGenerateLinks$/;"	c
VimwikiDiaryIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiDiaryIndex$/;"	c
VimwikiDiaryNextDay	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiDiaryNextDay call vimwiki#diary#goto_next_day()$/;"	c
VimwikiDiaryPrevDay	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiDiaryPrevDay call vimwiki#diary#goto_prev_day()$/;"	c
VimwikiFoldLevel	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! VimwikiFoldLevel(lnum)$/;"	f
VimwikiFoldListLevel	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! VimwikiFoldListLevel(lnum)$/;"	f
VimwikiFoldText	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! VimwikiFoldText()$/;"	f
VimwikiFollowLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiFollowLink call vimwiki#base#follow_link('nosplit', 0, 1)$/;"	c
VimwikiGenerateLinks	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiGenerateLinks call vimwiki#base#generate_links()$/;"	c
VimwikiGenerateTags	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^      \\ VimwikiGenerateTags call vimwiki#tags#generate_tags(<f-args>)$/;"	c
VimwikiGoBackLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiGoBackLink call vimwiki#base#go_back_link()$/;"	c
VimwikiGoto	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^      \\ VimwikiGoto call vimwiki#base#goto(<f-args>)$/;"	c
VimwikiIncrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiIncrementListItem call vimwiki#lst#increment_cb(<line1>, <line2>)$/;"	c
VimwikiIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiIndex$/;"	c
VimwikiLinkConverter	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  function VimwikiLinkConverter(url, source, target)$/;"	f
VimwikiLinkHandler	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  function VimwikiLinkHandler(url)$/;"	f
VimwikiListChangeLvl	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range -nargs=+ VimwikiListChangeLvl$/;"	c
VimwikiListChangeSymbolI	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range -nargs=1 VimwikiListChangeSymbolI$/;"	c
VimwikiListToggle	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiListToggle call vimwiki#lst#toggle_list_item()$/;"	c
VimwikiMakeDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiMakeDiaryNote$/;"	c
VimwikiMakeTomorrowDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiMakeTomorrowDiaryNote$/;"	c
VimwikiMakeYesterdayDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiMakeYesterdayDiaryNote$/;"	c
VimwikiNextLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiNextLink call vimwiki#base#find_next_link()$/;"	c
VimwikiNormalizeLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=? VimwikiNormalizeLink call vimwiki#base#normalize_link(<f-args>)$/;"	c
VimwikiPasteUrl	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiPasteUrl call vimwiki#html#PasteUrl(expand('%:p'))$/;"	c
VimwikiPrevLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiPrevLink call vimwiki#base#find_prev_link()$/;"	c
VimwikiRebuildTags	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -bang VimwikiRebuildTags call vimwiki#tags#update_tags(1, '<bang>')$/;"	c
VimwikiRemoveCBInList	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiRemoveCBInList call vimwiki#lst#remove_cb_in_list()$/;"	c
VimwikiRemoveSingleCB	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiRemoveSingleCB call vimwiki#lst#remove_cb(<line1>, <line2>)$/;"	c
VimwikiRenameLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiRenameLink call vimwiki#base#rename_link()$/;"	c
VimwikiRenumberAllLists	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiRenumberAllLists call vimwiki#lst#adjust_whole_buffer()$/;"	c
VimwikiRenumberList	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiRenumberList call vimwiki#lst#adjust_numbered_list()$/;"	c
VimwikiReturn	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=+ VimwikiReturn call <SID>CR(<f-args>)$/;"	c
VimwikiSearchTags	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^      \\ VimwikiSearchTags VimwikiSearch \/:<args>:\/$/;"	c
VimwikiShowVersion	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! VimwikiShowVersion call s:get_version()$/;"	c
VimwikiSplitLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=* VimwikiSplitLink call vimwiki#base#follow_link('hsplit', <f-args>)$/;"	c
VimwikiTOC	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTOC call vimwiki#base#table_of_contents(1)$/;"	c
VimwikiTabIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiTabIndex$/;"	c
VimwikiTabMakeDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiTabMakeDiaryNote$/;"	c
VimwikiTable	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=* VimwikiTable call vimwiki#tbl#create(<f-args>)$/;"	c
VimwikiTableAlignQ	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTableAlignQ call vimwiki#tbl#align_or_cmd('gqq')$/;"	c
VimwikiTableAlignW	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTableAlignW call vimwiki#tbl#align_or_cmd('gww')$/;"	c
VimwikiTableMoveColumnLeft	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTableMoveColumnLeft call vimwiki#tbl#move_column_left()$/;"	c
VimwikiTableMoveColumnRight	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTableMoveColumnRight call vimwiki#tbl#move_column_right()$/;"	c
VimwikiTabnewLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTabnewLink call vimwiki#base#follow_link('tab', 0, 1)$/;"	c
VimwikiToggleListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiToggleListItem call vimwiki#lst#toggle_cb(<line1>, <line2>)$/;"	c
VimwikiToggleRejectedListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiToggleRejectedListItem$/;"	c
VimwikiUISelect	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! VimwikiUISelect call vimwiki#base#ui_select()$/;"	c
VimwikiVSplitLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=* VimwikiVSplitLink call vimwiki#base#follow_link('vsplit', <f-args>)$/;"	c
VimwikiWikiIncludeHandler	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  function! VimwikiWikiIncludeHandler(value)$/;"	f
WARN	nvim/plugged/coc.nvim/build/index.js	/^  WARN: { value: 30000, colour: 'yellow' },$/;"	P
WGET_OPT	nvim/plugged/html5.vim/Makefile	/^WGET_OPT=-c -nv$/;"	m
WHITESPACE_AFTER_SET	nvim/plugged/ale/test/script/block-padding-checker	/^WHITESPACE_AFTER_SET = END_BLOCKS$/;"	v
WHITESPACE_BEFORE_SET	nvim/plugged/ale/test/script/block-padding-checker	/^WHITESPACE_BEFORE_SET = START_BLOCKS | TERMINATORS$/;"	v
WHITESPACE_FORBIDDEN_AFTER_SET	nvim/plugged/ale/test/script/block-padding-checker	/^WHITESPACE_FORBIDDEN_AFTER_SET = START_BLOCKS | MIDDLE_BLOCKS$/;"	v
WHITESPACE_FORBIDDEN_BEFORE_SET	nvim/plugged/ale/test/script/block-padding-checker	/^WHITESPACE_FORBIDDEN_BEFORE_SET = END_BLOCKS | MIDDLE_BLOCKS$/;"	v
WatchKind	nvim/plugged/coc.nvim/build/index.js	/^var WatchKind;$/;"	V
WatchResponse	nvim/plugged/coc.nvim/src/watchman.ts	/^export interface WatchResponse {$/;"	i
Watchman	nvim/plugged/coc.nvim/build/index.js	/^class Watchman {$/;"	C
Watchman	nvim/plugged/coc.nvim/src/watchman.ts	/^export default class Watchman {$/;"	c
WillSaveFeature	nvim/plugged/coc.nvim/build/index.js	/^class WillSaveFeature extends DocumentNotifiactions {$/;"	C
WillSaveFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class WillSaveFeature extends DocumentNotifiactions<WillSaveTextDocumentParams, TextDocumentWillSaveEvent> {$/;"	c
WillSaveTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var WillSaveTextDocumentNotification;$/;"	V
WillSaveTextDocumentWaitUntilRequest	nvim/plugged/coc.nvim/build/index.js	/^var WillSaveTextDocumentWaitUntilRequest;$/;"	V
WillSaveUntilHandler	nvim/plugged/coc.nvim/build/index.js	/^class WillSaveUntilHandler {$/;"	C
WillSaveUntilHandler	nvim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^export default class WillSaveUntilHandler {$/;"	c
WillSaveWaitUntilFeature	nvim/plugged/coc.nvim/build/index.js	/^class WillSaveWaitUntilFeature {$/;"	C
WillSaveWaitUntilFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class WillSaveWaitUntilFeature implements DynamicFeature<TextDocumentRegistrationOptions> {$/;"	c
WinFindBuf	nvim/plugged/ale/autoload/ale/list.vim	/^function! s:WinFindBuf(buffer) abort$/;"	f
Window	nvim/plugged/coc.nvim/build/index.js	/^class Window extends Base_1.BaseApi {$/;"	C
WindowConfig	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^export interface WindowConfig {$/;"	i
Worker	nvim/plugged/coc.nvim/build/index.js	/^class Worker {$/;"	C
Worker	nvim/plugged/coc.nvim/src/list/worker.ts	/^export default class Worker {$/;"	c
Workspace	nvim/plugged/coc.nvim/build/index.js	/^class Workspace {$/;"	C
Workspace	nvim/plugged/coc.nvim/src/workspace.ts	/^export class Workspace implements IWorkspace {$/;"	c
WorkspaceChange	nvim/plugged/coc.nvim/build/index.js	/^    function WorkspaceChange(workspaceEdit) {$/;"	F
WorkspaceChange	nvim/plugged/coc.nvim/build/index.js	/^var WorkspaceChange = \/** @class *\/ (function () {$/;"	V
WorkspaceConfiguration	nvim/plugged/coc.nvim/src/types.ts	/^export interface WorkspaceConfiguration {$/;"	i
WorkspaceEdit	nvim/plugged/coc.nvim/build/index.js	/^var WorkspaceEdit;$/;"	V
WorkspaceFeature	nvim/plugged/coc.nvim/build/index.js	/^class WorkspaceFeature {$/;"	C
WorkspaceFolderWorkspaceMiddleware	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^export interface WorkspaceFolderWorkspaceMiddleware {$/;"	i
WorkspaceFoldersFeature	nvim/plugged/coc.nvim/build/index.js	/^class WorkspaceFoldersFeature {$/;"	C
WorkspaceFoldersFeature	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^export class WorkspaceFoldersFeature implements DynamicFeature<undefined> {$/;"	c
WorkspaceFoldersRequest	nvim/plugged/coc.nvim/build/index.js	/^var WorkspaceFoldersRequest;$/;"	V
WorkspaceMiddleware	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export type WorkspaceMiddleware = _WorkspaceMiddleware & ConfigurationWorkspaceMiddleware & WorkspaceFolderWorkspaceMiddleware$/;"	t
WorkspaceSymbolFeature	nvim/plugged/coc.nvim/build/index.js	/^class WorkspaceSymbolFeature extends WorkspaceFeature {$/;"	C
WorkspaceSymbolFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^class WorkspaceSymbolFeature extends WorkspaceFeature<TextDocumentRegistrationOptions> {$/;"	c
WorkspaceSymbolManager	nvim/plugged/coc.nvim/build/index.js	/^class WorkspaceSymbolManager extends manager_1.default {$/;"	C
WorkspaceSymbolManager	nvim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^export default class WorkspaceSymbolManager extends Manager<WorkspaceSymbolProvider> implements Disposable {$/;"	c
WorkspaceSymbolProvider	nvim/plugged/coc.nvim/src/provider/index.ts	/^export interface WorkspaceSymbolProvider {$/;"	i
WorkspaceSymbolRequest	nvim/plugged/coc.nvim/build/index.js	/^var WorkspaceSymbolRequest;$/;"	V
WriteEntrySync	nvim/plugged/coc.nvim/build/index.js	/^class WriteEntrySync extends WriteEntry {$/;"	C
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^    WriteStream: WriteStream$/;"	P
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^  function WriteStream (path, options) {$/;"	F
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^class WriteStream extends EE {$/;"	C
WriteStream$open	nvim/plugged/coc.nvim/build/index.js	/^  function WriteStream$open () {$/;"	F
WriteStreamSync	nvim/plugged/coc.nvim/build/index.js	/^class WriteStreamSync extends WriteStream {$/;"	C
X	nvim/plugged/coc.nvim/build/index.js	/^    X: contextDefined,$/;"	P
X	nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      module X$/;"	m
XXX	nvim/plugged/coc.nvim/build/index.js	/^		\/\/ XXX (@Qix-) should we be logging these?$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^        \/\/ XXX remove this slice.  Just pass the start index.$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^      \/\/ XXX split the path$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ XXX (@Qix-) should we be logging these?$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ XXX It's somewhat ambiguous whether a new callback added in this$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ XXX: get the type ('file' or 'dir') for windows$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX (@Qix-) should we be logging these?$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX Values with \\n in them will fail this.$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX review this.  Shouldn't it be doing the mounting etc$/;"	T
XXX	nvim/plugged/coc.nvim/build/index.js	/^\/\/ XXX: This shares a lot in common with extract.js$/;"	T
Yallist	nvim/plugged/coc.nvim/build/index.js	/^function Yallist (list) {$/;"	F
ZERO	nvim/plugged/coc.nvim/build/index.js	/^  var ZERO = [0, 0, 0, 0, 0, 0, 0, 0];$/;"	A
ZIP_EXT	nvim/plugged/coc.nvim/build/index.js	/^const ZIP_EXT = ".gz";$/;"	V
ZLIB_VERNUM	nvim/plugged/coc.nvim/build/index.js	/^  ZLIB_VERNUM: 4736,$/;"	P
Z_BEST_COMPRESSION	nvim/plugged/coc.nvim/build/index.js	/^  Z_BEST_COMPRESSION: 9,$/;"	P
Z_BEST_SPEED	nvim/plugged/coc.nvim/build/index.js	/^  Z_BEST_SPEED: 1,$/;"	P
Z_BLOCK	nvim/plugged/coc.nvim/build/index.js	/^  Z_BLOCK: 5,$/;"	P
Z_DEFAULT_CHUNK	nvim/plugged/coc.nvim/build/index.js	/^  Z_DEFAULT_CHUNK: 16384,$/;"	P
Z_DEFAULT_MEMLEVEL	nvim/plugged/coc.nvim/build/index.js	/^  Z_DEFAULT_MEMLEVEL: 8,$/;"	P
Z_DEFAULT_STRATEGY	nvim/plugged/coc.nvim/build/index.js	/^  Z_DEFAULT_STRATEGY: 0,$/;"	P
Z_DEFAULT_WINDOWBITS	nvim/plugged/coc.nvim/build/index.js	/^  Z_DEFAULT_WINDOWBITS: 15,$/;"	P
Z_FILTERED	nvim/plugged/coc.nvim/build/index.js	/^  Z_FILTERED: 1,$/;"	P
Z_FINISH	nvim/plugged/coc.nvim/build/index.js	/^  Z_FINISH: 4,$/;"	P
Z_FIXED	nvim/plugged/coc.nvim/build/index.js	/^  Z_FIXED: 4,$/;"	P
Z_FULL_FLUSH	nvim/plugged/coc.nvim/build/index.js	/^  Z_FULL_FLUSH: 3,$/;"	P
Z_HUFFMAN_ONLY	nvim/plugged/coc.nvim/build/index.js	/^  Z_HUFFMAN_ONLY: 2,$/;"	P
Z_MAX_CHUNK	nvim/plugged/coc.nvim/build/index.js	/^  Z_MAX_CHUNK: Infinity,$/;"	P
Z_MAX_LEVEL	nvim/plugged/coc.nvim/build/index.js	/^  Z_MAX_LEVEL: 9,$/;"	P
Z_MAX_MEMLEVEL	nvim/plugged/coc.nvim/build/index.js	/^  Z_MAX_MEMLEVEL: 9,$/;"	P
Z_MAX_WINDOWBITS	nvim/plugged/coc.nvim/build/index.js	/^  Z_MAX_WINDOWBITS: 15,$/;"	P
Z_MIN_CHUNK	nvim/plugged/coc.nvim/build/index.js	/^  Z_MIN_CHUNK: 64,$/;"	P
Z_MIN_MEMLEVEL	nvim/plugged/coc.nvim/build/index.js	/^  Z_MIN_MEMLEVEL: 1,$/;"	P
Z_MIN_WINDOWBITS	nvim/plugged/coc.nvim/build/index.js	/^  Z_MIN_WINDOWBITS: 8,$/;"	P
Z_NEED_DICT	nvim/plugged/coc.nvim/build/index.js	/^  Z_NEED_DICT: 2,$/;"	P
Z_NO_COMPRESSION	nvim/plugged/coc.nvim/build/index.js	/^  Z_NO_COMPRESSION: 0,$/;"	P
Z_NO_FLUSH	nvim/plugged/coc.nvim/build/index.js	/^  Z_NO_FLUSH: 0,$/;"	P
Z_OK	nvim/plugged/coc.nvim/build/index.js	/^  Z_OK: 0,$/;"	P
Z_PARTIAL_FLUSH	nvim/plugged/coc.nvim/build/index.js	/^  Z_PARTIAL_FLUSH: 1,$/;"	P
Z_RLE	nvim/plugged/coc.nvim/build/index.js	/^  Z_RLE: 3,$/;"	P
Z_STREAM_END	nvim/plugged/coc.nvim/build/index.js	/^  Z_STREAM_END: 1,$/;"	P
Z_SYNC_FLUSH	nvim/plugged/coc.nvim/build/index.js	/^  Z_SYNC_FLUSH: 2,$/;"	P
Zlib	nvim/plugged/coc.nvim/build/index.js	/^class Zlib extends MiniPass {$/;"	C
ZlibError	nvim/plugged/coc.nvim/build/index.js	/^class ZlibError extends Error {$/;"	C
ZoomWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
[=	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> [= <Plug>VimwikiGoToPrevSiblingHeader$/;"	m
[M	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR>$/;"	m
[[	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
[[	nvim/plugged/vim-vue/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [[ :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'bW')<CR>$/;"	m
[[	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> [[ <Plug>VimwikiGoToPrevHeader$/;"	m
[]	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[]	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[]	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
[]	nvim/plugged/vim-vue/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [] :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'bW')<CR>$/;"	m
[g	nvim/init.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
[m	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR>$/;"	m
[u	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> [u <Plug>VimwikiGoToParentHeader$/;"	m
]=	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> ]= <Plug>VimwikiGoToNextSiblingHeader$/;"	m
]M	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>$/;"	m
][	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
][	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
][	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
][	nvim/plugged/vim-vue/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ][ :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'W')<CR>$/;"	m
]]	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
]]	nvim/plugged/vim-vue/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ]] :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'W')<CR>$/;"	m
]]	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> ]] <Plug>VimwikiGoToNextHeader$/;"	m
]g	nvim/init.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
]m	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>$/;"	m
]u	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> ]u <Plug>VimwikiGoToParentHeader$/;"	m
_	nvim/plugged/coc.nvim/build/index.js	/^    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;$/;"	O
_2scomp	nvim/plugged/coc.nvim/build/index.js	/^  _2scomp: function() {$/;"	M
_HEX	nvim/plugged/coc.nvim/build/index.js	/^var _HEX = [];$/;"	A
_Middleware	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface _Middleware {$/;"	i
_URI	nvim/plugged/coc.nvim/build/index.js	/^    function _URI() {$/;"	F
_WorkspaceMiddleware	nvim/plugged/coc.nvim/src/language-client/client.ts	/^export interface _WorkspaceMiddleware {$/;"	i
__	nvim/plugged/coc.nvim/build/index.js	/^        function __() { this.constructor = d; }$/;"	F
__	nvim/plugged/coc.nvim/build/index.js	/^    function __() { this.constructor = d; }$/;"	F
__asyncDelegator	nvim/plugged/coc.nvim/build/index.js	/^function __asyncDelegator(o) {$/;"	F
__asyncGenerator	nvim/plugged/coc.nvim/build/index.js	/^function __asyncGenerator(thisArg, _arguments, generator) {$/;"	F
__asyncValues	nvim/plugged/coc.nvim/build/index.js	/^function __asyncValues(o) {$/;"	F
__author__	nvim/plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^__author__ = 'Joao Paulo, w0rp'$/;"	v
__await	nvim/plugged/coc.nvim/build/index.js	/^function __await(v) {$/;"	F
__awaiter	nvim/plugged/coc.nvim/build/index.js	/^function __awaiter(thisArg, _arguments, P, generator) {$/;"	F
__decorate	nvim/plugged/coc.nvim/build/index.js	/^function __decorate(decorators, target, key, desc) {$/;"	F
__dirname	nvim/plugged/coc.nvim/webpack.config.js	/^    __dirname: false$/;"	P
__export	nvim/plugged/coc.nvim/build/index.js	/^function __export(m) {$/;"	F
__exportStar	nvim/plugged/coc.nvim/build/index.js	/^function __exportStar(m, exports) {$/;"	F
__extends	nvim/plugged/coc.nvim/build/index.js	/^function __extends(d, b) {$/;"	F
__filename	nvim/plugged/coc.nvim/webpack.config.js	/^    __filename: false,$/;"	P
__generator	nvim/plugged/coc.nvim/build/index.js	/^function __generator(thisArg, body) {$/;"	F
__importDefault	nvim/plugged/coc.nvim/build/index.js	/^function __importDefault(mod) {$/;"	F
__importStar	nvim/plugged/coc.nvim/build/index.js	/^function __importStar(mod) {$/;"	F
__init__	nvim/plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^        def __init__(self, vim):$/;"	m	class:Base
__init__	nvim/plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def __init__(self, call_list, call_results):$/;"	m	class:VimMock
__makeTemplateObject	nvim/plugged/coc.nvim/build/index.js	/^function __makeTemplateObject(cooked, raw) {$/;"	F
__metadata	nvim/plugged/coc.nvim/build/index.js	/^function __metadata(metadataKey, metadataValue) {$/;"	F
__noDynamicImport	nvim/plugged/coc.nvim/build/index.js	/^let __noDynamicImport;$/;"	V
__param	nvim/plugged/coc.nvim/build/index.js	/^function __param(paramIndex, decorator) {$/;"	F
__read	nvim/plugged/coc.nvim/build/index.js	/^function __read(o, n) {$/;"	F
__rest	nvim/plugged/coc.nvim/build/index.js	/^function __rest(s, e) {$/;"	F
__spread	nvim/plugged/coc.nvim/build/index.js	/^function __spread() {$/;"	F
__spreadArrays	nvim/plugged/coc.nvim/build/index.js	/^function __spreadArrays() {$/;"	F
__values	nvim/plugged/coc.nvim/build/index.js	/^function __values(o) {$/;"	F
_a	nvim/plugged/coc.nvim/build/index.js	/^    var _a;$/;"	V
_a	nvim/plugged/coc.nvim/build/index.js	/^var _a;$/;"	V
_accept	nvim/plugged/coc.nvim/build/index.js	/^    _accept(type, value) {$/;"	M
_accept	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _accept(type: TokenType | undefined, value: true): string$/;"	m
_accept	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _accept(type: TokenType, value?: boolean): boolean | string {$/;"	m
_accept	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _accept(type?: TokenType): boolean$/;"	m
_activated	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private _activated = false$/;"	m
_additionalSchemes	nvim/plugged/coc.nvim/build/index.js	/^        this._additionalSchemes = {};$/;"	P
_additionalSchemes	nvim/plugged/coc.nvim/src/extensions.ts	/^  private _additionalSchemes: { [key: string]: PropertyScheme } = {}$/;"	m
_append	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private async _append(value: string, isLine: boolean): Promise<void> {$/;"	m
_appendOutput	nvim/plugged/coc.nvim/build/index.js	/^    _appendOutput(type, message, data) {$/;"	M
_appendOutput	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _appendOutput(type: string, message: string, data?: any): void {$/;"	m
_asFormatted	nvim/plugged/coc.nvim/build/index.js	/^function _asFormatted(uri, skipEncoding) {$/;"	F
_attached	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _attached = false$/;"	m
_backTo	nvim/plugged/coc.nvim/build/index.js	/^    _backTo(token) {$/;"	M
_backTo	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _backTo(token: Token): false {$/;"	m
_bar	nvim/plugged/vim-jsdoc/test/test.ts	/^  public _bar(): void {$/;"	m
_baz	nvim/plugged/vim-jsdoc/test/test.ts	/^function _baz()  :number{$/;"	f
_blocking	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _blocking = false$/;"	m
_bufnr	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private _bufnr = 0$/;"	m
_canceled	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  private _canceled = false$/;"	m
_canceled	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^  private _canceled = false$/;"	m
_capabilities	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _capabilities: ServerCapabilities &$/;"	m
_changeData	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _changeData: Map<string, DidChangeTextDocumentData> = new Map<string, DidChangeTextDocumentData>()$/;"	m
_changed	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private _changed = false$/;"	m
_changedtick	nvim/plugged/coc.nvim/src/model/document.ts	/^  private _changedtick: number$/;"	m
_children	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  protected _children: Marker[] = []$/;"	m
_client	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    protected _client: BaseLanguageClient,$/;"	m
_clientOptions	nvim/plugged/coc.nvim/build/index.js	/^        this._clientOptions = {$/;"	P
_clientOptions	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _clientOptions: Lazy<ResolvedClientOptions>$/;"	m
_clockseq	nvim/plugged/coc.nvim/build/index.js	/^var _clockseq;$/;"	V
_colors	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  private _colors: ColorInformation[] = []$/;"	m
_commands	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _commands: Map<string, Disposable[]> = new Map<string, Disposable[]>()$/;"	m
_configuration	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private _configuration: Configuration$/;"	m
_connectionPromise	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _connectionPromise: Thenable<IConnection> | undefined$/;"	m
_console	nvim/plugged/coc.nvim/build/index.js	/^  var _console;$/;"	V
_consolidateConfiguration	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^  private _consolidateConfiguration: ConfigurationModel$/;"	m
_content	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private _content = ''$/;"	m
_createMessageConnection	nvim/plugged/coc.nvim/build/index.js	/^function _createMessageConnection(messageReader, messageWriter, logger, strategy) {$/;"	F
_createParams	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    protected _createParams: CreateParamsSignature<E, P>,$/;"	m
_currId	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private _currId = 0$/;"	m
_cursor	nvim/plugged/coc.nvim/build/index.js	/^            this._cursor = {$/;"	P
_cursor	nvim/plugged/coc.nvim/src/events.ts	/^  private _cursor: CursorPosition$/;"	m
_cwd	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _cwd = process.cwd()$/;"	m
_dateChanged	nvim/plugged/coc.nvim/build/index.js	/^  _dateChanged() {$/;"	M
_decode	nvim/plugged/coc.nvim/build/index.js	/^var _decode;$/;"	V
_default	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			_default: "*\/*"$/;"	P
_default	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		_default: function(fx){$/;"	M
_defaultConfiguration	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^    private _defaultConfiguration: ConfigurationModel,$/;"	m
_diagnostics	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _diagnostics: DiagnosticCollection | undefined$/;"	m
_disabled	nvim/plugged/coc.nvim/src/model/source.ts	/^  private _disabled = false$/;"	m
_disposable	nvim/plugged/coc.nvim/build/index.js	/^    const _disposable = { dispose() { } };$/;"	O
_disposeOutputChannel	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _disposeOutputChannel: boolean$/;"	m
_disposed	nvim/plugged/coc.nvim/src/watchman.ts	/^  private _disposed = false$/;"	m
_disposed	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _disposed = false$/;"	m
_doComplete	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async _doComplete(option: CompleteOption): Promise<void> {$/;"	m
_doubleSlashStart	nvim/plugged/coc.nvim/build/index.js	/^var _doubleSlashStart = \/^\\\/\\\/\/;$/;"	V
_dynamicFeatures	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private readonly _dynamicFeatures: Map<string, DynamicFeature<any>> = new Map<$/;"	m
_emitMatch	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._emitMatch = function (index, e) {$/;"	M
_emitMatch	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._emitMatch = function (index, e) {$/;"	M
_empty	nvim/plugged/coc.nvim/build/index.js	/^var _empty = '';$/;"	V
_enabled	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  private _enabled = true$/;"	m
_encode	nvim/plugged/coc.nvim/build/index.js	/^var _encode;$/;"	V
_ends_with	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:_ends_with(text, expr, lnum)$/;"	f
_env	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _env: Env$/;"	m
_errorItems	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private _errorItems: ErrorItem[] = []$/;"	m
_event	nvim/plugged/coc.nvim/build/index.js	/^            this._event = (listener, thisArgs, disposables) => {$/;"	M
_event	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    private _event: Event<E>,$/;"	m
_false	nvim/plugged/coc.nvim/build/index.js	/^function _false() {$/;"	F
_features	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private readonly _features: (StaticFeature | DynamicFeature<any>)[] = []$/;"	m
_fetchContent	nvim/plugged/coc.nvim/src/model/document.ts	/^  private async _fetchContent(): Promise<void> {$/;"	m
_fileEventDelayer	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _fileEventDelayer: Delayer<void>$/;"	m
_fileEvents	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _fileEvents: FileEvent[]$/;"	m
_filetype	nvim/plugged/coc.nvim/src/model/document.ts	/^  private _filetype: string$/;"	m
_final	nvim/plugged/coc.nvim/build/index.js	/^  _final(callback) {$/;"	M
_finish	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._finish = function () {$/;"	M
_finish	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._finish = function () {$/;"	M
_fireContentChanges	nvim/plugged/coc.nvim/build/index.js	/^    _fireContentChanges(force = false) {$/;"	M
_fireContentChanges	nvim/plugged/coc.nvim/src/model/document.ts	/^  private _fireContentChanges(force = false): void {$/;"	m
_fixParent	nvim/plugged/coc.nvim/build/index.js	/^        (function _fixParent(children, parent) {$/;"	F
_flush	nvim/plugged/coc.nvim/build/index.js	/^    _flush(callback) {$/;"	M
_flush	nvim/plugged/coc.nvim/build/index.js	/^EncodeStream.prototype._flush = function(callback) {$/;"	M
_folderConfigurations	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private _folderConfigurations: Map<string, ConfigurationModel> = new Map()$/;"	m
_forceDebug	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private _forceDebug: boolean$/;"	m
_fzf_statusline	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_getPrefix	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
_getServerWorkingDir	nvim/plugged/coc.nvim/build/index.js	/^    _getServerWorkingDir(options) {$/;"	M
_getServerWorkingDir	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private _getServerWorkingDir(options?: { cwd?: string }): Promise<string | undefined> {$/;"	m
_handleOldOptions	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
_highlightCurrent	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  private async _highlightCurrent(): Promise<void> {$/;"	m
_id	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _id: string$/;"	m
_includeText	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _includeText: boolean$/;"	m
_initializeResult	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _initializeResult: InitializeResult | undefined$/;"	m
_initialized	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _initialized = false$/;"	m
_input	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  private _input = ''$/;"	m
_insertMode	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _insertMode = false$/;"	m
_install	nvim/plugged/coc.nvim/src/model/extension.ts	/^  private async _install(npm: string, def: string, info: Info, onMessage: (msg: string) => void): Promise<void> {$/;"	m
_is	nvim/plugged/coc.nvim/build/index.js	/^function _is(name, key) {$/;"	F
_isActive	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private _isActive = false$/;"	m
_isArray	nvim/plugged/coc.nvim/build/index.js	/^  function _isArray(val) {$/;"	F
_isDetached	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private _isDetached: boolean | undefined$/;"	m
_isInt64	nvim/plugged/coc.nvim/build/index.js	/^    var _isInt64 = "_" + isName;$/;"	V
_lastMSecs	nvim/plugged/coc.nvim/build/index.js	/^var _lastMSecs = 0;$/;"	V
_lastNSecs	nvim/plugged/coc.nvim/build/index.js	/^var _lastNSecs = 0;$/;"	V
_listener	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _listener: Disposable | undefined$/;"	m
_listeners	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _listeners: Disposable[] | undefined$/;"	m
_listeners	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _listeners: Map<string, Disposable> = new Map<string, Disposable>()$/;"	m
_listeners	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private _listeners: Disposable[]$/;"	m
_listeners	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  private _listeners: Map<string, Disposable> = new Map<string, Disposable>()$/;"	m
_loading	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private _loading = false$/;"	m
_log	nvim/plugged/coc.nvim/build/index.js	/^  _log(level, data) {$/;"	M
_makeAbs	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._makeAbs = function (f) {$/;"	M
_makeAbs	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._makeAbs = function (f) {$/;"	M
_makeFsPath	nvim/plugged/coc.nvim/build/index.js	/^function _makeFsPath(uri) {$/;"	F
_mark	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._mark = function (p) {$/;"	M
_mark	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._mark = function (p) {$/;"	M
_markerBrand	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public readonly _markerBrand: any$/;"	m
_matcher	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  private _matcher: Matcher | ''$/;"	m
_memoryConfiguration	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^    private _memoryConfiguration: ConfigurationModel = new ConfigurationModel(),$/;"	m
_message	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    private _message: RPCMessageType$/;"	m
_method2Message	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private readonly _method2Message: Map<string, RPCMessageType> = new Map<$/;"	m
_middleware	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    protected _middleware: NextSignature<E, void> | undefined,$/;"	m
_mode	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  private _mode: ListMode = 'insert'$/;"	m
_name	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _name: string$/;"	m
_name	nvim/plugged/coc.nvim/src/model/terminal.ts	/^    private _name?: string) {$/;"	m
_nodeId	nvim/plugged/coc.nvim/build/index.js	/^var _nodeId;$/;"	V
_noop	nvim/plugged/coc.nvim/build/index.js	/^Emitter._noop = function () { };$/;"	M
_notifyFileEvent	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    private _notifyFileEvent: (event: FileEvent) => void$/;"	m
_onCancelEvent	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private _onCancelEvent = new Emitter<void>()$/;"	m
_onChange	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private _onChange = new Emitter<ConfigurationChangeEvent>()$/;"	m
_onDidActiveExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  private _onDidActiveExtension = new Emitter<Extension<API>>()$/;"	m
_onDidChange	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private _onDidChange = new Emitter<void>()$/;"	m
_onDidChange	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  private _onDidChange = new Emitter<URI>()$/;"	m
_onDidChangeConfiguration	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidChangeConfiguration = new Emitter<ConfigurationChangeEvent>()$/;"	m
_onDidChangeDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidChangeDocument = new Emitter<DidChangeTextDocumentParams>()$/;"	m
_onDidChangeInput	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  private _onDidChangeInput = new Emitter<string>()$/;"	m
_onDidChangeItems	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private _onDidChangeItems = new Emitter<ListItemsEvent>()$/;"	m
_onDidChangeLine	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private _onDidChangeLine = new Emitter<number>()$/;"	m
_onDidChangeWorkspaceFolders	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidChangeWorkspaceFolders = new Emitter<WorkspaceFoldersChangeEvent>()$/;"	m
_onDidClose	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private _onDidClose = new Emitter<number>()$/;"	m
_onDidCloseDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidCloseDocument = new Emitter<TextDocument>()$/;"	m
_onDidCloseTerminal	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidCloseTerminal = new Emitter<Terminal>()$/;"	m
_onDidComplete	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  private readonly _onDidComplete = new Emitter<void>()$/;"	m
_onDidCreate	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  private _onDidCreate = new Emitter<URI>()$/;"	m
_onDidDelete	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  private _onDidDelete = new Emitter<URI>()$/;"	m
_onDidDiagnosticsChange	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  private _onDidDiagnosticsChange = new Emitter<string>()$/;"	m
_onDidDiagnosticsClear	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  private _onDidDiagnosticsClear = new Emitter<string[]>()$/;"	m
_onDidLineChange	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private _onDidLineChange = new Emitter<number>()$/;"	m
_onDidLoadExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  private _onDidLoadExtension = new Emitter<Extension<API>>()$/;"	m
_onDidOpen	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private _onDidOpen = new Emitter<number>()$/;"	m
_onDidOpenDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidOpenDocument = new Emitter<TextDocument>()$/;"	m
_onDidOpenTerminal	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidOpenTerminal = new Emitter<Terminal>()$/;"	m
_onDidRefresh	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private readonly _onDidRefresh = new Emitter<void>()$/;"	m
_onDidRename	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  private _onDidRename = new Emitter<RenameEvent>()$/;"	m
_onDidSaveDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidSaveDocument = new Emitter<TextDocument>()$/;"	m
_onDidUnloadExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  private _onDidUnloadExtension = new Emitter<string>()$/;"	m
_onDidWorkspaceInitialized	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onDidWorkspaceInitialized = new Emitter<void>()$/;"	m
_onDispose	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  private _onDispose = new Emitter<void>()$/;"	m
_onDocumentChange	nvim/plugged/coc.nvim/src/model/document.ts	/^  private _onDocumentChange = new Emitter<DidChangeTextDocumentParams>()$/;"	m
_onDocumentDetach	nvim/plugged/coc.nvim/src/model/document.ts	/^  private _onDocumentDetach = new Emitter<string>()$/;"	m
_onDoubleClick	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private _onDoubleClick = new Emitter<void>()$/;"	m
_onError	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private _onError = new Emitter<ErrorItem[]>()$/;"	m
_onExit	nvim/plugged/coc.nvim/src/model/task.ts	/^  private readonly _onExit = new Emitter<number>()$/;"	m
_onNativeResponse	nvim/plugged/coc.nvim/build/index.js	/^  this._onNativeResponse = function (response) {$/;"	M
_onReady	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _onReady: Promise<void>$/;"	m
_onReadyCallbacks	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _onReadyCallbacks: OnReady$/;"	m
_onStderr	nvim/plugged/coc.nvim/src/model/task.ts	/^  private readonly _onStderr = new Emitter<string[]>()$/;"	m
_onStdout	nvim/plugged/coc.nvim/src/model/task.ts	/^  private readonly _onStdout = new Emitter<string[]>()$/;"	m
_onStop	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _onStop: Thenable<void> | undefined$/;"	m
_onWillSaveDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _onWillSaveDocument = new Emitter<TextDocumentWillSaveEvent>()$/;"	m
_options	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private _options: () => [LanguageClientOptions, ServerOptions]$/;"	m
_outputChannel	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _outputChannel: OutputChannel | undefined$/;"	m
_parse	nvim/plugged/coc.nvim/build/index.js	/^    _parse(marker) {$/;"	M
_parse	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parse(marker: Marker): boolean {$/;"	m
_parseAnything	nvim/plugged/coc.nvim/build/index.js	/^    _parseAnything(marker) {$/;"	M
_parseAnything	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parseAnything(marker: Marker): boolean {$/;"	m
_parseChoiceElement	nvim/plugged/coc.nvim/build/index.js	/^    _parseChoiceElement(parent) {$/;"	M
_parseChoiceElement	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parseChoiceElement(parent: Choice): boolean {$/;"	m
_parseComplexPlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    _parseComplexPlaceholder(parent) {$/;"	M
_parseComplexPlaceholder	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parseComplexPlaceholder(parent: Marker): boolean {$/;"	m
_parseComplexVariable	nvim/plugged/coc.nvim/build/index.js	/^    _parseComplexVariable(parent) {$/;"	M
_parseComplexVariable	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parseComplexVariable(parent: Marker): boolean {$/;"	m
_parseEscaped	nvim/plugged/coc.nvim/build/index.js	/^    _parseEscaped(marker) {$/;"	M
_parseEscaped	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parseEscaped(marker: Marker): boolean {$/;"	m
_parseFormatString	nvim/plugged/coc.nvim/build/index.js	/^    _parseFormatString(parent) {$/;"	M
_parseFormatString	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parseFormatString(parent: Transform): boolean {$/;"	m
_parseOption	nvim/plugged/coc.nvim/build/index.js	/^  _parseOption(rawOptions) {$/;"	M
_parseTabstopOrVariableName	nvim/plugged/coc.nvim/build/index.js	/^    _parseTabstopOrVariableName(parent) {$/;"	M
_parseTabstopOrVariableName	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parseTabstopOrVariableName(parent: Marker): boolean {$/;"	m
_parseTransform	nvim/plugged/coc.nvim/build/index.js	/^    _parseTransform(parent) {$/;"	M
_parseTransform	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _parseTransform(parent: TransformableMarker): boolean {$/;"	m
_parser	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  private _parser: Snippets.SnippetParser = new Snippets.SnippetParser()$/;"	m
_performRequest	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype._performRequest = function () {$/;"	M
_placeholders	nvim/plugged/coc.nvim/build/index.js	/^            this._placeholders = { all, last };$/;"	P
_placeholders	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _placeholders?: { all: Placeholder[], last?: Placeholder }$/;"	m
_placeholders	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  private _placeholders: CocSnippetPlaceholder[]$/;"	m
_process	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._process = function (pattern, index, inGlobStar, cb) {$/;"	M
_process	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._process = function (pattern, index, inGlobStar) {$/;"	M
_processGlobStar	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {$/;"	M
_processGlobStar	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {$/;"	M
_processGlobStar2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {$/;"	M
_processReaddir	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {$/;"	M
_processReaddir	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {$/;"	M
_processReaddir2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {$/;"	M
_processResponse	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype._processResponse = function (response) {$/;"	M
_processSimple	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processSimple = function (prefix, index, cb) {$/;"	M
_processSimple	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processSimple = function (prefix, index) {$/;"	M
_processSimple2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {$/;"	M
_provideDocumentLinks	nvim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  private async _provideDocumentLinks(item: ProviderItem<DocumentLinkProvider>, document: TextDocument, token: CancellationToken): Promise<DocumentLink[]> {$/;"	m
_providers	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _providers: Disposable[] | undefined$/;"	m
_providers	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected _providers: Map<string, Disposable> = new Map<string, Disposable>()$/;"	m
_proxy	nvim/plugged/coc.nvim/src/configuration/index.ts	/^    private readonly _proxy?: ConfigurationShape$/;"	m
_readdir	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdir = function (abs, inGlobStar, cb) {$/;"	M
_readdir	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdir = function (abs, inGlobStar) {$/;"	M
_readdirEntries	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirEntries = function (abs, entries, cb) {$/;"	M
_readdirEntries	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirEntries = function (abs, entries) {$/;"	M
_readdirError	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirError = function (f, er, cb) {$/;"	M
_readdirError	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirError = function (f, er) {$/;"	M
_readdirInGlobStar	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirInGlobStar = function (abs, cb) {$/;"	M
_readdirInGlobStar	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirInGlobStar = function (abs) {$/;"	M
_ready	nvim/plugged/coc.nvim/src/plugin.ts	/^  private _ready = false$/;"	m
_realpath	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._realpath = function () {$/;"	M
_realpathSet	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._realpathSet = function (index, cb) {$/;"	M
_referenceResolution	nvim/plugged/coc.nvim/build/index.js	/^function _referenceResolution(scheme, path) {$/;"	F
_refresh	nvim/plugged/coc.nvim/build/index.js	/^    _refresh(diagnostics) {$/;"	M
_refresh	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private _refresh(diagnostics: ReadonlyArray<Diagnostic>): void {$/;"	m
_regexp	nvim/plugged/coc.nvim/build/index.js	/^var _regexp = \/^(([^:\/?#]+?):)?(\\\/\\\/([^\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\/;$/;"	V
_renewWriteStream	nvim/plugged/coc.nvim/build/index.js	/^  _renewWriteStream() {$/;"	M
_replace	nvim/plugged/coc.nvim/build/index.js	/^    _replace(groups) {$/;"	M
_replace	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _replace(groups: string[]): string {$/;"	m
_resolveCodeLenes	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private async _resolveCodeLenes(clear = false): Promise<void> {$/;"	m
_resolved	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^  private _resolved = false$/;"	m
_resolvedConnection	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _resolvedConnection: IConnection | undefined$/;"	m
_roll	nvim/plugged/coc.nvim/build/index.js	/^  _roll() {$/;"	M
_root	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _root: string$/;"	m
_sanitizeOptions	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype._sanitizeOptions = function (options) {$/;"	M
_scanner	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _scanner = new Scanner()$/;"	m
_schemeFix	nvim/plugged/coc.nvim/build/index.js	/^function _schemeFix(scheme, _strict) {$/;"	F
_schemePattern	nvim/plugged/coc.nvim/build/index.js	/^var _schemePattern = \/^\\w[\\w\\d+.-]*$\/;$/;"	V
_selectorFilter	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    protected _selectorFilter?: ($/;"	m
_selectors	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _selectors: Map<string, DocumentSelector> = new Map<string, DocumentSelector>()$/;"	m
_selectors	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected _selectors: Map<string, DocumentSelector> = new Map()$/;"	m
_serverProcess	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private _serverProcess: ChildProcess | undefined$/;"	m
_setExistingSizeAndDate	nvim/plugged/coc.nvim/build/index.js	/^  _setExistingSizeAndDate() {$/;"	M
_setupDynamicAutocmd	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async _setupDynamicAutocmd(): Promise<void> {$/;"	m
_showing	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private _showing = false$/;"	m
_singleSlashStart	nvim/plugged/coc.nvim/build/index.js	/^var _singleSlashStart = \/^\\\/\/;$/;"	V
_slash	nvim/plugged/coc.nvim/build/index.js	/^var _slash = '\/';$/;"	V
_snippet	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private _snippet: CocSnippet = null$/;"	m
_starts_with	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:_starts_with(text, expr, lnum)$/;"	f
_stat	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._stat = function (f, cb) {$/;"	M
_stat	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._stat = function (f) {$/;"	M
_stat2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._stat2 = function (f, abs, er, stat, cb) {$/;"	M
_state	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected _state: ClientState$/;"	m
_stateChangeEmitter	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _stateChangeEmitter: Emitter<StateChangeEvent>$/;"	m
_string	nvim/plugged/coc.nvim/build/index.js	/^  function _string(head_size) {$/;"	F
_syncedDocuments	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    private _syncedDocuments: Map<string, TextDocument>$/;"	m
_syncedDocuments	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _syncedDocuments: Map<string, TextDocument>$/;"	m
_synthesizeCapabilityCheck	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype._synthesizeCapabilityCheck = function($/;"	M
_table	nvim/plugged/coc.nvim/build/index.js	/^Scanner._table = {$/;"	P
_table	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private static _table: { [ch: number]: TokenType } = {$/;"	m
_text	nvim/plugged/coc.nvim/src/model/status.ts	/^  private _text = ''$/;"	m
_toPascalCase	nvim/plugged/coc.nvim/build/index.js	/^    _toPascalCase(value) {$/;"	M
_toPascalCase	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _toPascalCase(value: string): string {$/;"	m
_token	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _token: Token$/;"	m
_tooBig	nvim/plugged/coc.nvim/build/index.js	/^  _tooBig() {$/;"	M
_tooManyFiles	nvim/plugged/coc.nvim/build/index.js	/^  _tooManyFiles(numFiles) {$/;"	M
_trace	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _trace: Trace$/;"	m
_traceFormat	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _traceFormat: TraceFormat$/;"	m
_tracer	nvim/plugged/coc.nvim/build/index.js	/^        this._tracer = {$/;"	P
_tracer	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _tracer: Tracer$/;"	m
_transform	nvim/plugged/coc.nvim/build/index.js	/^    _transform(chunk, _encoding, callback) {$/;"	M
_transform	nvim/plugged/coc.nvim/build/index.js	/^DecodeStream.prototype._transform = function(chunk, encoding, callback) {$/;"	M
_transform	nvim/plugged/coc.nvim/build/index.js	/^EncodeStream.prototype._transform = function(chunk, encoding, callback) {$/;"	M
_type	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    protected _type: NotificationType<P, TextDocumentRegistrationOptions>,$/;"	m
_typeof	nvim/plugged/coc.nvim/build/index.js	/^function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }$/;"	F
_until	nvim/plugged/coc.nvim/build/index.js	/^    _until(type) {$/;"	M
_until	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _until(type: TokenType): false | string {$/;"	m
_uri	nvim/plugged/coc.nvim/src/model/document.ts	/^  private _uri: string$/;"	m
_used	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _used: boolean$/;"	m
_userConfiguration	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^    private _userConfiguration: ConfigurationModel,$/;"	m
_validateUri	nvim/plugged/coc.nvim/build/index.js	/^function _validateUri(ret, _strict) {$/;"	F
_variableResolver	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^    private _variableResolver?: VariableResolver) {$/;"	m
_variableToValue	nvim/plugged/coc.nvim/build/index.js	/^        this._variableToValue = {$/;"	P
_variableToValue	nvim/plugged/coc.nvim/build/index.js	/^        this._variableToValue = {};$/;"	P
_variableToValue	nvim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^  private _variableToValue: { [key: string]: string } = {}$/;"	m
_version	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  private _version: number$/;"	m
_watchers	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private _watchers: Map<string, Disposable[]> = new Map<string, Disposable[]>()$/;"	m
_words	nvim/plugged/coc.nvim/src/model/document.ts	/^  private _words: string[] = []$/;"	m
_workspaceConfiguration	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^    private _workspaceConfiguration: ConfigurationModel,$/;"	m
_workspaceEdit	nvim/plugged/coc.nvim/build/index.js	/^                this._workspaceEdit = {$/;"	P
_workspaceFolders	nvim/plugged/coc.nvim/src/workspace.ts	/^  private _workspaceFolders: WorkspaceFolder[] = []$/;"	m
_write	nvim/plugged/coc.nvim/build/index.js	/^  _write(chunk, encoding, callback) {$/;"	M
a	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> a <NOP>$/;"	m
a	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^    return b > a;$/;"	v
a2	nvim/plugged/coc.nvim/build/index.js	/^    var a2 = new Array(keys.length)$/;"	V
aClass	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^Aclass<T> aClass = bClass->getThing();$/;"	v	typeref:class:BaseCalss
aH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> aH :<C-U>call vimwiki#base#TO_header(0, 1, v:count1)<CR>$/;"	m
aH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> aH :<C-U>call vimwiki#base#TO_header(0, 1, v:count1)<CR>$/;"	m
aM	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
a\	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> a\\ :<C-U>call vimwiki#base#TO_table_cell(0, 0)<CR>$/;"	m
a\	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> a\\ :<C-U>call vimwiki#base#TO_table_cell(0, 1)<CR>$/;"	m
ab	nvim/plugged/coc.nvim/build/index.js	/^  function ab() {$/;"	F
abbr	nvim/plugged/coc.nvim/build/index.js	/^            abbr: label,$/;"	P
abort	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.abort = function () {$/;"	M
abs_path	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:abs_path(bufnr, shellesc)$/;"	f
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role = {}$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['composite'] = abstract_role['widget'] + ['aria-activedescendant']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['input'] = abstract_role['widget']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['landmark'] = role_attributes['region']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['range'] = abstract_role['input'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['roletype'] = ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['section'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['sectionhead'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['select'] = abstract_role['composite'] + role_attributes['group'] + abstract_role['input']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['structure'] = abstract_role['roletype']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['widget'] = abstract_role['roletype']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['window'] = abstract_role['roletype'] + ['aria-expanded']$/;"	v
abutton_dec	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let abutton_dec = 'details\\\\|embed\\\\|iframe\\\\|keygen\\\\|label\\\\|menu\\\\|select\\\\|textarea'$/;"	v
ac	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> ac :<C-U>call vimwiki#base#TO_table_col(0, 0)<CR>$/;"	m
ac	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> ac :<C-U>call vimwiki#base#TO_table_col(0, 1)<CR>$/;"	m
acceptCharacter	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public async acceptCharacter(ch: string): Promise<void> {$/;"	m
accepts	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		accepts: {$/;"	P
access	nvim/plugged/coc.nvim/build/index.js	/^function access(target, key) {$/;"	F
access	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^function access<T, K extends keyof T>(target: T | undefined, key: K): T[K] | undefined {$/;"	f
accessSetting	nvim/plugged/coc.nvim/build/index.js	/^    function accessSetting(config, path) {$/;"	F
accessSetting	nvim/plugged/coc.nvim/src/configuration/util.ts	/^  function accessSetting(config: any, path: string[]): any {$/;"	f
acquire	nvim/plugged/coc.nvim/build/index.js	/^    acquire() {$/;"	M
action	nvim/plugged/coc.nvim/build/index.js	/^            let action = codeActions.find(o => o.title == only || (o.command && o.command.title == only));$/;"	F
action	nvim/plugged/coc.nvim/build/index.js	/^        let action = currList.actions.find(o => o.name == name);$/;"	F
actionContext	nvim/plugged/coc.nvim/build/index.js	/^        let actionContext = { diagnostics };$/;"	O
action_for	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
actions	nvim/plugged/coc.nvim/build/index.js	/^      let actions = 1$/;"	V
actions	nvim/plugged/coc.nvim/build/index.js	/^    let actions = 1$/;"	V
actions	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public readonly actions: ListAction[] = []$/;"	m
activate	nvim/plugged/coc.nvim/build/index.js	/^    activate() {$/;"	M
activate	nvim/plugged/coc.nvim/build/index.js	/^    activate(doc, winid) {$/;"	M
activate	nvim/plugged/coc.nvim/build/index.js	/^    activate(id, silent = true) {$/;"	M
activate	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private activate(doc: Document, winid): void {$/;"	m
activate	nvim/plugged/coc.nvim/src/extensions.ts	/^  public activate(id, silent = true): void {$/;"	m
activate	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private activate(): void {$/;"	m
activateAll	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll()$/;"	f
activateBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm)$/;"	f
activateDirNode	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...)$/;"	f
activateExtensions	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async activateExtensions(): Promise<void> {$/;"	m
activateFileNode	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node)$/;"	f
activated	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private activated = false$/;"	m
activated	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  public get activated(): boolean {$/;"	m
activated	nvim/plugged/coc.nvim/src/extensions.ts	/^  private activated = false$/;"	m
activated	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private activated = false$/;"	m
activated	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  public async activated(): Promise<boolean> {$/;"	m
active	nvim/plugged/coc.nvim/build/index.js	/^                    active: activeIndexes$/;"	P
active	nvim/plugged/coc.nvim/build/index.js	/^            active = () => { }; \/\/ tslint:disable-line$/;"	M
active	nvim/plugged/coc.nvim/build/index.js	/^        let active = () => {$/;"	F
active	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	active: 0,$/;"	P
adapter	nvim/plugged/coc.nvim/build/index.js	/^function adapter(configAdapter, config) {$/;"	F
adapter_to_string	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp adapter_to_string(Ecto.Adapters.MySQL), do: "mysql"$/;"	f
adapter_to_string	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp adapter_to_string(Ecto.Adapters.Postgres), do: "postgres"$/;"	f
adapter_to_string	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp adapter_to_string(mod), do: raise("Unknown adapter #{inspect(mod)}")$/;"	f
adapters	nvim/plugged/coc.nvim/build/index.js	/^const adapters = {$/;"	O
add	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> add <C-R>=DockerfileReplaceInstruction("add", "ADD")<CR>$/;"	m
add	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.add = function (edit) {$/;"	M
add	nvim/plugged/coc.nvim/build/index.js	/^    add() {$/;"	M
add	nvim/plugged/coc.nvim/build/index.js	/^    add(callback, context = null, bucket) {$/;"	M
add	nvim/plugged/coc.nvim/build/index.js	/^    add(mode, key, fn) {$/;"	M
add	nvim/plugged/coc.nvim/build/index.js	/^    add(offset, add) {$/;"	M
add	nvim/plugged/coc.nvim/build/index.js	/^function add(a, b) {$/;"	F
add	nvim/plugged/coc.nvim/src/cursors/range.ts	/^  public add(offset: number, add: string): void {$/;"	m
add	nvim/plugged/coc.nvim/src/list/history.ts	/^  public add(): void {$/;"	m
add	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private add(mode: ListMode, key: string | string[], fn: () => void | Promise<void>): void {$/;"	m
add	nvim/plugged/coc.nvim/src/model/mru.ts	/^  public async add(item: string): Promise<void> {$/;"	m
add	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		add: function( elem, classNames ) {$/;"	M
add	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	add: function( selector ) {$/;"	M
add	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	add: function(elem, types, handler, data) {$/;"	M
add	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	function add(l, t) {$/;"	F
addAction	nvim/plugged/coc.nvim/build/index.js	/^    addAction(name, fn, options) {$/;"	M
addAction	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected addAction(name: string, fn: (item: ListItem, context: ListContext) => ProviderResult<void>, options?: ActionOptions): void {$/;"	m
addCallback	nvim/plugged/coc.nvim/build/index.js	/^    addCallback(callback, thisArg, clientId) {$/;"	M
addCallback	nvim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^  public addCallback(callback: Callback, thisArg: any, clientId: string): Disposable {$/;"	m
addCategoryInheritance	nvim/plugged/coc.nvim/build/index.js	/^function addCategoryInheritance(config) {$/;"	F
addChild	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
addClass	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	addClass: function( classNames ) {$/;"	M
addColors	nvim/plugged/coc.nvim/build/index.js	/^    addColors(colors) {$/;"	M
addColors	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  private addColors(colors: Color[]): void {$/;"	m
addCommand	nvim/plugged/coc.nvim/build/index.js	/^    addCommand(cmd) {$/;"	M
addCommand	nvim/plugged/coc.nvim/src/plugin.ts	/^  public addCommand(cmd: { id: string, cmd: string, title?: string }): void {$/;"	m
addConfigFile	nvim/plugged/coc.nvim/build/index.js	/^  function addConfigFile (file) {$/;"	F
addContext	nvim/plugged/coc.nvim/build/index.js	/^  addContext(key, value) {$/;"	M
addDiagnosticVText	nvim/plugged/coc.nvim/build/index.js	/^    addDiagnosticVText(diagnostics) {$/;"	M
addDiagnosticVText	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private addDiagnosticVText(diagnostics: ReadonlyArray<Diagnostic>): void {$/;"	m
addDoucmentSymbol	nvim/plugged/coc.nvim/build/index.js	/^function addDoucmentSymbol(res, sym, level) {$/;"	F
addDoucmentSymbol	nvim/plugged/coc.nvim/src/handler/index.ts	/^function addDoucmentSymbol(res: SymbolInfo[], sym: DocumentSymbol, level: number): void {$/;"	f
addEdit	nvim/plugged/coc.nvim/build/index.js	/^    function addEdit(text, startOffset, endOffset) {$/;"	F
addExtPacker	nvim/plugged/coc.nvim/build/index.js	/^  addExtPacker: addExtPacker,$/;"	P
addExtPacker	nvim/plugged/coc.nvim/build/index.js	/^function addExtPacker(etype, Class, packer) {$/;"	F
addExtUnpacker	nvim/plugged/coc.nvim/build/index.js	/^  addExtUnpacker: addExtUnpacker,$/;"	P
addExtUnpacker	nvim/plugged/coc.nvim/build/index.js	/^function addExtUnpacker(etype, unpacker) {$/;"	F
addFileItems	nvim/plugged/coc.nvim/build/index.js	/^        const addFileItems = async () => {$/;"	F
addFileItems	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public async addFileItems(items: FileItem[]): Promise<void> {$/;"	m
addFilesAsync	nvim/plugged/coc.nvim/build/index.js	/^const addFilesAsync = (p, files) => {$/;"	F
addFilesSync	nvim/plugged/coc.nvim/build/index.js	/^const addFilesSync = (p, files) => {$/;"	F
addFolderFile	nvim/plugged/coc.nvim/build/index.js	/^    addFolderFile(filepath) {$/;"	M
addFolderFile	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public addFolderFile(filepath: string): void {$/;"	m
addFunction	nvim/plugged/coc.nvim/build/index.js	/^    addFunction(fn) {$/;"	M
addFunction	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^  public addFunction(fn: Function): void {$/;"	m
addHighlight	nvim/plugged/coc.nvim/build/index.js	/^    addHighlight(diagnostics, winid) {$/;"	M
addHighlight	nvim/plugged/coc.nvim/build/index.js	/^    addHighlight(ranges, color) {$/;"	M
addHighlight	nvim/plugged/coc.nvim/build/index.js	/^    addHighlight({ hlGroup: _hlGroup, line, colStart: _start, colEnd: _end, srcId: _srcId, }) {$/;"	M
addHighlight	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public addHighlight(diagnostics: ReadonlyArray<Diagnostic>, winid): void {$/;"	m
addHighlight	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  private addHighlight(ranges: Range[], color: Color): void {$/;"	m
addHighlights	nvim/plugged/coc.nvim/build/index.js	/^    addHighlights(highlights, append = false) {$/;"	M
addHighlights	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public addHighlights(highlights: ListHighlights[], append = false): void {$/;"	m
addItemFirst	nvim/plugged/coc.nvim/build/index.js	/^    addItemFirst(item) {$/;"	M
addItemLast	nvim/plugged/coc.nvim/build/index.js	/^    addItemLast(item) {$/;"	M
addKeyword	nvim/plugged/coc.nvim/build/index.js	/^    addKeyword(ch) {$/;"	M
addKeyword	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public addKeyword(ch: string): void {$/;"	m
addLevelMethods	nvim/plugged/coc.nvim/build/index.js	/^function addLevelMethods(target) {$/;"	F
addLevels	nvim/plugged/coc.nvim/build/index.js	/^  static addLevels(customLevels) {$/;"	M
addLine	nvim/plugged/coc.nvim/build/index.js	/^    addLine(line, hlGroup) {$/;"	M
addLine	nvim/plugged/coc.nvim/src/model/highligher.ts	/^  public addLine(line: string, hlGroup?: string): void {$/;"	m
addLines	nvim/plugged/coc.nvim/build/index.js	/^    addLines(lines) {$/;"	M
addLines	nvim/plugged/coc.nvim/src/model/highligher.ts	/^  public addLines(lines): void {$/;"	m
addListener	nvim/plugged/coc.nvim/build/index.js	/^const addListener = (fn) => {$/;"	F
addLocationActions	nvim/plugged/coc.nvim/build/index.js	/^    addLocationActions() {$/;"	M
addLocationActions	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public addLocationActions(): void {$/;"	m
addMessageToQueue	nvim/plugged/coc.nvim/build/index.js	/^    function addMessageToQueue(queue, message) {$/;"	F
addMethod	nvim/plugged/coc.nvim/build/index.js	/^    addMethod(name, fn) {$/;"	M
addMethod	nvim/plugged/coc.nvim/src/plugin.ts	/^  private addMethod(name: string, fn: Function): any {$/;"	m
addMultipleAction	nvim/plugged/coc.nvim/build/index.js	/^    addMultipleAction(name, fn, options) {$/;"	M
addMultipleAction	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected addMultipleAction(name: string, fn: (item: ListItem[], context: ListContext) => ProviderResult<void>, options?: ActionOptions): void {$/;"	m
addPosition	nvim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^function addPosition(position: Position, line: number, character: number): Position {$/;"	f
addPreProcessingListener	nvim/plugged/coc.nvim/build/index.js	/^const addPreProcessingListener = (fn) => {$/;"	F
addProperty	nvim/plugged/coc.nvim/build/index.js	/^    function addProperty(current, key, remains, value) {$/;"	F
addProperty	nvim/plugged/coc.nvim/src/configuration/util.ts	/^  function addProperty(current: object, key: string, remains: string[], value: any): void {$/;"	f
addRange	nvim/plugged/coc.nvim/build/index.js	/^    addRange(range, text) {$/;"	M
addRange	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private addRange(range: Range, text: string): void {$/;"	m
addRanges	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  public async addRanges(ranges: Range[]): Promise<void> {$/;"	m
addRecent	nvim/plugged/coc.nvim/build/index.js	/^    addRecent(word, bufnr) {$/;"	M
addRecent	nvim/plugged/coc.nvim/src/commands.ts	/^  public async addRecent(cmd: string): Promise<void> {$/;"	m
addRecent	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private addRecent(word: string, bufnr: number): void {$/;"	m
addRequest	nvim/plugged/coc.nvim/build/index.js	/^TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {$/;"	M
addRootPatterns	nvim/plugged/coc.nvim/build/index.js	/^    addRootPatterns(filetype, rootPatterns) {$/;"	M
addRootPatterns	nvim/plugged/coc.nvim/src/workspace.ts	/^  public addRootPatterns(filetype: string, rootPatterns: string[]): void {$/;"	m
addSchemeProperty	nvim/plugged/coc.nvim/build/index.js	/^    addSchemeProperty(key, def) {$/;"	M
addSchemeProperty	nvim/plugged/coc.nvim/src/extensions.ts	/^  public addSchemeProperty(key: string, def: PropertyScheme): void {$/;"	m
addSigns	nvim/plugged/coc.nvim/build/index.js	/^    addSigns(diagnostics) {$/;"	M
addSigns	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public addSigns(diagnostics: ReadonlyArray<Diagnostic>): void {$/;"	m
addSource	nvim/plugged/coc.nvim/build/index.js	/^    addSource(source) {$/;"	M
addSource	nvim/plugged/coc.nvim/src/sources.ts	/^  public addSource(source: ISource): Disposable {$/;"	m
addSymbols	nvim/plugged/coc.nvim/build/index.js	/^            function addSymbols(symbols, level = 0) {$/;"	F
addSymbols	nvim/plugged/coc.nvim/src/list/source/outline.ts	/^      function addSymbols(symbols: DocumentSymbol[], level = 0): void {$/;"	f
addTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
addText	nvim/plugged/coc.nvim/build/index.js	/^    addText(text) {$/;"	M
addText	nvim/plugged/coc.nvim/build/index.js	/^    addText(text, hlGroup) {$/;"	M
addText	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  private addText(text: string): void {$/;"	m
addText	nvim/plugged/coc.nvim/src/model/highligher.ts	/^  public addText(text: string, hlGroup?: string): void {$/;"	m
addToValueTree	nvim/plugged/coc.nvim/build/index.js	/^function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {$/;"	F
addToValueTree	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function addToValueTree($/;"	f
addWorkspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^    addWorkspaceFolder(rootPath) {$/;"	M
addWorkspaceFolder	nvim/plugged/coc.nvim/src/workspace.ts	/^  private addWorkspaceFolder(rootPath: string): WorkspaceFolder {$/;"	m
addZero	nvim/plugged/coc.nvim/build/index.js	/^function addZero(vNumber) {$/;"	F
add_db	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
add_methods	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_section	nvim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^  function! s:add_section(builder, context, key)$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_tag_recursive	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
add_target_syntax_OFF	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^function! s:add_target_syntax_OFF(target)$/;"	f
add_target_syntax_OFF	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:add_target_syntax_OFF(target, type)$/;"	f
add_target_syntax_ON	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^function! s:add_target_syntax_ON(target, type)$/;"	f
add_target_syntax_ON	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:add_target_syntax_ON(target, type)$/;"	f
added	nvim/plugged/coc.nvim/build/index.js	/^                    added: [workspaceFolder],$/;"	P
added	nvim/plugged/coc.nvim/build/index.js	/^                added: []$/;"	P
added	nvim/plugged/coc.nvim/build/index.js	/^            added: [added]$/;"	P
added	nvim/plugged/coc.nvim/build/index.js	/^        let added = {$/;"	O
added	nvim/plugged/coc.nvim/build/index.js	/^    const added = toKeys.filter(key => fromKeys.indexOf(key) === -1);$/;"	F
additionalTextEdits	nvim/plugged/coc.nvim/build/index.js	/^            additionalTextEdits: additionalTextEdits,$/;"	P
adjustChange	nvim/plugged/coc.nvim/build/index.js	/^    adjustChange(textRange, range, text) {$/;"	M
adjustChange	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private adjustChange(textRange: TextRange, range: Range, text: string): void {$/;"	m
adjustPosition	nvim/plugged/coc.nvim/build/index.js	/^    adjustPosition(characterCount, lineCount) {$/;"	M
adjustPosition	nvim/plugged/coc.nvim/build/index.js	/^function adjustPosition(pos, edit) {$/;"	F
adjustPosition	nvim/plugged/coc.nvim/build/index.js	/^function adjustPosition(position, delta) {$/;"	F
adjustPosition	nvim/plugged/coc.nvim/src/cursors/index.ts	/^function adjustPosition(position: Position, delta: Position): Position {$/;"	f
adjustPosition	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public adjustPosition(characterCount: number, lineCount: number): void {$/;"	m
adjustPosition	nvim/plugged/coc.nvim/src/util/position.ts	/^export function adjustPosition(pos: Position, edit: TextEdit): Position {$/;"	f
adjustRange	nvim/plugged/coc.nvim/build/index.js	/^function adjustRange(range, offset) {$/;"	F
adjustRange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^function adjustRange(range: Range, offset: number): Range {$/;"	f
adjustTextEdit	nvim/plugged/coc.nvim/build/index.js	/^    adjustTextEdit(edit) {$/;"	M
adjustTextEdit	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public adjustTextEdit(edit: TextEdit): boolean {$/;"	m
adjust_header	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_header(bufnr, hunk_diff)$/;"	f
adjust_hunk_summary	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_hunk_summary(hunk_diff) abort$/;"	f
adjust_items_recursively	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:adjust_items_recursively(parent)$/;"	f
adjust_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:adjust_mrkr(item)$/;"	f
adjust_numbered_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:adjust_numbered_list(item, ignore_kind, recursive)$/;"	f
adjust_numbered_list_below	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:adjust_numbered_list_below(item, recursive)$/;"	f
affectsConfiguration	nvim/plugged/coc.nvim/build/index.js	/^            affectsConfiguration: (section, resource) => {$/;"	M
after	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	after: function() {$/;"	M
after	nvim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def after(string)$/;"	f
after	nvim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def after(string)$/;"	f
afterGlob	nvim/plugged/coc.nvim/build/index.js	/^  const afterGlob = (er, results) => {$/;"	F
afterGlob	nvim/plugged/coc.nvim/build/index.js	/^  function afterGlob (er, results) {$/;"	F
ag_handler	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, has_column)$/;"	f
ag_to_qf	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, has_column)$/;"	f
agent	nvim/plugged/coc.nvim/build/index.js	/^    agent: false,$/;"	P
agent	nvim/plugged/coc.nvim/build/index.js	/^  var agent = new TunnelingAgent(options);$/;"	V
ah	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> ah :<C-U>call vimwiki#base#TO_header(0, 0, v:count1)<CR>$/;"	m
ah	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> ah :<C-U>call vimwiki#base#TO_header(0, 0, v:count1)<CR>$/;"	m
airline	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^augroup airline#extensions#cursormode$/;"	a
airline#add_inactive_statusline_func	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_func(name)$/;"	f
airline#add_statusline_func	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_func(name)$/;"	f
airline#add_statusline_funcref	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_funcref(function)$/;"	f
airline#async#get_mq_async	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_mq_async(cmd, file)$/;"	f
airline#async#get_msgfmt_stat	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_msgfmt_stat(cmd, file)$/;"	f
airline#async#mq_output	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#mq_output(buf, file)$/;"	f
airline#async#nvim_get_mq_async	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_mq_async(cmd, file)$/;"	f
airline#async#nvim_get_msgfmt_stat	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_msgfmt_stat(cmd, file)$/;"	f
airline#async#nvim_vcs_clean	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#nvim_vcs_untracked	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#nvim_vcs_untracked(cfg, file, vcs)$/;"	f
airline#async#vcs_clean	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vcs_untracked	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_untracked(config, file, vcs)$/;"	f
airline#async#vim7_vcs_clean	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vim7_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_clean	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_untracked	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_untracked(config, file)$/;"	f
airline#builder#get_next_group	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_next_group(sections, i)$/;"	f
airline#builder#get_prev_group	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_prev_group(sections, i)$/;"	f
airline#builder#new	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#new(context)$/;"	f
airline#builder#should_change_group	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#should_change_group(group1, group2)$/;"	f
airline#check_mode	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#check_mode(winnr)$/;"	f
airline#cmdwinenter	nvim/plugged/vim-airline/plugin/airline.vim	/^function! airline#cmdwinenter(...)$/;"	f
airline#debug#profile1	nvim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile1()$/;"	f
airline#debug#profile2	nvim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile2()$/;"	f
airline#debug#profile3	nvim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile3()$/;"	f
airline#extensions#ale#get	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get(type)$/;"	f
airline#extensions#ale#get_error	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_error()$/;"	f
airline#extensions#ale#get_warning	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_warning()$/;"	f
airline#extensions#ale#init	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#init(ext)$/;"	f
airline#extensions#append_to_section	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#append_to_section(name, value)$/;"	f
airline#extensions#apply	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply(...)$/;"	f
airline#extensions#apply_left_override	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply_left_override(section1, section2)$/;"	f
airline#extensions#bookmark#currentbookmark	nvim/plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#currentbookmark()$/;"	f
airline#extensions#bookmark#init	nvim/plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#init(ext)$/;"	f
airline#extensions#branch#get_head	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#get_head()$/;"	f
airline#extensions#branch#head	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#head()$/;"	f
airline#extensions#branch#init	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#init(ext)$/;"	f
airline#extensions#branch#update_untracked_config	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#update_untracked_config(file, vcs)$/;"	f
airline#extensions#bufferline#init	nvim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^function! airline#extensions#bufferline#init(ext)$/;"	f
airline#extensions#capslock#init	nvim/plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#init(ext)$/;"	f
airline#extensions#capslock#status	nvim/plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#status()$/;"	f
airline#extensions#coc#get	nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get(type)$/;"	f
airline#extensions#coc#get_error	nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_error()$/;"	f
airline#extensions#coc#get_warning	nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_warning()$/;"	f
airline#extensions#coc#init	nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#init(ext)$/;"	f
airline#extensions#commandt#apply	nvim/plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#apply(...)$/;"	f
airline#extensions#commandt#init	nvim/plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#init(ext)$/;"	f
airline#extensions#csv#apply	nvim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#apply(...)$/;"	f
airline#extensions#csv#get_column	nvim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#get_column()$/;"	f
airline#extensions#csv#init	nvim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#init(ext)$/;"	f
airline#extensions#ctrlp#apply	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#apply(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline_status	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline_status(...)$/;"	f
airline#extensions#ctrlp#generate_color_map	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#generate_color_map(dark, light, white)$/;"	f
airline#extensions#ctrlp#init	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#init(ext)$/;"	f
airline#extensions#ctrlp#load_theme	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#load_theme(palette)$/;"	f
airline#extensions#ctrlspace#init	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#init(ext)$/;"	f
airline#extensions#ctrlspace#statusline	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#statusline(...)$/;"	f
airline#extensions#cursormode#activate	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#activate()$/;"	f
airline#extensions#cursormode#apply	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#apply(...)$/;"	f
airline#extensions#cursormode#init	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#init(ext)$/;"	f
airline#extensions#cursormode#set	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#set(...)$/;"	f
airline#extensions#cursormode#tmux_escape	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#tmux_escape(escape)$/;"	f
airline#extensions#default#apply	nvim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! airline#extensions#default#apply(builder, context)$/;"	f
airline#extensions#denite#apply	nvim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#apply(...)$/;"	f
airline#extensions#denite#check_denite_mode	nvim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#check_denite_mode(bufnr)$/;"	f
airline#extensions#denite#init	nvim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#init(ext)$/;"	f
airline#extensions#eclim#creat_line	nvim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#creat_line(...)$/;"	f
airline#extensions#eclim#get_warnings	nvim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#get_warnings()$/;"	f
airline#extensions#eclim#init	nvim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#init(ext)$/;"	f
airline#extensions#example#apply	nvim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#apply(...)$/;"	f
airline#extensions#example#get_cats	nvim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#get_cats()$/;"	f
airline#extensions#example#init	nvim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#init(ext)$/;"	f
airline#extensions#fugitiveline#bufname	nvim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#bufname()$/;"	f
airline#extensions#fugitiveline#init	nvim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#init(ext)$/;"	f
airline#extensions#get_loaded_extensions	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#get_loaded_extensions()$/;"	f
airline#extensions#grepper#init	nvim/plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#init(ext)$/;"	f
airline#extensions#grepper#status	nvim/plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#status()$/;"	f
airline#extensions#gutentags#init	nvim/plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#init(ext)$/;"	f
airline#extensions#gutentags#status	nvim/plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#status()$/;"	f
airline#extensions#hunks#get_hunks	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_hunks()$/;"	f
airline#extensions#hunks#get_raw_hunks	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_raw_hunks()$/;"	f
airline#extensions#hunks#init	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#init(ext)$/;"	f
airline#extensions#keymap#init	nvim/plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#init(ext)$/;"	f
airline#extensions#keymap#status	nvim/plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#status()$/;"	f
airline#extensions#languageclient#get	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get(type)$/;"	f
airline#extensions#languageclient#get_error	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_error()$/;"	f
airline#extensions#languageclient#get_warning	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_warning()$/;"	f
airline#extensions#languageclient#init	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#init(ext)$/;"	f
airline#extensions#load	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load()$/;"	f
airline#extensions#load_theme	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load_theme()$/;"	f
airline#extensions#localsearch#apply	nvim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#apply(...)$/;"	f
airline#extensions#localsearch#init	nvim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#init(ext)$/;"	f
airline#extensions#localsearch#load_theme	nvim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#load_theme(palette)$/;"	f
airline#extensions#neomake#get_errors	nvim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_errors()$/;"	f
airline#extensions#neomake#get_warnings	nvim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_warnings()$/;"	f
airline#extensions#neomake#init	nvim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#init(ext)$/;"	f
airline#extensions#netrw#apply	nvim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#apply(...)$/;"	f
airline#extensions#netrw#init	nvim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#init(ext)$/;"	f
airline#extensions#netrw#sortstring	nvim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#sortstring()$/;"	f
airline#extensions#nrrwrgn#apply	nvim/plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#apply(...)$/;"	f
airline#extensions#nrrwrgn#init	nvim/plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#init(ext)$/;"	f
airline#extensions#obsession#get_status	nvim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#get_status()$/;"	f
airline#extensions#obsession#init	nvim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#init(ext)$/;"	f
airline#extensions#po#apply	nvim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#apply(...)$/;"	f
airline#extensions#po#init	nvim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#init(ext)$/;"	f
airline#extensions#po#on_winenter	nvim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#on_winenter()$/;"	f
airline#extensions#po#shorten	nvim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#shorten()$/;"	f
airline#extensions#po#stats	nvim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#stats()$/;"	f
airline#extensions#prepend_to_section	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#prepend_to_section(name, value)$/;"	f
airline#extensions#promptline#init	nvim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#init(ext)$/;"	f
airline#extensions#promptline#set_prompt_colors	nvim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#set_prompt_colors(palette)$/;"	f
airline#extensions#quickfix#apply	nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#apply(...)$/;"	f
airline#extensions#quickfix#get_type	nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#get_type()$/;"	f
airline#extensions#quickfix#inactive_qf_window	nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#inactive_qf_window(...)$/;"	f
airline#extensions#quickfix#init	nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#init(ext)$/;"	f
airline#extensions#syntastic#get	nvim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get(type)$/;"	f
airline#extensions#syntastic#get_error	nvim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_error()$/;"	f
airline#extensions#syntastic#get_warning	nvim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_warning()$/;"	f
airline#extensions#syntastic#init	nvim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#init(ext)$/;"	f
airline#extensions#tabline#add_label	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_label(dict, type, right)$/;"	f
airline#extensions#tabline#add_tab_label	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_tab_label(dict)$/;"	f
airline#extensions#tabline#autoshow#off	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#off()$/;"	f
airline#extensions#tabline#autoshow#on	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#on()$/;"	f
airline#extensions#tabline#buffers#clickbuf	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#clickbuf(minwid, clicks, button, modifiers) abort$/;"	f
airline#extensions#tabline#buffers#get	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#get()$/;"	f
airline#extensions#tabline#buffers#invalidate	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#invalidate()$/;"	f
airline#extensions#tabline#buffers#off	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#off()$/;"	f
airline#extensions#tabline#buffers#on	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#on()$/;"	f
airline#extensions#tabline#buflist#clean	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#clean()$/;"	f
airline#extensions#tabline#buflist#invalidate	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#invalidate()$/;"	f
airline#extensions#tabline#buflist#list	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#list()$/;"	f
airline#extensions#tabline#builder#new	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! airline#extensions#tabline#builder#new(context)$/;"	f
airline#extensions#tabline#ctrlspace#add_buffer_section	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_buffer_section(builder, cur_tab, cur_buf, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#add_tab_section	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#get	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#get()$/;"	f
airline#extensions#tabline#ctrlspace#invalidate	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#invalidate()$/;"	f
airline#extensions#tabline#ctrlspace#off	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#off()$/;"	f
airline#extensions#tabline#ctrlspace#on	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#on()$/;"	f
airline#extensions#tabline#enable	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#enable()$/;"	f
airline#extensions#tabline#formatters#default#format	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^function! airline#extensions#tabline#formatters#default#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#default#wrap_name	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^function! airline#extensions#tabline#formatters#default#wrap_name(bufnr, buffer_name)$/;"	f
airline#extensions#tabline#formatters#jsformatter#format	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/jsformatter.vim	/^function! airline#extensions#tabline#formatters#jsformatter#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#short_path#format	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^function! airline#extensions#tabline#formatters#short_path#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#tabnr#format	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/tabnr.vim	/^function! airline#extensions#tabline#formatters#tabnr#format(tab_nr_type, nr)$/;"	f
airline#extensions#tabline#formatters#unique_tail#format	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim	/^function! airline#extensions#tabline#formatters#unique_tail#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#unique_tail_improved#format	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^function! airline#extensions#tabline#formatters#unique_tail_improved#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#get	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#get()$/;"	f
airline#extensions#tabline#get_buffer_name	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#get_buffer_name(nr, ...)$/;"	f
airline#extensions#tabline#group_of_bufnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#group_of_bufnr(tab_bufs, bufnr)$/;"	f
airline#extensions#tabline#init	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#init(ext)$/;"	f
airline#extensions#tabline#load_theme	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#load_theme(palette)$/;"	f
airline#extensions#tabline#new_builder	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#new_builder()$/;"	f
airline#extensions#tabline#redraw	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#redraw()$/;"	f
airline#extensions#tabline#tabs#get	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#get()$/;"	f
airline#extensions#tabline#tabs#invalidate	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#invalidate()$/;"	f
airline#extensions#tabline#tabs#map_keys	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#map_keys()$/;"	f
airline#extensions#tabline#tabs#off	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#off()$/;"	f
airline#extensions#tabline#tabs#on	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#on()$/;"	f
airline#extensions#tabline#tabs#tabnr_formatter	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#tabnr_formatter(nr, i) abort$/;"	f
airline#extensions#tabline#tabws#add_buffer_section	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_buffer_section(builder, cur_tab, cur_buf, pull_right)$/;"	f
airline#extensions#tabline#tabws#add_tab_section	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#tabws#get	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#get()$/;"	f
airline#extensions#tabline#tabws#invalidate	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#invalidate()$/;"	f
airline#extensions#tabline#tabws#off	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#off()$/;"	f
airline#extensions#tabline#tabws#on	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#on()$/;"	f
airline#extensions#tabline#title	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#title(n)$/;"	f
airline#extensions#tabline#xtabline#filter_buffers	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#filter_buffers()$/;"	f
airline#extensions#tabline#xtabline#init	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#init()$/;"	f
airline#extensions#tabline#xtabline#maps	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#maps()$/;"	f
airline#extensions#tabline#xtabline#next_buffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#next_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#prev_buffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#prev_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#reopen_last_tab	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	f
airline#extensions#tabline#xtabline#select_buffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#select_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#toggle_buffers	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_buffers()$/;"	f
airline#extensions#tabline#xtabline#toggle_tabs	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_tabs()$/;"	f
airline#extensions#tabline#xtabline#update_obsession	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#update_obsession()$/;"	f
airline#extensions#tagbar#currenttag	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#currenttag()$/;"	f
airline#extensions#tagbar#get_status	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#get_status(...)$/;"	f
airline#extensions#tagbar#inactive_apply	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#inactive_apply(...)$/;"	f
airline#extensions#tagbar#init	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#init(ext)$/;"	f
airline#extensions#term#apply	nvim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#apply(...)$/;"	f
airline#extensions#term#inactive_apply	nvim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#inactive_apply(...)$/;"	f
airline#extensions#term#init	nvim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#init(ext)$/;"	f
airline#extensions#term#termmode	nvim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#termmode()$/;"	f
airline#extensions#tmuxline#init	nvim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#init(ext)$/;"	f
airline#extensions#tmuxline#set_tmux_colors	nvim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#set_tmux_colors(palette)$/;"	f
airline#extensions#undotree#apply	nvim/plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#apply(...)$/;"	f
airline#extensions#undotree#init	nvim/plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#init(ext)$/;"	f
airline#extensions#unicode#apply	nvim/plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#apply(...)$/;"	f
airline#extensions#unicode#init	nvim/plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#init(ext)$/;"	f
airline#extensions#unite#apply	nvim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#apply(...)$/;"	f
airline#extensions#unite#init	nvim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#init(ext)$/;"	f
airline#extensions#vimagit#apply	nvim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#apply(...)$/;"	f
airline#extensions#vimagit#get_mode	nvim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#get_mode()$/;"	f
airline#extensions#vimagit#init	nvim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#init(ext)$/;"	f
airline#extensions#vimtex#apply	nvim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#apply(...)$/;"	f
airline#extensions#vimtex#get_scope	nvim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#get_scope()$/;"	f
airline#extensions#vimtex#init	nvim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#init(ext)$/;"	f
airline#extensions#virtualenv#apply	nvim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#apply(...)$/;"	f
airline#extensions#virtualenv#init	nvim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#init(ext)$/;"	f
airline#extensions#virtualenv#update	nvim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#update()$/;"	f
airline#extensions#vista#currenttag	nvim/plugged/vim-airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#currenttag()$/;"	f
airline#extensions#vista#init	nvim/plugged/vim-airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#init(ext)$/;"	f
airline#extensions#whitespace#check	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#check()$/;"	f
airline#extensions#whitespace#disable	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#disable()$/;"	f
airline#extensions#whitespace#init	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#init(...)$/;"	f
airline#extensions#whitespace#toggle	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#toggle()$/;"	f
airline#extensions#windowswap#get_status	nvim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#get_status()$/;"	f
airline#extensions#windowswap#init	nvim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#init(ext)$/;"	f
airline#extensions#wordcount#apply	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#apply(...)$/;"	f
airline#extensions#wordcount#formatters#default#to_string	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#to_string(wordcount)$/;"	f
airline#extensions#wordcount#formatters#default#update_fmt	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#update_fmt(...)$/;"	f
airline#extensions#wordcount#get	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function airline#extensions#wordcount#get()$/;"	f
airline#extensions#wordcount#init	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#init(ext)$/;"	f
airline#extensions#xkblayout#init	nvim/plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#init(ext)$/;"	f
airline#extensions#xkblayout#status	nvim/plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#status()$/;"	f
airline#extensions#ycm#get_error_count	nvim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_error_count()$/;"	f
airline#extensions#ycm#get_warning_count	nvim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_warning_count()$/;"	f
airline#extensions#ycm#init	nvim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#init(ext)$/;"	f
airline#highlighter#add_accent	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#add_accent(accent)$/;"	f
airline#highlighter#add_separator	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#add_separator(from, to, inverse)$/;"	f
airline#highlighter#exec	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#exec(group, colors)$/;"	f
airline#highlighter#get_highlight	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#get_highlight(group, ...)$/;"	f
airline#highlighter#get_highlight2	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#get_highlight2(fg, bg, ...)$/;"	f
airline#highlighter#highlight	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#highlight(modes, ...)$/;"	f
airline#highlighter#highlight_modified_inactive	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#highlight_modified_inactive(bufnr)$/;"	f
airline#highlighter#load_theme	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#load_theme()$/;"	f
airline#highlighter#reset_hlcache	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#reset_hlcache()$/;"	f
airline#init#bootstrap	nvim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#bootstrap()$/;"	f
airline#init#gui_mode	nvim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#gui_mode()$/;"	f
airline#init#sections	nvim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#sections()$/;"	f
airline#load_theme	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#load_theme()$/;"	f
airline#mode_changed	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#mode_changed()$/;"	f
airline#msdos#round_msdos_colors	nvim/plugged/vim-airline/autoload/airline/msdos.vim	/^function! airline#msdos#round_msdos_colors(rgblist)$/;"	f
airline#parts#crypt	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#crypt()$/;"	f
airline#parts#define	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define(key, config)$/;"	f
airline#parts#define_accent	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_accent(key, accent)$/;"	f
airline#parts#define_condition	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_condition(key, predicate)$/;"	f
airline#parts#define_empty	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_empty(keys)$/;"	f
airline#parts#define_function	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_function(key, name)$/;"	f
airline#parts#define_minwidth	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_minwidth(key, width)$/;"	f
airline#parts#define_raw	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_raw(key, raw)$/;"	f
airline#parts#define_text	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_text(key, text)$/;"	f
airline#parts#ffenc	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#ffenc()$/;"	f
airline#parts#filetype	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#filetype()$/;"	f
airline#parts#get	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#get(key)$/;"	f
airline#parts#iminsert	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#iminsert()$/;"	f
airline#parts#mode	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#mode()$/;"	f
airline#parts#paste	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#paste()$/;"	f
airline#parts#readonly	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#readonly()$/;"	f
airline#parts#spell	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#spell()$/;"	f
airline#remove_statusline_func	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#remove_statusline_func(name)$/;"	f
airline#section#create	nvim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create(parts)$/;"	f
airline#section#create_left	nvim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_left(parts)$/;"	f
airline#section#create_right	nvim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_right(parts)$/;"	f
airline#statusline	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#statusline(winnr)$/;"	f
airline#switch_matching_theme	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_matching_theme()$/;"	f
airline#switch_theme	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_theme(name, ...)$/;"	f
airline#themes#generate_color_map	nvim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#generate_color_map(sect1, sect2, sect3, ...)$/;"	f
airline#themes#get_highlight	nvim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#get_highlight(group, ...)$/;"	f
airline#themes#get_highlight2	nvim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#get_highlight2(fg, bg, ...)$/;"	f
airline#themes#gruvbox#refresh	nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^function! airline#themes#gruvbox#refresh()$/;"	f
airline#themes#patch	nvim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#patch(palette)$/;"	f
airline#update_statusline	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline()$/;"	f
airline#update_statusline_focuslost	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_focuslost()$/;"	f
airline#update_statusline_inactive	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_inactive(range)$/;"	f
airline#update_tabline	nvim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_tabline()$/;"	f
airline#util#append	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#append(text, minwidth)$/;"	f
airline#util#doautocmd	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#doautocmd(event)$/;"	f
airline#util#exec_funcrefs	nvim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#exec_funcrefs(list, ...)$/;"	f
airline#util#getwinvar	nvim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getwinvar(winnr, key, def)$/;"	f
airline#util#has_custom_scm	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_custom_scm()$/;"	f
airline#util#has_fugitive	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_fugitive()$/;"	f
airline#util#has_lawrencium	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_lawrencium()$/;"	f
airline#util#has_vcscommand	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_vcscommand()$/;"	f
airline#util#ignore_buf	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#ignore_buf(name)$/;"	f
airline#util#prepend	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#prepend(text, minwidth)$/;"	f
airline#util#shorten	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#shorten(text, winwidth, minwidth, ...)$/;"	f
airline#util#strcharpart	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strcharpart(...)$/;"	f
airline#util#strchars	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strchars(str)$/;"	f
airline#util#themes	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#themes(match)$/;"	f
airline#util#warning	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#warning(msg)$/;"	f
airline#util#winwidth	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#winwidth(...)$/;"	f
airline#util#wrap	nvim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#wrap(text, minwidth)$/;"	f
airline_ale_count	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_count(cnt, symbol)$/;"	f
airline_ale_get_line_number	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_get_line_number(cnt, type) abort$/;"	f
airline_extensions	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_extensions()$/;"	f
airline_languageclient_count	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_count(cnt, symbol)$/;"	f
airline_languageclient_get_line_number	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_get_line_number(type) abort$/;"	f
airline_refresh	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_refresh(...)$/;"	f
airline_theme	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_theme(...)$/;"	f
airline_toggle	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_toggle()$/;"	f
ajax	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ajax: function( s ) {$/;"	M
ajaxSettings	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ajaxSettings: {$/;"	P
ajaxSetup	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ajaxSetup: function( settings ) {$/;"	M
al	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> al :<C-U>call vimwiki#lst#TO_list_item(0, 0)<CR>$/;"	m
al	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> al :<C-U>call vimwiki#lst#TO_list_item(0, 1)<CR>$/;"	m
ale#Env	nvim/plugged/ale/autoload/ale.vim	/^function! ale#Env(variable_name, value) abort$/;"	f
ale#Escape	nvim/plugged/ale/autoload/ale.vim	/^function! ale#Escape(str) abort$/;"	f
ale#FileTooLarge	nvim/plugged/ale/autoload/ale.vim	/^function! ale#FileTooLarge(buffer) abort$/;"	f
ale#GetLocItemMessage	nvim/plugged/ale/autoload/ale.vim	/^function! ale#GetLocItemMessage(item, format_string) abort$/;"	f
ale#Has	nvim/plugged/ale/autoload/ale.vim	/^function! ale#Has(feature) abort$/;"	f
ale#Pad	nvim/plugged/ale/autoload/ale.vim	/^function! ale#Pad(string) abort$/;"	f
ale#Queue	nvim/plugged/ale/autoload/ale.vim	/^function! ale#Queue(delay, ...) abort$/;"	f
ale#Set	nvim/plugged/ale/autoload/ale.vim	/^function! ale#Set(variable_name, default) abort$/;"	f
ale#ShouldDoNothing	nvim/plugged/ale/autoload/ale.vim	/^function! ale#ShouldDoNothing(buffer) abort$/;"	f
ale#Var	nvim/plugged/ale/autoload/ale.vim	/^function! ale#Var(buffer, variable_name) abort$/;"	f
ale#ant#BuildClasspathCommand	nvim/plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#BuildClasspathCommand(buffer) abort$/;"	f
ale#ant#FindExecutable	nvim/plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#FindExecutable(buffer) abort$/;"	f
ale#ant#FindProjectRoot	nvim/plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#FindProjectRoot(buffer) abort$/;"	f
ale#args#Parse	nvim/plugged/ale/autoload/ale/args.vim	/^function! ale#args#Parse(arg_list, string) abort$/;"	f
ale#assert#Fixer	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#Fixer(expected_result) abort$/;"	f
ale#assert#FixerNotExecuted	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#FixerNotExecuted() abort$/;"	f
ale#assert#GivenCommandOutput	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#GivenCommandOutput(...) abort$/;"	f
ale#assert#LSPAddress	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPAddress(expected_address) abort$/;"	f
ale#assert#LSPConfig	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPConfig(expected_config) abort$/;"	f
ale#assert#LSPLanguage	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPLanguage(expected_language) abort$/;"	f
ale#assert#LSPOptions	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPOptions(expected_options) abort$/;"	f
ale#assert#LSPProject	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPProject(expected_root) abort$/;"	f
ale#assert#Linter	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#Linter(expected_executable, expected_command) abort$/;"	f
ale#assert#LinterNotExecuted	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LinterNotExecuted() abort$/;"	f
ale#assert#SetUpFixerTest	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpFixerTest(filetype, name, ...) abort$/;"	f
ale#assert#SetUpFixerTestCommands	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpFixerTestCommands() abort$/;"	f
ale#assert#SetUpLinterTest	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpLinterTest(filetype, name) abort$/;"	f
ale#assert#SetUpLinterTestCommands	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpLinterTestCommands() abort$/;"	f
ale#assert#TearDownFixerTest	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#TearDownFixerTest() abort$/;"	f
ale#assert#TearDownLinterTest	nvim/plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#TearDownLinterTest() abort$/;"	f
ale#balloon#Disable	nvim/plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Disable() abort$/;"	f
ale#balloon#Enable	nvim/plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Enable() abort$/;"	f
ale#balloon#Expr	nvim/plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Expr() abort$/;"	f
ale#balloon#MessageForPos	nvim/plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#MessageForPos(bufnr, lnum, col) abort$/;"	f
ale#c#FindCompileCommands	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindCompileCommands(buffer) abort$/;"	f
ale#c#FindLocalHeaderPaths	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindLocalHeaderPaths(buffer) abort$/;"	f
ale#c#FindProjectRoot	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindProjectRoot(buffer) abort$/;"	f
ale#c#FlagsFromCompileCommands	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#FlagsFromCompileCommands(buffer, compile_commands_file) abort$/;"	f
ale#c#GetBuildDirectory	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetBuildDirectory(buffer) abort$/;"	f
ale#c#GetCFlags	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetCFlags(buffer, output) abort$/;"	f
ale#c#GetCompileCommand	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetCompileCommand(json_item) abort$/;"	f
ale#c#GetMakeCommand	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetMakeCommand(buffer) abort$/;"	f
ale#c#IncludeOptions	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#IncludeOptions(include_paths) abort$/;"	f
ale#c#ParseCFlags	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCFlags(path_prefix, cflag_line) abort$/;"	f
ale#c#ParseCFlagsFromMakeOutput	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCFlagsFromMakeOutput(buffer, make_output) abort$/;"	f
ale#c#ParseCompileCommandsFlags	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCompileCommandsFlags(buffer, file_lookup, dir_lookup) abort$/;"	f
ale#c#RunMakeCommand	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#RunMakeCommand(buffer, Callback) abort$/;"	f
ale#c#ShellSplit	nvim/plugged/ale/autoload/ale/c.vim	/^function! ale#c#ShellSplit(line) abort$/;"	f
ale#code_action#ApplyChanges	nvim/plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#ApplyChanges(filename, changes) abort$/;"	f
ale#code_action#HandleCodeAction	nvim/plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#HandleCodeAction(code_action) abort$/;"	f
ale#command#ClearData	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#ClearData() abort$/;"	f
ale#command#CreateDirectory	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateDirectory(buffer) abort$/;"	f
ale#command#CreateFile	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateFile(buffer) abort$/;"	f
ale#command#CreateTempFile	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateTempFile(buffer, temporary_file, input) abort$/;"	f
ale#command#EscapeCommandPart	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#EscapeCommandPart(command_part) abort$/;"	f
ale#command#FormatCommand	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#FormatCommand(buffer, executable, command, pipe_file_if_needed, input) abort$/;"	f
ale#command#GetData	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#GetData() abort$/;"	f
ale#command#InitData	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#InitData(buffer) abort$/;"	f
ale#command#IsDeferred	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#IsDeferred(value) abort$/;"	f
ale#command#ManageDirectory	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#ManageDirectory(buffer, directory) abort$/;"	f
ale#command#ManageFile	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#ManageFile(buffer, file) abort$/;"	f
ale#command#RemoveManagedFiles	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#RemoveManagedFiles(buffer) abort$/;"	f
ale#command#Run	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#Run(buffer, command, Callback, ...) abort$/;"	f
ale#command#StopJobs	nvim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#StopJobs(buffer, job_type) abort$/;"	f
ale#completion#AutomaticOmniFunc	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#AutomaticOmniFunc(findstart, base) abort$/;"	f
ale#completion#CanProvideCompletions	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#CanProvideCompletions() abort$/;"	f
ale#completion#Disable	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Disable() abort$/;"	f
ale#completion#Done	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Done() abort$/;"	f
ale#completion#Enable	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Enable() abort$/;"	f
ale#completion#Filter	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Filter(buffer, filetype, suggestions, prefix) abort$/;"	f
ale#completion#GetAllTriggers	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetAllTriggers() abort$/;"	f
ale#completion#GetCompletionKind	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionKind(kind) abort$/;"	f
ale#completion#GetCompletionPosition	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionPosition() abort$/;"	f
ale#completion#GetCompletionPositionForDeoplete	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionPositionForDeoplete(input) abort$/;"	f
ale#completion#GetCompletionResult	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionResult() abort$/;"	f
ale#completion#GetCompletionSymbols	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionSymbols(kind) abort$/;"	f
ale#completion#GetCompletions	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletions(...) abort$/;"	f
ale#completion#GetPrefix	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetPrefix(filetype, line, column) abort$/;"	f
ale#completion#GetTriggerCharacter	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetTriggerCharacter(filetype, prefix) abort$/;"	f
ale#completion#HandleLSPResponse	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#completion#HandleTSServerResponse	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#completion#HandleUserData	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleUserData(completed_item) abort$/;"	f
ale#completion#NullFilter	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#NullFilter(buffer, item) abort$/;"	f
ale#completion#OmniFunc	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#OmniFunc(findstart, base) abort$/;"	f
ale#completion#ParseLSPCompletions	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseLSPCompletions(response) abort$/;"	f
ale#completion#ParseTSServerCompletionEntryDetails	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseTSServerCompletionEntryDetails(response) abort$/;"	f
ale#completion#ParseTSServerCompletions	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseTSServerCompletions(response) abort$/;"	f
ale#completion#Queue	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Queue() abort$/;"	f
ale#completion#RestoreCompletionOptions	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#RestoreCompletionOptions() abort$/;"	f
ale#completion#Show	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Show(result) abort$/;"	f
ale#completion#StopTimer	nvim/plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#StopTimer() abort$/;"	f
ale#completion#python#CompletionItemFilter	nvim/plugged/ale/autoload/ale/completion/python.vim	/^function! ale#completion#python#CompletionItemFilter(buffer, item) abort$/;"	f
ale#cursor#EchoCursorWarning	nvim/plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarning(...) abort$/;"	f
ale#cursor#EchoCursorWarningWithDelay	nvim/plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarningWithDelay() abort$/;"	f
ale#cursor#ShowCursorDetail	nvim/plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#ShowCursorDetail() abort$/;"	f
ale#cursor#TruncatedEcho	nvim/plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#TruncatedEcho(original_message) abort$/;"	f
ale#d#FindDUBConfig	nvim/plugged/ale/autoload/ale/d.vim	/^function! ale#d#FindDUBConfig(buffer) abort$/;"	f
ale#debugging#Info	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#Info() abort$/;"	f
ale#debugging#InfoToClipboard	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToClipboard() abort$/;"	f
ale#debugging#InfoToFile	nvim/plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToFile(filename) abort$/;"	f
ale#definition#ClearLSPData	nvim/plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#ClearLSPData() abort$/;"	f
ale#definition#GetMap	nvim/plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GetMap() abort$/;"	f
ale#definition#GoTo	nvim/plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoTo(options) abort$/;"	f
ale#definition#GoToType	nvim/plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoToType(options) abort$/;"	f
ale#definition#HandleLSPResponse	nvim/plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#definition#HandleTSServerResponse	nvim/plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#definition#SetMap	nvim/plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#SetMap(map) abort$/;"	f
ale#definition#UpdateTagStack	nvim/plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#UpdateTagStack() abort$/;"	f
ale#engine#Cleanup	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#Cleanup(buffer) abort$/;"	f
ale#engine#CleanupEveryBuffer	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#CleanupEveryBuffer() abort$/;"	f
ale#engine#CreateDirectory	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#CreateDirectory(buffer) abort$/;"	f
ale#engine#CreateFile	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#CreateFile(buffer) abort$/;"	f
ale#engine#EscapeCommandPart	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#EscapeCommandPart(command_part) abort$/;"	f
ale#engine#FixLocList	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#FixLocList(buffer, linter_name, from_other_source, loclist) abort$/;"	f
ale#engine#GetLoclist	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#GetLoclist(buffer) abort$/;"	f
ale#engine#HandleLoclist	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#HandleLoclist(linter_name, buffer, loclist, from_other_source) abort$/;"	f
ale#engine#InitBufferInfo	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#InitBufferInfo(buffer) abort$/;"	f
ale#engine#IsCheckingBuffer	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#IsCheckingBuffer(buffer) abort$/;"	f
ale#engine#IsExecutable	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#IsExecutable(buffer, executable) abort$/;"	f
ale#engine#ManageDirectory	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ManageDirectory(buffer, directory) abort$/;"	f
ale#engine#ManageFile	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ManageFile(buffer, filename) abort$/;"	f
ale#engine#MarkLinterActive	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#MarkLinterActive(info, linter) abort$/;"	f
ale#engine#MarkLinterInactive	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#MarkLinterInactive(info, linter_name) abort$/;"	f
ale#engine#ProcessChain	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ProcessChain(buffer, executable, linter, chain_index, input) abort$/;"	f
ale#engine#ResetExecutableCache	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ResetExecutableCache() abort$/;"	f
ale#engine#RunLinters	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#RunLinters(buffer, linters, should_lint_file) abort$/;"	f
ale#engine#SetResults	nvim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#SetResults(buffer, loclist) abort$/;"	f
ale#engine#ignore#Exclude	nvim/plugged/ale/autoload/ale/engine/ignore.vim	/^function! ale#engine#ignore#Exclude(filetype, all_linters, config, disable_lsp) abort$/;"	f
ale#engine#ignore#GetList	nvim/plugged/ale/autoload/ale/engine/ignore.vim	/^function! ale#engine#ignore#GetList(filetype, config) abort$/;"	f
ale#events#ClockMilliseconds	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#ClockMilliseconds() abort$/;"	f
ale#events#FileChangedEvent	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#FileChangedEvent(buffer) abort$/;"	f
ale#events#FileTypeEvent	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#FileTypeEvent(buffer, new_filetype) abort$/;"	f
ale#events#Init	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#Init() abort$/;"	f
ale#events#LintOnEnter	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#LintOnEnter(buffer) abort$/;"	f
ale#events#QuitEvent	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#QuitEvent(buffer) abort$/;"	f
ale#events#QuitRecently	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#QuitRecently(buffer) abort$/;"	f
ale#events#ReadOrEnterEvent	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#ReadOrEnterEvent(buffer) abort$/;"	f
ale#events#SaveEvent	nvim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#SaveEvent(buffer) abort$/;"	f
ale#filetypes#GuessExtension	nvim/plugged/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#GuessExtension(filetype) abort$/;"	f
ale#filetypes#LoadExtensionMap	nvim/plugged/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#LoadExtensionMap() abort$/;"	f
ale#fix#ApplyFixes	nvim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyFixes(buffer, output) abort$/;"	f
ale#fix#ApplyQueuedFixes	nvim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyQueuedFixes(buffer) abort$/;"	f
ale#fix#Fix	nvim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#Fix(buffer, fixing_flag, ...) abort$/;"	f
ale#fix#InitBufferData	nvim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#InitBufferData(buffer, fixing_flag) abort$/;"	f
ale#fix#registry#Add	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Add(name, func, filetypes, desc, ...) abort$/;"	f
ale#fix#registry#Clear	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Clear() abort$/;"	f
ale#fix#registry#CompleteFixers	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#CompleteFixers(ArgLead, CmdLine, CursorPos) abort$/;"	f
ale#fix#registry#GetApplicableFixers	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetApplicableFixers(filetype) abort$/;"	f
ale#fix#registry#GetFunc	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetFunc(name) abort$/;"	f
ale#fix#registry#ResetToDefaults	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#ResetToDefaults() abort$/;"	f
ale#fix#registry#Suggest	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Suggest(filetype) abort$/;"	f
ale#fix#registry#SuggestedFixers	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#SuggestedFixers(filetype) abort$/;"	f
ale#fixers#autopep8#Fix	nvim/plugged/ale/autoload/ale/fixers/autopep8.vim	/^function! ale#fixers#autopep8#Fix(buffer) abort$/;"	f
ale#fixers#bibclean#Fix	nvim/plugged/ale/autoload/ale/fixers/bibclean.vim	/^function! ale#fixers#bibclean#Fix(buffer) abort$/;"	f
ale#fixers#black#Fix	nvim/plugged/ale/autoload/ale/fixers/black.vim	/^function! ale#fixers#black#Fix(buffer) abort$/;"	f
ale#fixers#black#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/black.vim	/^function! ale#fixers#black#GetExecutable(buffer) abort$/;"	f
ale#fixers#brittany#Fix	nvim/plugged/ale/autoload/ale/fixers/brittany.vim	/^function! ale#fixers#brittany#Fix(buffer) abort$/;"	f
ale#fixers#brittany#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/brittany.vim	/^function! ale#fixers#brittany#GetExecutable(buffer) abort$/;"	f
ale#fixers#clangformat#Fix	nvim/plugged/ale/autoload/ale/fixers/clangformat.vim	/^function! ale#fixers#clangformat#Fix(buffer) abort$/;"	f
ale#fixers#clangformat#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/clangformat.vim	/^function! ale#fixers#clangformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#clangtidy#Fix	nvim/plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#Fix(buffer) abort$/;"	f
ale#fixers#clangtidy#GetCommand	nvim/plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#GetCommand(buffer) abort$/;"	f
ale#fixers#clangtidy#Var	nvim/plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#Var(buffer, name) abort$/;"	f
ale#fixers#cmakeformat#Fix	nvim/plugged/ale/autoload/ale/fixers/cmakeformat.vim	/^function! ale#fixers#cmakeformat#Fix(buffer) abort$/;"	f
ale#fixers#dartfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/dartfmt.vim	/^function! ale#fixers#dartfmt#Fix(buffer) abort$/;"	f
ale#fixers#dfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/dfmt.vim	/^function! ale#fixers#dfmt#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#Fix	nvim/plugged/ale/autoload/ale/fixers/elm_format.vim	/^function! ale#fixers#elm_format#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/elm_format.vim	/^function! ale#fixers#elm_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#eslint#ApplyFixForVersion	nvim/plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#eslint#Fix	nvim/plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#Fix(buffer) abort$/;"	f
ale#fixers#eslint#ProcessEslintDOutput	nvim/plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ProcessEslintDOutput(buffer, output) abort$/;"	f
ale#fixers#eslint#ProcessFixDryRunOutput	nvim/plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ProcessFixDryRunOutput(buffer, output) abort$/;"	f
ale#fixers#fecs#Fix	nvim/plugged/ale/autoload/ale/fixers/fecs.vim	/^function! ale#fixers#fecs#Fix(buffer) abort$/;"	f
ale#fixers#fixjson#Fix	nvim/plugged/ale/autoload/ale/fixers/fixjson.vim	/^function! ale#fixers#fixjson#Fix(buffer) abort$/;"	f
ale#fixers#fixjson#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/fixjson.vim	/^function! ale#fixers#fixjson#GetExecutable(buffer) abort$/;"	f
ale#fixers#floskell#Fix	nvim/plugged/ale/autoload/ale/fixers/floskell.vim	/^function! ale#fixers#floskell#Fix(buffer) abort$/;"	f
ale#fixers#floskell#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/floskell.vim	/^function! ale#fixers#floskell#GetExecutable(buffer) abort$/;"	f
ale#fixers#generic#RemoveTrailingBlankLines	nvim/plugged/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#RemoveTrailingBlankLines(buffer, lines) abort$/;"	f
ale#fixers#generic#TrimWhitespace	nvim/plugged/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#TrimWhitespace(buffer, lines) abort$/;"	f
ale#fixers#generic_python#AddLinesBeforeControlStatements	nvim/plugged/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#AddLinesBeforeControlStatements(buffer, lines) abort$/;"	f
ale#fixers#generic_python#BreakUpLongLines	nvim/plugged/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#BreakUpLongLines(buffer, lines) abort$/;"	f
ale#fixers#gnatpp#Fix	nvim/plugged/ale/autoload/ale/fixers/gnatpp.vim	/^function! ale#fixers#gnatpp#Fix(buffer) abort$/;"	f
ale#fixers#gofmt#Fix	nvim/plugged/ale/autoload/ale/fixers/gofmt.vim	/^function! ale#fixers#gofmt#Fix(buffer) abort$/;"	f
ale#fixers#goimports#Fix	nvim/plugged/ale/autoload/ale/fixers/goimports.vim	/^function! ale#fixers#goimports#Fix(buffer) abort$/;"	f
ale#fixers#gomod#Fix	nvim/plugged/ale/autoload/ale/fixers/gomod.vim	/^function! ale#fixers#gomod#Fix(buffer) abort$/;"	f
ale#fixers#google_java_format#Fix	nvim/plugged/ale/autoload/ale/fixers/google_java_format.vim	/^function! ale#fixers#google_java_format#Fix(buffer) abort$/;"	f
ale#fixers#hackfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/hackfmt.vim	/^function! ale#fixers#hackfmt#Fix(buffer) abort$/;"	f
ale#fixers#help#AlignTags	nvim/plugged/ale/autoload/ale/fixers/help.vim	/^function! ale#fixers#help#AlignTags(buffer, lines) abort$/;"	f
ale#fixers#hfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/hfmt.vim	/^function! ale#fixers#hfmt#Fix(buffer) abort$/;"	f
ale#fixers#hindent#Fix	nvim/plugged/ale/autoload/ale/fixers/hindent.vim	/^function! ale#fixers#hindent#Fix(buffer) abort$/;"	f
ale#fixers#hindent#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/hindent.vim	/^function! ale#fixers#hindent#GetExecutable(buffer) abort$/;"	f
ale#fixers#hlint#Fix	nvim/plugged/ale/autoload/ale/fixers/hlint.vim	/^function! ale#fixers#hlint#Fix(buffer) abort$/;"	f
ale#fixers#html_beautify#Fix	nvim/plugged/ale/autoload/ale/fixers/html_beautify.vim	/^function! ale#fixers#html_beautify#Fix(buffer) abort$/;"	f
ale#fixers#importjs#Fix	nvim/plugged/ale/autoload/ale/fixers/importjs.vim	/^function! ale#fixers#importjs#Fix(buffer) abort$/;"	f
ale#fixers#importjs#ProcessOutput	nvim/plugged/ale/autoload/ale/fixers/importjs.vim	/^function! ale#fixers#importjs#ProcessOutput(buffer, output) abort$/;"	f
ale#fixers#isort#Fix	nvim/plugged/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#Fix(buffer) abort$/;"	f
ale#fixers#jq#Fix	nvim/plugged/ale/autoload/ale/fixers/jq.vim	/^function! ale#fixers#jq#Fix(buffer) abort$/;"	f
ale#fixers#jq#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/jq.vim	/^function! ale#fixers#jq#GetExecutable(buffer) abort$/;"	f
ale#fixers#ktlint#Fix	nvim/plugged/ale/autoload/ale/fixers/ktlint.vim	/^function! ale#fixers#ktlint#Fix(buffer) abort$/;"	f
ale#fixers#latexindent#Fix	nvim/plugged/ale/autoload/ale/fixers/latexindent.vim	/^function! ale#fixers#latexindent#Fix(buffer) abort$/;"	f
ale#fixers#mix_format#Fix	nvim/plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#Fix(buffer) abort$/;"	f
ale#fixers#mix_format#GetCommand	nvim/plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#GetCommand(buffer) abort$/;"	f
ale#fixers#mix_format#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#nimpretty#Fix	nvim/plugged/ale/autoload/ale/fixers/nimpretty.vim	/^function! ale#fixers#nimpretty#Fix(buffer) abort$/;"	f
ale#fixers#nixpkgsfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/nixpkgsfmt.vim	/^function! ale#fixers#nixpkgsfmt#Fix(buffer) abort$/;"	f
ale#fixers#ocamlformat#Fix	nvim/plugged/ale/autoload/ale/fixers/ocamlformat.vim	/^function! ale#fixers#ocamlformat#Fix(buffer) abort$/;"	f
ale#fixers#ocp_indent#Fix	nvim/plugged/ale/autoload/ale/fixers/ocp_indent.vim	/^function! ale#fixers#ocp_indent#Fix(buffer) abort$/;"	f
ale#fixers#perltidy#Fix	nvim/plugged/ale/autoload/ale/fixers/perltidy.vim	/^function! ale#fixers#perltidy#Fix(buffer) abort$/;"	f
ale#fixers#pgformatter#Fix	nvim/plugged/ale/autoload/ale/fixers/pgformatter.vim	/^function! ale#fixers#pgformatter#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#Fix	nvim/plugged/ale/autoload/ale/fixers/php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#GetExecutable(buffer) abort$/;"	f
ale#fixers#phpcbf#Fix	nvim/plugged/ale/autoload/ale/fixers/phpcbf.vim	/^function! ale#fixers#phpcbf#Fix(buffer) abort$/;"	f
ale#fixers#phpcbf#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/phpcbf.vim	/^function! ale#fixers#phpcbf#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier#ApplyFixForVersion	nvim/plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#prettier#Fix	nvim/plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#Fix(buffer) abort$/;"	f
ale#fixers#prettier#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier#ProcessPrettierDOutput	nvim/plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#ProcessPrettierDOutput(buffer, output) abort$/;"	f
ale#fixers#prettier_eslint#ApplyFixForVersion	nvim/plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#prettier_eslint#Fix	nvim/plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#Fix(buffer) abort$/;"	f
ale#fixers#prettier_eslint#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier_standard#Fix	nvim/plugged/ale/autoload/ale/fixers/prettier_standard.vim	/^function! ale#fixers#prettier_standard#Fix(buffer) abort$/;"	f
ale#fixers#prettier_standard#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/prettier_standard.vim	/^function! ale#fixers#prettier_standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#puppetlint#Fix	nvim/plugged/ale/autoload/ale/fixers/puppetlint.vim	/^function! ale#fixers#puppetlint#Fix(buffer) abort$/;"	f
ale#fixers#purty#Fix	nvim/plugged/ale/autoload/ale/fixers/purty.vim	/^function! ale#fixers#purty#Fix(buffer) abort$/;"	f
ale#fixers#purty#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/purty.vim	/^function! ale#fixers#purty#GetExecutable(buffer) abort$/;"	f
ale#fixers#qmlfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/qmlfmt.vim	/^function! ale#fixers#qmlfmt#Fix(buffer) abort$/;"	f
ale#fixers#qmlfmt#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/qmlfmt.vim	/^function! ale#fixers#qmlfmt#GetExecutable(buffer) abort$/;"	f
ale#fixers#refmt#Fix	nvim/plugged/ale/autoload/ale/fixers/refmt.vim	/^function! ale#fixers#refmt#Fix(buffer) abort$/;"	f
ale#fixers#reorder_python_imports#Fix	nvim/plugged/ale/autoload/ale/fixers/reorder_python_imports.vim	/^function! ale#fixers#reorder_python_imports#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#Fix	nvim/plugged/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#GetCommand	nvim/plugged/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#GetCommand(buffer) abort$/;"	f
ale#fixers#rufo#Fix	nvim/plugged/ale/autoload/ale/fixers/rufo.vim	/^function! ale#fixers#rufo#Fix(buffer) abort$/;"	f
ale#fixers#rufo#GetCommand	nvim/plugged/ale/autoload/ale/fixers/rufo.vim	/^function! ale#fixers#rufo#GetCommand(buffer) abort$/;"	f
ale#fixers#rustfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/rustfmt.vim	/^function! ale#fixers#rustfmt#Fix(buffer) abort$/;"	f
ale#fixers#scalafmt#Fix	nvim/plugged/ale/autoload/ale/fixers/scalafmt.vim	/^function! ale#fixers#scalafmt#Fix(buffer) abort$/;"	f
ale#fixers#scalafmt#GetCommand	nvim/plugged/ale/autoload/ale/fixers/scalafmt.vim	/^function! ale#fixers#scalafmt#GetCommand(buffer) abort$/;"	f
ale#fixers#shfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/shfmt.vim	/^function! ale#fixers#shfmt#Fix(buffer) abort$/;"	f
ale#fixers#sorbet#Fix	nvim/plugged/ale/autoload/ale/fixers/sorbet.vim	/^function! ale#fixers#sorbet#Fix(buffer) abort$/;"	f
ale#fixers#sorbet#GetCommand	nvim/plugged/ale/autoload/ale/fixers/sorbet.vim	/^function! ale#fixers#sorbet#GetCommand(buffer) abort$/;"	f
ale#fixers#sqlfmt#Fix	nvim/plugged/ale/autoload/ale/fixers/sqlfmt.vim	/^function! ale#fixers#sqlfmt#Fix(buffer) abort$/;"	f
ale#fixers#sqlformat#Fix	nvim/plugged/ale/autoload/ale/fixers/sqlformat.vim	/^function! ale#fixers#sqlformat#Fix(buffer) abort$/;"	f
ale#fixers#standard#Fix	nvim/plugged/ale/autoload/ale/fixers/standard.vim	/^function! ale#fixers#standard#Fix(buffer) abort$/;"	f
ale#fixers#standard#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/standard.vim	/^function! ale#fixers#standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#standardrb#Fix	nvim/plugged/ale/autoload/ale/fixers/standardrb.vim	/^function! ale#fixers#standardrb#Fix(buffer) abort$/;"	f
ale#fixers#standardrb#GetCommand	nvim/plugged/ale/autoload/ale/fixers/standardrb.vim	/^function! ale#fixers#standardrb#GetCommand(buffer) abort$/;"	f
ale#fixers#stylelint#Fix	nvim/plugged/ale/autoload/ale/fixers/stylelint.vim	/^function! ale#fixers#stylelint#Fix(buffer) abort$/;"	f
ale#fixers#stylelint#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/stylelint.vim	/^function! ale#fixers#stylelint#GetExecutable(buffer) abort$/;"	f
ale#fixers#styler#Fix	nvim/plugged/ale/autoload/ale/fixers/styler.vim	/^function! ale#fixers#styler#Fix(buffer) abort$/;"	f
ale#fixers#stylish_haskell#Fix	nvim/plugged/ale/autoload/ale/fixers/stylish_haskell.vim	/^function! ale#fixers#stylish_haskell#Fix(buffer) abort$/;"	f
ale#fixers#stylish_haskell#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/stylish_haskell.vim	/^function! ale#fixers#stylish_haskell#GetExecutable(buffer) abort$/;"	f
ale#fixers#swiftformat#Fix	nvim/plugged/ale/autoload/ale/fixers/swiftformat.vim	/^function! ale#fixers#swiftformat#Fix(buffer) abort$/;"	f
ale#fixers#swiftformat#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/swiftformat.vim	/^function! ale#fixers#swiftformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#terraform#Fix	nvim/plugged/ale/autoload/ale/fixers/terraform.vim	/^function! ale#fixers#terraform#Fix(buffer) abort$/;"	f
ale#fixers#textlint#Fix	nvim/plugged/ale/autoload/ale/fixers/textlint.vim	/^function! ale#fixers#textlint#Fix(buffer) abort$/;"	f
ale#fixers#tidy#Fix	nvim/plugged/ale/autoload/ale/fixers/tidy.vim	/^function! ale#fixers#tidy#Fix(buffer) abort$/;"	f
ale#fixers#tslint#Fix	nvim/plugged/ale/autoload/ale/fixers/tslint.vim	/^function! ale#fixers#tslint#Fix(buffer) abort$/;"	f
ale#fixers#uncrustify#Fix	nvim/plugged/ale/autoload/ale/fixers/uncrustify.vim	/^function! ale#fixers#uncrustify#Fix(buffer) abort$/;"	f
ale#fixers#xmllint#Fix	nvim/plugged/ale/autoload/ale/fixers/xmllint.vim	/^function! ale#fixers#xmllint#Fix(buffer) abort$/;"	f
ale#fixers#xo#Fix	nvim/plugged/ale/autoload/ale/fixers/xo.vim	/^function! ale#fixers#xo#Fix(buffer) abort$/;"	f
ale#fixers#xo#GetExecutable	nvim/plugged/ale/autoload/ale/fixers/xo.vim	/^function! ale#fixers#xo#GetExecutable(buffer) abort$/;"	f
ale#fixers#yapf#Fix	nvim/plugged/ale/autoload/ale/fixers/yapf.vim	/^function! ale#fixers#yapf#Fix(buffer) abort$/;"	f
ale#go#EnvString	nvim/plugged/ale/autoload/ale/go.vim	/^function! ale#go#EnvString(buffer) abort$/;"	f
ale#go#FindProjectRoot	nvim/plugged/ale/autoload/ale/go.vim	/^function! ale#go#FindProjectRoot(buffer) abort$/;"	f
ale#gradle#BuildClasspathCommand	nvim/plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#BuildClasspathCommand(buffer) abort$/;"	f
ale#gradle#FindExecutable	nvim/plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#FindExecutable(buffer) abort$/;"	f
ale#gradle#FindProjectRoot	nvim/plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#FindProjectRoot(buffer) abort$/;"	f
ale#gradle#GetInitPath	nvim/plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#GetInitPath() abort$/;"	f
ale#handlers#alex#CreateCommandCallback	nvim/plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#CreateCommandCallback(flags) abort$/;"	f
ale#handlers#alex#DefineLinter	nvim/plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#DefineLinter(filetype, flags) abort$/;"	f
ale#handlers#alex#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#GetExecutable(buffer) abort$/;"	f
ale#handlers#alex#Handle	nvim/plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#Handle(buffer, lines) abort$/;"	f
ale#handlers#ccls#GetProjectRoot	nvim/plugged/ale/autoload/ale/handlers/ccls.vim	/^function! ale#handlers#ccls#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#cppcheck#GetBufferPathIncludeOptions	nvim/plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetBufferPathIncludeOptions(buffer) abort$/;"	f
ale#handlers#cppcheck#GetCdCommand	nvim/plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetCdCommand(buffer) abort$/;"	f
ale#handlers#cppcheck#GetCompileCommandsOptions	nvim/plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetCompileCommandsOptions(buffer) abort$/;"	f
ale#handlers#cppcheck#HandleCppCheckFormat	nvim/plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#HandleCppCheckFormat(buffer, lines) abort$/;"	f
ale#handlers#cpplint#HandleCppLintFormat	nvim/plugged/ale/autoload/ale/handlers/cpplint.vim	/^function! ale#handlers#cpplint#HandleCppLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleCSSLintFormat	nvim/plugged/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleCSSLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleStyleLintFormat	nvim/plugged/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleStyleLintFormat(buffer, lines) abort$/;"	f
ale#handlers#elixir#FindMixProjectRoot	nvim/plugged/ale/autoload/ale/handlers/elixir.vim	/^function! ale#handlers#elixir#FindMixProjectRoot(buffer) abort$/;"	f
ale#handlers#elixir#FindMixUmbrellaRoot	nvim/plugged/ale/autoload/ale/handlers/elixir.vim	/^function! ale#handlers#elixir#FindMixUmbrellaRoot(buffer) abort$/;"	f
ale#handlers#eslint#FindConfig	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#FindConfig(buffer) abort$/;"	f
ale#handlers#eslint#GetCommand	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetCommand(buffer) abort$/;"	f
ale#handlers#eslint#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#eslint#Handle	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#Handle(buffer, lines) abort$/;"	f
ale#handlers#eslint#HandleJSON	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#HandleJSON(buffer, lines) abort$/;"	f
ale#handlers#fecs#GetCommand	nvim/plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#GetCommand(buffer) abort$/;"	f
ale#handlers#fecs#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#GetExecutable(buffer) abort$/;"	f
ale#handlers#fecs#Handle	nvim/plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#Handle(buffer, lines) abort$/;"	f
ale#handlers#flawfinder#HandleFlawfinderFormat	nvim/plugged/ale/autoload/ale/handlers/flawfinder.vim	/^function! ale#handlers#flawfinder#HandleFlawfinderFormat(buffer, lines) abort$/;"	f
ale#handlers#gawk#HandleGawkFormat	nvim/plugged/ale/autoload/ale/handlers/gawk.vim	/^function! ale#handlers#gawk#HandleGawkFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormat	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormatWithIncludes	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormatWithIncludes(buffer, lines) abort$/;"	f
ale#handlers#go#Handler	nvim/plugged/ale/autoload/ale/handlers/go.vim	/^function! ale#handlers#go#Handler(buffer, lines) abort$/;"	f
ale#handlers#haskell#GetStackExecutable	nvim/plugged/ale/autoload/ale/handlers/haskell.vim	/^function! ale#handlers#haskell#GetStackExecutable(bufnr) abort$/;"	f
ale#handlers#haskell#HandleGHCFormat	nvim/plugged/ale/autoload/ale/handlers/haskell.vim	/^function! ale#handlers#haskell#HandleGHCFormat(buffer, lines) abort$/;"	f
ale#handlers#haskell_stack#EscapeExecutable	nvim/plugged/ale/autoload/ale/handlers/haskell_stack.vim	/^function! ale#handlers#haskell_stack#EscapeExecutable(executable, stack_exec) abort$/;"	f
ale#handlers#hlint#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/hlint.vim	/^function! ale#handlers#hlint#GetExecutable(buffer) abort$/;"	f
ale#handlers#ktlint#GetCommand	nvim/plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#GetCommand(buffer) abort$/;"	f
ale#handlers#ktlint#GetRulesets	nvim/plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#GetRulesets(buffer) abort$/;"	f
ale#handlers#ktlint#Handle	nvim/plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#Handle(buffer, lines) abort$/;"	f
ale#handlers#languagetool#DefineLinter	nvim/plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#DefineLinter(filetype) abort$/;"	f
ale#handlers#languagetool#GetCommand	nvim/plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#GetCommand(buffer) abort$/;"	f
ale#handlers#languagetool#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#GetExecutable(buffer) abort$/;"	f
ale#handlers#languagetool#HandleOutput	nvim/plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#HandleOutput(buffer, lines) abort$/;"	f
ale#handlers#markdownlint#Handle	nvim/plugged/ale/autoload/ale/handlers/markdownlint.vim	/^function! ale#handlers#markdownlint#Handle(buffer, lines) abort$/;"	f
ale#handlers#ols#GetCommand	nvim/plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetCommand(buffer) abort$/;"	f
ale#handlers#ols#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetExecutable(buffer) abort$/;"	f
ale#handlers#ols#GetLanguage	nvim/plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetLanguage(buffer) abort$/;"	f
ale#handlers#ols#GetProjectRoot	nvim/plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#pony#HandlePonycFormat	nvim/plugged/ale/autoload/ale/handlers/pony.vim	/^function! ale#handlers#pony#HandlePonycFormat(buffer, lines) abort$/;"	f
ale#handlers#redpen#HandleRedpenOutput	nvim/plugged/ale/autoload/ale/handlers/redpen.vim	/^function! ale#handlers#redpen#HandleRedpenOutput(buffer, lines) abort$/;"	f
ale#handlers#ruby#HandleSyntaxErrors	nvim/plugged/ale/autoload/ale/handlers/ruby.vim	/^function! ale#handlers#ruby#HandleSyntaxErrors(buffer, lines) abort$/;"	f
ale#handlers#rust#HandleRustErrors	nvim/plugged/ale/autoload/ale/handlers/rust.vim	/^function! ale#handlers#rust#HandleRustErrors(buffer, lines) abort$/;"	f
ale#handlers#scala#HandleScalacLintFormat	nvim/plugged/ale/autoload/ale/handlers/scala.vim	/^function! ale#handlers#scala#HandleScalacLintFormat(buffer, lines) abort$/;"	f
ale#handlers#sh#GetShellType	nvim/plugged/ale/autoload/ale/handlers/sh.vim	/^function! ale#handlers#sh#GetShellType(buffer) abort$/;"	f
ale#handlers#sml#GetCmFile	nvim/plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetCmFile(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjCm	nvim/plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjCm(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjFile	nvim/plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjFile(buffer) abort$/;"	f
ale#handlers#sml#Handle	nvim/plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#Handle(buffer, lines) abort$/;"	f
ale#handlers#textlint#GetCommand	nvim/plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#GetCommand(buffer) abort$/;"	f
ale#handlers#textlint#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#GetExecutable(buffer) abort$/;"	f
ale#handlers#textlint#HandleTextlintOutput	nvim/plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#HandleTextlintOutput(buffer, lines) abort$/;"	f
ale#handlers#tslint#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/tslint.vim	/^function! ale#handlers#tslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#tslint#InitVariables	nvim/plugged/ale/autoload/ale/handlers/tslint.vim	/^function! ale#handlers#tslint#InitVariables() abort$/;"	f
ale#handlers#tsserver#GetProjectRoot	nvim/plugged/ale/autoload/ale/handlers/tsserver.vim	/^function! ale#handlers#tsserver#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#unix#HandleAsError	nvim/plugged/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsError(buffer, lines) abort$/;"	f
ale#handlers#unix#HandleAsWarning	nvim/plugged/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsWarning(buffer, lines) abort$/;"	f
ale#handlers#vale#GetType	nvim/plugged/ale/autoload/ale/handlers/vale.vim	/^function! ale#handlers#vale#GetType(severity) abort$/;"	f
ale#handlers#vale#Handle	nvim/plugged/ale/autoload/ale/handlers/vale.vim	/^function! ale#handlers#vale#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#DefineLinter	nvim/plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#DefineLinter(filetype) abort$/;"	f
ale#handlers#writegood#GetCommand	nvim/plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#GetCommand(buffer) abort$/;"	f
ale#handlers#writegood#GetExecutable	nvim/plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#GetExecutable(buffer) abort$/;"	f
ale#handlers#writegood#Handle	nvim/plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#ResetOptions	nvim/plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#ResetOptions() abort$/;"	f
ale#highlight#BufferHidden	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#BufferHidden(buffer) abort$/;"	f
ale#highlight#CreatePositions	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#CreatePositions(line, col, end_line, end_col) abort$/;"	f
ale#highlight#RemoveHighlights	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#RemoveHighlights() abort$/;"	f
ale#highlight#SetHighlights	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#SetHighlights(buffer, loclist) abort$/;"	f
ale#highlight#UpdateHighlights	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#UpdateHighlights() abort$/;"	f
ale#highlight#nvim_buf_add_highlight	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#nvim_buf_add_highlight(buffer, ns_id, hl_group, line, col_start, col_end) abort$/;"	f
ale#highlight#nvim_buf_clear_namespace	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#nvim_buf_clear_namespace(buffer, ns_id, line_start, line_end) abort$/;"	f
ale#history#Add	nvim/plugged/ale/autoload/ale/history.vim	/^function! ale#history#Add(buffer, status, job_id, command) abort$/;"	f
ale#history#Get	nvim/plugged/ale/autoload/ale/history.vim	/^function! ale#history#Get(buffer) abort$/;"	f
ale#history#RememberOutput	nvim/plugged/ale/autoload/ale/history.vim	/^function! ale#history#RememberOutput(buffer, job_id, output) abort$/;"	f
ale#history#SetExitCode	nvim/plugged/ale/autoload/ale/history.vim	/^function! ale#history#SetExitCode(buffer, job_id, exit_code) abort$/;"	f
ale#hover#ClearLSPData	nvim/plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ClearLSPData() abort$/;"	f
ale#hover#GetMap	nvim/plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#GetMap() abort$/;"	f
ale#hover#HandleLSPResponse	nvim/plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#hover#HandleTSServerResponse	nvim/plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#hover#SetMap	nvim/plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#SetMap(map) abort$/;"	f
ale#hover#Show	nvim/plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#Show(buffer, line, col, opt) abort$/;"	f
ale#hover#ShowAtCursor	nvim/plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ShowAtCursor() abort$/;"	f
ale#hover#ShowDocumentationAtCursor	nvim/plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ShowDocumentationAtCursor() abort$/;"	f
ale#java#FindProjectRoot	nvim/plugged/ale/autoload/ale/java.vim	/^function! ale#java#FindProjectRoot(buffer) abort$/;"	f
ale#job#HasOpenChannel	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#HasOpenChannel(job_id) abort$/;"	f
ale#job#IsRunning	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#IsRunning(job_id) abort$/;"	f
ale#job#ParseVim8ProcessID	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#ParseVim8ProcessID(job_string) abort$/;"	f
ale#job#PrepareCommand	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#PrepareCommand(buffer, command) abort$/;"	f
ale#job#SendRaw	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#SendRaw(job_id, string) abort$/;"	f
ale#job#Start	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#Start(command, options) abort$/;"	f
ale#job#StartWithCmd	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#StartWithCmd(command, options) abort$/;"	f
ale#job#Stop	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#Stop(job_id) abort$/;"	f
ale#job#ValidateArguments	nvim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#ValidateArguments(command, options) abort$/;"	f
ale#julia#FindProjectRoot	nvim/plugged/ale/autoload/ale/julia.vim	/^function! ale#julia#FindProjectRoot(buffer) abort$/;"	f
ale#linter#Define	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Define(filetype, linter) abort$/;"	f
ale#linter#Get	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Get(original_filetypes) abort$/;"	f
ale#linter#GetAddress	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAddress(buffer, linter) abort$/;"	f
ale#linter#GetAll	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAll(filetypes) abort$/;"	f
ale#linter#GetCommand	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetCommand(buffer, linter) abort$/;"	f
ale#linter#GetExecutable	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetExecutable(buffer, linter) abort$/;"	f
ale#linter#GetLintersLoaded	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetLintersLoaded() abort$/;"	f
ale#linter#PreProcess	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#PreProcess(filetype, linter) abort$/;"	f
ale#linter#PreventLoading	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#PreventLoading(filetype) abort$/;"	f
ale#linter#Reset	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Reset() abort$/;"	f
ale#linter#ResolveFiletype	nvim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#ResolveFiletype(original_filetype) abort$/;"	f
ale#list#GetCombinedList	nvim/plugged/ale/autoload/ale/list.vim	/^function! ale#list#GetCombinedList() abort$/;"	f
ale#list#IsQuickfixOpen	nvim/plugged/ale/autoload/ale/list.vim	/^function! ale#list#IsQuickfixOpen() abort$/;"	f
ale#list#SetLists	nvim/plugged/ale/autoload/ale/list.vim	/^function! ale#list#SetLists(buffer, loclist) abort$/;"	f
ale#loclist_jumping#FindNearest	nvim/plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#FindNearest(direction, wrap, ...) abort$/;"	f
ale#loclist_jumping#Jump	nvim/plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#Jump(direction, ...) abort$/;"	f
ale#loclist_jumping#JumpToIndex	nvim/plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#JumpToIndex(index) abort$/;"	f
ale#loclist_jumping#WrapJump	nvim/plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#WrapJump(direction, sargs) abort$/;"	f
ale#lsp#CloseDocument	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CloseDocument(buffer) abort$/;"	f
ale#lsp#CloseDocument	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CloseDocument(conn_id) abort$/;"	f
ale#lsp#ConnectToAddress	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ConnectToAddress(conn_id, address) abort$/;"	f
ale#lsp#CreateMessageData	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CreateMessageData(message) abort$/;"	f
ale#lsp#GetConnections	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetConnections() abort$/;"	f
ale#lsp#GetNextMessageID	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetNextMessageID() abort$/;"	f
ale#lsp#HandleInitResponse	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleInitResponse(conn, response) abort$/;"	f
ale#lsp#HandleMessage	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleMessage(conn_id, message) abort$/;"	f
ale#lsp#HasCapability	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HasCapability(conn_id, capability) abort$/;"	f
ale#lsp#MarkConnectionAsTsserver	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#MarkConnectionAsTsserver(conn_id) abort$/;"	f
ale#lsp#MarkDocumentAsOpen	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#MarkDocumentAsOpen(id, buffer) abort$/;"	f
ale#lsp#NotifyForChanges	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#NotifyForChanges(conn_id, buffer) abort$/;"	f
ale#lsp#OnInit	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#OnInit(conn_id, Callback) abort$/;"	f
ale#lsp#OpenDocument	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#OpenDocument(conn_id, buffer, language_id) abort$/;"	f
ale#lsp#ReadMessageData	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ReadMessageData(data) abort$/;"	f
ale#lsp#Register	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Register(executable_or_address, project, init_options) abort$/;"	f
ale#lsp#RegisterCallback	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#RegisterCallback(conn_id, callback) abort$/;"	f
ale#lsp#RemoveConnectionWithID	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#RemoveConnectionWithID(id) abort$/;"	f
ale#lsp#ResetConnections	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ResetConnections() abort$/;"	f
ale#lsp#Send	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Send(conn_id, message) abort$/;"	f
ale#lsp#StartProgram	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#StartProgram(conn_id, executable, command) abort$/;"	f
ale#lsp#Stop	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Stop(conn_id) abort$/;"	f
ale#lsp#StopAll	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#StopAll() abort$/;"	f
ale#lsp#UpdateConfig	nvim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#UpdateConfig(conn_id, buffer, config) abort$/;"	f
ale#lsp#message#Completion	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Completion(buffer, line, column, trigger_character) abort$/;"	f
ale#lsp#message#Definition	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#message#DidChange	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidChange(buffer) abort$/;"	f
ale#lsp#message#DidChangeConfiguration	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidChangeConfiguration(buffer, config) abort$/;"	f
ale#lsp#message#DidClose	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidClose(buffer) abort$/;"	f
ale#lsp#message#DidOpen	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidOpen(buffer, language_id) abort$/;"	f
ale#lsp#message#DidSave	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidSave(buffer) abort$/;"	f
ale#lsp#message#Exit	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Exit() abort$/;"	f
ale#lsp#message#GetNextVersionID	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#GetNextVersionID() abort$/;"	f
ale#lsp#message#Hover	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Hover(buffer, line, column) abort$/;"	f
ale#lsp#message#Initialize	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialize(root_path, options, capabilities) abort$/;"	f
ale#lsp#message#Initialized	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialized() abort$/;"	f
ale#lsp#message#References	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#References(buffer, line, column) abort$/;"	f
ale#lsp#message#Rename	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Rename(buffer, line, column, new_name) abort$/;"	f
ale#lsp#message#Shutdown	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Shutdown() abort$/;"	f
ale#lsp#message#Symbol	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Symbol(query) abort$/;"	f
ale#lsp#message#TypeDefinition	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#TypeDefinition(buffer, line, column) abort$/;"	f
ale#lsp#reset#StopAllLSPs	nvim/plugged/ale/autoload/ale/lsp/reset.vim	/^function! ale#lsp#reset#StopAllLSPs() abort$/;"	f
ale#lsp#response#GetErrorMessage	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#GetErrorMessage(response) abort$/;"	f
ale#lsp#response#ReadDiagnostics	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadDiagnostics(response) abort$/;"	f
ale#lsp#response#ReadTSServerDiagnostics	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadTSServerDiagnostics(response) abort$/;"	f
ale#lsp#tsserver_message#Change	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Change(buffer) abort$/;"	f
ale#lsp#tsserver_message#Close	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Close(buffer) abort$/;"	f
ale#lsp#tsserver_message#CompletionEntryDetails	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#CompletionEntryDetails(buffer, line, column, entry_names) abort$/;"	f
ale#lsp#tsserver_message#Completions	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Completions($/;"	f
ale#lsp#tsserver_message#Definition	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#Geterr	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Geterr(buffer) abort$/;"	f
ale#lsp#tsserver_message#Open	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Open(buffer) abort$/;"	f
ale#lsp#tsserver_message#OrganizeImports	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#OrganizeImports(buffer) abort$/;"	f
ale#lsp#tsserver_message#Quickinfo	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Quickinfo(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#References	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#References(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#Rename	nvim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Rename($/;"	f
ale#lsp_linter#CheckWithLSP	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#CheckWithLSP(buffer, linter) abort$/;"	f
ale#lsp_linter#ClearLSPData	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#ClearLSPData() abort$/;"	f
ale#lsp_linter#FindProjectRoot	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#FindProjectRoot(buffer, linter) abort$/;"	f
ale#lsp_linter#GetConfig	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#GetConfig(buffer, linter) abort$/;"	f
ale#lsp_linter#GetOptions	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#GetOptions(buffer, linter) abort$/;"	f
ale#lsp_linter#HandleLSPResponse	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#lsp_linter#OnInit	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#OnInit(linter, details, Callback) abort$/;"	f
ale#lsp_linter#SendRequest	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#SendRequest(buffer, linter_name, message, ...) abort$/;"	f
ale#lsp_linter#SetLSPLinterMap	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#SetLSPLinterMap(replacement_map) abort$/;"	f
ale#lsp_linter#StartLSP	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#StartLSP(buffer, linter, Callback) abort$/;"	f
ale#lsp_window#HandleShowMessage	nvim/plugged/ale/autoload/ale/lsp_window.vim	/^function! ale#lsp_window#HandleShowMessage(linter_name, format, params) abort$/;"	f
ale#node#Executable	nvim/plugged/ale/autoload/ale/node.vim	/^function! ale#node#Executable(buffer, executable) abort$/;"	f
ale#node#FindExecutable	nvim/plugged/ale/autoload/ale/node.vim	/^function! ale#node#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#organize_imports#Execute	nvim/plugged/ale/autoload/ale/organize_imports.vim	/^function! ale#organize_imports#Execute() abort$/;"	f
ale#organize_imports#HandleTSServerResponse	nvim/plugged/ale/autoload/ale/organize_imports.vim	/^function! ale#organize_imports#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#other_source#ShowResults	nvim/plugged/ale/autoload/ale/other_source.vim	/^function! ale#other_source#ShowResults(buffer, linter_name, loclist) abort$/;"	f
ale#other_source#StartChecking	nvim/plugged/ale/autoload/ale/other_source.vim	/^function! ale#other_source#StartChecking(buffer, linter_name) abort$/;"	f
ale#path#BufferCdString	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#BufferCdString(buffer) abort$/;"	f
ale#path#CdString	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#CdString(directory) abort$/;"	f
ale#path#Dirname	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#Dirname(path) abort$/;"	f
ale#path#FindNearestDirectory	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestDirectory(buffer, directory_name) abort$/;"	f
ale#path#FindNearestFile	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestFile(buffer, filename) abort$/;"	f
ale#path#FromURI	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#FromURI(uri) abort$/;"	f
ale#path#GetAbsPath	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#GetAbsPath(base_directory, filename) abort$/;"	f
ale#path#IsAbsolute	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsAbsolute(filename) abort$/;"	f
ale#path#IsBufferPath	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsBufferPath(buffer, complex_filename) abort$/;"	f
ale#path#IsTempName	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsTempName(filename) abort$/;"	f
ale#path#ResolveLocalPath	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#ResolveLocalPath(buffer, search_string, global_fallback) abort$/;"	f
ale#path#Simplify	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#Simplify(path) abort$/;"	f
ale#path#ToURI	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#ToURI(path) abort$/;"	f
ale#path#Upwards	nvim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#Upwards(path) abort$/;"	f
ale#pattern_options#SetOptions	nvim/plugged/ale/autoload/ale/pattern_options.vim	/^function! ale#pattern_options#SetOptions(buffer) abort$/;"	f
ale#powershell#RunPowerShell	nvim/plugged/ale/autoload/ale/powershell.vim	/^function! ale#powershell#RunPowerShell(buffer, base_var_name, command) abort$/;"	f
ale#preview#CloseIfTypeMatches	nvim/plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#CloseIfTypeMatches(filetype) abort$/;"	f
ale#preview#OpenSelectionInBuffer	nvim/plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#OpenSelectionInBuffer() abort$/;"	f
ale#preview#OpenSelectionInTab	nvim/plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#OpenSelectionInTab() abort$/;"	f
ale#preview#Show	nvim/plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#Show(lines, ...) abort$/;"	f
ale#preview#ShowSelection	nvim/plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#ShowSelection(item_list, ...) abort$/;"	f
ale#python#FindExecutable	nvim/plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#python#FindProjectRoot	nvim/plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRoot(buffer) abort$/;"	f
ale#python#FindProjectRootIni	nvim/plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRootIni(buffer) abort$/;"	f
ale#python#FindVirtualenv	nvim/plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindVirtualenv(buffer) abort$/;"	f
ale#python#HandleTraceback	nvim/plugged/ale/autoload/ale/python.vim	/^function! ale#python#HandleTraceback(lines, limit) abort$/;"	f
ale#python#PipenvPresent	nvim/plugged/ale/autoload/ale/python.vim	/^function! ale#python#PipenvPresent(buffer) abort$/;"	f
ale#references#ClearLSPData	nvim/plugged/ale/autoload/ale/references.vim	/^function! ale#references#ClearLSPData() abort$/;"	f
ale#references#Find	nvim/plugged/ale/autoload/ale/references.vim	/^function! ale#references#Find(...) abort$/;"	f
ale#references#GetMap	nvim/plugged/ale/autoload/ale/references.vim	/^function! ale#references#GetMap() abort$/;"	f
ale#references#HandleLSPResponse	nvim/plugged/ale/autoload/ale/references.vim	/^function! ale#references#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#references#HandleTSServerResponse	nvim/plugged/ale/autoload/ale/references.vim	/^function! ale#references#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#references#SetMap	nvim/plugged/ale/autoload/ale/references.vim	/^function! ale#references#SetMap(map) abort$/;"	f
ale#rename#ClearLSPData	nvim/plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#ClearLSPData() abort$/;"	f
ale#rename#Execute	nvim/plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#Execute() abort$/;"	f
ale#rename#GetMap	nvim/plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#GetMap() abort$/;"	f
ale#rename#HandleLSPResponse	nvim/plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#rename#HandleTSServerResponse	nvim/plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#rename#SetMap	nvim/plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#SetMap(map) abort$/;"	f
ale#ruby#EscapeExecutable	nvim/plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#EscapeExecutable(executable, bundle_exec) abort$/;"	f
ale#ruby#FindProjectRoot	nvim/plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#FindProjectRoot(buffer) abort$/;"	f
ale#ruby#FindRailsRoot	nvim/plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#FindRailsRoot(buffer) abort$/;"	f
ale#ruby#HandleRubocopOutput	nvim/plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#HandleRubocopOutput(buffer, lines) abort$/;"	f
ale#semver#GTE	nvim/plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#GTE(lhs, rhs) abort$/;"	f
ale#semver#ParseVersion	nvim/plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#ParseVersion(version_lines) abort$/;"	f
ale#semver#ResetVersionCache	nvim/plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#ResetVersionCache() abort$/;"	f
ale#semver#RunWithVersionCheck	nvim/plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#RunWithVersionCheck(buffer, executable, command, Callback) abort$/;"	f
ale#sign#Clear	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#Clear() abort$/;"	f
ale#sign#FindCurrentSigns	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#FindCurrentSigns(buffer) abort$/;"	f
ale#sign#GetSignCommands	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignCommands(buffer, was_sign_set, sign_map) abort$/;"	f
ale#sign#GetSignName	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignName(sublist) abort$/;"	f
ale#sign#ParsePattern	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParsePattern() abort$/;"	f
ale#sign#ParseSigns	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParseSigns(line_list) abort$/;"	f
ale#sign#ReadSigns	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ReadSigns(buffer) abort$/;"	f
ale#sign#SetSigns	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#SetSigns(buffer, loclist) abort$/;"	f
ale#sign#SetUpDefaultColumnWithoutErrorsHighlight	nvim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#SetUpDefaultColumnWithoutErrorsHighlight() abort$/;"	f
ale#socket#Close	nvim/plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Close(channel_id) abort$/;"	f
ale#socket#GetAddress	nvim/plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#GetAddress(channel_id) abort$/;"	f
ale#socket#IsOpen	nvim/plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#IsOpen(channel_id) abort$/;"	f
ale#socket#Open	nvim/plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Open(address, options) abort$/;"	f
ale#socket#Send	nvim/plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Send(channel_id, data) abort$/;"	f
ale#statusline#Count	nvim/plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Count(buffer) abort$/;"	f
ale#statusline#FirstProblem	nvim/plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#FirstProblem(buffer, type) abort$/;"	f
ale#statusline#Update	nvim/plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Update(buffer, loclist) abort$/;"	f
ale#swift#FindProjectRoot	nvim/plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#FindProjectRoot(buffer) abort$/;"	f
ale#symbol#ClearLSPData	nvim/plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#ClearLSPData() abort$/;"	f
ale#symbol#GetMap	nvim/plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#GetMap() abort$/;"	f
ale#symbol#HandleLSPResponse	nvim/plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#symbol#Search	nvim/plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#Search(args) abort$/;"	f
ale#symbol#SetMap	nvim/plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#SetMap(map) abort$/;"	f
ale#test#FlushJobs	nvim/plugged/ale/autoload/ale/test.vim	/^function! ale#test#FlushJobs() abort$/;"	f
ale#test#GetLoclistWithoutModule	nvim/plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetLoclistWithoutModule() abort$/;"	f
ale#test#GetPreviewWindowText	nvim/plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetPreviewWindowText() abort$/;"	f
ale#test#GetQflistWithoutModule	nvim/plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetQflistWithoutModule() abort$/;"	f
ale#test#RestoreDirectory	nvim/plugged/ale/autoload/ale/test.vim	/^function! ale#test#RestoreDirectory() abort$/;"	f
ale#test#SetDirectory	nvim/plugged/ale/autoload/ale/test.vim	/^function! ale#test#SetDirectory(docker_path) abort$/;"	f
ale#test#SetFilename	nvim/plugged/ale/autoload/ale/test.vim	/^function! ale#test#SetFilename(path) abort$/;"	f
ale#test#WaitForJobs	nvim/plugged/ale/autoload/ale/test.vim	/^function! ale#test#WaitForJobs(deadline) abort$/;"	f
ale#toggle#Disable	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Disable() abort$/;"	f
ale#toggle#DisableBuffer	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#DisableBuffer(buffer) abort$/;"	f
ale#toggle#Enable	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Enable() abort$/;"	f
ale#toggle#EnableBuffer	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#EnableBuffer(buffer) abort$/;"	f
ale#toggle#Reset	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Reset() abort$/;"	f
ale#toggle#ResetBuffer	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#ResetBuffer(buffer) abort$/;"	f
ale#toggle#Toggle	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Toggle() abort$/;"	f
ale#toggle#ToggleBuffer	nvim/plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#ToggleBuffer(buffer) abort$/;"	f
ale#uri#Decode	nvim/plugged/ale/autoload/ale/uri.vim	/^function! ale#uri#Decode(value) abort$/;"	f
ale#uri#Encode	nvim/plugged/ale/autoload/ale/uri.vim	/^function! ale#uri#Encode(value) abort$/;"	f
ale#util#BinarySearch	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#BinarySearch(loclist, buffer, line, column) abort$/;"	f
ale#util#Col	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#Col(str, chr) abort$/;"	f
ale#util#EscapePCRE	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#EscapePCRE(unsafe_string) abort$/;"	f
ale#util#EscapeVim	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#EscapeVim(unsafe_string) abort$/;"	f
ale#util#Execute	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#Execute(expr) abort$/;"	f
ale#util#FeedKeys	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#FeedKeys(...) abort$/;"	f
ale#util#FindItemAtCursor	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#FindItemAtCursor(buffer) abort$/;"	f
ale#util#FunctionArgCount	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#FunctionArgCount(function) abort$/;"	f
ale#util#FuzzyJSONDecode	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#FuzzyJSONDecode(data, default) abort$/;"	f
ale#util#GetFunction	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetFunction(string_or_ref) abort$/;"	f
ale#util#GetItemPriority	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetItemPriority(item) abort$/;"	f
ale#util#GetLineCount	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetLineCount(buffer) abort$/;"	f
ale#util#GetMatches	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetMatches(lines, patterns) abort$/;"	f
ale#util#InSandbox	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#InSandbox() abort$/;"	f
ale#util#Input	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#Input(message, value) abort$/;"	f
ale#util#JoinNeovimOutput	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#JoinNeovimOutput(job, last_line, data, mode, callback) abort$/;"	f
ale#util#LocItemCompare	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompare(left, right) abort$/;"	f
ale#util#LocItemCompareWithText	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompareWithText(left, right) abort$/;"	f
ale#util#Mode	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#Mode(...) abort$/;"	f
ale#util#Open	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#Open(filename, line, column, options) abort$/;"	f
ale#util#ShowMessage	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#ShowMessage(string) abort$/;"	f
ale#util#StartPartialTimer	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#StartPartialTimer(delay, callback, args) abort$/;"	f
ale#util#StopPartialTimer	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#StopPartialTimer(timer_id) abort$/;"	f
ale#util#Tempname	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#Tempname() abort$/;"	f
ale#util#Writefile	nvim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#Writefile(buffer, lines, filename) abort$/;"	f
ale#virtualtext#Clear	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#Clear() abort$/;"	f
ale#virtualtext#ShowCursorWarning	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowCursorWarning(...) abort$/;"	f
ale#virtualtext#ShowCursorWarningWithDelay	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowCursorWarningWithDelay() abort$/;"	f
ale#virtualtext#ShowMessage	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowMessage(message, hl_group) abort$/;"	f
aleItems	nvim/plugged/coc.nvim/build/index.js	/^                let aleItems = diagnostics.map(o => {$/;"	F
ale_linters#ada#gcc#GetCommand	nvim/plugged/ale/ale_linters/ada/gcc.vim	/^function! ale_linters#ada#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#ada#gcc#Handle	nvim/plugged/ale/ale_linters/ada/gcc.vim	/^function! ale_linters#ada#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#ansible#ansible_lint#GetExecutable	nvim/plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#GetExecutable(buffer) abort$/;"	f
ale_linters#ansible#ansible_lint#Handle	nvim/plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#apiblueprint#drafter#HandleErrors	nvim/plugged/ale/ale_linters/apiblueprint/drafter.vim	/^function! ale_linters#apiblueprint#drafter#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#asm#gcc#GetCommand	nvim/plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#asm#gcc#Handle	nvim/plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#awk#gawk#GetCommand	nvim/plugged/ale/ale_linters/awk/gawk.vim	/^function! ale_linters#awk#gawk#GetCommand(buffer) abort$/;"	f
ale_linters#bib#bibclean#GetCommand	nvim/plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#GetCommand(buffer) abort$/;"	f
ale_linters#bib#bibclean#Handle	nvim/plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#Handle(buffer, lines) abort$/;"	f
ale_linters#bib#bibclean#get_type	nvim/plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#get_type(str) abort$/;"	f
ale_linters#bib#bibclean#match_entry	nvim/plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_entry(line) abort$/;"	f
ale_linters#bib#bibclean#match_msg	nvim/plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_msg(line) abort$/;"	f
ale_linters#bib#bibclean#match_value	nvim/plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_value(line) abort$/;"	f
ale_linters#c#clang#GetCommand	nvim/plugged/ale/ale_linters/c/clang.vim	/^function! ale_linters#c#clang#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#clangd#GetCommand	nvim/plugged/ale/ale_linters/c/clangd.vim	/^function! ale_linters#c#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#c#clangtidy#GetCommand	nvim/plugged/ale/ale_linters/c/clangtidy.vim	/^function! ale_linters#c#clangtidy#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#cppcheck#GetCommand	nvim/plugged/ale/ale_linters/c/cppcheck.vim	/^function! ale_linters#c#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#c#cquery#GetInitializationOptions	nvim/plugged/ale/ale_linters/c/cquery.vim	/^function! ale_linters#c#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#c#cquery#GetProjectRoot	nvim/plugged/ale/ale_linters/c/cquery.vim	/^function! ale_linters#c#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#c#flawfinder#GetCommand	nvim/plugged/ale/ale_linters/c/flawfinder.vim	/^function! ale_linters#c#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#c#gcc#GetCommand	nvim/plugged/ale/ale_linters/c/gcc.vim	/^function! ale_linters#c#gcc#GetCommand(buffer, output) abort$/;"	f
ale_linters#chef#cookstyle#GetCommand	nvim/plugged/ale/ale_linters/chef/cookstyle.vim	/^function! ale_linters#chef#cookstyle#GetCommand(buffer) abort$/;"	f
ale_linters#chef#cookstyle#Handle	nvim/plugged/ale/ale_linters/chef/cookstyle.vim	/^function! ale_linters#chef#cookstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#chef#foodcritic#GetCommand	nvim/plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#GetCommand(buffer) abort$/;"	f
ale_linters#chef#foodcritic#Handle	nvim/plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#clojure#clj_kondo#HandleCljKondoFormat	nvim/plugged/ale/ale_linters/clojure/clj_kondo.vim	/^function! ale_linters#clojure#clj_kondo#HandleCljKondoFormat(buffer, lines) abort$/;"	f
ale_linters#clojure#joker#HandleJokerFormat	nvim/plugged/ale/ale_linters/clojure/joker.vim	/^function! ale_linters#clojure#joker#HandleJokerFormat(buffer, lines) abort$/;"	f
ale_linters#cloudformation#cfn_python_lint#Handle	nvim/plugged/ale/ale_linters/cloudformation/cfn_python_lint.vim	/^function! ale_linters#cloudformation#cfn_python_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#cmake#cmakelint#Command	nvim/plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Command(buffer) abort$/;"	f
ale_linters#cmake#cmakelint#Executable	nvim/plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Executable(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetCommand	nvim/plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetExecutable	nvim/plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetCommand	nvim/plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetExecutable	nvim/plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#Handle	nvim/plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#Handle(buffer, lines) abort$/;"	f
ale_linters#cpp#clang#GetCommand	nvim/plugged/ale/ale_linters/cpp/clang.vim	/^function! ale_linters#cpp#clang#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#clangcheck#GetCommand	nvim/plugged/ale/ale_linters/cpp/clangcheck.vim	/^function! ale_linters#cpp#clangcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangd#GetCommand	nvim/plugged/ale/ale_linters/cpp/clangd.vim	/^function! ale_linters#cpp#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangtidy#GetCommand	nvim/plugged/ale/ale_linters/cpp/clangtidy.vim	/^function! ale_linters#cpp#clangtidy#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#clazy#GetCommand	nvim/plugged/ale/ale_linters/cpp/clazy.vim	/^function! ale_linters#cpp#clazy#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cppcheck#GetCommand	nvim/plugged/ale/ale_linters/cpp/cppcheck.vim	/^function! ale_linters#cpp#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cpplint#GetCommand	nvim/plugged/ale/ale_linters/cpp/cpplint.vim	/^function! ale_linters#cpp#cpplint#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetInitializationOptions	nvim/plugged/ale/ale_linters/cpp/cquery.vim	/^function! ale_linters#cpp#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetProjectRoot	nvim/plugged/ale/ale_linters/cpp/cquery.vim	/^function! ale_linters#cpp#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#cpp#flawfinder#GetCommand	nvim/plugged/ale/ale_linters/cpp/flawfinder.vim	/^function! ale_linters#cpp#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#gcc#GetCommand	nvim/plugged/ale/ale_linters/cpp/gcc.vim	/^function! ale_linters#cpp#gcc#GetCommand(buffer, output) abort$/;"	f
ale_linters#crystal#ameba#GetCommand	nvim/plugged/ale/ale_linters/crystal/ameba.vim	/^function! ale_linters#crystal#ameba#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#ameba#HandleAmebaOutput	nvim/plugged/ale/ale_linters/crystal/ameba.vim	/^function! ale_linters#crystal#ameba#HandleAmebaOutput(buffer, lines) abort$/;"	f
ale_linters#crystal#crystal#GetCommand	nvim/plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#crystal#Handle	nvim/plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#csc#GetCommand	nvim/plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#csc#Handle	nvim/plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcs#GetCommand	nvim/plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcs#Handle	nvim/plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcsc#GetCommand	nvim/plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcsc#Handle	nvim/plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#Handle(buffer, lines) abort$/;"	f
ale_linters#css#csslint#GetCommand	nvim/plugged/ale/ale_linters/css/csslint.vim	/^function! ale_linters#css#csslint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetCommand	nvim/plugged/ale/ale_linters/css/stylelint.vim	/^function! ale_linters#css#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#GetCommand	nvim/plugged/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#Handle	nvim/plugged/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#Handle(buffer, lines) abort$/;"	f
ale_linters#cuda#nvcc#GetCommand	nvim/plugged/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#HandleNVCCFormat	nvim/plugged/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#HandleNVCCFormat(buffer, lines) abort$/;"	f
ale_linters#cypher#cypher_lint#Handle	nvim/plugged/ale/ale_linters/cypher/cypher_lint.vim	/^function! ale_linters#cypher#cypher_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#d#dls#FindProjectRoot	nvim/plugged/ale/ale_linters/d/dls.vim	/^function! ale_linters#d#dls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#d#dls#GetExecutable	nvim/plugged/ale/ale_linters/d/dls.vim	/^function! ale_linters#d#dls#GetExecutable(buffer) abort$/;"	f
ale_linters#d#dmd#DMDCommand	nvim/plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#DMDCommand(buffer, dub_output, meta) abort$/;"	f
ale_linters#d#dmd#GetDUBCommand	nvim/plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#GetDUBCommand(buffer) abort$/;"	f
ale_linters#d#dmd#Handle	nvim/plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#Handle(buffer, lines) abort$/;"	f
ale_linters#d#dmd#RunDUBCommand	nvim/plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#RunDUBCommand(buffer) abort$/;"	f
ale_linters#dafny#dafny#Handle	nvim/plugged/ale/ale_linters/dafny/dafny.vim	/^function! ale_linters#dafny#dafny#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#dartanalyzer#GetCommand	nvim/plugged/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#dart#dartanalyzer#Handle	nvim/plugged/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#language_server#GetProjectRoot	nvim/plugged/ale/ale_linters/dart/language_server.vim	/^function! ale_linters#dart#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#GetCommand	nvim/plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#GetType	nvim/plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#GetType(type) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#Handle	nvim/plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#hadolint#GetCommand	nvim/plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#GetExecutable	nvim/plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetExecutable(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#Handle	nvim/plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#credo#GetCommand	nvim/plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#credo#GetMode	nvim/plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetMode() abort$/;"	f
ale_linters#elixir#credo#Handle	nvim/plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dialyxir#GetCommand	nvim/plugged/ale/ale_linters/elixir/dialyxir.vim	/^function! ale_linters#elixir#dialyxir#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#dialyxir#Handle	nvim/plugged/ale/ale_linters/elixir/dialyxir.vim	/^function! ale_linters#elixir#dialyxir#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dogma#GetCommand	nvim/plugged/ale/ale_linters/elixir/dogma.vim	/^function! ale_linters#elixir#dogma#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#dogma#Handle	nvim/plugged/ale/ale_linters/elixir/dogma.vim	/^function! ale_linters#elixir#dogma#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#elixir_ls#GetExecutable	nvim/plugged/ale/ale_linters/elixir/elixir_ls.vim	/^function! ale_linters#elixir#elixir_ls#GetExecutable(buffer) abort$/;"	f
ale_linters#elixir#mix#GetCommand	nvim/plugged/ale/ale_linters/elixir/mix.vim	/^function! ale_linters#elixir#mix#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#mix#Handle	nvim/plugged/ale/ale_linters/elixir/mix.vim	/^function! ale_linters#elixir#mix#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#FileIsBuffer	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#FileIsBuffer(path) abort$/;"	f
ale_linters#elm#make#GetCommand	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCommand(buffer) abort$/;"	f
ale_linters#elm#make#GetExecutable	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetExecutable(buffer) abort$/;"	f
ale_linters#elm#make#GetPackageFile	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetPackageFile(buffer) abort$/;"	f
ale_linters#elm#make#GetRootDir	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetRootDir(buffer) abort$/;"	f
ale_linters#elm#make#Handle	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#HandleElm018Line	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#HandleElm018Line(line, output) abort$/;"	f
ale_linters#elm#make#HandleElm019Line	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#HandleElm019Line(line, output) abort$/;"	f
ale_linters#elm#make#IsTest	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#IsTest(buffer) abort$/;"	f
ale_linters#elm#make#IsVersionGte19	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#IsVersionGte19(buffer) abort$/;"	f
ale_linters#elm#make#ParseMessage	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#ParseMessage(message) abort$/;"	f
ale_linters#elm#make#ParseMessageItem	nvim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#ParseMessageItem(item) abort$/;"	f
ale_linters#erlang#dialyzer#FindPlt	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#FindPlt(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetCommand	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetExecutable	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetPlt	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetPlt(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetRebar3Profile	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetRebar3Profile(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#Handle	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#erlc#GetCommand	nvim/plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#erlc#Handle	nvim/plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#syntaxerl#GetCommand	nvim/plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#GetCommand(buffer, output, meta) abort$/;"	f
ale_linters#erlang#syntaxerl#Handle	nvim/plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#syntaxerl#RunHelpCommand	nvim/plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#RunHelpCommand(buffer) abort$/;"	f
ale_linters#eruby#erb#GetCommand	nvim/plugged/ale/ale_linters/eruby/erb.vim	/^function! ale_linters#eruby#erb#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#erubi#GetCommand	nvim/plugged/ale/ale_linters/eruby/erubi.vim	/^function! ale_linters#eruby#erubi#GetCommand(buffer, output, meta) abort$/;"	f
ale_linters#eruby#erubis#GetCommand	nvim/plugged/ale/ale_linters/eruby/erubis.vim	/^function! ale_linters#eruby#erubis#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#ruumba#GetCommand	nvim/plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#ruumba#GetType	nvim/plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#GetType(severity) abort$/;"	f
ale_linters#eruby#ruumba#Handle	nvim/plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#Handle(buffer, lines) abort$/;"	f
ale_linters#fish#fish#Handle	nvim/plugged/ale/ale_linters/fish/fish.vim	/^function! ale_linters#fish#fish#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#gcc#GetCommand	nvim/plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#fortran#gcc#Handle	nvim/plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#language_server#GetProjectRoot	nvim/plugged/ale/ale_linters/fortran/language_server.vim	/^function! ale_linters#fortran#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#GetCommand	nvim/plugged/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#GetCommand(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#Handle	nvim/plugged/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#Handle(buffer, lines) abort$/;"	f
ale_linters#gitcommit#gitlint#GetCommand	nvim/plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetCommand(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#GetExecutable	nvim/plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetExecutable(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#Handle	nvim/plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslang#GetCommand	nvim/plugged/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslang#Handle	nvim/plugged/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslls#GetCommand	nvim/plugged/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslls#GetProjectRoot	nvim/plugged/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#go#bingo#FindProjectRoot	nvim/plugged/ale/ale_linters/go/bingo.vim	/^function! ale_linters#go#bingo#FindProjectRoot(buffer) abort$/;"	f
ale_linters#go#bingo#GetCommand	nvim/plugged/ale/ale_linters/go/bingo.vim	/^function! ale_linters#go#bingo#GetCommand(buffer) abort$/;"	f
ale_linters#go#gobuild#GetCommand	nvim/plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetCommand(buffer) abort$/;"	f
ale_linters#go#gobuild#GetMatches	nvim/plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetMatches(lines) abort$/;"	f
ale_linters#go#gobuild#Handler	nvim/plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gofmt#GetCommand	nvim/plugged/ale/ale_linters/go/gofmt.vim	/^function! ale_linters#go#gofmt#GetCommand(buffer) abort$/;"	f
ale_linters#go#golangci_lint#GetCommand	nvim/plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#GetCommand(buffer) abort$/;"	f
ale_linters#go#golangci_lint#GetMatches	nvim/plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#GetMatches(lines) abort$/;"	f
ale_linters#go#golangci_lint#Handler	nvim/plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#Handler(buffer, lines) abort$/;"	f
ale_linters#go#golint#GetCommand	nvim/plugged/ale/ale_linters/go/golint.vim	/^function! ale_linters#go#golint#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetCommand	nvim/plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetMatches	nvim/plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetMatches(lines) abort$/;"	f
ale_linters#go#gometalinter#Handler	nvim/plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gopls#FindProjectRoot	nvim/plugged/ale/ale_linters/go/gopls.vim	/^function! ale_linters#go#gopls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#go#gopls#GetCommand	nvim/plugged/ale/ale_linters/go/gopls.vim	/^function! ale_linters#go#gopls#GetCommand(buffer) abort$/;"	f
ale_linters#go#gosimple#GetCommand	nvim/plugged/ale/ale_linters/go/gosimple.vim	/^function! ale_linters#go#gosimple#GetCommand(buffer) abort$/;"	f
ale_linters#go#gotype#GetCommand	nvim/plugged/ale/ale_linters/go/gotype.vim	/^function! ale_linters#go#gotype#GetCommand(buffer) abort$/;"	f
ale_linters#go#govet#GetCommand	nvim/plugged/ale/ale_linters/go/govet.vim	/^function! ale_linters#go#govet#GetCommand(buffer) abort$/;"	f
ale_linters#go#langserver#GetCommand	nvim/plugged/ale/ale_linters/go/langserver.vim	/^function! ale_linters#go#langserver#GetCommand(buffer) abort$/;"	f
ale_linters#go#staticcheck#GetCommand	nvim/plugged/ale/ale_linters/go/staticcheck.vim	/^function! ale_linters#go#staticcheck#GetCommand(buffer) abort$/;"	f
ale_linters#graphql#gqlint#GetCommand	nvim/plugged/ale/ale_linters/graphql/gqlint.vim	/^function! ale_linters#graphql#gqlint#GetCommand(buffer) abort$/;"	f
ale_linters#hack#hack#GetExecutable	nvim/plugged/ale/ale_linters/hack/hack.vim	/^function! ale_linters#hack#hack#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hack#GetProjectRoot	nvim/plugged/ale/ale_linters/hack/hack.vim	/^function! ale_linters#hack#hack#GetProjectRoot(buffer) abort$/;"	f
ale_linters#hack#hhast#GetExecutable	nvim/plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hhast#GetInitializationOptions	nvim/plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#hack#hhast#GetProjectRoot	nvim/plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetCommand	nvim/plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetCommand(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetExecutable	nvim/plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetExecutable(buffer) abort$/;"	f
ale_linters#haml#hamllint#Handle	nvim/plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#handlebars#embertemplatelint#Handle	nvim/plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#cabal_ghc#GetCommand	nvim/plugged/ale/ale_linters/haskell/cabal_ghc.vim	/^function! ale_linters#haskell#cabal_ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc#GetCommand	nvim/plugged/ale/ale_linters/haskell/ghc.vim	/^function! ale_linters#haskell#ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc_mod#GetCommand	nvim/plugged/ale/ale_linters/haskell/ghc_mod.vim	/^function! ale_linters#haskell#ghc_mod#GetCommand (buffer) abort$/;"	f
ale_linters#haskell#hdevtools#GetCommand	nvim/plugged/ale/ale_linters/haskell/hdevtools.vim	/^function! ale_linters#haskell#hdevtools#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hie#GetCommand	nvim/plugged/ale/ale_linters/haskell/hie.vim	/^function! ale_linters#haskell#hie#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hie#GetProjectRoot	nvim/plugged/ale/ale_linters/haskell/hie.vim	/^function! ale_linters#haskell#hie#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haskell#hlint#GetCommand	nvim/plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hlint#Handle	nvim/plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#stack_build#GetCommand	nvim/plugged/ale/ale_linters/haskell/stack_build.vim	/^function! ale_linters#haskell#stack_build#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#stack_ghc#GetCommand	nvim/plugged/ale/ale_linters/haskell/stack_ghc.vim	/^function! ale_linters#haskell#stack_ghc#GetCommand(buffer) abort$/;"	f
ale_linters#html#htmlhint#GetCommand	nvim/plugged/ale/ale_linters/html/htmlhint.vim	/^function! ale_linters#html#htmlhint#GetCommand(buffer) abort$/;"	f
ale_linters#html#stylelint#GetCommand	nvim/plugged/ale/ale_linters/html/stylelint.vim	/^function! ale_linters#html#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#html#stylelint#GetExecutable	nvim/plugged/ale/ale_linters/html/stylelint.vim	/^function! ale_linters#html#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#html#tidy#GetCommand	nvim/plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#GetCommand(buffer) abort$/;"	f
ale_linters#html#tidy#Handle	nvim/plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#Handle(buffer, lines) abort$/;"	f
ale_linters#idris#idris#GetCommand	nvim/plugged/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#GetCommand(buffer) abort$/;"	f
ale_linters#idris#idris#Handle	nvim/plugged/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#Handle(buffer, lines) abort$/;"	f
ale_linters#ink#ls#FindProjectRoot	nvim/plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#ink#ls#GetCommand	nvim/plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#GetCommand(buffer) abort$/;"	f
ale_linters#ink#ls#GetExecutable	nvim/plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#ispc#ispc#GetCommand	nvim/plugged/ale/ale_linters/ispc/ispc.vim	/^function! ale_linters#ispc#ispc#GetCommand(buffer) abort$/;"	f
ale_linters#ispc#ispc#Handle	nvim/plugged/ale/ale_linters/ispc/ispc.vim	/^function! ale_linters#ispc#ispc#Handle(buffer, lines) abort$/;"	f
ale_linters#java#checkstyle#GetCommand	nvim/plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#GetCommand(buffer) abort$/;"	f
ale_linters#java#checkstyle#Handle	nvim/plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#java#eclipselsp#Command	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Command(buffer, version) abort$/;"	f
ale_linters#java#eclipselsp#CommandWithVersion	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#CommandWithVersion(buffer, version_lines, meta) abort$/;"	f
ale_linters#java#eclipselsp#ConfigurationPath	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#ConfigurationPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#Executable	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Executable(buffer) abort$/;"	f
ale_linters#java#eclipselsp#JarPath	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#JarPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#RunWithVersionCheck	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#java#eclipselsp#TargetPath	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#TargetPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#VersionCheck	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#VersionCheck(version_lines) abort$/;"	f
ale_linters#java#eclipselsp#WorkspacePath	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#WorkspacePath(buffer) abort$/;"	f
ale_linters#java#javac#GetCommand	nvim/plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetCommand(buffer, import_paths, meta) abort$/;"	f
ale_linters#java#javac#Handle	nvim/plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#Handle(buffer, lines) abort$/;"	f
ale_linters#java#javac#RunWithImportPaths	nvim/plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#RunWithImportPaths(buffer) abort$/;"	f
ale_linters#java#javalsp#Command	nvim/plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Command(buffer) abort$/;"	f
ale_linters#java#javalsp#Config	nvim/plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Config(buffer) abort$/;"	f
ale_linters#java#javalsp#Executable	nvim/plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Executable(buffer) abort$/;"	f
ale_linters#java#pmd#GetCommand	nvim/plugged/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#GetCommand(buffer) abort$/;"	f
ale_linters#java#pmd#Handle	nvim/plugged/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#GetCommand	nvim/plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetCommand(buffer, version) abort$/;"	f
ale_linters#javascript#flow#GetExecutable	nvim/plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#flow#Handle	nvim/plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow_ls#FindProjectRoot	nvim/plugged/ale/ale_linters/javascript/flow_ls.vim	/^function! ale_linters#javascript#flow_ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#javascript#jscs#GetCommand	nvim/plugged/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#jscs#Handle	nvim/plugged/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#jshint#GetCommand	nvim/plugged/ale/ale_linters/javascript/jshint.vim	/^function! ale_linters#javascript#jshint#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetCommand	nvim/plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetExecutable	nvim/plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#xo#GetCommand	nvim/plugged/ale/ale_linters/javascript/xo.vim	/^function! ale_linters#javascript#xo#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#xo#GetExecutable	nvim/plugged/ale/ale_linters/javascript/xo.vim	/^function! ale_linters#javascript#xo#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jsonlint#GetCommand	nvim/plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#GetCommand(buffer) abort$/;"	f
ale_linters#json#jsonlint#GetExecutable	nvim/plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jsonlint#Handle	nvim/plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#Handle(buffer, lines) abort$/;"	f
ale_linters#julia#languageserver#GetCommand	nvim/plugged/ale/ale_linters/julia/languageserver.vim	/^function! ale_linters#julia#languageserver#GetCommand(buffer) abort$/;"	f
ale_linters#kotlin#kotlinc#GetCommand	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetCommand(buffer, import_paths, meta) abort$/;"	f
ale_linters#kotlin#kotlinc#Handle	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#kotlinc#RunWithImportPaths	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#RunWithImportPaths(buffer) abort$/;"	f
ale_linters#kotlin#languageserver#GetProjectRoot	nvim/plugged/ale/ale_linters/kotlin/languageserver.vim	/^function! ale_linters#kotlin#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#less#lessc#GetCommand	nvim/plugged/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#GetCommand(buffer) abort$/;"	f
ale_linters#less#lessc#Handle	nvim/plugged/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#Handle(buffer, lines) abort$/;"	f
ale_linters#less#stylelint#GetCommand	nvim/plugged/ale/ale_linters/less/stylelint.vim	/^function! ale_linters#less#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#llvm#llc#HandleErrors	nvim/plugged/ale/ale_linters/llvm/llc.vim	/^function! ale_linters#llvm#llc#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#lua#luac#Handle	nvim/plugged/ale/ale_linters/lua/luac.vim	/^function! ale_linters#lua#luac#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#luacheck#GetCommand	nvim/plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#GetCommand(buffer) abort$/;"	f
ale_linters#lua#luacheck#Handle	nvim/plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#make#checkmake#Handle	nvim/plugged/ale/ale_linters/make/checkmake.vim	/^function! ale_linters#make#checkmake#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#mdl#GetCommand	nvim/plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#mdl#GetExecutable	nvim/plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetExecutable(buffer) abort$/;"	f
ale_linters#markdown#mdl#Handle	nvim/plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#remark_lint#GetCommand	nvim/plugged/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#remark_lint#Handle	nvim/plugged/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#matlab#mlint#Handle	nvim/plugged/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#Handle(buffer, lines) abort$/;"	f
ale_linters#mercury#mmc#GetCommand	nvim/plugged/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#GetCommand(buffer) abort$/;"	f
ale_linters#mercury#mmc#Handle	nvim/plugged/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#Handle(buffer, lines) abort$/;"	f
ale_linters#nasm#nasm#GetCommand	nvim/plugged/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#GetCommand(buffer) abort$/;"	f
ale_linters#nasm#nasm#Handle	nvim/plugged/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimcheck#GetCommand	nvim/plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimcheck#Handle	nvim/plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimlsp#GetCommand	nvim/plugged/ale/ale_linters/nim/nimlsp.vim	/^function! ale_linters#nim#nimlsp#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimlsp#GetProjectRoot	nvim/plugged/ale/ale_linters/nim/nimlsp.vim	/^function! ale_linters#nim#nimlsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#nix#nix#Handle	nvim/plugged/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Handle(buffer, lines) abort$/;"	f
ale_linters#objc#clang#GetCommand	nvim/plugged/ale/ale_linters/objc/clang.vim	/^function! ale_linters#objc#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objc#clangd#GetCommand	nvim/plugged/ale/ale_linters/objc/clangd.vim	/^function! ale_linters#objc#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clang#GetCommand	nvim/plugged/ale/ale_linters/objcpp/clang.vim	/^function! ale_linters#objcpp#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clangd#GetCommand	nvim/plugged/ale/ale_linters/objcpp/clangd.vim	/^function! ale_linters#objcpp#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#ocaml#merlin#Handle	nvim/plugged/ale/ale_linters/ocaml/merlin.vim	/^function! ale_linters#ocaml#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perl#GetCommand	nvim/plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perl#Handle	nvim/plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perlcritic#GetCommand	nvim/plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perlcritic#GetProfile	nvim/plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetProfile(buffer) abort$/;"	f
ale_linters#perl#perlcritic#Handle	nvim/plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#perl6#perl6#ExtractError	nvim/plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#ExtractError(dict, item, type, buffer) abort$/;"	f
ale_linters#perl6#perl6#GetCommand	nvim/plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#GetCommand(buffer) abort$/;"	f
ale_linters#perl6#perl6#GetExecutable	nvim/plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#GetExecutable(buffer) abort$/;"	f
ale_linters#perl6#perl6#Handle	nvim/plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#Handle(buffer, lines) abort$/;"	f
ale_linters#php#langserver#GetProjectRoot	nvim/plugged/ale/ale_linters/php/langserver.vim	/^function! ale_linters#php#langserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#phan#GetCommand	nvim/plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetCommand(buffer) abort$/;"	f
ale_linters#php#phan#GetExecutable	nvim/plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetExecutable(buffer) abort$/;"	f
ale_linters#php#phan#Handle	nvim/plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#php#Handle	nvim/plugged/ale/ale_linters/php/php.vim	/^function! ale_linters#php#php#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpcs#GetCommand	nvim/plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpcs#Handle	nvim/plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpmd#GetCommand	nvim/plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpmd#Handle	nvim/plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpstan#GetCommand	nvim/plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#GetCommand(buffer, version) abort$/;"	f
ale_linters#php#phpstan#Handle	nvim/plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#psalm#GetCommand	nvim/plugged/ale/ale_linters/php/psalm.vim	/^function! ale_linters#php#psalm#GetCommand(buffer) abort$/;"	f
ale_linters#php#psalm#GetProjectRoot	nvim/plugged/ale/ale_linters/php/psalm.vim	/^function! ale_linters#php#psalm#GetProjectRoot(buffer) abort$/;"	f
ale_linters#po#msgfmt#Handle	nvim/plugged/ale/ale_linters/po/msgfmt.vim	/^function! ale_linters#po#msgfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#pony#ponyc#GetCommand	nvim/plugged/ale/ale_linters/pony/ponyc.vim	/^function! ale_linters#pony#ponyc#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#powershell#GetCommand	nvim/plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#powershell#GetExecutable	nvim/plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#GetExecutable(buffer) abort$/;"	f
ale_linters#powershell#powershell#Handle	nvim/plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#Handle(buffer, lines) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#GetCommand	nvim/plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#GetExecutable	nvim/plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#Handle	nvim/plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#prolog#swipl#GetCommand	nvim/plugged/ale/ale_linters/prolog/swipl.vim	/^function! ale_linters#prolog#swipl#GetCommand(buffer) abort$/;"	f
ale_linters#prolog#swipl#Handle	nvim/plugged/ale/ale_linters/prolog/swipl.vim	/^function! ale_linters#prolog#swipl#Handle(buffer, lines) abort$/;"	f
ale_linters#proto#protoc_gen_lint#GetCommand	nvim/plugged/ale/ale_linters/proto/protoc_gen_lint.vim	/^function! ale_linters#proto#protoc_gen_lint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#GetCommand	nvim/plugged/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#Handle	nvim/plugged/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#languageserver#GetProjectRoot	nvim/plugged/ale/ale_linters/puppet/languageserver.vim	/^function! ale_linters#puppet#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#puppet#puppet#GetCommand	nvim/plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#puppet#Handle	nvim/plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#puppetlint#GetCommand	nvim/plugged/ale/ale_linters/puppet/puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetCommand(buffer) abort$/;"	f
ale_linters#purescript#ls#FindProjectRoot	nvim/plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#purescript#ls#GetCommand	nvim/plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#GetCommand(buffer) abort$/;"	f
ale_linters#purescript#ls#GetExecutable	nvim/plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#pyrex#cython#GetCommand	nvim/plugged/ale/ale_linters/pyrex/cython.vim	/^function! ale_linters#pyrex#cython#GetCommand(buffer) abort$/;"	f
ale_linters#pyrex#cython#Handle	nvim/plugged/ale/ale_linters/pyrex/cython.vim	/^function! ale_linters#pyrex#cython#Handle(buffer, lines) abort$/;"	f
ale_linters#python#bandit#GetCommand	nvim/plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#GetCommand(buffer) abort$/;"	f
ale_linters#python#bandit#GetExecutable	nvim/plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#GetExecutable(buffer) abort$/;"	f
ale_linters#python#bandit#Handle	nvim/plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#GetCommand	nvim/plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#flake8#GetExecutable	nvim/plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#Handle	nvim/plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#RunWithVersionCheck	nvim/plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#python#mypy#GetCommand	nvim/plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCommand(buffer) abort$/;"	f
ale_linters#python#mypy#GetExecutable	nvim/plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#Handle	nvim/plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#Handle(buffer, lines) abort$/;"	f
ale_linters#python#prospector#GetCommand	nvim/plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetCommand(buffer) abort$/;"	f
ale_linters#python#prospector#GetExecutable	nvim/plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetExecutable(buffer) abort$/;"	f
ale_linters#python#prospector#Handle	nvim/plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pycodestyle#GetCommand	nvim/plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pycodestyle#GetExecutable	nvim/plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pycodestyle#Handle	nvim/plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pydocstyle#GetCommand	nvim/plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pydocstyle#GetExecutable	nvim/plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pydocstyle#Handle	nvim/plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyflakes#GetCommand	nvim/plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyflakes#GetExecutable	nvim/plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyflakes#Handle	nvim/plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylama#GetCommand	nvim/plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetCommand(buffer) abort$/;"	f
ale_linters#python#pylama#GetExecutable	nvim/plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylama#Handle	nvim/plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylint#GetCommand	nvim/plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCommand(buffer) abort$/;"	f
ale_linters#python#pylint#GetExecutable	nvim/plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylint#Handle	nvim/plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyls#GetCommand	nvim/plugged/ale/ale_linters/python/pyls.vim	/^function! ale_linters#python#pyls#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyls#GetExecutable	nvim/plugged/ale/ale_linters/python/pyls.vim	/^function! ale_linters#python#pyls#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyre#GetCommand	nvim/plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyre#GetExecutable	nvim/plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetExecutable(buffer) abort$/;"	f
ale_linters#python#vulture#GetCommand	nvim/plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetCommand(buffer) abort$/;"	f
ale_linters#python#vulture#GetExecutable	nvim/plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetExecutable(buffer) abort$/;"	f
ale_linters#python#vulture#Handle	nvim/plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmlfmt#Handle	nvim/plugged/ale/ale_linters/qml/qmlfmt.vim	/^function! ale_linters#qml#qmlfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmllint#Handle	nvim/plugged/ale/ale_linters/qml/qmllint.vim	/^function! ale_linters#qml#qmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#r#lintr#GetCommand	nvim/plugged/ale/ale_linters/r/lintr.vim	/^function! ale_linters#r#lintr#GetCommand(buffer) abort$/;"	f
ale_linters#racket#raco#Handle	nvim/plugged/ale/ale_linters/racket/raco.vim	/^function! ale_linters#racket#raco#Handle(buffer, lines) abort$/;"	f
ale_linters#reason#ls#FindProjectRoot	nvim/plugged/ale/ale_linters/reason/ls.vim	/^function! ale_linters#reason#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#reason#merlin#Handle	nvim/plugged/ale/ale_linters/reason/merlin.vim	/^function! ale_linters#reason#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#rst#rstcheck#GetCommand	nvim/plugged/ale/ale_linters/rst/rstcheck.vim	/^function! ale_linters#rst#rstcheck#GetCommand(buffer) abort$/;"	f
ale_linters#rst#rstcheck#Handle	nvim/plugged/ale/ale_linters/rst/rstcheck.vim	/^function! ale_linters#rst#rstcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#brakeman#GetCommand	nvim/plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#brakeman#Handle	nvim/plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#debride#GetCommand	nvim/plugged/ale/ale_linters/ruby/debride.vim	/^function! ale_linters#ruby#debride#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#debride#HandleOutput	nvim/plugged/ale/ale_linters/ruby/debride.vim	/^function! ale_linters#ruby#debride#HandleOutput(buffer, lines) abort$/;"	f
ale_linters#ruby#rails_best_practices#GetCommand	nvim/plugged/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rails_best_practices#Handle	nvim/plugged/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#reek#GetCommand	nvim/plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#GetCommand(buffer, version) abort$/;"	f
ale_linters#ruby#reek#Handle	nvim/plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rubocop#GetCommand	nvim/plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetType	nvim/plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetType(severity) abort$/;"	f
ale_linters#ruby#solargraph#GetCommand	nvim/plugged/ale/ale_linters/ruby/solargraph.vim	/^function! ale_linters#ruby#solargraph#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#sorbet#GetCommand	nvim/plugged/ale/ale_linters/ruby/sorbet.vim	/^function! ale_linters#ruby#sorbet#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#standardrb#GetCommand	nvim/plugged/ale/ale_linters/ruby/standardrb.vim	/^function! ale_linters#ruby#standardrb#GetCommand(buffer) abort$/;"	f
ale_linters#rust#cargo#GetCargoExecutable	nvim/plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCargoExecutable(bufnr) abort$/;"	f
ale_linters#rust#cargo#GetCommand	nvim/plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCommand(buffer, version) abort$/;"	f
ale_linters#rust#rls#GetCommand	nvim/plugged/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetCommand(buffer) abort$/;"	f
ale_linters#rust#rls#GetProjectRoot	nvim/plugged/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#rustc#RustcCommand	nvim/plugged/ale/ale_linters/rust/rustc.vim	/^function! ale_linters#rust#rustc#RustcCommand(buffer) abort$/;"	f
ale_linters#sass#sasslint#GetCommand	nvim/plugged/ale/ale_linters/sass/sasslint.vim	/^function! ale_linters#sass#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#sass#sasslint#GetExecutable	nvim/plugged/ale/ale_linters/sass/sasslint.vim	/^function! ale_linters#sass#sasslint#GetExecutable(buffer) abort$/;"	f
ale_linters#scala#metals#GetCommand	nvim/plugged/ale/ale_linters/scala/metals.vim	/^function! ale_linters#scala#metals#GetCommand(buffer) abort$/;"	f
ale_linters#scala#metals#GetProjectRoot	nvim/plugged/ale/ale_linters/scala/metals.vim	/^function! ale_linters#scala#metals#GetProjectRoot(buffer) abort$/;"	f
ale_linters#scala#sbtserver#GetAddress	nvim/plugged/ale/ale_linters/scala/sbtserver.vim	/^function! ale_linters#scala#sbtserver#GetAddress(buffer) abort$/;"	f
ale_linters#scala#sbtserver#GetProjectRoot	nvim/plugged/ale/ale_linters/scala/sbtserver.vim	/^function! ale_linters#scala#sbtserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#scala#scalastyle#GetCommand	nvim/plugged/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#GetCommand(buffer) abort$/;"	f
ale_linters#scala#scalastyle#Handle	nvim/plugged/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#sasslint#GetCommand	nvim/plugged/ale/ale_linters/scss/sasslint.vim	/^function! ale_linters#scss#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#scss#sasslint#GetExecutable	nvim/plugged/ale/ale_linters/scss/sasslint.vim	/^function! ale_linters#scss#sasslint#GetExecutable(buffer) abort$/;"	f
ale_linters#scss#scsslint#Handle	nvim/plugged/ale/ale_linters/scss/scsslint.vim	/^function! ale_linters#scss#scsslint#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#stylelint#GetCommand	nvim/plugged/ale/ale_linters/scss/stylelint.vim	/^function! ale_linters#scss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#sh#language_server#GetCommand	nvim/plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetCommand(buffer) abort$/;"	f
ale_linters#sh#language_server#GetExecutable	nvim/plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#language_server#GetProjectRoot	nvim/plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#sh#shell#GetCommand	nvim/plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetCommand(buffer) abort$/;"	f
ale_linters#sh#shell#GetExecutable	nvim/plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#Handle	nvim/plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#shellcheck#GetCommand	nvim/plugged/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetCommand(buffer, version) abort$/;"	f
ale_linters#sh#shellcheck#GetDialectArgument	nvim/plugged/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetDialectArgument(buffer) abort$/;"	f
ale_linters#sh#shellcheck#Handle	nvim/plugged/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#slim#slimlint#GetCommand	nvim/plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#GetCommand(buffer) abort$/;"	f
ale_linters#slim#slimlint#Handle	nvim/plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sml#smlnj_cm#GetCommand	nvim/plugged/ale/ale_linters/sml/smlnj_cm.vim	/^function! ale_linters#sml#smlnj_cm#GetCommand(buffer) abort$/;"	f
ale_linters#solidity#solc#GetCommand	nvim/plugged/ale/ale_linters/solidity/solc.vim	/^function! ale_linters#solidity#solc#GetCommand(buffer) abort$/;"	f
ale_linters#solidity#solc#Handle	nvim/plugged/ale/ale_linters/solidity/solc.vim	/^function! ale_linters#solidity#solc#Handle(buffer, lines) abort$/;"	f
ale_linters#solidity#solhint#Handle	nvim/plugged/ale/ale_linters/solidity/solhint.vim	/^function! ale_linters#solidity#solhint#Handle(buffer, lines) abort$/;"	f
ale_linters#spec#rpmlint#GetCommand	nvim/plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetCommand(buffer) abort$/;"	f
ale_linters#spec#rpmlint#Handle	nvim/plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqlint#Handle	nvim/plugged/ale/ale_linters/sql/sqlint.vim	/^function! ale_linters#sql#sqlint#Handle(buffer, lines) abort$/;"	f
ale_linters#stylus#stylelint#GetCommand	nvim/plugged/ale/ale_linters/stylus/stylelint.vim	/^function! ale_linters#stylus#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#sugarss#stylelint#GetCommand	nvim/plugged/ale/ale_linters/sugarss/stylelint.vim	/^function! ale_linters#sugarss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#swift#swiftlint#GetCommand	nvim/plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#GetCommand(buffer) abort$/;"	f
ale_linters#swift#swiftlint#GetExecutable	nvim/plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#GetExecutable(buffer) abort$/;"	f
ale_linters#swift#swiftlint#Handle	nvim/plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#Handle(buffer, lines) abort$/;"	f
ale_linters#tcl#nagelfar#GetCommand	nvim/plugged/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#GetCommand(buffer) abort$/;"	f
ale_linters#tcl#nagelfar#Handle	nvim/plugged/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#terraform#GetCommand	nvim/plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform#GetExecutable	nvim/plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetExecutable(buffer) abort$/;"	f
ale_linters#terraform#terraform#Handle	nvim/plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#tflint#GetCommand	nvim/plugged/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#tflint#Handle	nvim/plugged/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#chktex#GetCommand	nvim/plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#GetCommand(buffer) abort$/;"	f
ale_linters#tex#chktex#Handle	nvim/plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#lacheck#Handle	nvim/plugged/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#texlab#GetCommand	nvim/plugged/ale/ale_linters/tex/texlab.vim	/^function! ale_linters#tex#texlab#GetCommand(buffer) abort$/;"	f
ale_linters#tex#texlab#GetProjectRoot	nvim/plugged/ale/ale_linters/tex/texlab.vim	/^function! ale_linters#tex#texlab#GetProjectRoot(buffer) abort$/;"	f
ale_linters#thrift#thrift#GetCommand	nvim/plugged/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thrift#Handle	nvim/plugged/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#standard#GetCommand	nvim/plugged/ale/ale_linters/typescript/standard.vim	/^function! ale_linters#typescript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#standard#GetExecutable	nvim/plugged/ale/ale_linters/typescript/standard.vim	/^function! ale_linters#typescript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#typescript#tslint#GetCommand	nvim/plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#tslint#Handle	nvim/plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#typecheck#Handle	nvim/plugged/ale/ale_linters/typescript/typecheck.vim	/^function! ale_linters#typescript#typecheck#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#xo#GetCommand	nvim/plugged/ale/ale_linters/typescript/xo.vim	/^function! ale_linters#typescript#xo#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#xo#GetExecutable	nvim/plugged/ale/ale_linters/typescript/xo.vim	/^function! ale_linters#typescript#xo#GetExecutable(buffer) abort$/;"	f
ale_linters#verilog#iverilog#GetCommand	nvim/plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#iverilog#Handle	nvim/plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#verilator#GetCommand	nvim/plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#verilator#Handle	nvim/plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#vlog#GetCommand	nvim/plugged/ale/ale_linters/verilog/vlog.vim	/^function! ale_linters#verilog#vlog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#vlog#Handle	nvim/plugged/ale/ale_linters/verilog/vlog.vim	/^function! ale_linters#verilog#vlog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#xvlog#GetCommand	nvim/plugged/ale/ale_linters/verilog/xvlog.vim	/^function! ale_linters#verilog#xvlog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#xvlog#Handle	nvim/plugged/ale/ale_linters/verilog/xvlog.vim	/^function! ale_linters#verilog#xvlog#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#ghdl#GetCommand	nvim/plugged/ale/ale_linters/vhdl/ghdl.vim	/^function! ale_linters#vhdl#ghdl#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#ghdl#Handle	nvim/plugged/ale/ale_linters/vhdl/ghdl.vim	/^function! ale_linters#vhdl#ghdl#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#vcom#GetCommand	nvim/plugged/ale/ale_linters/vhdl/vcom.vim	/^function! ale_linters#vhdl#vcom#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#vcom#Handle	nvim/plugged/ale/ale_linters/vhdl/vcom.vim	/^function! ale_linters#vhdl#vcom#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#xvhdl#GetCommand	nvim/plugged/ale/ale_linters/vhdl/xvhdl.vim	/^function! ale_linters#vhdl#xvhdl#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#xvhdl#Handle	nvim/plugged/ale/ale_linters/vhdl/xvhdl.vim	/^function! ale_linters#vhdl#xvhdl#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetCommand	nvim/plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetCommand(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetExecutable	nvim/plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetExecutable(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#Handle	nvim/plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#vint#GetCommand	nvim/plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#GetCommand(buffer, version) abort$/;"	f
ale_linters#vim#vint#Handle	nvim/plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#Handle(buffer, lines) abort$/;"	f
ale_linters#vue#vls#GetProjectRoot	nvim/plugged/ale/ale_linters/vue/vls.vim	/^function! ale_linters#vue#vls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#xml#xmllint#GetCommand	nvim/plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#GetCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#Handle	nvim/plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#swaglint#Handle	nvim/plugged/ale/ale_linters/yaml/swaglint.vim	/^function! ale_linters#yaml#swaglint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#yamllint#GetCommand	nvim/plugged/ale/ale_linters/yaml/yamllint.vim	/^function! ale_linters#yaml#yamllint#GetCommand(buffer) abort$/;"	f
ale_linters#yaml#yamllint#Handle	nvim/plugged/ale/ale_linters/yaml/yamllint.vim	/^function! ale_linters#yaml#yamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#yang#yang_lsp#GetProjectRoot	nvim/plugged/ale/ale_linters/yang/yang_lsp.vim	/^function! ale_linters#yang#yang_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_module	nvim/plugged/ale/test/python/test_deoplete_source.py	/^ale_module = imp.load_source($/;"	v
ale_refresh	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:ale_refresh()$/;"	f
aliasIsBoolean	nvim/plugged/coc.nvim/build/index.js	/^    function aliasIsBoolean(key) {$/;"	F
aliases	nvim/plugged/coc.nvim/build/index.js	/^    var aliases = {};$/;"	O
alignTop	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private alignTop = false$/;"	m
align_lists	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
align_pairs	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
all	nvim/plugged/coc.nvim/build/index.js	/^            let all = [];$/;"	A
all	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.all = function () {$/;"	M
all	nvim/plugged/coc.nvim/src/extensions.ts	/^  public get all(): Extension<API>[] {$/;"	m
all_files	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:all_files()$/;"	f
alloc	nvim/plugged/coc.nvim/build/index.js	/^SafeBuffer.alloc = function (size, fill, encoding) {$/;"	M
alloc	nvim/plugged/coc.nvim/build/index.js	/^function alloc(size) {$/;"	F
allocUnsafe	nvim/plugged/coc.nvim/build/index.js	/^SafeBuffer.allocUnsafe = function (size) {$/;"	M
allocUnsafeSlow	nvim/plugged/coc.nvim/build/index.js	/^SafeBuffer.allocUnsafeSlow = function (size) {$/;"	M
allowTrailingComma	nvim/plugged/coc.nvim/build/index.js	/^        allowTrailingComma: false$/;"	P
alpha	nvim/plugged/coc.nvim/build/index.js	/^            alpha: 1$/;"	P
alpha	nvim/plugged/coc.nvim/build/index.js	/^            alpha: alpha,$/;"	P
alpha	nvim/plugged/coc.nvim/build/index.js	/^    var alpha = 'a-zA-Z';$/;"	V
alphaOnly	nvim/plugged/coc.nvim/build/index.js	/^    var alphaOnly = '[' + alpha + ']';$/;"	V
alphabetical	nvim/plugged/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def alphabetical(query) do$/;"	f	class:smth.do_query
alphasort	nvim/plugged/coc.nvim/build/index.js	/^function alphasort (a, b) {$/;"	F
alphasorti	nvim/plugged/coc.nvim/build/index.js	/^function alphasorti (a, b) {$/;"	F
alternatePair	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:alternatePair(stop)$/;"	f
alwaysIncludePattern	nvim/plugged/coc.nvim/build/index.js	/^      alwaysIncludePattern: false$/;"	P
am	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
anInteger	nvim/plugged/coc.nvim/build/index.js	/^const anInteger = thing => thing && typeof thing === 'number' && Number.isInteger(thing);$/;"	F
anObject	nvim/plugged/coc.nvim/build/index.js	/^const anObject = thing => thing && typeof thing === 'object' && !Array.isArray(thing);$/;"	F
andSelf	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	andSelf: function() {$/;"	M
animate	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	animate: function( prop, speed, easing, callback ) {$/;"	M
animated	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			animated: function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).length;}$/;"	M
anonymousFunctionExpression	nvim/plugged/vim-jsdoc/test/test.js	/^var anonymousFunctionExpression = function (arg1, arg2) {};$/;"	F
anonymousGeneratorFunctionExpression	nvim/plugged/vim-jsdoc/test/test.js	/^var anonymousGeneratorFunctionExpression = function* (arg1, arg2) {};$/;"	G
ansi	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
ansiState	nvim/plugged/coc.nvim/build/index.js	/^    let ansiState = [];$/;"	A
ansiparse	nvim/plugged/coc.nvim/build/index.js	/^function ansiparse(str) {$/;"	F
ansiparse	nvim/plugged/coc.nvim/src/util/ansiparse.ts	/^export function ansiparse(str: string): AnsiItem[] {$/;"	f
api	nvim/plugged/coc.nvim/build/index.js	/^const api = [$/;"	A
app	nvim/plugged/coc.nvim/build/index.js	/^  const app = function (logEvent) {$/;"	F
app	nvim/plugged/coc.nvim/build/index.js	/^  const app = function (loggingEvent) {$/;"	F
append	nvim/plugged/coc.nvim/build/index.js	/^    append(chunk) {$/;"	M
append	nvim/plugged/coc.nvim/build/index.js	/^    append(lines) {$/;"	M
append	nvim/plugged/coc.nvim/build/index.js	/^    append(value) {$/;"	M
append	nvim/plugged/coc.nvim/build/index.js	/^  function append(buffer) {$/;"	F
append	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.append = function(buf) {$/;"	M
append	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.append = function(buf, synchronous) {$/;"	M
append	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  public append(value: string): void {$/;"	m
append	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	append: function() {$/;"	M
appendChild	nvim/plugged/coc.nvim/build/index.js	/^    appendChild(child) {$/;"	M
appendChild	nvim/plugged/coc.nvim/build/index.js	/^    appendChild(marker) {$/;"	M
appendChild	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public appendChild(child: Marker): this {$/;"	m
appendChild	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public appendChild(marker: Marker): this {$/;"	m
appendFile	nvim/plugged/coc.nvim/build/index.js	/^  function appendFile (path, data, options, cb) {$/;"	F
appendItems	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async appendItems(items: ListItem[]): Promise<void> {$/;"	m
appendLine	nvim/plugged/coc.nvim/build/index.js	/^    appendLine(value) {$/;"	M
appendLine	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  public appendLine(value: string): void {$/;"	m
appendOutput	nvim/plugged/coc.nvim/build/index.js	/^    appendOutput(data, encoding) {$/;"	M
appendOutput	nvim/plugged/coc.nvim/build/index.js	/^    appendOutput(message, type = "Info") {$/;"	M
appendOutput	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private appendOutput(data: any, encoding: string): void {$/;"	m
appendOutput	nvim/plugged/coc.nvim/src/watchman.ts	/^  private appendOutput(message: string, type = "Info"): void {$/;"	m
appendTo	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	appendTo: "append",$/;"	P
append_ul	nvim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
appender	nvim/plugged/coc.nvim/build/index.js	/^function appender($/;"	F
appenders	nvim/plugged/coc.nvim/build/index.js	/^          appenders: categoryAppenders,$/;"	P
appenders	nvim/plugged/coc.nvim/build/index.js	/^        appenders: { out: { type: "stdout" } },$/;"	P
appenders	nvim/plugged/coc.nvim/build/index.js	/^    appenders: {$/;"	P
appenders	nvim/plugged/coc.nvim/build/index.js	/^const appenders = new Map();$/;"	V
appendersForCategory	nvim/plugged/coc.nvim/build/index.js	/^const appendersForCategory = category => configForCategory(category).appenders;$/;"	F
applyAdditionalEdits	nvim/plugged/coc.nvim/src/languages.ts	/^  private async applyAdditionalEdits($/;"	m
applyCodeAction	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async applyCodeAction(action: CodeAction): Promise<void> {$/;"	m
applyComposedEdit	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private async applyComposedEdit(original: string, edit: TextEdit): Promise<void> {$/;"	m
applyEdit	nvim/plugged/coc.nvim/build/index.js	/^    applyEdit(edit) {$/;"	M
applyEdit	nvim/plugged/coc.nvim/build/index.js	/^function applyEdit(text, edit) {$/;"	F
applyEdit	nvim/plugged/coc.nvim/src/cursors/range.ts	/^  public applyEdit(edit: TextEdit): void {$/;"	m
applyEdit	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async applyEdit(edit: WorkspaceEdit): Promise<boolean> {$/;"	m
applyEdits	nvim/plugged/coc.nvim/build/index.js	/^    function applyEdits(document, edits) {$/;"	F
applyEdits	nvim/plugged/coc.nvim/build/index.js	/^function applyEdits(text, edits) {$/;"	F
applyEdits	nvim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^  function applyEdits(oldStr: string, newStr: string): void {$/;"	f
applyEdits	nvim/plugged/coc.nvim/src/model/document.ts	/^  public applyEdits(nvim: Neovim, textEdit: TextEdit[], sync?: boolean): Promise<void>$/;"	m
applyEdits	nvim/plugged/coc.nvim/src/model/document.ts	/^  public applyEdits(textEdit: TextEdit[], sync?: boolean): Promise<void>$/;"	m
applyEdits	nvim/plugged/coc.nvim/src/model/document.ts	/^  public async applyEdits(nvim: Neovim | TextEdit[], _edits: TextEdit[] | boolean, sync = true): Promise<void> {$/;"	m
applySingleEdit	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private async applySingleEdit(textRange: TextRange, edit: TextEdit): Promise<void> {$/;"	m
applyTextEdit	nvim/plugged/coc.nvim/src/languages.ts	/^  private async applyTextEdit(item: CompletionItem, option: CompleteOption): Promise<boolean> {$/;"	m
apply_highlight_fix	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_highlight_fix()$/;"	f
apply_user_input_next	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_user_input_next(mode)$/;"	f
arg	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> arg <C-R>=DockerfileReplaceInstruction("arg", "ARG")<CR>$/;"	m
argDefined	nvim/plugged/coc.nvim/build/index.js	/^    function argDefined(key, arg) {$/;"	F
argList	nvim/plugged/coc.nvim/build/index.js	/^        let argList = ['-A', afterContext.toString(), '-B', beforeContext.toString()].concat(defaultArgs, args);$/;"	A
argmap	nvim/plugged/coc.nvim/build/index.js	/^const argmap = new Map([$/;"	V
args	nvim/plugged/coc.nvim/build/index.js	/^                let args = ['install', '--ignore-scripts', '--no-lockfile', '--no-bin-links', '--production'];$/;"	A
args	nvim/plugged/coc.nvim/build/index.js	/^            let args = [];$/;"	A
args	nvim/plugged/coc.nvim/build/index.js	/^        const args = [this.exports, require, this, filename, dirname];$/;"	A
args	nvim/plugged/coc.nvim/build/index.js	/^        let args = [command.command];$/;"	A
args	nvim/plugged/coc.nvim/build/index.js	/^        var args = [];$/;"	A
args	nvim/plugged/coc.nvim/build/index.js	/^    const args = new Array(arguments.length)$/;"	V
args	nvim/plugged/coc.nvim/build/index.js	/^    var args = [path]$/;"	A
args	nvim/plugged/coc.nvim/build/index.js	/^    var args = new Array(arguments.length)$/;"	V
args	nvim/plugged/coc.nvim/build/index.js	/^  var args = ['--no-pretty', 'get-sockname'];$/;"	A
args	nvim/plugged/coc.nvim/build/index.js	/^  var args = [].slice.call(arguments).filter(function (arg) { return arg != null })$/;"	A
args	nvim/plugged/coc.nvim/build/index.js	/^  var timeout, args, context, timestamp, result;$/;"	V
args	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private args: string[] = []$/;"	m
args	nvim/plugged/coc.nvim/src/model/terminal.ts	/^    private args: string[],$/;"	m
arguments	nvim/plugged/coc.nvim/build/index.js	/^                        arguments: args$/;"	P
argv	nvim/plugged/coc.nvim/build/index.js	/^    var argv = { _ : [] };$/;"	O
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, drag_and_drop_attributes)$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, live_region_attributes)$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, relationship_attributes)$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, widget_attributes)$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = global_states_and_properties$/;"	v
aria_attributes_value	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes_value = {$/;"	v
arr	nvim/plugged/coc.nvim/build/index.js	/^                let arr = lineChanges.filter(o => o.lnum < range.lnum - 1);$/;"	F
arr	nvim/plugged/coc.nvim/build/index.js	/^            let arr = [];$/;"	A
arr	nvim/plugged/coc.nvim/build/index.js	/^            let arr = [bufnr, cursor[0], cursor[1]];$/;"	A
arr	nvim/plugged/coc.nvim/build/index.js	/^            let arr = await Promise.all(fragments.map(f => {$/;"	F
arr	nvim/plugged/coc.nvim/build/index.js	/^        const arr = await Promise.all(items.map(item => {$/;"	F
arr	nvim/plugged/coc.nvim/build/index.js	/^        let arr = [];$/;"	A
arr	nvim/plugged/coc.nvim/build/index.js	/^        let arr = await Promise.all(providers.map(item => {$/;"	F
arr	nvim/plugged/coc.nvim/build/index.js	/^        let arr = results.filter(res => res.isIncomplete == true);$/;"	F
arr	nvim/plugged/coc.nvim/build/index.js	/^        let arr;$/;"	V
arr	nvim/plugged/coc.nvim/build/index.js	/^  var arr = [];$/;"	A
arr	nvim/plugged/coc.nvim/build/index.js	/^  var arr = new Array(this.length)$/;"	V
array	nvim/plugged/coc.nvim/build/index.js	/^            var array = [];$/;"	A
array	nvim/plugged/coc.nvim/build/index.js	/^    array: array,$/;"	P
array	nvim/plugged/coc.nvim/build/index.js	/^  function array(encoder, value) {$/;"	F
array	nvim/plugged/coc.nvim/build/index.js	/^  var array = []$/;"	A
array	nvim/plugged/coc.nvim/build/index.js	/^function array(array) {$/;"	F
array	nvim/plugged/coc.nvim/build/index.js	/^function array(decoder, len) {$/;"	F
array	nvim/plugged/coc.nvim/build/index.js	/^function array(value) {$/;"	F
array	nvim/plugged/coc.nvim/src/util/is.ts	/^export function array(array: any): array is any[] {$/;"	f
arrayUniqueTokens	nvim/plugged/coc.nvim/build/index.js	/^  const arrayUniqueTokens = array => {$/;"	F
arrowFunction	nvim/plugged/vim-jsdoc/test/test.js	/^var arrowFunction = (foo, bar) => { };$/;"	F
arrowFunctionSingle	nvim/plugged/vim-jsdoc/test/test.js	/^var arrowFunctionSingle = foo => {};$/;"	F
asChangeTextDocumentParams	nvim/plugged/coc.nvim/build/index.js	/^function asChangeTextDocumentParams(document) {$/;"	F
asChangeTextDocumentParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asChangeTextDocumentParams(document: TextDocument): DidChangeTextDocumentParams {$/;"	f
asCloseTextDocumentParams	nvim/plugged/coc.nvim/build/index.js	/^function asCloseTextDocumentParams(document) {$/;"	F
asCloseTextDocumentParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asCloseTextDocumentParams(document: TextDocument): DidCloseTextDocumentParams {$/;"	f
asCodeLensParams	nvim/plugged/coc.nvim/build/index.js	/^function asCodeLensParams(textDocument) {$/;"	F
asCodeLensParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asCodeLensParams(textDocument: TextDocument): CodeLensParams {$/;"	f
asCompletionParams	nvim/plugged/coc.nvim/build/index.js	/^function asCompletionParams(textDocument, position, context) {$/;"	F
asCompletionParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asCompletionParams(textDocument: TextDocument, position: Position, context: CompletionContext): CompletionParams {$/;"	f
asDocumentSymbolParams	nvim/plugged/coc.nvim/build/index.js	/^function asDocumentSymbolParams(textDocument) {$/;"	F
asDocumentSymbolParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asDocumentSymbolParams(textDocument: TextDocument): DocumentSymbolParams {$/;"	f
asError	nvim/plugged/coc.nvim/build/index.js	/^    asError(error) {$/;"	M
asLanguageIds	nvim/plugged/coc.nvim/build/index.js	/^function asLanguageIds(documentSelector) {$/;"	F
asLanguageIds	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asLanguageIds(documentSelector: DocumentSelector): string[] {$/;"	f
asReferenceParams	nvim/plugged/coc.nvim/build/index.js	/^function asReferenceParams(textDocument, position, options) {$/;"	F
asReferenceParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asReferenceParams(textDocument: TextDocument, position: Position, options: { includeDeclaration: boolean; }): ReferenceParams {$/;"	f
asSaveTextDocumentParams	nvim/plugged/coc.nvim/build/index.js	/^function asSaveTextDocumentParams(document, includeText) {$/;"	F
asSaveTextDocumentParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asSaveTextDocumentParams(document: TextDocument, includeText: boolean): DidSaveTextDocumentParams {$/;"	f
asString	nvim/plugged/coc.nvim/build/index.js	/^function asString(format, date) {$/;"	F
asTextDocumentIdentifier	nvim/plugged/coc.nvim/build/index.js	/^function asTextDocumentIdentifier(textDocument) {$/;"	F
asTextDocumentIdentifier	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asTextDocumentIdentifier(textDocument: TextDocument): TextDocumentIdentifier {$/;"	f
asTextDocumentPositionParams	nvim/plugged/coc.nvim/build/index.js	/^function asTextDocumentPositionParams(textDocument, position) {$/;"	F
asTextDocumentPositionParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asTextDocumentPositionParams(textDocument: TextDocument, position: Position): TextDocumentPositionParams {$/;"	f
asUri	nvim/plugged/coc.nvim/build/index.js	/^function asUri(resource) {$/;"	F
asUri	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asUri(resource: URI): string {$/;"	f
asVersionedTextDocumentIdentifier	nvim/plugged/coc.nvim/build/index.js	/^function asVersionedTextDocumentIdentifier(textDocument) {$/;"	F
asVersionedTextDocumentIdentifier	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asVersionedTextDocumentIdentifier(textDocument: TextDocument): VersionedTextDocumentIdentifier {$/;"	f
asWillSaveTextDocumentParams	nvim/plugged/coc.nvim/build/index.js	/^function asWillSaveTextDocumentParams(event) {$/;"	F
asWillSaveTextDocumentParams	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asWillSaveTextDocumentParams(event: TextDocumentWillSaveEvent): WillSaveTextDocumentParams {$/;"	f
ask	nvim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_and_schedule	nvim/plugged/vim-elixir/large_file.ex	/^        defp ask_and_schedule(producers, from) do$/;"	f
ask_no_interrupt	nvim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assembleTokens	nvim/plugged/coc.nvim/build/index.js	/^function assembleTokens(req, res, customTokens) {$/;"	F
assertEscaped	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^  function assertEscaped(value: string, expected: string) {$/;"	f
assertIdent	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    function assertIdent(input: string): void {$/;"	f
assertLen	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    function assertLen(template: string, ...lengths: number[]): void {$/;"	f
assertMarker	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^  function assertMarker(input: TextmateSnippet | Marker[] | string, ...ctors: Function[]) {$/;"	f
assertParent	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    function assertParent(marker: Marker) {$/;"	f
assertReadableSize	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.assertReadableSize = function(size) {$/;"	M
assertText	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^  function assertText(value: string, expected: string) {$/;"	f
assertTextAndMarker	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^  function assertTextAndMarker(value: string, escaped: string, ...ctors: Function[]) {$/;"	f
assertTextsnippetString	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    function assertTextsnippetString(input: string, expected: string): void {$/;"	f
assert_correct_highlighting	nvim/plugged/vim-ruby/spec/spec_helper.rb	/^  def assert_correct_highlighting(extension='rb', string, patterns, group)$/;"	f
assert_correct_indenting	nvim/plugged/vim-ruby/spec/spec_helper.rb	/^  def assert_correct_indenting(extension='rb', string)$/;"	f
assert_list_of_dicts	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_list_of_dicts(expected, actual)$/;"	f
assert_signs	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_signs(expected, filename)$/;"	f
assign_name	nvim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	nvim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
async	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			async: false,$/;"	P
async	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		async: true,$/;"	P
asyncomplete#sources#ale#completor	nvim/plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#completor(options, context) abort$/;"	f
asyncomplete#sources#ale#get_source_options	nvim/plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#get_source_options(...) abort$/;"	f
asyncomplete#sources#ale#get_triggers	nvim/plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#get_triggers() abort$/;"	f
attach	nvim/plugged/coc.nvim/build/index.js	/^    attach(sendBuffer = false, options = {}) {$/;"	M
attach	nvim/plugged/coc.nvim/build/index.js	/^    attach(writer, reader, client) {$/;"	M
attach	nvim/plugged/coc.nvim/build/index.js	/^    attach({ reader, writer, }, requestApi = true) {$/;"	M
attach	nvim/plugged/coc.nvim/build/index.js	/^function attach({ reader: _reader, writer: _writer, proc, socket, }, _logger = null, requestApi = true) {$/;"	F
attach	nvim/plugged/coc.nvim/src/model/document.ts	/^  private async attach(): Promise<boolean> {$/;"	m
attach	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async attach(): Promise<void> {$/;"	m
attachBufferEvent	nvim/plugged/coc.nvim/build/index.js	/^    attachBufferEvent(buffer, eventName, cb) {$/;"	M
attachChangedEvents	nvim/plugged/coc.nvim/build/index.js	/^    attachChangedEvents() {$/;"	M
attachChangedEvents	nvim/plugged/coc.nvim/src/workspace.ts	/^  private attachChangedEvents(): void {$/;"	m
attached	nvim/plugged/coc.nvim/src/model/document.ts	/^  private attached = false$/;"	m
attr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	attr: function( elem, name, value ) {$/;"	M
attr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	attr: function( name, value, type ) {$/;"	M
attr	nvim/plugged/vim-vue/syntax/vue.vim	/^function! s:attr(name, value)$/;"	f
attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, event_attributes_value)$/;"	v
attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, microdata_attributes_value)$/;"	v
attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, rdfa_attributes_value)$/;"	v
attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let attributes_value = {$/;"	v
authority	nvim/plugged/coc.nvim/build/index.js	/^    var authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';$/;"	V
auto	nvim/plugged/coc.nvim/build/index.js	/^function auto(that) {$/;"	F
autoClose	nvim/plugged/coc.nvim/build/index.js	/^      autoClose: false$/;"	P
autoHide	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^    private autoHide = true) {$/;"	m
autocmdMaxId	nvim/plugged/coc.nvim/src/workspace.ts	/^  private autocmdMaxId = 0$/;"	m
autocmds	nvim/plugged/coc.nvim/src/workspace.ts	/^  private autocmds: Map<number, Autocmd> = new Map()$/;"	m
autofill_tokens	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let autofill_tokens = ['on', 'off', 'name', 'honorific-prefix', 'given-name', 'additional-name', 'family-name', 'honorific-suffix', 'nickname', 'organization-title', 'username', 'new-password', 'current-password', 'organization', 'street-address', 'address-line1', 'address-line2', 'address-line3', 'address-level4', 'address-level3', 'address-level2', 'address-level1', 'country', 'country-name', 'postal-code', 'cc-name', 'cc-given-name', 'cc-additional-name', 'cc-family-name', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc', 'cc-type', 'transaction-currency', 'transaction-amount', 'language', 'bday', 'bday-day', 'bday-month', 'bday-year', 'sex', 'url', 'photo', 'tel', 'tel-country-code', 'tel-national', 'tel-area-code', 'tel-local', 'tel-local-prefix', 'tel-local-suffix', 'tel-extension', 'email', 'impp']$/;"	v
b	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^uint32_t b = static_cast<uint8_t>(a);$/;"	v
b.get_posttitle	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_posttitle(i) dict$/;"	f
b.get_pretitle	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_pretitle(i) dict$/;"	f
b.get_title	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_title(i) dict$/;"	f
b.get_title	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_title(i) dict$/;"	f
b64encode	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! s:b64encode(bytes, table, pad)$/;"	f
b:block_begin	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^let b:block_begin = '\\<\\(do$\\|fn\\>\\)'$/;"	v
b:block_end	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^let b:block_end = '\\<end\\>'$/;"	v
b:browsefilter	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let b:browsefilter="Pug Files (*.pug)\\t*.pug\\n" . s:browsefilter$/;"	v
b:browsefilter	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:current_syntax	nvim/plugged/Dockerfile.vim/syntax/Dockerfile.vim	/^let b:current_syntax = "dockerfile"$/;"	v
b:current_syntax	nvim/plugged/Dockerfile.vim/syntax/docker-compose.vim	/^let b:current_syntax = "dockercompose"$/;"	v
b:current_syntax	nvim/plugged/ale/syntax/ale-fix-suggest.vim	/^let b:current_syntax = 'ale-fix-suggest'$/;"	v
b:current_syntax	nvim/plugged/ale/syntax/ale-preview-selection.vim	/^let b:current_syntax = 'ale-preview-selection'$/;"	v
b:current_syntax	nvim/plugged/scss-syntax.vim/syntax/scss.vim	/^let b:current_syntax = "scss"$/;"	v
b:current_syntax	nvim/plugged/svg.vim/syntax/svg.vim	/^let b:current_syntax = "svg"$/;"	v
b:current_syntax	nvim/plugged/tagbar/syntax/tagbar.vim	/^let b:current_syntax = 'tagbar'$/;"	v
b:current_syntax	nvim/plugged/typescript-vim/syntax/typescript.vim	/^let b:current_syntax = "typescript"$/;"	v
b:current_syntax	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^let b:current_syntax = 'eelixir'$/;"	v
b:current_syntax	nvim/plugged/vim-elixir/syntax/elixir.vim	/^let b:current_syntax = "elixir"$/;"	v
b:current_syntax	nvim/plugged/vim-fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	nvim/plugged/vim-fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax	nvim/plugged/vim-javascript/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	nvim/plugged/vim-pug/syntax/pug.vim	/^let b:current_syntax = "pug"$/;"	v
b:current_syntax	nvim/plugged/vim-ruby/syntax/eruby.vim	/^let b:current_syntax = matchstr(&syntax, '^.*\\<eruby\\>')$/;"	v
b:current_syntax	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	nvim/plugged/vim-vue/syntax/vue.vim	/^let b:current_syntax = "vue"$/;"	v
b:current_syntax	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let b:current_syntax="vimwiki"$/;"	v
b:did_ftplugin	nvim/plugged/typescript-vim/ftplugin/typescript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let b:did_ftplugin = 1  " Don't load another plugin for this buffer$/;"	v
b:did_indent	nvim/plugged/Dockerfile.vim/indent/Dockerfile.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/html5.vim/indent/html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/typescript-vim/indent/typescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/vim-elixir/indent/eelixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/vim-elixir/indent/elixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/vim-javascript/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/vim-pug/indent/pug.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/vim-ruby/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	nvim/plugged/vim-vue/indent/vue.vim	/^let b:did_indent = 1$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.leex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.leex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype_indentexpr	nvim/plugged/vim-elixir/indent/eelixir.vim	/^let b:eelixir_subtype_indentexpr = &l:indentexpr$/;"	v
b:eruby_nest_level	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(&filetype,'\\C\\<eruby\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^.\\{-\\}\\ze\\.eruby\\>')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype_indentexpr	nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:hi_indent	nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
b:hi_lasttick	nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_newstate	nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_newstate = {}$/;"	v
b:html_indent_usestate	nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:html_indent_usestate = 0$/;"	v
b:match_ignorecase	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_skip	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
b:match_words	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^  let b:match_words = '\\:\\@<!\\<\\%(do\\|fn\\)\\:\\@!\\>' .$/;"	v
b:match_words	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:ruby_no_expensive	nvim/plugged/vim-ruby/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:ruby_version	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    let b:ruby_version = get(readfile(s:version_file, '', 1), '')$/;"	v
b:surround_35	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_35 = "<%# \\r %>"$/;"	v
b:surround_45	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_45 = "<% \\r %>"$/;"	v
b:surround_5	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_5 = "<% \\r %>\\n<% end %>"$/;"	v
b:surround_61	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_61 = "<%= \\r %>"$/;"	v
b:undo_ftplugin	nvim/plugged/typescript-vim/ftplugin/typescript.vim	/^let b:undo_ftplugin = "setl fo< ofu< com< cms<"$/;"	v
b:undo_ftplugin	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
b:undo_ftplugin	nvim/plugged/vim-elixir/ftplugin/elixir.vim	/^let b:undo_ftplugin = 'setlocal sw< sts< et< isk< com< cms< path< inex< sua< def< fo<'.$/;"	v
b:undo_ftplugin	nvim/plugged/vim-javascript/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	nvim/plugged/vim-javascript/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= "| setl bexpr="$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= ' | setl sw< sts< et<'$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:undo_ftplugin .= "| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>"$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl inc= sua= path= tags= fo< com< cms< kp="$/;"	v
b:undo_indent	nvim/plugged/html5.vim/indent/html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:undo_indent	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^let b:undo_indent = 'setl smartindent< indentkeys< indentexpr<'$/;"	v
b:undo_indent	nvim/plugged/typescript-vim/indent/typescript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
b:undo_indent	nvim/plugged/vim-javascript/indent/javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
backgroundColors	nvim/plugged/coc.nvim/build/index.js	/^const backgroundColors = {$/;"	O
backoff	nvim/plugged/coc.nvim/build/index.js	/^      var backoff = 0;$/;"	V
backspace	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:backspace(s)$/;"	f
backtrace	nvim/plugged/coc.nvim/build/index.js	/^    var backtrace = new Error;$/;"	V
backups	nvim/plugged/coc.nvim/build/index.js	/^            backups: MAX_LOG_BACKUPS,$/;"	P
balanced	nvim/plugged/coc.nvim/build/index.js	/^function balanced(a, b, str) {$/;"	F
bang	nvim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	nvim/autoload/plug.vim	/^function! s:bar()$/;"	f
bar	nvim/plugged/vim-jsdoc/test/flow.js	/^  bar: number$/;"	P
bar	nvim/plugged/vim-jsdoc/test/test.js	/^  bar(aaa, bb, ccc) { } \/\/ shorthand method$/;"	M
bar	nvim/plugged/vim-jsdoc/test/test.ts	/^function bar() : any {$/;"	f
bar	nvim/plugged/vim-ruby/spec/indent/continuations_spec.rb	/^      def bar($/;"	f
base	nvim/plugged/coc.nvim/build/index.js	/^                let base = 0 - highligher.length - count;$/;"	V
base	nvim/plugged/coc.nvim/build/index.js	/^        let base = 'languageserver';$/;"	V
base	nvim/plugged/coc.nvim/build/index.js	/^  var base;$/;"	V
basicLayout	nvim/plugged/coc.nvim/build/index.js	/^function basicLayout(loggingEvent) {$/;"	F
batchfile	nvim/autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
baz	nvim/plugged/vim-jsdoc/test/test.ts	/^  public baz(arg1: string = 'foo', arg2: number = 100): void {$/;"	m
before	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	before: function() {$/;"	M
before	nvim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def before(string)$/;"	f
before	nvim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def before(string)$/;"	f
beg	nvim/plugged/coc.nvim/build/index.js	/^  var begs, beg, left, right, result;$/;"	V
begs	nvim/plugged/coc.nvim/build/index.js	/^  var begs, beg, left, right, result;$/;"	V
bestResult	nvim/plugged/coc.nvim/build/index.js	/^function bestResult(results) {$/;"	F
bestResult	nvim/plugged/coc.nvim/src/util/score.ts	/^function bestResult(results: MatchResult[]): MatchResult {$/;"	f
best_common	nvim/plugged/coc.nvim/build/index.js	/^    var best_common = '';$/;"	V
best_longtext_a	nvim/plugged/coc.nvim/build/index.js	/^    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;$/;"	V
best_longtext_b	nvim/plugged/coc.nvim/build/index.js	/^    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;$/;"	V
best_shorttext_a	nvim/plugged/coc.nvim/build/index.js	/^    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;$/;"	V
bin	nvim/plugged/coc.nvim/build/index.js	/^    bin: (binarraybuffer ? bin_arraybuffer : bin_buffer),$/;"	M
bin_arraybuffer	nvim/plugged/coc.nvim/build/index.js	/^  function bin_arraybuffer(encoder, value) {$/;"	F
bin_arraybuffer	nvim/plugged/coc.nvim/build/index.js	/^function bin_arraybuffer(decoder, len) {$/;"	F
bin_buffer	nvim/plugged/coc.nvim/build/index.js	/^  function bin_buffer(encoder, value) {$/;"	F
bin_buffer	nvim/plugged/coc.nvim/build/index.js	/^function bin_buffer(decoder, len) {$/;"	F
binary_exists	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:binary_exists(fname)$/;"	f
bind	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	bind: function( type, data, fn ) {$/;"	M
bindReady	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function bindReady(){$/;"	F
black	nvim/plugged/coc.nvim/build/index.js	/^  black: [90, 39],$/;"	P
blockLen	nvim/plugged/coc.nvim/build/index.js	/^    const blockLen = 512 * Math.ceil(this.stat.size \/ 512)$/;"	V
blue	nvim/plugged/coc.nvim/build/index.js	/^            blue: (res[2] \/ 65535),$/;"	M
blue	nvim/plugged/coc.nvim/build/index.js	/^            blue: blue,$/;"	P
blue	nvim/plugged/coc.nvim/build/index.js	/^  blue: [34, 39],$/;"	P
bm	nvim/plugged/vim-elixir/bin/test_indent	/^def bm$/;"	f
body_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let body_attributes = {'onafterprint': [], 'onbeforeprint': [], 'onbeforeunload': [], 'onblur': [], 'onerror': [], 'onfocus': [], 'onhashchange': [], 'onload': [], 'onmessage': [], 'onoffline': [], 'ononline': [], 'onpopstate': [], 'onredo': [], 'onresize': [], 'onstorage': [], 'onundo': [], 'onunload': []}$/;"	v
body_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let body_attributes = {}$/;"	v
bold	nvim/plugged/coc.nvim/build/index.js	/^  bold: [1, 22],$/;"	P
bool	nvim/plugged/coc.nvim/build/index.js	/^  function bool(encoder, value) {$/;"	F
boolean	nvim/plugged/coc.nvim/build/index.js	/^    function boolean(value) {$/;"	F
boolean	nvim/plugged/coc.nvim/build/index.js	/^function boolean(value) {$/;"	F
boolean	nvim/plugged/coc.nvim/src/util/is.ts	/^export function boolean(value: any): value is boolean {$/;"	f
border	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	function border(elem) {$/;"	F
bounding	nvim/plugged/coc.nvim/build/index.js	/^        let bounding = { col, row, height, width, scrollbar };$/;"	O
braceExpand	nvim/plugged/coc.nvim/build/index.js	/^function braceExpand (pattern, options) {$/;"	F
braceExpand	nvim/plugged/coc.nvim/build/index.js	/^minimatch.braceExpand = function (pattern, options) {$/;"	M
browser	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.browser = {$/;"	P
btags_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
btags_source	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
buf	nvim/plugged/coc.nvim/build/index.js	/^            let buf = new buffer_1.DiagnosticBuffer(doc.bufnr, this.config);$/;"	V
buf	nvim/plugged/coc.nvim/build/index.js	/^            let buf = this.buffers.find(buf => buf.bufnr == bufnr);$/;"	F
buf	nvim/plugged/coc.nvim/build/index.js	/^        let buf = this.buffers.find(buf => buf.uri == uri);$/;"	F
buf	nvim/plugged/coc.nvim/build/index.js	/^      const buf = []$/;"	A
buf	nvim/plugged/coc.nvim/build/index.js	/^  var buf = new Accumulator();$/;"	V
buf	nvim/plugged/coc.nvim/build/index.js	/^  var buf = new Buffer(nextPow2(this.buf.length + size - this.writeAvail()));$/;"	V
buf	nvim/plugged/coc.nvim/build/index.js	/^  var buf = new BunserBuf();$/;"	V
bufLen	nvim/plugged/coc.nvim/build/index.js	/^    const bufLen = 512 * Math.ceil(1 + bodyLen \/ 512)$/;"	V
bufPos	nvim/plugged/coc.nvim/build/index.js	/^    let bufPos = 0$/;"	V
buf_line_count	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:buf_line_count(bufnr) abort$/;"	f
buffer	nvim/plugged/coc.nvim/build/index.js	/^        let buffer = this.buffers.find(o => o.bufnr == bufnr);$/;"	F
buffer	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private get buffer(): Buffer {$/;"	m
buffer	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public get buffer(): Buffer {$/;"	m
buffer	nvim/plugged/coc.nvim/src/model/document.ts	/^    public readonly buffer: Buffer,$/;"	m
buffer	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    public buffer: Buffer,$/;"	m
buffer	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  public get buffer(): Buffer {$/;"	m
buffer	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private get buffer(): Buffer | null {$/;"	m
bufferId	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public bufferId: number$/;"	m
buffer_line_handler	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
buffer_lines	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
buffer_repo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_type	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
buffered	nvim/plugged/coc.nvim/build/index.js	/^        const buffered = new buffered_1.default();$/;"	V
bufferish	nvim/plugged/coc.nvim/build/index.js	/^    bufferish: Bufferish,$/;"	P
buffers	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public readonly buffers: DiagnosticBuffer[] = []$/;"	m
buffers	nvim/plugged/coc.nvim/src/workspace.ts	/^  private buffers: Map<number, Document> = new Map()$/;"	m
buffers	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^    let buffers = tabpagebuflist(curtab)$/;"	v
buflisted	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
buflisted_sorted	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted_sorted()$/;"	f
bufnr	nvim/plugged/coc.nvim/build/index.js	/^        let bufnr;$/;"	V
bufnr	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private get bufnr(): number {$/;"	m
bufnr	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private bufnr: number$/;"	m
bufnr	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public readonly bufnr: number$/;"	m
bufnr	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public get bufnr(): number {$/;"	m
bufnr	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private bufnr: number$/;"	m
bufnr	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public get bufnr(): number {$/;"	m
bufnr	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get bufnr(): number {$/;"	m
bufnr	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  public bufnr: number$/;"	m
bufnr	nvim/plugged/coc.nvim/src/workspace.ts	/^  public bufnr: number$/;"	m
bufnrs	nvim/plugged/coc.nvim/build/index.js	/^        let bufnrs = await this.nvim.call('coc#util#open_files', [uris.map(u => vscode_uri_1.URI.parse(u).fsPath)]);$/;"	F
bufopen	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
buftype	nvim/plugged/coc.nvim/src/model/document.ts	/^  public buftype: string$/;"	m
build_command	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:build_command(color)$/;"	f
build_command	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^    def build_command(input, output) do$/;"	f	class:test.test.test.build_command.build_command.build_command
build_command	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	class:test.test.test
build_command	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	class:test.test.test.build_command
build_command	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	class:test.test.test.build_command.build_command
build_command	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:build_command(cmd)$/;"	f
build_description	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:build_description(argType, arg) abort$/;"	f
build_menu	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:build_menu(topmenu)$/;"	f
build_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:build_path(path) abort$/;"	f
build_sections	nvim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:build_sections(builder, context, keys)$/;"	f
build_table_menu	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:build_table_menu(topmenu)$/;"	f
busyTries	nvim/plugged/coc.nvim/build/index.js	/^  let busyTries = 0$/;"	V
busyTries	nvim/plugged/coc.nvim/build/index.js	/^  var busyTries = 0$/;"	V
button	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			button: function(a){return "button"==a.type||jQuery.nodeName(a,"button");},$/;"	M
byteIndex	nvim/plugged/coc.nvim/build/index.js	/^function byteIndex(content, index) {$/;"	F
byteIndex	nvim/plugged/coc.nvim/src/util/string.ts	/^export function byteIndex(content: string, index: number): number {$/;"	f
byteLength	nvim/plugged/coc.nvim/build/index.js	/^function byteLength(str) {$/;"	F
byteLength	nvim/plugged/coc.nvim/src/util/string.ts	/^export function byteLength(str: string): number {$/;"	f
byteSlice	nvim/plugged/coc.nvim/build/index.js	/^function byteSlice(content, start, end) {$/;"	F
byteSlice	nvim/plugged/coc.nvim/src/util/string.ts	/^export function byteSlice(content: string, start: number, end?: number): string {$/;"	f
byteToHex	nvim/plugged/coc.nvim/build/index.js	/^var byteToHex = [];$/;"	A
bytesToUuid	nvim/plugged/coc.nvim/build/index.js	/^function bytesToUuid(buf, offset) {$/;"	F
byteswap64	nvim/plugged/coc.nvim/build/index.js	/^function byteswap64(buf) {$/;"	F
c	nvim/plugged/coc.nvim/build/index.js	/^	const c = 'color: ' + this.color;$/;"	V
c	nvim/plugged/coc.nvim/build/index.js	/^      var c;$/;"	V
c	nvim/plugged/coc.nvim/build/index.js	/^    c: categoryName,$/;"	P
c	nvim/plugged/coc.nvim/build/index.js	/^  var c = 'color: ' + this.color;$/;"	V
c	nvim/plugged/coc.nvim/build/index.js	/^  var e, m, c$/;"	V
c	nvim/plugged/coc.nvim/build/index.js	/^function c(B) {$/;"	F
c	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^						var c = 1;$/;"	V
c	nvim/plugged/vim-airline/t/airline.vim	/^    let c = len(g:airline_statusline_funcrefs)$/;"	v
cache	nvim/plugged/coc.nvim/build/index.js	/^const cache = {};$/;"	O
cache	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	cache: {},$/;"	P
cache_project_root	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
calculateBounding	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private async calculateBounding(docs: Documentation[], bounding: PumBounding): Promise<Bounding> {$/;"	m
calculateFragments	nvim/plugged/coc.nvim/build/index.js	/^    calculateFragments(docs, maxWidth) {$/;"	M
calculateFragments	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  public calculateFragments(docs: Documentation[], maxWidth: number): Fragment[] {$/;"	m
call	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def call(self, function, *args):$/;"	m	class:VimMock
call	nvim/plugged/coc.nvim/build/index.js	/^    call(fname, args = [], isNotify) {$/;"	M
call	nvim/plugged/coc.nvim/build/index.js	/^    call(func, args, requestId) {$/;"	M
call	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async call(id: string, method: string, args: any[]): Promise<any> {$/;"	m
call	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async call(fname: string): Promise<any> {$/;"	m
call	nvim/plugged/coc.nvim/src/util/throttle.ts	/^  function call(): any {$/;"	f
call	nvim/plugged/vim-elixir/spec/syntax/variable_spec.rb	/^      def call(:pop, _, [h|stack]) do$/;"	f
callAsync	nvim/plugged/coc.nvim/build/index.js	/^    callAsync(fname, args = []) {$/;"	M
callAsync	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async callAsync<T>(method: string, args: any[]): Promise<T> {$/;"	m
callAtomic	nvim/plugged/coc.nvim/build/index.js	/^    callAtomic(calls) {$/;"	M
callDictFunction	nvim/plugged/coc.nvim/build/index.js	/^    callDictFunction(dict, fname, args = []) {$/;"	M
callFunction	nvim/plugged/coc.nvim/build/index.js	/^    callFunction(fname, args = []) {$/;"	M
callOptinalFunc	nvim/plugged/coc.nvim/src/model/source-vim.ts	/^  private async callOptinalFunc(fname: string, args: any[]): Promise<any> {$/;"	m
callStack	nvim/plugged/coc.nvim/build/index.js	/^  function callStack(loggingEvent) {$/;"	F
callTimer	nvim/plugged/coc.nvim/build/index.js	/^    callTimer(fname, args = [], isNotify) {$/;"	M
callback	nvim/plugged/coc.nvim/build/index.js	/^            const callback = (method, args) => {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^        callback = function (er, _, __) {$/;"	M
callback	nvim/plugged/coc.nvim/build/index.js	/^      callback = function (er, _, __) {$/;"	M
callback	nvim/plugged/coc.nvim/build/index.js	/^      function callback (er, stats) {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^    callback(client, err, result) {$/;"	M
callback	nvim/plugged/coc.nvim/build/index.js	/^    callback(data) {$/;"	M
callback	nvim/plugged/coc.nvim/build/index.js	/^    callback(event) {$/;"	M
callback	nvim/plugged/coc.nvim/build/index.js	/^    let callback = (message) => {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^  callback = (typeof type === 'function') ? type : callback$/;"	M
callback	nvim/plugged/coc.nvim/build/index.js	/^  var callback;$/;"	V
callback	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private callback(data: E): void {$/;"	m
callback	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private callback(event: DidChangeTextDocumentParams): void {$/;"	m
callback	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private callback(event: TextDocumentWillSaveEvent): void {$/;"	m
callbacks	nvim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^  private callbacks: PromiseCallback[] = []$/;"	m
can_diffoff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
cancel	nvim/plugged/coc.nvim/build/index.js	/^    cancel() {$/;"	M
cancel	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private cancel(): void {$/;"	m
cancel	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  public cancel(): void {$/;"	m
cancel	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async cancel(close = true): Promise<void> {$/;"	m
cancel	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public cancel(): void {$/;"	m
cancel	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public cancel(): void {$/;"	m
cancel	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^  public cancel(): Promise<any> {$/;"	m
cancelCommands	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.cancelCommands = function(why) {$/;"	M
cancelTimeout	nvim/plugged/coc.nvim/build/index.js	/^    cancelTimeout() {$/;"	M
cancelTimeout	nvim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private cancelTimeout(): void {$/;"	m
cancelTokenSource	nvim/plugged/coc.nvim/src/languages.ts	/^  private cancelTokenSource: CancellationTokenSource = new CancellationTokenSource()$/;"	m
cancelUndispatched	nvim/plugged/coc.nvim/build/index.js	/^    function cancelUndispatched(_message) {$/;"	F
cancel_tests	nvim/plugged/ale/run-tests	/^cancel_tests() {$/;"	f
cancellationSource	nvim/plugged/coc.nvim/build/index.js	/^            let cancellationSource = new cancellation_1.CancellationTokenSource();$/;"	V
cap_versions	nvim/plugged/coc.nvim/build/index.js	/^var cap_versions = {$/;"	O
capabilities	nvim/plugged/coc.nvim/build/index.js	/^  resp.capabilities = {}$/;"	P
capabilities	nvim/plugged/coc.nvim/src/__tests__/client/server/testFileWatcher.js	/^  let capabilities = {$/;"	O
capabilities	nvim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^  let capabilities = {$/;"	O
capabilityCheck	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.capabilityCheck = function(caps, done) {$/;"	M
caretTrimReplace	nvim/plugged/coc.nvim/build/index.js	/^var caretTrimReplace = '$1^'$/;"	V
caseMatch	nvim/plugged/coc.nvim/build/index.js	/^function caseMatch(input, code) {$/;"	F
caseMatch	nvim/plugged/coc.nvim/src/util/fuzzy.ts	/^export function caseMatch(input: number, code: number): boolean {$/;"	f
categories	nvim/plugged/coc.nvim/build/index.js	/^        categories: { default: { appenders: ["out"], level: "OFF" } }$/;"	P
categories	nvim/plugged/coc.nvim/build/index.js	/^    categories: {$/;"	P
categories	nvim/plugged/coc.nvim/build/index.js	/^const categories = new Map();$/;"	V
categoryAppenders	nvim/plugged/coc.nvim/build/index.js	/^    const categoryAppenders = [];$/;"	A
categoryFilter	nvim/plugged/coc.nvim/build/index.js	/^function categoryFilter(excludes, appender) {$/;"	F
categoryName	nvim/plugged/coc.nvim/build/index.js	/^  function categoryName(loggingEvent, specifier) {$/;"	F
cb	nvim/plugged/coc.nvim/build/index.js	/^    const cb = (er, pos) => {$/;"	F
cb	nvim/plugged/coc.nvim/build/index.js	/^  function cb(skipped) {$/;"	F
cell_splitter	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:cell_splitter()$/;"	f
cells	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let cells = vimwiki#tbl#get_cells(a:line)$/;"	v
cellspacing	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		cellspacing: "cellSpacing"$/;"	P
cfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
cgc	nvim/plugged/vim-commentary/plugin/commentary.vim	/^    nmap cgc <Plug>ChangeCommentary$/;"	m
chCwd	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node)$/;"	f
chRoot	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node)$/;"	f
changeConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    changeConfiguration(target, model, configFile) {$/;"	M
changeConfiguration	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public changeConfiguration(target: ConfigurationTarget, model: IConfigurationModel, configFile?: string): void {$/;"	m
changeLines	nvim/plugged/coc.nvim/build/index.js	/^    changeLines(lines, sync = true, check = false) {$/;"	M
changeLines	nvim/plugged/coc.nvim/src/model/document.ts	/^  public changeLines(lines: [number, string][], sync = true, check = false): void {$/;"	m
changeMap	nvim/plugged/coc.nvim/build/index.js	/^        let changeMap = {};$/;"	O
change_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:change_cb(from_line, to_line, new_rate)$/;"	f
change_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:change_level(from_line, to_line, direction, plus_children)$/;"	f
changed	nvim/plugged/coc.nvim/build/index.js	/^    let changed = { line: 0, character: 0 };$/;"	O
changedLnum	nvim/plugged/coc.nvim/build/index.js	/^        let changedLnum = new Set();$/;"	V
changedTick	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private changedTick = 0$/;"	m
changedtick	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get changedtick(): number {$/;"	m
changes	nvim/plugged/coc.nvim/build/index.js	/^            changes: {$/;"	P
changes	nvim/plugged/coc.nvim/build/index.js	/^            let changes = [{$/;"	A
changes	nvim/plugged/coc.nvim/build/index.js	/^        let changes = [];$/;"	A
changes	nvim/plugged/coc.nvim/build/index.js	/^        let changes = {};$/;"	O
changing	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private changing = false$/;"	m
channel	nvim/plugged/coc.nvim/build/index.js	/^        let channel = new outputChannel_1.default(name, this.nvim);$/;"	V
channelNames	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get channelNames(): string[] {$/;"	m
charMap	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private charMap: Map<string, string>$/;"	m
charSet	nvim/plugged/coc.nvim/build/index.js	/^function charSet (s) {$/;"	F
character	nvim/plugged/coc.nvim/build/index.js	/^            character: col$/;"	P
character	nvim/plugged/coc.nvim/build/index.js	/^            let character = newLines[newLines.length - 1].length - end.length;$/;"	V
characterCount	nvim/plugged/coc.nvim/build/index.js	/^        let characterCount = 0;$/;"	V
characterIndex	nvim/plugged/coc.nvim/build/index.js	/^function characterIndex(content, byteIndex) {$/;"	F
characterIndex	nvim/plugged/coc.nvim/src/util/string.ts	/^export function characterIndex(content: string, byteIndex: number): number {$/;"	f
characters	nvim/plugged/coc.nvim/build/index.js	/^        let characters = [options.firstTriggerCharacter, ...moreTriggerCharacter];$/;"	A
characters	nvim/plugged/coc.nvim/build/index.js	/^        let characters = triggerCharacters.reduce((p, c) => {$/;"	F
chars	nvim/plugged/coc.nvim/build/index.js	/^        let chars = new Chars();$/;"	V
chars	nvim/plugged/coc.nvim/src/model/document.ts	/^  public chars: Chars$/;"	m
charset	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let charset = [$/;"	v
chdir	nvim/plugged/coc.nvim/build/index.js	/^process.chdir = function(d) {$/;"	M
check	nvim/plugged/coc.nvim/build/index.js	/^                let check = () => {$/;"	F
check	nvim/plugged/coc.nvim/build/index.js	/^function check(_target, key, descriptor) {$/;"	F
check	nvim/plugged/coc.nvim/src/languages.ts	/^export function check<R extends (...args: any[]) => Promise<R>>(_target: any, key: string, descriptor: any): void {$/;"	f
checkAutocmd	nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkAutocmd()$/;"	f
checkBuffer	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private async checkBuffer(): Promise<void> {$/;"	m
checkBuffer	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async checkBuffer(bufnr: number): Promise<void> {$/;"	m
checkCapability	nvim/plugged/coc.nvim/build/index.js	/^    checkCapability() {$/;"	M
checkCapability	nvim/plugged/coc.nvim/src/watchman.ts	/^  public checkCapability(): Promise<boolean> {$/;"	m
checkCheckChildren	nvim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^      function checkCheckChildren(marker1: Marker, marker2: Marker) {$/;"	f
checkCommand	nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkCommand()$/;"	f
checkDocument	nvim/plugged/coc.nvim/src/model/document.ts	/^  public async checkDocument(): Promise<void> {$/;"	m
checkDocumentChanges	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.checkDocumentChanges = function () {$/;"	M
checkEnvironment	nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkEnvironment() abort$/;"	f
checkExtensions	nvim/plugged/coc.nvim/src/extensions.ts	/^  private async checkExtensions(): Promise<void> {$/;"	m
checkFloatBuffer	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private async checkFloatBuffer(): Promise<void> {$/;"	m
checkFolder	nvim/plugged/coc.nvim/build/index.js	/^    checkFolder() {$/;"	M
checkFolder	nvim/plugged/coc.nvim/src/model/extension.ts	/^  private checkFolder(): void {$/;"	m
checkFolderConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    checkFolderConfiguration(uri) {$/;"	M
checkFolderConfiguration	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public checkFolderConfiguration(uri: string): void {$/;"	m
checkInitailize	nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkInitailize() abort$/;"	f
checkLink	nvim/plugged/coc.nvim/build/index.js	/^  function checkLink(resolvedPath, target) {$/;"	F
checkMode	nvim/plugged/coc.nvim/build/index.js	/^    checkMode(mode, allowSelection) {$/;"	M
checkMode	nvim/plugged/coc.nvim/build/index.js	/^function checkMode (stat, options) {$/;"	F
checkMode	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private checkMode(mode: string, allowSelection: boolean): boolean {$/;"	m
checkParentDir	nvim/plugged/coc.nvim/build/index.js	/^function checkParentDir (destStat, src, dest, opts, cb) {$/;"	F
checkParentPaths	nvim/plugged/coc.nvim/build/index.js	/^function checkParentPaths (src, srcStat, dest, funcName, cb) {$/;"	F
checkParentPathsSync	nvim/plugged/coc.nvim/build/index.js	/^function checkParentPathsSync (src, srcStat, dest, funcName) {$/;"	F
checkPathExt	nvim/plugged/coc.nvim/build/index.js	/^function checkPathExt (path, options) {$/;"	F
checkPaths	nvim/plugged/coc.nvim/build/index.js	/^function checkPaths (src, dest, funcName, cb) {$/;"	F
checkPathsSync	nvim/plugged/coc.nvim/build/index.js	/^function checkPathsSync (src, dest, funcName) {$/;"	F
checkPosition	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public async checkPosition(): Promise<void> {$/;"	m
checkProcessDied	nvim/plugged/coc.nvim/build/index.js	/^    checkProcessDied(childProcess) {$/;"	M
checkProcessDied	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private checkProcessDied(childProcess: ChildProcess | undefined): void {$/;"	m
checkSigns	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public async checkSigns(): Promise<void> {$/;"	m
checkStat	nvim/plugged/coc.nvim/build/index.js	/^function checkStat (stat, options) {$/;"	F
checkStat	nvim/plugged/coc.nvim/build/index.js	/^function checkStat (stat, path, options) {$/;"	F
checkTrigger	nvim/plugged/coc.nvim/build/index.js	/^    checkTrigger(source, pre, character) {$/;"	M
checkTrigger	nvim/plugged/coc.nvim/src/sources.ts	/^  public checkTrigger(source: ISource, pre: string, character: string): boolean {$/;"	m
check_back_space	nvim/init.vim	/^function! s:check_back_space() abort$/;"	f
check_defined	nvim/plugged/vim-airline/autoload/airline/init.vim	/^function! s:check_defined(variable, default)$/;"	f
check_defined_section	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:check_defined_section(name)$/;"	f
check_errors	nvim/plugged/ale/test/script/custom-linting-rules	/^check_errors() {$/;"	f
check_lines	nvim/plugged/ale/test/script/block-padding-checker	/^def check_lines(line_iter):$/;"	f
check_mixed_indent	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent()$/;"	f
check_mixed_indent_file	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent_file()$/;"	f
check_ruby	nvim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
check_users_value	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:check_users_value(key, users_value, value_infos, comes_from_global_variable)$/;"	f
checkbox	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			checkbox: function(a){return "checkbox"==a.type;},$/;"	M
checkbox	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let checkbox = '\\s*\\[\\(.\\)\\]\\s*'$/;"	v
checked	nvim/plugged/coc.nvim/src/model/extension.ts	/^  private checked = false$/;"	m
checked	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				this.checked = (jQuery.inArray(this.value, value) >= 0 ||$/;"	M
checked	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			checked: function(a){return a.checked;},$/;"	M
checkout	nvim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
children	nvim/plugged/coc.nvim/build/index.js	/^  var children = []$/;"	A
children	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get children(): Marker[] {$/;"	m
children	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	children: function(elem){return jQuery.sibling(elem.firstChild);},$/;"	M
childrenIgnored	nvim/plugged/coc.nvim/build/index.js	/^function childrenIgnored (self, path) {$/;"	F
chmodFix	nvim/plugged/coc.nvim/build/index.js	/^  function chmodFix (orig) {$/;"	F
chmodFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function chmodFixSync (orig) {$/;"	F
choice	nvim/plugged/coc.nvim/build/index.js	/^            const choice = new Choice();$/;"	V
choice	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get choice(): Choice | undefined {$/;"	m
choices	nvim/plugged/coc.nvim/build/index.js	/^        let choices = [];$/;"	A
chomp	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
chooseAction	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async chooseAction(): Promise<void> {$/;"	m
chownErOk	nvim/plugged/coc.nvim/build/index.js	/^  function chownErOk (er) {$/;"	F
chownFix	nvim/plugged/coc.nvim/build/index.js	/^  function chownFix (orig) {$/;"	F
chownFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function chownFixSync (orig) {$/;"	F
chownr	nvim/plugged/coc.nvim/build/index.js	/^const chownr = (p, uid, gid, cb) => {$/;"	F
chownrKid	nvim/plugged/coc.nvim/build/index.js	/^const chownrKid = (p, child, uid, gid, cb) => {$/;"	F
chownrKidSync	nvim/plugged/coc.nvim/build/index.js	/^const chownrKidSync = (p, child, uid, gid) => {$/;"	F
chownrSync	nvim/plugged/coc.nvim/build/index.js	/^const chownrSync = (p, uid, gid) => {$/;"	F
chr	nvim/plugged/coc.nvim/build/index.js	/^      chr = (((chr - 0xD800) << 10) | (string.charCodeAt(i++) - 0xDC00)) + 0x10000;$/;"	M
chr	nvim/plugged/coc.nvim/build/index.js	/^      chr = (chr & 0x07)             << 18 |$/;"	M
chr	nvim/plugged/coc.nvim/build/index.js	/^      chr = (chr & 0x0F)             << 12 |$/;"	M
chr	nvim/plugged/coc.nvim/build/index.js	/^      chr = (chr & 0x1F) << 6 |$/;"	M
chr	nvim/plugged/coc.nvim/build/index.js	/^  var chr = 0;$/;"	V
chsh	nvim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
chunks	nvim/plugged/coc.nvim/build/index.js	/^                let chunks = [];$/;"	A
chunks	nvim/plugged/coc.nvim/build/index.js	/^            let chunks = commands.map(c => [c.title + ' ', 'CocCodeLens']);$/;"	F
classFilter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	classFilter: function(r,m,not){$/;"	M
className	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	className: {$/;"	P
clean	nvim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
clean	nvim/plugged/coc.nvim/build/index.js	/^function clean (version, options) {$/;"	F
clean	nvim/plugged/coc.nvim/src/model/mru.ts	/^  public async clean(): Promise<void> {$/;"	m
clean	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	clean: function( elems, context ) {$/;"	M
cleanExtensions	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async cleanExtensions(): Promise<void> {$/;"	m
cleanUp	nvim/plugged/coc.nvim/build/index.js	/^    cleanUp(channel = true, diagnostics = true) {$/;"	M
cleanUp	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private cleanUp(channel: boolean = true, diagnostics: boolean = true): void {$/;"	m
clean_url	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:clean_url(url)$/;"	f
clear	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.clear = function () {$/;"	M
clear	nvim/plugged/coc.nvim/build/index.js	/^    clear() {$/;"	M
clear	nvim/plugged/coc.nvim/build/index.js	/^  debounced.clear = function() {$/;"	M
clear	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public async clear(): Promise<void> {$/;"	m
clear	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public clear(): void {$/;"	m
clear	nvim/plugged/coc.nvim/src/model/db.ts	/^  public clear(): void {$/;"	m
clear	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  public clear(): void {$/;"	m
clear	nvim/plugged/vim-airline/t/init.vim	/^function! s:clear()$/;"	f
clear	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:clear(bufnr)$/;"	f
clearContext	nvim/plugged/coc.nvim/build/index.js	/^  clearContext() {$/;"	M
clearHighlight	nvim/plugged/coc.nvim/build/index.js	/^    clearHighlight() {$/;"	M
clearHighlight	nvim/plugged/coc.nvim/build/index.js	/^    clearHighlight(args = {}) {$/;"	M
clearHighlight	nvim/plugged/coc.nvim/build/index.js	/^    clearHighlight(bufnr) {$/;"	M
clearHighlight	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public clearHighlight(): void {$/;"	m
clearHighlight	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  public clearHighlight(bufnr: number): void {$/;"	m
clearHighlight	nvim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^  public clearHighlight(): void {$/;"	m
clearHighlight	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public clearHighlight(): void {$/;"	m
clearMatchIds	nvim/plugged/coc.nvim/build/index.js	/^    clearMatchIds(ids) {$/;"	M
clearMatchIds	nvim/plugged/coc.nvim/src/model/document.ts	/^  public clearMatchIds(ids: Set<number> | number[]): void {$/;"	m
clearNamespace	nvim/plugged/coc.nvim/build/index.js	/^    clearNamespace(id, lineStart = 0, lineEnd = -1) {$/;"	M
clearOldFolds	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
clearPartialMessageTimer	nvim/plugged/coc.nvim/build/index.js	/^    clearPartialMessageTimer() {$/;"	M
clearSelection	nvim/plugged/coc.nvim/build/index.js	/^    clearSelection() {$/;"	M
clearSelection	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public clearSelection(): void {$/;"	m
clearSigns	nvim/plugged/coc.nvim/build/index.js	/^    clearSigns() {$/;"	M
clearSigns	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private clearSigns(): void {$/;"	m
clearStateChar	nvim/plugged/coc.nvim/build/index.js	/^  function clearStateChar () {$/;"	F
clearTimer	nvim/plugged/coc.nvim/build/index.js	/^function clearTimer() {$/;"	F
clear_matches	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:clear_matches()$/;"	f
client	nvim/plugged/coc.nvim/build/index.js	/^                let client = new net_1.default.Socket();$/;"	V
client	nvim/plugged/coc.nvim/build/index.js	/^            client: this$/;"	P
client	nvim/plugged/coc.nvim/build/index.js	/^            let client = new language_client_1.LanguageClient(id, key, opts[1], opts[0]);$/;"	V
client	nvim/plugged/coc.nvim/src/watchman.ts	/^  private client: Client$/;"	m
clientOptions	nvim/plugged/coc.nvim/build/index.js	/^        let clientOptions;$/;"	V
clientOptions	nvim/plugged/coc.nvim/build/index.js	/^    let clientOptions = {$/;"	O
clientOptions	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get clientOptions(): LanguageClientOptions {$/;"	m
clientSocket	nvim/plugged/coc.nvim/build/index.js	/^    let clientSocket = new net_1.default.Socket();$/;"	V
clientsMap	nvim/plugged/coc.nvim/build/index.js	/^const clientsMap = new Map();$/;"	V
clobber	nvim/plugged/coc.nvim/build/index.js	/^    clobber: false,$/;"	P
clone	nvim/plugged/coc.nvim/build/index.js	/^	var clone = [];$/;"	A
clone	nvim/plugged/coc.nvim/build/index.js	/^	var val, src, clone;$/;"	V
clone	nvim/plugged/coc.nvim/build/index.js	/^                const clone = new Placeholder(placeholder.index);$/;"	V
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
clone	nvim/plugged/coc.nvim/build/index.js	/^  function clone (o) {$/;"	F
clone	nvim/plugged/coc.nvim/build/index.js	/^function clone (obj) {$/;"	F
clone	nvim/plugged/coc.nvim/src/configuration/model.ts	/^  public clone(): ConfigurationModel {$/;"	m
clone	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public clone(): Chars {$/;"	m
clone	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public abstract clone(): Marker$/;"	m
clone	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Choice {$/;"	m
clone	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): FormatString {$/;"	m
clone	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Placeholder {$/;"	m
clone	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Text {$/;"	m
clone	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): TextmateSnippet {$/;"	m
clone	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Transform {$/;"	m
clone	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Variable {$/;"	m
clone	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	clone: function( events ) {$/;"	M
cloneArray	nvim/plugged/coc.nvim/build/index.js	/^  function cloneArray (a, fn) {$/;"	F
cloneProto	nvim/plugged/coc.nvim/build/index.js	/^  function cloneProto (o) {$/;"	F
cloneSpecificValue	nvim/plugged/coc.nvim/build/index.js	/^function cloneSpecificValue(val) {$/;"	F
clone_marker_from_to	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:clone_marker_from_to(from, to)$/;"	f
close	nvim/plugged/coc.nvim/build/index.js	/^    close() {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^    close(cancel = true) {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^    close(force, isNotify) {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^    function close (fd, cb) {$/;"	F
close	nvim/plugged/coc.nvim/build/index.js	/^    nativeHandle.close = () => {}$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^  fs.close = (function (fs$close) {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^module.exports.close = (function (fs$close) { return function (fd, cb) {$/;"	M
close	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  public close(): void {$/;"	m
close	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  public close(cancel = true): void {$/;"	m
closeChildren	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node)$/;"	f
closeCurrentDir	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node)$/;"	f
closeEmitter	nvim/plugged/coc.nvim/build/index.js	/^    let closeEmitter = new events_1.Emitter();$/;"	V
closeFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
closeFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
closeHandler	nvim/plugged/coc.nvim/build/index.js	/^        let closeHandler = () => {$/;"	F
closeHandler	nvim/plugged/coc.nvim/build/index.js	/^    function closeHandler() {$/;"	F
closeKindFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
closeSync	nvim/plugged/coc.nvim/build/index.js	/^    function closeSync (fd) {$/;"	F
closeSync	nvim/plugged/coc.nvim/build/index.js	/^  fs.closeSync = (function (fs$closeSync) {$/;"	M
closeSync	nvim/plugged/coc.nvim/build/index.js	/^module.exports.closeSync = (function (fs$closeSync) { return function (fd) {$/;"	M
closeTreeWindow	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow()$/;"	f
close_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:close_hunk_preview_window()$/;"	f
close_tag_def_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_def_list(deflist, ldest)$/;"	f
close_tag_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_list(lists, ldest)$/;"	f
close_tag_math	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_math(math, ldest)$/;"	f
close_tag_para	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_para(para, ldest)$/;"	f
close_tag_pre	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_pre(pre, ldest)$/;"	f
close_tag_quote	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_quote(quote, ldest)$/;"	f
close_tag_row	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  function! s:close_tag_row(row, header, ldest, header_ids)$/;"	f
close_tag_table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_table(table, ldest, header_ids)$/;"	f
closed	nvim/plugged/coc.nvim/build/index.js	/^    closed() {$/;"	M
closed	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public closed(): CloseAction {$/;"	m
cluster	nvim/plugged/coc.nvim/build/index.js	/^        msg.cluster = {$/;"	P
clusterInfo	nvim/plugged/coc.nvim/build/index.js	/^  function clusterInfo() {$/;"	F
cmd	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> cmd <C-R>=DockerfileReplaceInstruction("cmd", "CMD")<CR>$/;"	m
cmd	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^    let cmd = s:is_win ? join(a:cmd, ' ') : a:cmd$/;"	v
cmd	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^      let cmd = 'cmd.exe \/C "'.cmd.'"'$/;"	v
cmd	nvim/plugged/coc.nvim/build/index.js	/^        let cmd = [this.cmd, ...this.args];$/;"	A
cmd_history_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
cmds	nvim/plugged/coc.nvim/build/index.js	/^        let cmds = ['echo ""'];$/;"	A
cmds	nvim/plugged/coc.nvim/build/index.js	/^        let cmds = [];$/;"	A
cmp	nvim/plugged/coc.nvim/build/index.js	/^function cmp (a, op, b, loose) {$/;"	F
coc	nvim/plugged/coc.nvim/build/index.js	/^                    coc: ">= 0.0.1"$/;"	P
coc#_cancel	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_cancel()$/;"	f
coc#_complete	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_complete() abort$/;"	f
coc#_do_complete	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_do_complete(start, items, preselect)$/;"	f
coc#_hide	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_hide() abort$/;"	f
coc#_insert_key	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_insert_key(method, key, ...) abort$/;"	f
coc#_map	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_map()$/;"	f
coc#_select	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select() abort$/;"	f
coc#_select_confirm	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select_confirm()$/;"	f
coc#_selected	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_selected()$/;"	f
coc#_unmap	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unmap()$/;"	f
coc#_unwatch	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unwatch(key)$/;"	f
coc#_watch	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_watch(key)$/;"	f
coc#add_command	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_command(id, cmd, ...)$/;"	f
coc#add_extension	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_extension(...)$/;"	f
coc#api#call	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#call(method, args) abort$/;"	f
coc#api#func_names	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#func_names() abort$/;"	f
coc#api#notify	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#notify(method, args) abort$/;"	f
coc#client#create	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#create(name, command)$/;"	f
coc#client#is_running	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#is_running(name) abort$/;"	f
coc#client#notify	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#notify(name, method, args)$/;"	f
coc#client#on_response	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#on_response(name, id, resp, isErr)$/;"	f
coc#client#open_log	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#open_log()$/;"	f
coc#client#request	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request(name, method, args)$/;"	f
coc#client#request_async	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request_async(name, method, args, cb)$/;"	f
coc#client#restart	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart(name) abort$/;"	f
coc#client#restart_all	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart_all()$/;"	f
coc#client#stop	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#stop(name) abort$/;"	f
coc#config	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#config(section, value)$/;"	f
coc#do_notify	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#do_notify(id, method, result)$/;"	f
coc#expandable	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandable() abort$/;"	f
coc#expandableOrJumpable	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandableOrJumpable() abort$/;"	f
coc#jumpable	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#jumpable() abort$/;"	f
coc#list#create	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#create(position, height, name, numberSelect)$/;"	f
coc#list#get_chars	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#get_chars()$/;"	f
coc#list#getc	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getc() abort$/;"	f
coc#list#getchar	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getchar() abort$/;"	f
coc#list#has_preview	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#has_preview()$/;"	f
coc#list#options	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#options(...)$/;"	f
coc#list#prompt_start	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#prompt_start() abort$/;"	f
coc#list#restore	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#restore(winid, height)$/;"	f
coc#list#set_height	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#set_height(height) abort$/;"	f
coc#list#setlines	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setlines(lines, append)$/;"	f
coc#list#setup	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setup(source)$/;"	f
coc#list#start_prompt	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#start_prompt()$/;"	f
coc#list#status	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#status(name)$/;"	f
coc#list#stop_prompt	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#stop_prompt(...)$/;"	f
coc#on_enter	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_enter()$/;"	f
coc#on_notify	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_notify(id, method, Cb)$/;"	f
coc#refresh	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#refresh() abort$/;"	f
coc#rpc#async_request	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_request(id, method, args)$/;"	f
coc#rpc#async_response	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_response(id, resp, isErr) abort$/;"	f
coc#rpc#get_errors	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#get_errors()$/;"	f
coc#rpc#kill	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#kill()$/;"	f
coc#rpc#notify	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#notify(method, args) abort$/;"	f
coc#rpc#ready	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#ready()$/;"	f
coc#rpc#request	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request(method, args) abort$/;"	f
coc#rpc#request_async	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request_async(method, args, cb) abort$/;"	f
coc#rpc#restart	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#restart()$/;"	f
coc#rpc#start_server	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#start_server()$/;"	f
coc#rpc#started	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#started() abort$/;"	f
coc#rpc#stop	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#stop()$/;"	f
coc#snippet#_select_mappings	nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#_select_mappings()$/;"	f
coc#snippet#disable	nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#disable()$/;"	f
coc#snippet#enable	nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#enable()$/;"	f
coc#snippet#show_choices	nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#show_choices(lnum, col, len, values) abort$/;"	f
coc#source#email#complete	nvim/plugged/coc.nvim/src/__tests__/autoload/coc/source/email.vim	/^function! coc#source#email#complete(opt, cb) abort$/;"	f
coc#source#email#init	nvim/plugged/coc.nvim/src/__tests__/autoload/coc/source/email.vim	/^function! coc#source#email#init() abort$/;"	f
coc#source#email#should_complete	nvim/plugged/coc.nvim/src/__tests__/autoload/coc/source/email.vim	/^function! coc#source#email#should_complete(opt) abort$/;"	f
coc#start	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#start(...)$/;"	f
coc#status	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#status()$/;"	f
coc#task#running	nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#running(id)$/;"	f
coc#task#start	nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#start(id, opts)$/;"	f
coc#task#stop	nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#stop(id)$/;"	f
coc#terminal#close	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#close(bufnr) abort$/;"	f
coc#terminal#send	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#send(bufnr, text, add_new_line) abort$/;"	f
coc#terminal#start	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#start(cmd, cwd, env) abort$/;"	f
coc#util#add_matchids	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#add_matchids(ids)$/;"	f
coc#util#change_lines	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#change_lines(bufnr, list) abort$/;"	f
coc#util#clear_signs	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clear_signs()$/;"	f
coc#util#clearmatches	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clearmatches(ids, ...)$/;"	f
coc#util#close	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close(id) abort$/;"	f
coc#util#close_popup	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close_popup()$/;"	f
coc#util#close_win	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close_win(id)$/;"	f
coc#util#cursor	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#cursor()$/;"	f
coc#util#diff_content	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#diff_content(lines) abort$/;"	f
coc#util#do_autocmd	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_autocmd(name) abort$/;"	f
coc#util#do_complete	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_complete(name, opt, cb) abort$/;"	f
coc#util#echo_hover	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_hover(msg)$/;"	f
coc#util#echo_line	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_line()$/;"	f
coc#util#echo_lines	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_lines(lines)$/;"	f
coc#util#echo_messages	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_messages(hl, msgs)$/;"	f
coc#util#echo_signatures	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_signatures(signatures) abort$/;"	f
coc#util#execute	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#execute(cmd)$/;"	f
coc#util#extension_root	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#extension_root() abort$/;"	f
coc#util#float_hide	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_hide()$/;"	f
coc#util#float_jump	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_jump()$/;"	f
coc#util#float_scroll	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_scroll(forward)$/;"	f
coc#util#float_scrollable	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_scrollable()$/;"	f
coc#util#get_bufoptions	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_bufoptions(bufnr) abort$/;"	f
coc#util#get_changeinfo	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_changeinfo()$/;"	f
coc#util#get_complete_option	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_complete_option()$/;"	f
coc#util#get_config_home	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config_home()$/;"	f
coc#util#get_content	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_content(bufnr)$/;"	f
coc#util#get_float	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_float()$/;"	f
coc#util#get_input	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_input()$/;"	f
coc#util#get_syntax_name	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_syntax_name(lnum, col)$/;"	f
coc#util#getpid	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#getpid()$/;"	f
coc#util#has_float	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_float()$/;"	f
coc#util#has_preview	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_preview()$/;"	f
coc#util#highlight_options	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#highlight_options()$/;"	f
coc#util#init_virtual_hl	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#init_virtual_hl()$/;"	f
coc#util#install	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install(...) abort$/;"	f
coc#util#install_extension	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install_extension(args) abort$/;"	f
coc#util#is_preview	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#is_preview(bufnr)$/;"	f
coc#util#iterm_open	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#iterm_open(dir)$/;"	f
coc#util#job_command	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#job_command()$/;"	f
coc#util#jump	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jump(cmd, filepath, ...) abort$/;"	f
coc#util#jumpTo	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jumpTo(line, character) abort$/;"	f
coc#util#move_cursor	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#move_cursor(delta)$/;"	f
coc#util#on_error	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#on_error(msg) abort$/;"	f
coc#util#open_file	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_file(cmd, file)$/;"	f
coc#util#open_files	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_files(files)$/;"	f
coc#util#open_terminal	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_terminal(opts) abort$/;"	f
coc#util#open_url	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_url(url)$/;"	f
coc#util#pclose	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#pclose()$/;"	f
coc#util#pick_color	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#pick_color(default_color)$/;"	f
coc#util#platform	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#platform()$/;"	f
coc#util#preview_info	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#preview_info(info, ...) abort$/;"	f
coc#util#prompt_confirm	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#prompt_confirm(title)$/;"	f
coc#util#rebuild	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#rebuild()$/;"	f
coc#util#refactor_fold_text	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#refactor_fold_text(lnum) abort$/;"	f
coc#util#refactor_foldlevel	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#refactor_foldlevel(lnum) abort$/;"	f
coc#util#remote_fns	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#remote_fns(name)$/;"	f
coc#util#root_patterns	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#root_patterns()$/;"	f
coc#util#run_terminal	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#run_terminal(opts, cb)$/;"	f
coc#util#set_buf_var	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#set_buf_var(bufnr, name, val) abort$/;"	f
coc#util#setline	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#setline(lnum, line)$/;"	f
coc#util#timer	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#timer(method, args)$/;"	f
coc#util#unmap	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unmap(bufnr, keys) abort$/;"	f
coc#util#unplace_signs	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unplace_signs(bufnr, sign_ids)$/;"	f
coc#util#update_extensions	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#update_extensions(...) abort$/;"	f
coc#util#valid_state	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#valid_state()$/;"	f
coc#util#version	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#version()$/;"	f
coc#util#vim_info	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#vim_info()$/;"	f
coc#util#win_position	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#win_position()$/;"	f
coc#util#with_callback	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#with_callback(method, args, cb)$/;"	f
cocAction	nvim/plugged/coc.nvim/src/plugin.ts	/^  public async cocAction(...args: any[]): Promise<any> {$/;"	m
code	nvim/plugged/ale/run-tests.bat	/^set code=%ERRORLEVEL%$/;"	v
code	nvim/plugged/coc.nvim/build/index.js	/^    let code = 'ENOTDIR'$/;"	V
codeActionKind	nvim/plugged/coc.nvim/build/index.js	/^            codeActionKind: {$/;"	P
codeActionKinds	nvim/plugged/coc.nvim/build/index.js	/^        let codeActionKinds;$/;"	V
codeActionLiteralSupport	nvim/plugged/coc.nvim/build/index.js	/^        cap.codeActionLiteralSupport = {$/;"	P
codeActionManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private codeActionManager = new CodeActionManager()$/;"	m
codeActionRange	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async codeActionRange(start: number, end: number, only: string): Promise<void> {$/;"	m
codeActions	nvim/plugged/coc.nvim/build/index.js	/^        let codeActions = [];$/;"	A
codeLensManager	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private codeLensManager: CodeLensManager$/;"	m
codeLensManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private codeLensManager = new CodeLensManager()$/;"	m
codeLensMap	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private codeLensMap: Map<number, CodeLensInfo> = new Map()$/;"	m
codec	nvim/plugged/coc.nvim/build/index.js	/^exports.codec = {$/;"	P
codes	nvim/plugged/coc.nvim/build/index.js	/^const codes = new Map([$/;"	V
coerce	nvim/plugged/coc.nvim/build/index.js	/^	function coerce(val) {$/;"	F
coerce	nvim/plugged/coc.nvim/build/index.js	/^  function coerce(val) {$/;"	F
coerce	nvim/plugged/coc.nvim/build/index.js	/^function coerce (version, options) {$/;"	F
col	nvim/plugged/coc.nvim/build/index.js	/^                    col: startcol,$/;"	P
colEnd	nvim/plugged/coc.nvim/build/index.js	/^                                                colEnd: col,$/;"	P
colEnd	nvim/plugged/coc.nvim/build/index.js	/^                                        colEnd: col,$/;"	P
colStart	nvim/plugged/coc.nvim/build/index.js	/^                                let colStart = 0;$/;"	V
colStart	nvim/plugged/coc.nvim/build/index.js	/^                colStart: 0,$/;"	P
col_count	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:col_count(lnum)$/;"	f
collect_headers	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:collect_headers()$/;"	f
collection	nvim/plugged/coc.nvim/build/index.js	/^        let collection = collections.find(o => o.name == 'config');$/;"	F
collection	nvim/plugged/coc.nvim/build/index.js	/^        let collection = new collection_1.default(name);$/;"	V
collections	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private collections: DiagnosticCollection[] = []$/;"	m
color	nvim/plugged/ale/test/script/run-vader-tests	/^function color-vader-output() {$/;"	f
color	nvim/plugged/coc.nvim/build/index.js	/^            color: color,$/;"	P
color	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function color( elem ) {$/;"	F
colorArr	nvim/plugged/coc.nvim/build/index.js	/^        let colorArr = [(color.red * 255).toFixed(0), (color.green * 255).toFixed(0), (color.blue * 255).toFixed(0)];$/;"	A
colorCode	nvim/plugged/coc.nvim/build/index.js	/^		const colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);$/;"	V
colorCode	nvim/plugged/coc.nvim/build/index.js	/^    var colorCode = "\\x1B[3" + (c < 8 ? c : '8;5;' + c);$/;"	V
colorId	nvim/plugged/coc.nvim/src/model/document.ts	/^  private colorId = 1080$/;"	m
coloredLayout	nvim/plugged/coc.nvim/build/index.js	/^  coloredLayout: colouredLayout,$/;"	P
colorize	nvim/plugged/coc.nvim/build/index.js	/^function colorize(str, style) {$/;"	F
colorizeEnd	nvim/plugged/coc.nvim/build/index.js	/^function colorizeEnd(style) {$/;"	F
colorizeStart	nvim/plugged/coc.nvim/build/index.js	/^function colorizeStart(style) {$/;"	F
colors	nvim/plugged/coc.nvim/build/index.js	/^        let colors;$/;"	V
colors	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public get colors(): ColorInformation[] {$/;"	m
colors	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private colors: Colors$/;"	m
colors	nvim/plugged/vim-airline/t/themes.vim	/^    let colors = airline#themes#get_highlight('Foo')$/;"	v
colouredLayout	nvim/plugged/coc.nvim/build/index.js	/^function colouredLayout(loggingEvent) {$/;"	F
columnNumber	nvim/plugged/coc.nvim/build/index.js	/^  function columnNumber(loggingEvent) {$/;"	F
columns	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private get columns(): number {$/;"	m
command	nvim/plugged/coc.nvim/build/index.js	/^    command(arg, isNotify) {$/;"	M
command	nvim/plugged/coc.nvim/build/index.js	/^    command(args) {$/;"	M
command	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.command = function(args, done) {$/;"	M
command	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async command(command: string): Promise<void> {$/;"	m
command	nvim/plugged/coc.nvim/src/watchman.ts	/^  private command(args: any[]): Promise<any> {$/;"	m
commandList	nvim/plugged/coc.nvim/src/commands.ts	/^  public get commandList(): CommandItem[] {$/;"	m
commandOutput	nvim/plugged/coc.nvim/build/index.js	/^    commandOutput(arg) {$/;"	M
command_exists	nvim/plugged/coc.nvim/install.sh	/^command_exists() {$/;"	f
command_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
commands	nvim/plugged/coc.nvim/build/index.js	/^            let commands = codeLenes.map(codeLens => codeLens.command);$/;"	F
commands	nvim/plugged/coc.nvim/build/index.js	/^        let commands = [];$/;"	A
commands	nvim/plugged/coc.nvim/build/index.js	/^        let commands = current.map(o => o.command);$/;"	F
commands	nvim/plugged/coc.nvim/src/commands.ts	/^  private readonly commands = new Map<string, CommandItem>()$/;"	m
commitCharactersSupport	nvim/plugged/coc.nvim/build/index.js	/^            commitCharactersSupport: true,$/;"	P
commits	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(buffer_local, args)$/;"	f
commits_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
commmand	nvim/plugged/coc.nvim/build/index.js	/^    commmand(cmd) {$/;"	M
common_prefix	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_prefix(a, b)$/;"	f
common_suffix	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_suffix(a, b, start)$/;"	f
commonlength	nvim/plugged/coc.nvim/build/index.js	/^  var commonlength;$/;"	V
comparatorTrimReplace	nvim/plugged/coc.nvim/build/index.js	/^var comparatorTrimReplace = '$1$2$3'$/;"	V
compare	nvim/plugged/coc.nvim/build/index.js	/^  compare: function(other) {$/;"	M
compare	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.compare = function (other) {$/;"	M
compare	nvim/plugged/coc.nvim/build/index.js	/^function compare (a, b, loose) {$/;"	F
compare	nvim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^    function compare(a: string): string {$/;"	f
compareBuild	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.compareBuild = function (other) {$/;"	M
compareBuild	nvim/plugged/coc.nvim/build/index.js	/^function compareBuild (a, b, loose) {$/;"	F
compareByIndex	nvim/plugged/coc.nvim/build/index.js	/^    static compareByIndex(a, b) {$/;"	M
compareByIndex	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public static compareByIndex(a: Placeholder, b: Placeholder): number {$/;"	m
compareIdentifiers	nvim/plugged/coc.nvim/build/index.js	/^function compareIdentifiers (a, b) {$/;"	F
compareLoose	nvim/plugged/coc.nvim/build/index.js	/^function compareLoose (a, b) {$/;"	F
compareMain	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.compareMain = function (other) {$/;"	M
comparePosition	nvim/plugged/coc.nvim/build/index.js	/^function comparePosition(position, other) {$/;"	F
comparePosition	nvim/plugged/coc.nvim/src/util/position.ts	/^export function comparePosition(position: Position, other: Position): number {$/;"	f
comparePre	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.comparePre = function (other) {$/;"	M
compare_by_kind	nvim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
compare_by_line	nvim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
compare_git_uri	nvim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
compare_pos	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:compare_pos(l, r)$/;"	f
compileInSandbox	nvim/plugged/coc.nvim/build/index.js	/^function compileInSandbox(sandbox) {$/;"	F
compileInSandbox	nvim/plugged/coc.nvim/src/util/factory.ts	/^function compileInSandbox(sandbox: ISandbox): Function {$/;"	f
complete	nvim/plugged/coc.nvim/build/index.js	/^        let complete = new complete_1.default(option, document, this.recentScores, config, arr, nvim);$/;"	V
complete	nvim/plugged/coc.nvim/build/index.js	/^  function complete(err) {$/;"	F
complete	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private complete: Complete | null = null$/;"	m
complete	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			complete: function(res, status){$/;"	M
complete	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function complete(){$/;"	F
complete	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		opt.complete = function(){$/;"	M
completeConfig	nvim/plugged/coc.nvim/build/index.js	/^        this.completeConfig = {$/;"	P
completeConfig	nvim/plugged/coc.nvim/src/languages.ts	/^  private completeConfig: CompleteConfig$/;"	m
completeInComplete	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public async completeInComplete(resumeInput: string): Promise<VimCompleteItem[]> {$/;"	m
completeItemKeys	nvim/plugged/coc.nvim/build/index.js	/^const completeItemKeys = ['abbr', 'menu', 'info', 'kind', 'icase', 'dup', 'empty', 'user_data'];$/;"	A
completeItems	nvim/plugged/coc.nvim/build/index.js	/^        let completeItems = [];$/;"	A
completeOpt	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private get completeOpt(): string {$/;"	m
completeOpt	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get completeOpt(): string {$/;"	m
completeSource	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  private async completeSource(source: ISource): Promise<void> {$/;"	m
complete_insert	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
complete_trigger	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
completed	nvim/plugged/coc.nvim/build/index.js	/^  let completed = 0;$/;"	V
completing	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  private completing: Set<string> = new Set()$/;"	m
completionItem	nvim/plugged/coc.nvim/build/index.js	/^        completion.completionItem = {$/;"	P
completionItemKind	nvim/plugged/coc.nvim/build/index.js	/^        completion.completionItemKind = { valueSet: SupportedCompletionItemKinds };$/;"	P
completionItemKindMap	nvim/plugged/coc.nvim/src/languages.ts	/^  private completionItemKindMap: Map<CompletionItemKind, string>$/;"	m
completionKindString	nvim/plugged/coc.nvim/build/index.js	/^function completionKindString(kind, map, defaultValue = '') {$/;"	F
completionKindString	nvim/plugged/coc.nvim/src/util/complete.ts	/^export function completionKindString(kind: CompletionItemKind, map: Map<CompletionItemKind, string>, defaultValue = ''): string {$/;"	f
completionPromise	nvim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private completionPromise: Thenable<any> | null$/;"	m
completionProvider	nvim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^    completionProvider: { resolveProvider: true, triggerCharacters: ['"', ':'] },$/;"	P
compress	nvim/plugged/coc.nvim/build/index.js	/^      compress: false,$/;"	P
compute	nvim/plugged/coc.nvim/build/index.js	/^function compute(needle, haystack, D, M) {$/;"	F
compute	nvim/plugged/coc.nvim/src/util/fzy.ts	/^function compute(needle, haystack, D, M): void {$/;"	f
computeClientCapabilities	nvim/plugged/coc.nvim/build/index.js	/^    computeClientCapabilities() {$/;"	M
computeClientCapabilities	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private computeClientCapabilities(): ClientCapabilities {$/;"	m
computeIndentLevel	nvim/plugged/coc.nvim/build/index.js	/^function computeIndentLevel(content, options) {$/;"	F
computeMessageParams	nvim/plugged/coc.nvim/build/index.js	/^    function computeMessageParams(type, params) {$/;"	F
computed	nvim/plugged/coc.nvim/src/util/lazy.ts	/^  private computed: boolean$/;"	m
compver	nvim/plugged/coc.nvim/build/index.js	/^      var compver = new SemVer(comparator.semver.version)$/;"	V
concat	nvim/plugged/coc.nvim/build/index.js	/^    Buffer.concat = (args) => args$/;"	M
concat	nvim/plugged/coc.nvim/build/index.js	/^function concat(list, length) {$/;"	F
concurrent	nvim/plugged/coc.nvim/build/index.js	/^function concurrent(fns, limit = Infinity) {$/;"	F
concurrent	nvim/plugged/coc.nvim/src/util/index.ts	/^export function concurrent(fns: (() => Promise<any>)[], limit = Infinity): Promise<any[]> {$/;"	f
config	nvim/plugged/coc.nvim/build/index.js	/^        this.config = {$/;"	P
config	nvim/plugged/coc.nvim/build/index.js	/^    let config = {};$/;"	O
config	nvim/plugged/coc.nvim/src/completion/complete.ts	/^    private config: CompleteConfig,$/;"	m
config	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private config: FloatingConfig$/;"	m
config	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public config: CompleteConfig$/;"	m
config	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private config: Config$/;"	m
config	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public config: DiagnosticConfig$/;"	m
config	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public readonly config: RefactorConfig$/;"	m
config	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public config: ListConfiguration$/;"	m
config	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public config: ListConfiguration$/;"	m
config	nvim/plugged/coc.nvim/src/list/mappings.ts	/^    private config: ListConfiguration) {$/;"	m
config	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def config do$/;"	f	class:example.project
configAdapter	nvim/plugged/coc.nvim/build/index.js	/^  const configAdapter = {$/;"	O
configFiles	nvim/plugged/coc.nvim/build/index.js	/^  var configFiles = []$/;"	A
configForCategory	nvim/plugged/coc.nvim/build/index.js	/^const configForCategory = (category) => {$/;"	F
config_to_url	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp config_to_url(_, %{url: url}), do: url$/;"	f
config_to_url	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp config_to_url(repo, %{$/;"	f
configs	nvim/plugged/coc.nvim/build/index.js	/^  var configs = [defaults]$/;"	A
configs	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp configs do$/;"	f
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^    configurable: true$/;"	P
configuration	nvim/plugged/coc.nvim/build/index.js	/^                    configuration: {$/;"	P
configuration	nvim/plugged/coc.nvim/build/index.js	/^            let configuration = params => {$/;"	F
configuration	nvim/plugged/coc.nvim/build/index.js	/^        let configuration;$/;"	V
configuration	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public get configuration(): Configuration {$/;"	m
configuration	nvim/plugged/coc.nvim/src/list/configuration.ts	/^  private configuration: WorkspaceConfiguration$/;"	m
configurations	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly configurations: Configurations$/;"	m
configure	nvim/plugged/coc.nvim/build/index.js	/^const configure = (candidate) => {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts, findAppender) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts, findAppender, levels) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(configurationFileOrObject) {$/;"	F
conflict_marker	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:conflict_marker()$/;"	f
connect	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.connect = function() {$/;"	M
connectResolve	nvim/plugged/coc.nvim/build/index.js	/^    let connectResolve;$/;"	V
connected	nvim/plugged/coc.nvim/build/index.js	/^    let connected = new Promise((resolve, _reject) => {$/;"	F
connected	nvim/plugged/coc.nvim/build/index.js	/^    let connected = new Promise((resolve, _reject) => {$/;"	V
connection	nvim/plugged/coc.nvim/build/index.js	/^    let connection = {$/;"	O
console	nvim/plugged/coc.nvim/build/index.js	/^        console: {$/;"	P
consoleAppender	nvim/plugged/coc.nvim/build/index.js	/^function consoleAppender(layout, timezoneOffset) {$/;"	F
constant	nvim/plugged/coc.nvim/build/index.js	/^function constant(value) {$/;"	F
constructor	nvim/plugged/coc.nvim/build/index.js	/^      constructor: {$/;"	P
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_client) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_client, _event, _type, _middleware, _createParams, _selectorFilter) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_client, _message) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_client, _notifyFileEvent) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_client, _setting) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_contents = {}) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_defaultConfiguration, _userConfiguration, _workspaceConfiguration, _memoryConfiguration = new model_1.ConfigurationModel()) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_method, _numberOfParams) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_options) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_resolve, _reject) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_snippetString, position, _variableResolver) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(arg1, arg2, arg3, arg4, arg5) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(binaryPath, channel) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(buffer, env) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(bufnr, config) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(client) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(client, _syncedDocuments) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(clientPromise, globPattern, ignoreCreateEvents, ignoreChangeEvents, ignoreDeleteEvents) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(cmd, args, nvim, _name) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(code, message) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(code, message, data) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(connection, cb, id) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(count) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(defaultDelay) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(encoding = 'utf8') {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(filepath) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(id, impl, thisArg, internal = false) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(id, name, clientOptions) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(index) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(index, shorthandName, ifValue, elseValue) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(keywordOption) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(manager) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(manager, nvim, config) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(name) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(name, base) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(name, nvim) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, buffer, window) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, bufnr) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, cmd = 'rg') {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, colors) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, config) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, document, srcId) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, env, preferTop = false, maxHeight = 999, maxWidth, autoHide = true) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, id) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, listMap) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, manager) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(option) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(option, document, recentScores, config, sources, nvim) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(owner) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(process) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(readable, encoding = 'utf8') {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(readable, writeable) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(requestId, cb) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(root) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(socket, encoding = 'utf-8') {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(socket, encoding = 'utf8') {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(srcId = -1) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(start, end) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(userConfigFile, _proxy) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(value) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(workspace) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(writable, encoding = 'utf8') {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor({ transport, data, client, }) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(categoryName, level, data, context, location) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(filePath, options) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(filename, pattern, options) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(filename, size, backups, options) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(level, levelStr, colour) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(name) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor: Int64,$/;"	P
constructor	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public constructor($/;"	m
constructor	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  public constructor($/;"	m
constructor	nvim/plugged/coc.nvim/src/util/lazy.ts	/^  public constructor(private expr: () => T) {$/;"	m
contains	nvim/plugged/coc.nvim/build/index.js	/^    contains(c) {$/;"	M
contains	nvim/plugged/coc.nvim/build/index.js	/^function contains(node, offset, includeRightBound) {$/;"	F
contains	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public contains(c: number): boolean {$/;"	m
contains	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			contains: function(a,i,m){return (a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m[3])>=0;},$/;"	M
content	nvim/plugged/coc.nvim/build/index.js	/^        let content = '';$/;"	V
content	nvim/plugged/coc.nvim/build/index.js	/^    let content;$/;"	V
content	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get content(): string {$/;"	m
content	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  public get content(): string {$/;"	m
contentChanges	nvim/plugged/coc.nvim/build/index.js	/^                contentChanges: changes$/;"	P
contentChanges	nvim/plugged/coc.nvim/build/index.js	/^        contentChanges: [{ text: document.getText() }]$/;"	P
contentType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		contentType: "application\/x-www-form-urlencoded",$/;"	P
contents	nvim/plugged/coc.nvim/src/configuration/model.ts	/^  public get contents(): any {$/;"	m
contents	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	contents: function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}$/;"	M
context	nvim/plugged/coc.nvim/build/index.js	/^                let context = { triggerKind, option: opt };$/;"	O
context	nvim/plugged/coc.nvim/build/index.js	/^                let context = {$/;"	O
context	nvim/plugged/coc.nvim/build/index.js	/^        context: { includeDeclaration: options.includeDeclaration }$/;"	P
context	nvim/plugged/coc.nvim/build/index.js	/^        let context = { diagnostics };$/;"	O
context	nvim/plugged/coc.nvim/build/index.js	/^        let context = {$/;"	O
context	nvim/plugged/coc.nvim/build/index.js	/^    this.context = {};$/;"	P
context	nvim/plugged/coc.nvim/build/index.js	/^  var timeout, args, context, timestamp, result;$/;"	V
context	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public get context(): ListContext {$/;"	m
contextDefined	nvim/plugged/coc.nvim/build/index.js	/^  function contextDefined(loggingEvent, specifier) {$/;"	F
continues	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:continues(ln,con)$/;"	f
contributes	nvim/plugged/coc.nvim/build/index.js	/^                contributes: {$/;"	P
controlCode	nvim/plugged/coc.nvim/build/index.js	/^const controlCode = '\\x1b';$/;"	V
convert	nvim/plugged/coc.nvim/build/index.js	/^    function convert(obj, split = false) {$/;"	F
convert	nvim/plugged/coc.nvim/src/configuration/util.ts	/^  function convert(obj: any, split = false): any {$/;"	f
convertErrors	nvim/plugged/coc.nvim/build/index.js	/^function convertErrors(uri, content, errors) {$/;"	F
convertErrors	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function convertErrors(uri: string, content: string, errors: ParseError[]): ErrorItem[] {$/;"	f
convertFiletype	nvim/plugged/coc.nvim/build/index.js	/^    convertFiletype(filetype) {$/;"	M
convertFiletype	nvim/plugged/coc.nvim/src/model/document.ts	/^  public convertFiletype(filetype: string): string {$/;"	m
convertLocation	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public async convertLocation(location: Location | LocationWithLine | string): Promise<Location> {$/;"	m
convertToTextDocumentItem	nvim/plugged/coc.nvim/build/index.js	/^function convertToTextDocumentItem(document) {$/;"	F
convertToTextDocumentItem	nvim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function convertToTextDocumentItem(document: TextDocument): TextDocumentItem {$/;"	f
convertVimCompleteItem	nvim/plugged/coc.nvim/build/index.js	/^    convertVimCompleteItem(item, shortcut, opt) {$/;"	M
convertVimCompleteItem	nvim/plugged/coc.nvim/src/languages.ts	/^  private convertVimCompleteItem(item: CompletionItem, shortcut: string, opt: CompleteOption): VimCompleteItem {$/;"	m
convert_file	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:convert_file(path_html, wikifile)$/;"	f
copy	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> copy <C-R>=DockerfileReplaceInstruction("copy", "COPY")<CR>$/;"	m
copy	nvim/plugged/coc.nvim/build/index.js	/^    var copy = { __proto__: obj.__proto__ }$/;"	O
copy	nvim/plugged/coc.nvim/build/index.js	/^  copy: function(targetBuffer, targetOffset) {$/;"	M
copy	nvim/plugged/coc.nvim/build/index.js	/^function copy (src, dest, opts, cb) {$/;"	F
copy	nvim/plugged/coc.nvim/build/index.js	/^function copy(target, targetStart, start, end) {$/;"	F
copyDir	nvim/plugged/coc.nvim/build/index.js	/^  function copyDir(dir) {$/;"	F
copyDir	nvim/plugged/coc.nvim/build/index.js	/^function copyDir (src, dest, opts) {$/;"	F
copyDir	nvim/plugged/coc.nvim/build/index.js	/^function copyDir (src, dest, opts, cb) {$/;"	F
copyDirItem	nvim/plugged/coc.nvim/build/index.js	/^function copyDirItem (item, src, dest, opts) {$/;"	F
copyDirItem	nvim/plugged/coc.nvim/build/index.js	/^function copyDirItem (items, item, src, dest, opts, cb) {$/;"	F
copyDirItems	nvim/plugged/coc.nvim/build/index.js	/^function copyDirItems (items, src, dest, opts, cb) {$/;"	F
copyFile	nvim/plugged/coc.nvim/build/index.js	/^  function copyFile(file, target) {$/;"	F
copyFile	nvim/plugged/coc.nvim/build/index.js	/^function copyFile (srcStat, src, dest, opts) {$/;"	F
copyFile	nvim/plugged/coc.nvim/build/index.js	/^function copyFile (srcStat, src, dest, opts, cb) {$/;"	F
copyFileFallback	nvim/plugged/coc.nvim/build/index.js	/^function copyFileFallback (srcStat, src, dest, opts) {$/;"	F
copyFileFallback	nvim/plugged/coc.nvim/build/index.js	/^function copyFileFallback (srcStat, src, dest, opts, cb) {$/;"	F
copyLink	nvim/plugged/coc.nvim/build/index.js	/^function copyLink (resolvedSrc, dest) {$/;"	F
copyLink	nvim/plugged/coc.nvim/build/index.js	/^function copyLink (resolvedSrc, dest, cb) {$/;"	F
copyProps	nvim/plugged/coc.nvim/build/index.js	/^function copyProps (src, dst) {$/;"	F
copySync	nvim/plugged/coc.nvim/build/index.js	/^function copySync (src, dest, opts) {$/;"	F
core	nvim/plugged/coc.nvim/build/index.js	/^  core(path, options || {}, function (er, is) {$/;"	M
coreAppenders	nvim/plugged/coc.nvim/build/index.js	/^const coreAppenders = new Map();$/;"	V
core_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let core_attributes = {'accesskey': [], 'class': [], 'contenteditable': ['true', 'false', ''], 'contextmenu': [], 'dir': ['ltr', 'rtl'], 'draggable': ['true', 'false'], 'hidden': ['hidden', ''], 'id': [], 'is': [], 'lang': lang_tag, 'spellcheck': ['true', 'false', ''], 'style': [], 'tabindex': [], 'title': []}$/;"	v
count	nvim/plugged/coc.nvim/build/index.js	/^            let count = 0;$/;"	V
count	nvim/plugged/coc.nvim/build/index.js	/^    let count = 0;$/;"	V
count_chars	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^function s:count_chars(lnum, count_open, chars)$/;"	f
count_delete	nvim/plugged/coc.nvim/build/index.js	/^  var count_delete = 0;$/;"	V
count_insert	nvim/plugged/coc.nvim/build/index.js	/^  var count_insert = 0;$/;"	V
count_separators_down	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:count_separators_down(lnum)$/;"	f
count_separators_up	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:count_separators_up(lnum)$/;"	f
counts	nvim/plugged/coc.nvim/build/index.js	/^        let counts = new Map();$/;"	V
cp	nvim/plugged/coc.nvim/build/index.js	/^                let cp;$/;"	V
cpath	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
cr_on_empty_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:cr_on_empty_line(lnum, behavior)$/;"	f
cr_on_empty_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:cr_on_empty_list_item(lnum, behavior)$/;"	f
cr_on_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:cr_on_list_item(lnum, insert_new_marker, not_at_eol)$/;"	f
create	nvim/plugged/coc.nvim/build/index.js	/^        let create = bufnrs.filter(bufnr => this.getDocument(bufnr) == null);$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    create(name) {$/;"	M
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(diagnostics, only) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(func) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(items, isIncomplete) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(label) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(label, documentation) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(label, textEdit, additionalTextEdits) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(line, character) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(location, message) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(name, detail, kind, range, selectionRange, children) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(name, kind, range, uri, containerName) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(oldUri, newUri, options) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(one, two, three, four) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, color) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, data) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, kind) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, message, severity, code, source, relatedInformation) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, parent) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, target, data) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(red, green, blue, alpha) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(startLine, endLine, startCharacter, endCharacter, kind) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(tabSize, insertSpaces) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(textDocument, edits) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(title, command) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(title, commandOrEdit, kind) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, languageId, version, content) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, languageId, version, text) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, options) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, range) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, version) {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^const create = (opt, files) => {$/;"	F
create	nvim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^async function create(): Promise<FloatBuffer> {$/;"	f
create	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public create(name: string): DiagnosticCollection {$/;"	m
create	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  public async create(docs: Documentation[], allowSelection = false, offsetX = 0): Promise<void> {$/;"	m
create	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public async create(text: string[] | TextItem[], options: PopupOptions): Promise<void> {$/;"	m
create	nvim/plugged/vim-airline/autoload/airline/section.vim	/^function! s:create(parts, append)$/;"	f
create	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def create(conn, %{$/;"	f	class:example.project.config.test.test.test.project.test
createAction	nvim/plugged/coc.nvim/build/index.js	/^    createAction(action) {$/;"	M
createAction	nvim/plugged/coc.nvim/src/list/basic.ts	/^  private createAction(action: ListAction): void {$/;"	m
createAll	nvim/plugged/coc.nvim/build/index.js	/^    function createAll(_client) {$/;"	F
createAll	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  export function createAll(_client: BaseLanguageClient): (StaticFeature | DynamicFeature<any>)[] {$/;"	f
createAppender	nvim/plugged/coc.nvim/build/index.js	/^const createAppender = (name, config) => {$/;"	F
createBuffer	nvim/plugged/coc.nvim/build/index.js	/^    createBuffer(id) {$/;"	M
createClient	nvim/plugged/coc.nvim/build/index.js	/^    static createClient(binaryPath, root, channel) {$/;"	M
createClient	nvim/plugged/coc.nvim/src/watchman.ts	/^  public static createClient(binaryPath: string, root: string, channel?: OutputChannel): Promise<Watchman | null> {$/;"	m
createClientPipeTransport	nvim/plugged/coc.nvim/build/index.js	/^function createClientPipeTransport(pipeName, encoding = 'utf-8') {$/;"	F
createClientSocketTransport	nvim/plugged/coc.nvim/build/index.js	/^function createClientSocketTransport(port, encoding = 'utf-8') {$/;"	F
createCodec	nvim/plugged/coc.nvim/build/index.js	/^function createCodec(options) {$/;"	F
createCompleteSource	nvim/plugged/coc.nvim/build/index.js	/^    createCompleteSource(name, shortcut, provider, languageIds, triggerCharacters, priority) {$/;"	M
createCompleteSource	nvim/plugged/coc.nvim/src/languages.ts	/^  private createCompleteSource($/;"	m
createConfigurations	nvim/plugged/coc.nvim/build/index.js	/^    createConfigurations() {$/;"	M
createConfigurations	nvim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^function createConfigurations(): Configurations {$/;"	f
createConfigurations	nvim/plugged/coc.nvim/src/workspace.ts	/^  private createConfigurations(): Configurations {$/;"	m
createConnection	nvim/plugged/coc.nvim/build/index.js	/^    createConnection() {$/;"	M
createConnection	nvim/plugged/coc.nvim/build/index.js	/^function createConnection(input, output, errorHandler, closeHandler) {$/;"	F
createConnection	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private createConnection(): Thenable<IConnection> {$/;"	m
createConnection	nvim/plugged/coc.nvim/src/language-client/client.ts	/^function createConnection($/;"	f
createCustomServices	nvim/plugged/coc.nvim/build/index.js	/^    createCustomServices() {$/;"	M
createCustomServices	nvim/plugged/coc.nvim/src/services.ts	/^  private createCustomServices(): void {$/;"	m
createDatabase	nvim/plugged/coc.nvim/build/index.js	/^    createDatabase(name) {$/;"	M
createDatabase	nvim/plugged/coc.nvim/src/workspace.ts	/^  public createDatabase(name: string): DB {$/;"	m
createDebug	nvim/plugged/coc.nvim/build/index.js	/^	function createDebug(namespace) {$/;"	F
createDebug	nvim/plugged/coc.nvim/build/index.js	/^  function createDebug(namespace) {$/;"	F
createDefaultErrorHandler	nvim/plugged/coc.nvim/build/index.js	/^    createDefaultErrorHandler() {$/;"	M
createDefaultErrorHandler	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public createDefaultErrorHandler(): ErrorHandler {$/;"	m
createDiagnostic	nvim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^function createDiagnostic(msg: string, range?: Range, severity?: DiagnosticSeverity): Diagnostic {$/;"	f
createDiagnostic	nvim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^function createDiagnostic(msg: string, range?: Range): Diagnostic {$/;"	f
createDiagnostic	nvim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^function createDiagnostic(msg: string, range?: Range, severity?: DiagnosticSeverity): Diagnostic {$/;"	f
createDiagnosticBuffer	nvim/plugged/coc.nvim/build/index.js	/^    createDiagnosticBuffer(doc) {$/;"	M
createDiagnosticBuffer	nvim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^async function createDiagnosticBuffer(): Promise<DiagnosticBuffer> {$/;"	f
createDiagnosticBuffer	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private createDiagnosticBuffer(doc: Document): void {$/;"	m
createDiagnosticCollection	nvim/plugged/coc.nvim/build/index.js	/^    createDiagnosticCollection(owner) {$/;"	M
createDiagnosticCollection	nvim/plugged/coc.nvim/src/languages.ts	/^  public createDiagnosticCollection(owner: string): DiagnosticCollection {$/;"	m
createDocument	nvim/plugged/coc.nvim/build/index.js	/^    createDocument(changeCount = 1) {$/;"	M
createDocument	nvim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^  function createDocument(): TextDocument {$/;"	f
createDocument	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async createDocument(name?: string): Promise<Document> {$/;"	m
createDocument	nvim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^async function createDocument(): Promise<Document> {$/;"	f
createDocument	nvim/plugged/coc.nvim/src/model/document.ts	/^  private createDocument(changeCount = 1): void {$/;"	m
createExtension	nvim/plugged/coc.nvim/build/index.js	/^    createExtension(root, packageJSON, isLocal = false) {$/;"	M
createExtension	nvim/plugged/coc.nvim/build/index.js	/^function createExtension(id, filename) {$/;"	F
createExtension	nvim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^  function createExtension(event: string): Extension<API> {$/;"	f
createExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  private createExtension(root: string, packageJSON: any, isLocal = false): string {$/;"	m
createExtension	nvim/plugged/coc.nvim/src/util/factory.ts	/^export function createExtension(id: string, filename: string): ExtensionExport {$/;"	f
createFile	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.createFile = function (uri, options) {$/;"	M
createFile	nvim/plugged/coc.nvim/build/index.js	/^const createFile = (opt, files, cb) => {$/;"	F
createFile	nvim/plugged/coc.nvim/build/index.js	/^function createFile (file, callback) {$/;"	F
createFile	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async createFile(filepath: string, opts: CreateFileOptions = {}): Promise<void> {$/;"	m
createFileChange	nvim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^function createFileChange(file: string, exists = true): FileChangeItem {$/;"	f
createFileSync	nvim/plugged/coc.nvim/build/index.js	/^const createFileSync = (opt, files) => {$/;"	F
createFileSync	nvim/plugged/coc.nvim/build/index.js	/^function createFileSync (file) {$/;"	F
createFileSystemWatcher	nvim/plugged/coc.nvim/build/index.js	/^    createFileSystemWatcher(globPattern, ignoreCreate, ignoreChange, ignoreDelete) {$/;"	M
createFileSystemWatcher	nvim/plugged/coc.nvim/src/workspace.ts	/^  public createFileSystemWatcher(globPattern: string, ignoreCreate?: boolean, ignoreChange?: boolean, ignoreDelete?: boolean): FileSystemWatcher {$/;"	m
createFromLines	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public static async createFromLines(lines: string[]): Promise<Refactor> {$/;"	m
createFromLocations	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public static async createFromLocations(locations: Location[], filetype?: string): Promise<Refactor> {$/;"	m
createFromWorkspaceEdit	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public static async createFromWorkspaceEdit(edit: WorkspaceEdit, filetype?: string): Promise<Refactor> {$/;"	m
createKinddict	nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
createLink	nvim/plugged/coc.nvim/build/index.js	/^function createLink (srcpath, dstpath, callback) {$/;"	F
createLinkSync	nvim/plugged/coc.nvim/build/index.js	/^function createLinkSync (srcpath, dstpath) {$/;"	F
createLogger	nvim/plugged/coc.nvim/build/index.js	/^function createLogger(name) {$/;"	F
createMemento	nvim/plugged/coc.nvim/build/index.js	/^    createMemento(id) {$/;"	M
createMemento	nvim/plugged/coc.nvim/src/model/memos.ts	/^  public createMemento(id: string): Memento {$/;"	m
createMessageConnection	nvim/plugged/coc.nvim/build/index.js	/^function createMessageConnection(input, output, logger, strategy) {$/;"	F
createMessageTransports	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected abstract createMessageTransports($/;"	m
createMessageTransports	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  protected async createMessageTransports(encoding: string): Promise<MessageTransports | null> {$/;"	m
createMru	nvim/plugged/coc.nvim/build/index.js	/^    createMru(name) {$/;"	M
createMru	nvim/plugged/coc.nvim/src/workspace.ts	/^  public createMru(name: string): Mru {$/;"	m
createNameSpace	nvim/plugged/coc.nvim/build/index.js	/^    createNameSpace(name = '') {$/;"	M
createNameSpace	nvim/plugged/coc.nvim/src/workspace.ts	/^  public createNameSpace(name = ''): number {$/;"	m
createNamespace	nvim/plugged/coc.nvim/build/index.js	/^    createNamespace(name = "") {$/;"	M
createNativeSources	nvim/plugged/coc.nvim/src/sources.ts	/^  private async createNativeSources(): Promise<void> {$/;"	m
createNewBuffer	nvim/plugged/coc.nvim/build/index.js	/^    createNewBuffer(listed = false, scratch = false) {$/;"	M
createNoLogCondition	nvim/plugged/coc.nvim/build/index.js	/^function createNoLogCondition(nolog) {$/;"	F
createNotificationQueueKey	nvim/plugged/coc.nvim/build/index.js	/^    function createNotificationQueueKey() {$/;"	F
createOutputChannel	nvim/plugged/coc.nvim/build/index.js	/^    createOutputChannel(name) {$/;"	M
createOutputChannel	nvim/plugged/coc.nvim/src/workspace.ts	/^  public createOutputChannel(name: string): OutputChannel {$/;"	m
createPopup	nvim/plugged/coc.nvim/build/index.js	/^async function createPopup(nvim, text, options) {$/;"	F
createPopup	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private async createPopup(docs: Documentation[], allowSelection = false, offsetX = 0): Promise<boolean> {$/;"	m
createPopup	nvim/plugged/coc.nvim/src/model/popup.ts	/^export default async function createPopup(nvim: Neovim, text: string[] | TextItem[], options: PopupOptions): Promise<Popup> {$/;"	f
createProtocolConnection	nvim/plugged/coc.nvim/build/index.js	/^function createProtocolConnection(reader, writer, logger, strategy) {$/;"	F
createReadStream	nvim/plugged/coc.nvim/build/index.js	/^  function createReadStream (path, options) {$/;"	F
createRefactorBuffer	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public async createRefactorBuffer(filetype?: string): Promise<Buffer> {$/;"	m
createRemoteSources	nvim/plugged/coc.nvim/src/sources.ts	/^  private async createRemoteSources(): Promise<void> {$/;"	m
createRequestQueueKey	nvim/plugged/coc.nvim/build/index.js	/^    function createRequestQueueKey(id) {$/;"	F
createResponse	nvim/plugged/coc.nvim/build/index.js	/^    createResponse(requestId) {$/;"	M
createResponseQueueKey	nvim/plugged/coc.nvim/build/index.js	/^    function createResponseQueueKey(id) {$/;"	F
createSandbox	nvim/plugged/coc.nvim/build/index.js	/^function createSandbox(filename, logger) {$/;"	F
createSandbox	nvim/plugged/coc.nvim/src/util/factory.ts	/^function createSandbox(filename: string, logger: Logger): ISandbox {$/;"	f
createScanner	nvim/plugged/coc.nvim/build/index.js	/^function createScanner(text, ignoreTrivia) {$/;"	F
createSecureSocket	nvim/plugged/coc.nvim/build/index.js	/^function createSecureSocket(options, cb) {$/;"	F
createServerPipeTransport	nvim/plugged/coc.nvim/build/index.js	/^function createServerPipeTransport(pipeName, encoding = 'utf-8') {$/;"	F
createServerSocketTransport	nvim/plugged/coc.nvim/build/index.js	/^function createServerSocketTransport(port, encoding = 'utf-8') {$/;"	F
createSocket	nvim/plugged/coc.nvim/build/index.js	/^TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {$/;"	M
createSource	nvim/plugged/coc.nvim/build/index.js	/^    createSource(config) {$/;"	M
createSource	nvim/plugged/coc.nvim/src/sources.ts	/^  public createSource(config: SourceConfig): Disposable {$/;"	m
createStatusBarItem	nvim/plugged/coc.nvim/build/index.js	/^    createStatusBarItem(priority = 0, isProgress = false) {$/;"	M
createStatusBarItem	nvim/plugged/coc.nvim/build/index.js	/^    createStatusBarItem(priority = 0, opt = {}) {$/;"	M
createStatusBarItem	nvim/plugged/coc.nvim/src/model/status.ts	/^  public createStatusBarItem(priority = 0, isProgress = false): StatusBarItem {$/;"	m
createStatusBarItem	nvim/plugged/coc.nvim/src/workspace.ts	/^  public createStatusBarItem(priority = 0, opt: StatusItemOption = {}): StatusBarItem {$/;"	m
createSymlink	nvim/plugged/coc.nvim/build/index.js	/^function createSymlink (srcpath, dstpath, type, callback) {$/;"	F
createSymlinkSync	nvim/plugged/coc.nvim/build/index.js	/^function createSymlinkSync (srcpath, dstpath, type) {$/;"	F
createSync	nvim/plugged/coc.nvim/build/index.js	/^const createSync = (opt, files) => {$/;"	F
createTabpage	nvim/plugged/coc.nvim/build/index.js	/^    createTabpage(id) {$/;"	M
createTask	nvim/plugged/coc.nvim/build/index.js	/^    createTask(id) {$/;"	M
createTask	nvim/plugged/coc.nvim/src/workspace.ts	/^  public createTask(id: string): Task {$/;"	m
createTerminal	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async createTerminal(opts: TerminalOptions): Promise<Terminal> {$/;"	m
createTmpFile	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^export async function createTmpFile(content: string): Promise<string> {$/;"	f
createTs	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private createTs = 0$/;"	m
createUriRegex	nvim/plugged/coc.nvim/build/index.js	/^        createUriRegex: function (options) {$/;"	M
createVimSourceExtension	nvim/plugged/coc.nvim/src/sources.ts	/^  private async createVimSourceExtension(nvim: Neovim, filepath: string): Promise<void> {$/;"	m
createVimSources	nvim/plugged/coc.nvim/src/sources.ts	/^  private async createVimSources(pluginPath: string): Promise<void> {$/;"	m
createWindow	nvim/plugged/coc.nvim/build/index.js	/^    createWindow(id) {$/;"	M
createWriteStream	nvim/plugged/coc.nvim/build/index.js	/^  function createWriteStream (path, options) {$/;"	F
create_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:create_cb(item, start_rate)$/;"	f
create_default_CSS	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:create_default_CSS(path)$/;"	f
create_empty_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:create_empty_row(cols)$/;"	f
create_highlight	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! s:create_highlight(color, is_bright)$/;"	f
create_marker	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:create_marker(lnum)$/;"	f
create_matches	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:create_matches()$/;"	f
create_pseudotag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
create_row_sep	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:create_row_sep(cols)$/;"	f
create_syn_match	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:create_syn_match()$/;"	f
create_temporary_wiki	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:create_temporary_wiki()$/;"	f
create_user	nvim/plugged/vim-elixir/spec/indent/with_spec.rb	/^  def create_user(params) do$/;"	f	class:resend_confirmation
created	nvim/plugged/coc.nvim/build/index.js	/^            let created = new range_1.default(line, range.start.character, range.end.character, text, preCount);$/;"	V
creating	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private creating = false$/;"	m
creatingSources	nvim/plugged/coc.nvim/src/workspace.ts	/^  private creatingSources: Map<number, CancellationTokenSource> = new Map()$/;"	m
credentials	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:credentials() abort$/;"	f
crlfDelay	nvim/plugged/coc.nvim/build/index.js	/^        crlfDelay: Infinity,$/;"	P
crossorigin	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let crossorigin = ['anonymous', 'use-credentials']$/;"	v
csi	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
css	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	css: function( elem, name, force ) {$/;"	M
css	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	css: function( key, value ) {$/;"	M
cssFloat	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		cssFloat: styleFloat,$/;"	P
css_color#disable	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#disable()$/;"	f
css_color#enable	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#enable()$/;"	f
css_color#extend	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! css_color#extend(groups)$/;"	f
css_color#init	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! css_color#init(type, keywords, groups)$/;"	f
css_color#init	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#init(type, keywords, groups)$/;"	f
css_color#reinit	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#reinit()$/;"	f
css_color#toggle	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#toggle()$/;"	f
cur	nvim/plugged/coc.nvim/build/index.js	/^                let cur = 0;$/;"	V
cur	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var old, cur = [];$/;"	V
cur	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	cur: function(force){$/;"	M
curCSS	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	curCSS: function( elem, name, force ) {$/;"	M
cur_column	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:cur_column()$/;"	f
curl_arguments	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:curl_arguments(path, ...) abort$/;"	f
curr	nvim/plugged/coc.nvim/build/index.js	/^    let curr = 0;$/;"	V
curr	nvim/plugged/coc.nvim/build/index.js	/^    let curr = [parts.shift()];$/;"	A
curr	nvim/plugged/coc.nvim/src/list/history.ts	/^  public get curr(): string | null {$/;"	m
currEnd	nvim/plugged/coc.nvim/src/cursors/range.ts	/^  private currEnd: number$/;"	m
currId	nvim/plugged/coc.nvim/build/index.js	/^                                let currId = 0;$/;"	V
currIndex	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private currIndex = 0$/;"	m
currItem	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private currItem: VimCompleteItem$/;"	m
currLine	nvim/plugged/coc.nvim/build/index.js	/^        let currLine = 0;$/;"	V
currList	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private currList: IList$/;"	m
currRange	nvim/plugged/coc.nvim/src/cursors/range.ts	/^  public get currRange(): Range {$/;"	m
currScore	nvim/plugged/coc.nvim/build/index.js	/^        let currScore = 0;$/;"	V
currStart	nvim/plugged/coc.nvim/src/cursors/range.ts	/^  private currStart: number$/;"	m
current	nvim/plugged/coc.nvim/build/index.js	/^        let current = 0;$/;"	V
current	nvim/plugged/coc.nvim/build/index.js	/^  var current;$/;"	V
current	nvim/plugged/coc.nvim/src/list/history.ts	/^  private current: string[] = []$/;"	m
currentChar	nvim/plugged/coc.nvim/build/index.js	/^	var currentChar;$/;"	V
currentColorInfomation	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  private async currentColorInfomation(): Promise<ColorInformation | null> {$/;"	m
currentDate	nvim/plugged/coc.nvim/build/index.js	/^        const currentDate = new Date();$/;"	V
currentParent	nvim/plugged/coc.nvim/build/index.js	/^    var currentParent = [];$/;"	A
currentParent	nvim/plugged/coc.nvim/build/index.js	/^    var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: void 0 }; \/\/ artificial root$/;"	O
currentSize	nvim/plugged/coc.nvim/build/index.js	/^      currentSize: 0$/;"	P
current_buffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let current_buffer = max([index(b.buffers, cur), 0])$/;"	v
current_compiler	nvim/plugged/typescript-vim/compiler/typescript.vim	/^let current_compiler = "typescript"$/;"	v
current_compiler	nvim/plugged/vim-elixir/compiler/credo.vim	/^let current_compiler = 'credo'$/;"	v
current_compiler	nvim/plugged/vim-elixir/compiler/exunit.vim	/^let current_compiler = "exunit"$/;"	v
current_compiler	nvim/plugged/vim-elixir/compiler/mix.vim	/^let current_compiler = 'mix'$/;"	v
current_compiler	nvim/plugged/vim-javascript/compiler/eslint.vim	/^let current_compiler = "eslint"$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/rake.vim	/^let current_compiler = "rake"$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/rspec.vim	/^let current_compiler = "rspec"$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
current_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:current_header(headers, line_number)$/;"	f
current_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:current_hunk() abort$/;"	f
current_text	nvim/plugged/coc.nvim/build/index.js	/^            current_text: text,$/;"	P
cursor	nvim/plugged/coc.nvim/src/events.ts	/^  public get cursor(): CursorPosition {$/;"	m
cursor	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private cursor: [number, number] = [0, 0]$/;"	m
cursorMoveTs	nvim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^  private cursorMoveTs: number$/;"	m
cursorPostion	nvim/plugged/coc.nvim/build/index.js	/^function cursorPostion(n) {$/;"	F
cursorPostion	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^function cursorPostion(n: number): string {$/;"	f
cursor_in_two_hunks	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:cursor_in_two_hunks()$/;"	f
cursors	nvim/plugged/coc.nvim/src/plugin.ts	/^  private cursors: Cursors$/;"	m
cusorIndex	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  private cusorIndex = 0$/;"	m
custom	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	custom: function(from, to, unit){$/;"	M
customOpenBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node)$/;"	f
customOpenDir	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node)$/;"	f
customOpenFile	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node)$/;"	f
customScheme	nvim/plugged/coc.nvim/build/index.js	/^            var customScheme = '';$/;"	V
cwd	nvim/plugged/coc.nvim/build/index.js	/^                    cwd: serverWorkingDir,$/;"	P
cwd	nvim/plugged/coc.nvim/build/index.js	/^process.cwd = function() {$/;"	M
cwd	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private cwd: string$/;"	m
cwd	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private cwd: string$/;"	m
cwd	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get cwd(): string {$/;"	m
cyan	nvim/plugged/coc.nvim/build/index.js	/^  cyan: [36, 39],$/;"	P
d	nvim/plugged/coc.nvim/build/index.js	/^                let d = 300 - (Date.now() - this.lastChanageTs);$/;"	V
d	nvim/plugged/coc.nvim/build/index.js	/^        let d = new Date();$/;"	V
d	nvim/plugged/coc.nvim/build/index.js	/^    d: formatAsDate,$/;"	P
d	nvim/plugged/coc.nvim/build/index.js	/^  const d = new Date(1435410243862)$/;"	V
data	nvim/plugged/coc.nvim/build/index.js	/^                        data: {$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                    data: { cmd: id, score: score(mruList, id) }$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                    data: {$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                const data = {$/;"	O
data	nvim/plugged/coc.nvim/build/index.js	/^                data: { action }$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                data: { cmd: key, score: score(mruList, key) }$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                data: { id: stat.id }$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                data: { line: lnum }$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                data: { name: stat.name }$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                data: { original: s, kind: s.kind, file, score: fzy_1.score(input, s.name) }$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^                data: {$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^            data: id,$/;"	P
data	nvim/plugged/coc.nvim/build/index.js	/^        let data = {$/;"	O
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");$/;"	M
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";$/;"	M
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			data: data,$/;"	P
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			data: params,$/;"	P
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		data: null,$/;"	P
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	data: function( elem, name, data ) {$/;"	M
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	data: function( key, value ){$/;"	M
data2String	nvim/plugged/coc.nvim/build/index.js	/^    data2String(data) {$/;"	M
data2String	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private data2String(data: any): string {$/;"	m
dataString	nvim/plugged/coc.nvim/build/index.js	/^        let dataString;$/;"	V
dataType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			dataType: "html",$/;"	P
dataType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			dataType: "script"$/;"	P
dataType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			dataType: type$/;"	P
date	nvim/plugged/coc.nvim/build/index.js	/^  const date = (f, i, d) => {$/;"	F
dateAndIndex	nvim/plugged/coc.nvim/build/index.js	/^  const dateAndIndex = (f, p) => {$/;"	F
datePart	nvim/plugged/coc.nvim/build/index.js	/^function datePart(date, displayUTC, part) {$/;"	F
day	nvim/plugged/coc.nvim/build/index.js	/^            let day = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (interval == 'daily' ? 0 : 7));$/;"	V
db	nvim/plugged/coc.nvim/src/extensions.ts	/^  private db: DB$/;"	m
db	nvim/plugged/coc.nvim/src/list/history.ts	/^  private db: DB$/;"	m
db#adapter#ecto#canonicalize	nvim/plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#canonicalize(url) abort$/;"	f
db#adapter#ecto#complete_opaque	nvim/plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#complete_opaque(url) abort$/;"	f
deactivate	nvim/plugged/coc.nvim/build/index.js	/^            deactivate: () => {$/;"	M
deactivate	nvim/plugged/coc.nvim/build/index.js	/^    deactivate() {$/;"	M
deactivate	nvim/plugged/coc.nvim/build/index.js	/^    deactivate(id) {$/;"	M
deactivate	nvim/plugged/coc.nvim/src/extensions.ts	/^  public deactivate(id): boolean {$/;"	m
deactivate	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public deactivate(): void {$/;"	m
debounce	nvim/plugged/coc.nvim/build/index.js	/^function debounce(func, wait, immediate){$/;"	F
debounced	nvim/plugged/coc.nvim/build/index.js	/^  var debounced = function(){$/;"	F
debug	nvim/plugged/coc.nvim/build/index.js	/^		function debug(...args) {$/;"	F
debug	nvim/plugged/coc.nvim/build/index.js	/^    debug(data, ...meta) {$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^    debug(key, ...meta) {$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^    function debug() {$/;"	F
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function () {$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function () {}$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function() {$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function() {};$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^Minimatch.prototype.debug = function () {}$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^var debug;$/;"	V
debug	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:debug(str)$/;"	f
debugCallback	nvim/plugged/coc.nvim/build/index.js	/^  function debugCallback(err) {$/;"	F
debugMessage	nvim/plugged/coc.nvim/build/index.js	/^    debugMessage(msg) {$/;"	M
decDate	nvim/plugged/coc.nvim/build/index.js	/^const decDate = (buf, off, size) =>$/;"	F
decNumber	nvim/plugged/coc.nvim/build/index.js	/^const decNumber = (buf, off, size) =>$/;"	F
decOctect	nvim/plugged/coc.nvim/build/index.js	/^    var decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';$/;"	V
decSmallNumber	nvim/plugged/coc.nvim/build/index.js	/^const decSmallNumber = (buf, off, size) =>$/;"	F
decString	nvim/plugged/coc.nvim/build/index.js	/^const decString = (buf, off, size) =>$/;"	F
declarationManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private declarationManager = new DeclarationManager()$/;"	m
decode	nvim/plugged/coc.nvim/build/index.js	/^  function decode(decoder) {$/;"	F
decode	nvim/plugged/coc.nvim/build/index.js	/^Decoder.prototype.decode = function(chunk) {$/;"	M
decode	nvim/plugged/coc.nvim/build/index.js	/^function decode (str) {$/;"	F
decode	nvim/plugged/coc.nvim/build/index.js	/^function decode(input) {$/;"	F
decode	nvim/plugged/coc.nvim/build/index.js	/^function decode(input, options) {$/;"	F
decodeAny	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeAny = function() {$/;"	M
decodeArray	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeArray = function() {$/;"	M
decodeInt	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeInt = function(relaxSizeAsserts) {$/;"	M
decodeObject	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeObject = function() {$/;"	M
decodeString	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeString = function() {$/;"	M
decodeTemplate	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeTemplate = function() {$/;"	M
decoder	nvim/plugged/coc.nvim/build/index.js	/^  var decoder = new DecodeBuffer(options);$/;"	V
decrease_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:decrease_level(item)$/;"	f
deepClone	nvim/plugged/coc.nvim/build/index.js	/^function deepClone(obj) {$/;"	F
deepClone	nvim/plugged/coc.nvim/src/util/object.ts	/^export function deepClone<T>(obj: T): T {$/;"	f
deepCloneArray	nvim/plugged/coc.nvim/build/index.js	/^function deepCloneArray(arr) {$/;"	F
deepFreeze	nvim/plugged/coc.nvim/build/index.js	/^function deepFreeze(obj) {$/;"	F
deepFreeze	nvim/plugged/coc.nvim/src/util/object.ts	/^export function deepFreeze<T>(obj: T): T {$/;"	f
def	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^ 		def: 400$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^                                default: [],$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^                                default: true$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^                default: \/\/ Fallback on length$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^            default: [],$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^        default: { appenders: ['out'], level }$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^    default: \/\/ some unusual error.  Treat as failure.$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^exports.default = (opts, requestApi = true) => {$/;"	M
defaultAction	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public defaultAction = 'open'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private get defaultAction(): ListAction {$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/actions.ts	/^  public defaultAction = 'do'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/commands.ts	/^  public defaultAction = 'run'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public readonly defaultAction = 'open'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public defaultAction = 'toggle'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/folders.ts	/^  public defaultAction = 'edit'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/links.ts	/^  public defaultAction = 'open'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/lists.ts	/^  public readonly defaultAction = 'open'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/location.ts	/^  public defaultAction = 'open'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/output.ts	/^  public defaultAction = 'open'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/services.ts	/^  public defaultAction = 'toggle'$/;"	m
defaultAction	nvim/plugged/coc.nvim/src/list/source/sources.ts	/^  public readonly defaultAction = 'toggle'$/;"	m
defaultArgs	nvim/plugged/coc.nvim/build/index.js	/^const defaultArgs = ['--color', 'ansi', '--colors', 'path:fg:black', '--colors', 'line:fg:green', '--colors', 'match:fg:red', '--no-messages', '--heading', '-n'];$/;"	A
defaultConfiguration	nvim/plugged/coc.nvim/build/index.js	/^        const defaultConfiguration = new model_1.ConfigurationModel(data.defaults.contents);$/;"	V
defaultGlobOpts	nvim/plugged/coc.nvim/build/index.js	/^const defaultGlobOpts = {$/;"	O
defaultOptions	nvim/plugged/coc.nvim/build/index.js	/^    const defaultOptions = {$/;"	O
defaultParams	nvim/plugged/vim-jsdoc/test/test.js	/^function defaultParams(arg, arg1 = 'foo', arg2 = 100) {}$/;"	F
defaultParseCallStack	nvim/plugged/coc.nvim/build/index.js	/^function defaultParseCallStack(data, skipIdx = 4) {$/;"	F
defaultResult	nvim/plugged/coc.nvim/build/index.js	/^      var defaultResult = 'prerelease'$/;"	V
defaultTokens	nvim/plugged/coc.nvim/build/index.js	/^  const defaultTokens = [];$/;"	A
defaultTraceOptions	nvim/plugged/coc.nvim/build/index.js	/^            const defaultTraceOptions = {$/;"	O
default_1	nvim/plugged/coc.nvim/build/index.js	/^async function default_1() {$/;"	F
default_CSS_full_name	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:default_CSS_full_name(path)$/;"	f
default_grep	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^let default_grep = 'grep'$/;"	v
default_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let default_role = {$/;"	v
default_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let default_role = {}$/;"	v
defaults	nvim/plugged/coc.nvim/build/index.js	/^            defaults: { contents },$/;"	P
defaults	nvim/plugged/coc.nvim/build/index.js	/^            defaults: {$/;"	P
defaults	nvim/plugged/coc.nvim/build/index.js	/^        const defaults = {$/;"	O
defaults	nvim/plugged/coc.nvim/build/index.js	/^  defaults = ($/;"	M
defaults	nvim/plugged/coc.nvim/build/index.js	/^Minimatch.defaults = function (def) {$/;"	M
defaults	nvim/plugged/coc.nvim/build/index.js	/^const defaults = options => {$/;"	F
defaults	nvim/plugged/coc.nvim/build/index.js	/^function defaults (options) {$/;"	F
defaults	nvim/plugged/coc.nvim/build/index.js	/^function defaults(obj, ...sources) {$/;"	F
defaults	nvim/plugged/coc.nvim/build/index.js	/^minimatch.defaults = function (def) {$/;"	M
defaults	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^  public get defaults(): ConfigurationModel {$/;"	m
defaults	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public get defaults(): ConfigurationModel {$/;"	m
defaults	nvim/plugged/coc.nvim/src/model/source.ts	/^  private defaults: any$/;"	m
defaults	nvim/plugged/coc.nvim/src/util/lodash.ts	/^export function defaults(obj: any, ...sources: any[]): any {$/;"	f
define_commands	nvim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
define_sign_line_highlights	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_line_highlights() abort$/;"	f
define_sign_linenr_highlights	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_linenr_highlights() abort$/;"	f
define_sign_text	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_text() abort$/;"	f
defined	nvim/plugged/coc.nvim/build/index.js	/^    function defined(value) {$/;"	F
definitionManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private definitionManager = new DefinitionManager()$/;"	m
defs	nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
del	nvim/plugged/coc.nvim/build/index.js	/^    function del(range) {$/;"	F
delete	nvim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:delete(s)$/;"	f
delete	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.delete = function (range) {$/;"	M
delete	nvim/plugged/coc.nvim/build/index.js	/^    delete(key) {$/;"	M
delete	nvim/plugged/coc.nvim/build/index.js	/^    delete(uri) {$/;"	M
delete	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public delete(uri: string): void {$/;"	m
delete	nvim/plugged/coc.nvim/src/model/db.ts	/^  public delete(key: string): void {$/;"	m
deleteBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark)$/;"	f
deleteCurrentLine	nvim/plugged/coc.nvim/build/index.js	/^    deleteCurrentLine() {$/;"	M
deleteFile	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.deleteFile = function (uri, options) {$/;"	M
deleteFile	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async deleteFile(filepath: string, opts: DeleteFileOptions = {}): Promise<void> {$/;"	m
deleteFiles	nvim/plugged/coc.nvim/build/index.js	/^const deleteFiles = fileNames => {$/;"	F
deleteItem	nvim/plugged/coc.nvim/build/index.js	/^    function deleteItem () {$/;"	F
deleteVar	nvim/plugged/coc.nvim/build/index.js	/^    deleteVar(name) {$/;"	M
delete_html_files	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:delete_html_files(path)$/;"	f
delete_op	nvim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
delta	nvim/plugged/coc.nvim/build/index.js	/^        let delta = 0;$/;"	V
deltaMap	nvim/plugged/coc.nvim/build/index.js	/^        let deltaMap = new Map();$/;"	V
dep_from_git	nvim/plugged/html5.vim/Makefile	/^dep_from_git = \\$/;"	m
dep_from_svn	nvim/plugged/html5.vim/Makefile	/^dep_from_svn = \\$/;"	m
dependencies	nvim/plugged/vim-vue/Makefile	/^dependencies = \\$/;"	m
deprecatedSupport	nvim/plugged/coc.nvim/build/index.js	/^            deprecatedSupport: true,$/;"	P
dequeue	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.fn.dequeue = function(type){$/;"	M
description	nvim/plugged/coc.nvim/src/list/source/actions.ts	/^  public description = 'code actions of selected range.'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/commands.ts	/^  public description = 'registered commands of coc.nvim'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public readonly description = 'diagnostics of current workspace'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public description = 'manage coc extensions'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/folders.ts	/^  public description = 'list of current workspace folders'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/links.ts	/^  public description = 'links of current buffer'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/lists.ts	/^  public readonly description = 'registered lists of coc.nvim'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/location.ts	/^  public description = 'show locations saved by g:coc_jump_locations variable'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/outline.ts	/^  public readonly description = 'symbols of current document'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/output.ts	/^  public description = 'output channels of coc.nvim'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/services.ts	/^  public description = 'registered services of coc.nvim'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/sources.ts	/^  public readonly description = 'registered completion sources'$/;"	m
description	nvim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public readonly description = 'search workspace symbols'$/;"	m
deserialise	nvim/plugged/coc.nvim/build/index.js	/^  static deserialise(serialised) {$/;"	M
dest	nvim/plugged/coc.nvim/build/index.js	/^        let dest = {};$/;"	O
dest	nvim/plugged/coc.nvim/build/index.js	/^    var dest = new BUFFER(8);$/;"	V
dest	nvim/plugged/coc.nvim/build/index.js	/^    var dest = new UINT8ARRAY(8);$/;"	V
destArr	nvim/plugged/coc.nvim/build/index.js	/^  const destArr = path.resolve(dest).split(path.sep).filter(i => i)$/;"	F
destStat	nvim/plugged/coc.nvim/build/index.js	/^  let srcStat, destStat$/;"	V
destroy	nvim/plugged/coc.nvim/build/index.js	/^	function destroy() {$/;"	F
destroy	nvim/plugged/coc.nvim/build/index.js	/^    destroy() {$/;"	M
destroy	nvim/plugged/coc.nvim/build/index.js	/^  function destroy() {$/;"	F
destroy	nvim/plugged/coc.nvim/src/model/db.ts	/^  public destroy(): void {$/;"	m
detach	nvim/plugged/coc.nvim/build/index.js	/^    detach() {$/;"	M
detach	nvim/plugged/coc.nvim/src/model/document.ts	/^  public detach(): void {$/;"	m
detach	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async detach(): Promise<void> {$/;"	m
detachBufferEvent	nvim/plugged/coc.nvim/build/index.js	/^    detachBufferEvent(buffer, eventName, cb) {$/;"	M
detail	nvim/plugged/coc.nvim/build/index.js	/^            detail: detail,$/;"	P
detail	nvim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public detail = 'detail'$/;"	m
detail	nvim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public readonly detail = 'Symbols list is provided by server, it works on interactive mode only.'$/;"	m
detect_bad_input	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:detect_bad_input()$/;"	f
detect_change	nvim/plugged/vim-elixir/bin/test_indent	/^def detect_change(f)$/;"	f
determine_style	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:determine_style(line)$/;"	f
devmaj	nvim/plugged/coc.nvim/build/index.js	/^      devmaj: 0,$/;"	P
devmin	nvim/plugged/coc.nvim/build/index.js	/^      devmin: 0,$/;"	P
diagnostic	nvim/plugged/coc.nvim/build/index.js	/^        let diagnostic = diagnostics.find(o => o.relatedInformation != null);$/;"	F
diagnosticCollectionName	nvim/plugged/coc.nvim/build/index.js	/^        diagnosticCollectionName: name,$/;"	P
diagnosticFiletypes	nvim/plugged/coc.nvim/build/index.js	/^const diagnosticFiletypes = ['Error', 'Warning', 'Info', 'Hint'];$/;"	A
diagnostics	nvim/plugged/coc.nvim/build/index.js	/^        let diagnostics = buffer.diagnostics.filter(o => {$/;"	F
diagnostics	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public diagnostics: ReadonlyArray<Diagnostic> = []$/;"	m
diagnostics	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get diagnostics(): DiagnosticCollection | undefined {$/;"	m
diagnosticsMap	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  private diagnosticsMap: Map<string, Diagnostic[]> = new Map()$/;"	m
diagnostics_for_buffer	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:diagnostics_for_buffer()$/;"	f
diary_index	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:diary_index(...)$/;"	f
diary_path	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:diary_path(...)$/;"	f
didChange	nvim/plugged/coc.nvim/build/index.js	/^                    let didChange = event => {$/;"	F
didChangeConfiguration	nvim/plugged/coc.nvim/build/index.js	/^        didChangeConfiguration: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, params),$/;"	M
didChangeConfiguration	nvim/plugged/coc.nvim/build/index.js	/^        let didChangeConfiguration = (sections) => {$/;"	F
didChangeTextDocument	nvim/plugged/coc.nvim/build/index.js	/^        didChangeTextDocument: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params),$/;"	M
didChangeWatchedFiles	nvim/plugged/coc.nvim/build/index.js	/^        didChangeWatchedFiles: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, params),$/;"	M
didChangeWorkspaceFolders	nvim/plugged/coc.nvim/build/index.js	/^            let didChangeWorkspaceFolders = (event) => {$/;"	F
didClose	nvim/plugged/coc.nvim/build/index.js	/^                let didClose = (textDocument) => {$/;"	F
didCloseTextDocument	nvim/plugged/coc.nvim/build/index.js	/^        didCloseTextDocument: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, params),$/;"	M
didOpen	nvim/plugged/coc.nvim/build/index.js	/^                let didOpen = (textDocument) => {$/;"	F
didOpenTextDocument	nvim/plugged/coc.nvim/build/index.js	/^        didOpenTextDocument: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, params),$/;"	M
didSaveTextDocument	nvim/plugged/coc.nvim/build/index.js	/^        didSaveTextDocument: (params) => connection.sendNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, params),$/;"	M
did_cpp_syntax_inits	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^    let did_cpp_syntax_inits = 1$/;"	v
did_javascript_syn_inits	nvim/plugged/vim-javascript/extras/flow.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	nvim/plugged/vim-javascript/extras/jsdoc.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	nvim/plugged/vim-javascript/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_typescript_syn_inits	nvim/plugged/typescript-vim/syntax/typescript.vim	/^    let did_typescript_syn_inits = 1$/;"	v
diff	nvim/autoload/plug.vim	/^function! s:diff()$/;"	f
diff	nvim/plugged/coc.nvim/build/index.js	/^function diff (version1, version2) {$/;"	F
diff	nvim/plugged/coc.nvim/build/index.js	/^function diff(text1, text2, cursor_pos) {$/;"	F
diff	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def diff(result, expected)$/;"	f	class:Differ.initialize
diff	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def self.diff(result, expected)$/;"	F	class:Differ
diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:diff(rline, aline, rlinenr, alinenr, rprefix, aprefix, regions, whole_line)$/;"	f
diffLines	nvim/plugged/coc.nvim/build/index.js	/^function diffLines(from, to) {$/;"	F
diffLines	nvim/plugged/coc.nvim/src/util/diff.ts	/^export function diffLines(from: string, to: string): ChangedLines {$/;"	f
diff_bisectSplit_	nvim/plugged/coc.nvim/build/index.js	/^function diff_bisectSplit_(text1, text2, x, y) {$/;"	F
diff_bisect_	nvim/plugged/coc.nvim/build/index.js	/^function diff_bisect_(text1, text2) {$/;"	F
diff_cleanupMerge	nvim/plugged/coc.nvim/build/index.js	/^function diff_cleanupMerge(diffs, fix_unicode) {$/;"	F
diff_commonPrefix	nvim/plugged/coc.nvim/build/index.js	/^function diff_commonPrefix(text1, text2) {$/;"	F
diff_commonSuffix	nvim/plugged/coc.nvim/build/index.js	/^function diff_commonSuffix(text1, text2) {$/;"	F
diff_compute_	nvim/plugged/coc.nvim/build/index.js	/^function diff_compute_(text1, text2) {$/;"	F
diff_halfMatchI_	nvim/plugged/coc.nvim/build/index.js	/^  function diff_halfMatchI_(longtext, shorttext, i) {$/;"	F
diff_halfMatch_	nvim/plugged/coc.nvim/build/index.js	/^function diff_halfMatch_(text1, text2) {$/;"	F
diff_main	nvim/plugged/coc.nvim/build/index.js	/^function diff_main(text1, text2, cursor_pos, _fix_unicode) {$/;"	F
diff_modifier	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
diff_restore	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
diff_window_count	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
diffoff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
diffoff_all	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
diffs	nvim/plugged/coc.nvim/build/index.js	/^  var diffs;$/;"	V
diffthis	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
digit	nvim/plugged/coc.nvim/build/index.js	/^    var digit = '0-9';$/;"	V
digitOnly	nvim/plugged/coc.nvim/build/index.js	/^    var digitOnly = '[' + digit + ']';$/;"	V
digits	nvim/plugged/coc.nvim/build/index.js	/^        var digits = 0;$/;"	V
dir	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	dir: function( elem, dir ){$/;"	M
dir	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dir(bufnr) abort$/;"	f
directory	nvim/plugged/coc.nvim/build/index.js	/^            directory: root,$/;"	P
dirpath	nvim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
dirs	nvim/plugged/coc.nvim/build/index.js	/^            let dirs = paths.filter(p => {$/;"	F
dirs	nvim/plugged/coc.nvim/build/index.js	/^    const dirs = [root];$/;"	A
dirty	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get dirty(): boolean {$/;"	m
disable	nvim/plugged/coc.nvim/build/index.js	/^	function disable() {$/;"	F
disable	nvim/plugged/coc.nvim/build/index.js	/^  function disable() {$/;"	F
disableClustering	nvim/plugged/coc.nvim/build/index.js	/^      disableClustering: disabled,$/;"	P
disableClustering	nvim/plugged/coc.nvim/build/index.js	/^    disableClustering: true,$/;"	P
disableSyntaxes	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get disableSyntaxes(): string[] {$/;"	m
disabled	nvim/plugged/coc.nvim/src/extensions.ts	/^  private disabled: Set<string> = new Set()$/;"	m
disabled	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			disabled: function(a){return a.disabled;},$/;"	M
dispatch_events	nvim/plugged/vim-elixir/large_file.ex	/^        defp dispatch_events(queue, 0, events) do$/;"	f
dispatch_events	nvim/plugged/vim-elixir/large_file.ex	/^        defp dispatch_events(queue, demand, events) do$/;"	f
displayHelp	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp()$/;"	f
display_error	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:display_error()$/;"	f
display_git_branch	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_git_branch()$/;"	f
display_hg_branch	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_hg_branch()$/;"	f
disposable	nvim/plugged/coc.nvim/build/index.js	/^                let disposable = this.onDidOpen(() => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^                let disposable = tokenSource.token.onCancellationRequested(() => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = this.onDidOpenTextDocument(() => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = this.onDidOpenTextDocument(doc => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = this.onDidOpenTextDocument(textDocument => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = this.onDidWorkspaceInitialized(() => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = token.onCancellationRequested(() => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = vscode_languageserver_protocol_1.Disposable.create(() => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = workspace_1.default.onDidOpenTextDocument(({ uri }) => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = await client.subscribe(globPattern, (change) => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = events_1.default.on('GlobalChange', async (changed, oldValue, newValue) => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = events_1.default.on('OptionSet', async (changed, oldValue, newValue) => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = util_1.watchFile(filepath, () => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = workspace_1.default.onDidChangeConfiguration(() => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = workspace_1.default.onDidChangeWorkspaceFolders(event => {$/;"	F
disposable	nvim/plugged/coc.nvim/src/list/configuration.ts	/^  private disposable: Disposable$/;"	m
disposables	nvim/plugged/coc.nvim/build/index.js	/^            let disposables = [];$/;"	A
disposables	nvim/plugged/coc.nvim/build/index.js	/^        let disposables = [];$/;"	A
disposables	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/model/task.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/services.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/sources.ts	/^  private disposables: Disposable[] = []$/;"	m
disposables	nvim/plugged/coc.nvim/src/workspace.ts	/^  private disposables: Disposable[] = []$/;"	m
dispose	nvim/plugged/coc.nvim/build/index.js	/^                    dispose: () => {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^            dispose: () => {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^            dispose: func$/;"	P
dispose	nvim/plugged/coc.nvim/build/index.js	/^        dispose: () => connection.dispose()$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^        dispose: () => {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    static dispose() {$/;"	M
dispose	nvim/plugged/coc.nvim/src/commands.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/handler/search.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/languages.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/list/configuration.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/model/status.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/model/task.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/plugin.ts	/^  public async dispose(): Promise<void> {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/declarationManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/definitionManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/documentHighlightManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/documentSymbolManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/foldingRangeManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/formatManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/formatRangeManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/hoverManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/implementationManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/rangeManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/referenceManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/renameManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/signatureManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/typeDefinitionManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/services.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/sources.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/watchman.ts	/^  public dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/watchman.ts	/^  public static dispose(): void {$/;"	m
dispose	nvim/plugged/coc.nvim/src/workspace.ts	/^  public dispose(): void {$/;"	m
disposeAll	nvim/plugged/coc.nvim/build/index.js	/^function disposeAll(disposables) {$/;"	F
disposeAll	nvim/plugged/coc.nvim/src/util/index.ts	/^export function disposeAll(disposables: Disposable[]): void {$/;"	f
disposeBuffer	nvim/plugged/coc.nvim/build/index.js	/^    disposeBuffer(bufnr) {$/;"	M
disposeBuffer	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private disposeBuffer(bufnr: number): void {$/;"	m
disposeEmitter	nvim/plugged/coc.nvim/build/index.js	/^    let disposeEmitter = new events_1.Emitter();$/;"	V
distinct	nvim/plugged/coc.nvim/build/index.js	/^function distinct(array, keyFn) {$/;"	F
distinct	nvim/plugged/coc.nvim/src/util/array.ts	/^export function distinct<T>(array: T[], keyFn?: (t: T) => string): T[] {$/;"	f
do	nvim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
do	nvim/plugged/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^  def do$/;"	f
doAction	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  public async doAction(): Promise<void> {$/;"	m
doAction	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async doAction(name?: string): Promise<void> {$/;"	m
doCodeAction	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async doCodeAction(mode: string | null, only?: CodeActionKind[] | string): Promise<void> {$/;"	m
doCodeLensAction	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async doCodeLensAction(): Promise<void> {$/;"	m
doComplete	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public async doComplete(): Promise<VimCompleteItem[]> {$/;"	m
doComplete	nvim/plugged/coc.nvim/src/model/source-vim.ts	/^  public async doComplete(opt: CompleteOption, token: CancellationToken): Promise<CompleteResult | null> {$/;"	m
doComplete	nvim/plugged/coc.nvim/src/model/source.ts	/^  public async doComplete(opt: CompleteOption, token: CancellationToken): Promise<CompleteResult | null> {$/;"	m
doComplete	nvim/plugged/coc.nvim/src/source/around.ts	/^  public async doComplete(opt: CompleteOption): Promise<CompleteResult> {$/;"	m
doComplete	nvim/plugged/coc.nvim/src/source/buffer.ts	/^  public async doComplete(opt: CompleteOption): Promise<CompleteResult> {$/;"	m
doComplete	nvim/plugged/coc.nvim/src/source/file.ts	/^  public async doComplete(opt: CompleteOption): Promise<CompleteResult> {$/;"	m
doCompleteDone	nvim/plugged/coc.nvim/src/sources.ts	/^  public async doCompleteDone(item: VimCompleteItem, opt: CompleteOption): Promise<void> {$/;"	m
doCompleteResolve	nvim/plugged/coc.nvim/src/sources.ts	/^  public async doCompleteResolve(item: VimCompleteItem, token: CancellationToken): Promise<void> {$/;"	m
doEqualsIgnoreCase	nvim/plugged/coc.nvim/build/index.js	/^function doEqualsIgnoreCase(a, b, stopAt = a.length) {$/;"	F
doEqualsIgnoreCase	nvim/plugged/coc.nvim/src/util/string.ts	/^function doEqualsIgnoreCase(a: string, b: string, stopAt = a.length): boolean {$/;"	f
doHighlight	nvim/plugged/coc.nvim/build/index.js	/^    doHighlight() {$/;"	M
doHighlight	nvim/plugged/coc.nvim/build/index.js	/^    doHighlight(start, end) {$/;"	M
doHighlight	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/actions.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/commands.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/lists.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/location.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/outline.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/services.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/sources.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public doHighlight(): void {$/;"	m
doHighlight	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private doHighlight(start: number, end: number): void {$/;"	m
doHighlights	nvim/plugged/coc.nvim/build/index.js	/^    doHighlights() {$/;"	M
doHighlights	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private doHighlights(): void {$/;"	m
doInsertKeymap	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  public async doInsertKeymap(key: string): Promise<boolean> {$/;"	m
doItemAction	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private async doItemAction(items: ListItem[], action: ListAction): Promise<void> {$/;"	m
doNormalKeymap	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  public async doNormalKeymap(key: string): Promise<boolean> {$/;"	m
doQuickfix	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async doQuickfix(): Promise<boolean> {$/;"	m
doRefactor	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async doRefactor(): Promise<void> {$/;"	m
doReject	nvim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private doReject: (err: any) => void$/;"	m
doRemoveFromValueTree	nvim/plugged/coc.nvim/build/index.js	/^function doRemoveFromValueTree(valueTree, segments) {$/;"	F
doRemoveFromValueTree	nvim/plugged/coc.nvim/src/configuration/util.ts	/^function doRemoveFromValueTree(valueTree: any, segments: string[]): void {$/;"	f
doRename	nvim/plugged/coc.nvim/build/index.js	/^  function doRename() {$/;"	F
doRename	nvim/plugged/coc.nvim/build/index.js	/^function doRename (src, dest, overwrite) {$/;"	F
doRename	nvim/plugged/coc.nvim/build/index.js	/^function doRename (src, dest, overwrite, cb) {$/;"	F
doResolve	nvim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private doResolve: ((value?: any | Thenable<any>) => void) | null$/;"	m
doScroll	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private async doScroll(key: string): Promise<void> {$/;"	m
doWriteMessage	nvim/plugged/coc.nvim/build/index.js	/^    doWriteMessage(msg) {$/;"	M
do_delayed_update	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
do_handle_pattern_match_block	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_pattern_match_block(relative_line, context)$/;"	f
do_query	nvim/plugged/vim-elixir/spec/indent/ecto_queries_spec.rb	/^    def do_query do$/;"	f
do_query	nvim/plugged/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def do_query do$/;"	f	class:smth
do_stuff	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^    def do_stuff do$/;"	f	class:test.test.test.build_command.build_command.build_command.hello
do_tests	nvim/plugged/emmet-vim/unittest.vim	/^function! s:do_tests(bang, ...)$/;"	f
doautocmd	nvim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	nvim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
doc	nvim/plugged/coc.nvim/build/index.js	/^            let doc = workspace_1.default.documents.find(doc => doc.uri.startsWith('coc:\/\/'));$/;"	F
doc	nvim/plugged/coc.nvim/build/index.js	/^        let doc;$/;"	V
docs	nvim/plugged/coc.nvim/build/index.js	/^                    let docs = [];$/;"	A
docs	nvim/plugged/coc.nvim/build/index.js	/^            let docs = signatures.reduce((p, c, idx) => {$/;"	F
docs	nvim/plugged/coc.nvim/build/index.js	/^        let docs = [];$/;"	A
document	nvim/plugged/coc.nvim/src/completion/complete.ts	/^    private document: Document,$/;"	m
document	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private document: Document$/;"	m
document	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private get document(): Document | null {$/;"	m
document	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public get document(): Document | null {$/;"	m
document	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private get document(): Document {$/;"	m
document	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get document(): Promise<Document> {$/;"	m
documentChanges	nvim/plugged/coc.nvim/build/index.js	/^                    documentChanges: []$/;"	P
documentColorManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private documentColorManager = new DocumentColorManager()$/;"	m
documentEdit	nvim/plugged/coc.nvim/build/index.js	/^                let documentEdit = documentEdits.find(o => o.textDocument.uri == textDocument.uri && o.textDocument.version === textDocument.version);$/;"	F
documentEdits	nvim/plugged/coc.nvim/build/index.js	/^        let documentEdits = [];$/;"	A
documentFormatting	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async documentFormatting(): Promise<boolean> {$/;"	m
documentHighlightManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private documentHighlightManager = new DocumentHighlightManager()$/;"	m
documentHighlighter	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private documentHighlighter: DocumentHighlighter$/;"	m
documentLines	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private documentLines: string[] = []$/;"	m
documentLinkManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private documentLinkManager = new DocumentLinkManager()$/;"	m
documentRangeFormatting	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async documentRangeFormatting(mode: string): Promise<number> {$/;"	m
documentSelector	nvim/plugged/coc.nvim/build/index.js	/^    let documentSelector = [];$/;"	A
documentSelectorToLanguageIds	nvim/plugged/coc.nvim/build/index.js	/^function documentSelectorToLanguageIds(documentSelector) {$/;"	F
documentSelectorToLanguageIds	nvim/plugged/coc.nvim/src/services.ts	/^export function documentSelectorToLanguageIds(documentSelector: DocumentSelector): string[] {$/;"	f
documentSymbolManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private documentSymbolManager = new DocumentSymbolManager()$/;"	m
documentSynchronize	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private async documentSynchronize(): Promise<void> {$/;"	m
document_structure	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let document_structure = [$/;"	v
document_structure	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let document_structure = ['article', 'cell', 'columnheader', 'definition', 'directory', 'document', 'feed', 'figure', 'group', 'heading', 'img', 'list', 'listitem', 'math', 'none', 'note', 'presentation', 'region', 'row', 'rowheader', 'separator', 'table', 'term']$/;"	v
documentationFormat	nvim/plugged/coc.nvim/build/index.js	/^            documentationFormat: [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText],$/;"	P
documents	nvim/plugged/coc.nvim/src/__tests__/client/server/testFileWatcher.js	/^let documents = new languageserver.TextDocuments()$/;"	V
documents	nvim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^let documents = new vscode_languageserver_1.TextDocuments();$/;"	V
documents	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get documents(): Document[] {$/;"	m
dollar	nvim/plugged/coc.nvim/build/index.js	/^    var dollar = ''$/;"	V
dollar_add	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! s:dollar_add(base,no) abort$/;"	f
domManip	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	domManip: function( args, table, reverse, callback ) {$/;"	M
done	nvim/plugged/coc.nvim/build/index.js	/^      const done = _ => {$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^    const done = er => {$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^  const done = (created) => {$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^  const done = (er, bw) => cb(er, bw, iovec)$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^  const done = (er, created) => {$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^  function done () {$/;"	F
dotSplit	nvim/plugged/coc.nvim/build/index.js	/^function dotSplit (str) {$/;"	F
double	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	class:example.project.config.test.test.test.project.test.create
double	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	class:example.project.config.test.test.test.project.test.create.double
double	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double
download	nvim/plugged/coc.nvim/build/index.js	/^function download(url, options) {$/;"	F
download	nvim/plugged/coc.nvim/install.sh	/^download() {$/;"	f
download	nvim/plugged/coc.nvim/src/model/download.ts	/^export default function download(url: string, options: DownloadOptions): Promise<void> {$/;"	f
dprint	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
dpub_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let dpub_role = [$/;"	v
dpub_role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let dpub_role = ['dpub-abstract', 'dpub-afterword', 'dpub-appendix', 'dpub-biblioentry', 'dpub-bibliography', 'dpub-biblioref', 'dpub-chapter', 'dpub-cover', 'dpub-epilogue', 'dpub-footnote', 'dpub-footnotes', 'dpub-foreword', 'dpub-glossary', 'dpub-glossdef', 'dpub-glossref', 'dpub-glossterm', 'dpub-index', 'dpub-locator', 'dpub-noteref', 'dpub-notice', 'dpub-pagebreak', 'dpub-pagelist', 'dpub-part', 'dpub-preface', 'dpub-prologue', 'dpub-pullquote', 'dpub-qna', 'dpub-subtitle', 'dpub-tip', 'dpub-title', 'dpub-toc']$/;"	v
drag_and_drop_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let drag_and_drop_attributes = {$/;"	v
drawItems	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async drawItems(items: ListItem[], name: string, listOptions: ListOptions, reload = false): Promise<void> {$/;"	m
drawItems	nvim/plugged/coc.nvim/src/list/worker.ts	/^  public async drawItems(): Promise<void> {$/;"	m
drawPrompt	nvim/plugged/coc.nvim/build/index.js	/^    drawPrompt() {$/;"	M
drawPrompt	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public drawPrompt(): void {$/;"	m
dryrun	nvim/plugged/coc.nvim/build/index.js	/^  function dryrun(buffer) {$/;"	F
dummyLayout	nvim/plugged/coc.nvim/build/index.js	/^function dummyLayout(loggingEvent) {$/;"	F
dumpToBuffer	nvim/plugged/coc.nvim/build/index.js	/^function dumpToBuffer(val) {$/;"	F
dump_any	nvim/plugged/coc.nvim/build/index.js	/^function dump_any(buf, val) {$/;"	F
dump_int	nvim/plugged/coc.nvim/build/index.js	/^function dump_int(buf, val) {$/;"	F
dump_int64	nvim/plugged/coc.nvim/build/index.js	/^function dump_int64(buf, val) {$/;"	F
duration	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			duration: speed,$/;"	P
duration	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		opt.duration = (opt.duration && opt.duration.constructor == Number ?$/;"	M
e	nvim/plugged/coc.nvim/build/index.js	/^	var e = new Error("Cannot find module '" + req + "'");$/;"	V
e	nvim/plugged/coc.nvim/build/index.js	/^  e = (e << mLen) | m$/;"	M
e	nvim/plugged/coc.nvim/build/index.js	/^  var e, m$/;"	V
e	nvim/plugged/coc.nvim/build/index.js	/^  var e, m, c$/;"	V
e	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var e = new jQuery.fx( self, opt, name );$/;"	V
each	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	each: function( callback, args ) {$/;"	M
each	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	each: function( object, callback, args ) {$/;"	M
eagCounter	nvim/plugged/coc.nvim/build/index.js	/^        var eagCounter = 0$/;"	V
eagCounter	nvim/plugged/coc.nvim/build/index.js	/^      var eagCounter = 0$/;"	V
eagCounter	nvim/plugged/coc.nvim/build/index.js	/^    var eagCounter = 0$/;"	V
earlyReturnException	nvim/plugged/coc.nvim/build/index.js	/^    var earlyReturnException = new Object();$/;"	V
easing	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	easing: {$/;"	P
echoErr	nvim/plugged/coc.nvim/build/index.js	/^function echoErr(nvim, msg) {$/;"	F
echoErr	nvim/plugged/coc.nvim/src/util/index.ts	/^export function echoErr(nvim: Neovim, msg: string): void {$/;"	f
echoLines	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async echoLines(lines: string[], truncate = false): Promise<void> {$/;"	m
echoMessage	nvim/plugged/coc.nvim/build/index.js	/^function echoMessage(nvim, msg) {$/;"	F
echoMessage	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public async echoMessage(truncate = false): Promise<void> {$/;"	m
echoMessage	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async echoMessage(item: ListItem): Promise<void> {$/;"	m
echoMessage	nvim/plugged/coc.nvim/src/util/index.ts	/^export function echoMessage(nvim: Neovim, msg: string): void {$/;"	f
echoMsg	nvim/plugged/coc.nvim/build/index.js	/^function echoMsg(nvim, msg, hl) {$/;"	F
echoMsg	nvim/plugged/coc.nvim/src/util/index.ts	/^function echoMsg(nvim: Neovim, msg: string, hl: string): void {$/;"	f
echoWarning	nvim/plugged/coc.nvim/build/index.js	/^function echoWarning(nvim, msg) {$/;"	F
echoWarning	nvim/plugged/coc.nvim/src/util/index.ts	/^export function echoWarning(nvim: Neovim, msg: string): void {$/;"	f
echo_signature	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:echo_signature(parts)$/;"	f
edit	nvim/plugged/coc.nvim/build/index.js	/^        let edit = { changes };$/;"	O
edit	nvim/plugged/coc.nvim/build/index.js	/^        let edit = { range: change.range, newText: change.text };$/;"	O
edit	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async edit(file?: string): Promise<Buffer> {$/;"	m
editAfter	nvim/plugged/coc.nvim/build/index.js	/^    editAfter: {$/;"	P
editBefore	nvim/plugged/coc.nvim/build/index.js	/^    editBefore: {$/;"	P
editOperations	nvim/plugged/coc.nvim/build/index.js	/^    var editOperations = [];$/;"	A
editRange	nvim/plugged/coc.nvim/build/index.js	/^function editRange(range, text, edit) {$/;"	F
editRange	nvim/plugged/coc.nvim/src/util/position.ts	/^export function editRange(range: Range, text: string, edit: TextEdit): string {$/;"	f
edit_file	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def edit_file(content)$/;"	f	class:Buffer
edits	nvim/plugged/coc.nvim/build/index.js	/^                        let edits = [];$/;"	A
edits	nvim/plugged/coc.nvim/build/index.js	/^                    edits: edits$/;"	P
edits	nvim/plugged/coc.nvim/build/index.js	/^                var edits = [];$/;"	A
edits	nvim/plugged/coc.nvim/build/index.js	/^        let edits = [];$/;"	A
edits	nvim/plugged/coc.nvim/build/index.js	/^        let edits = this.ranges.map(o => o.textEdit);$/;"	F
elapsed	nvim/plugged/vim-gitgutter/unplace.vim	/^let elapsed = reltime(start)$/;"	v
elixir#indent	nvim/plugged/vim-elixir/indent/elixir.vim	/^function! elixir#indent(lnum)$/;"	f
elixir#indent#handle_follow_prev_nb	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_follow_prev_nb(context)$/;"	f
elixir#indent#handle_following_trailing_binary_operator	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_binary_operator(context)$/;"	f
elixir#indent#handle_inside_block	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_block(context)$/;"	f
elixir#indent#handle_inside_generic_block	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_generic_block(context)$/;"	f
elixir#indent#handle_starts_with_binary_operator	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_binary_operator(context)$/;"	f
elixir#indent#handle_starts_with_end	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_end(context)$/;"	f
elixir#indent#handle_starts_with_pipe	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_pipe(context)$/;"	f
elixir#indent#handle_starts_with_string_continuation	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_string_continuation(context)$/;"	f
elixir#indent#handle_top_of_file	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_top_of_file(context)$/;"	f
elixir#indent#indent	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#indent(lnum)$/;"	f
elixir#indent#searchpair_back_skip	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#searchpair_back_skip()$/;"	f
elixir#util#get_filename	nvim/plugged/vim-elixir/autoload/elixir/util.vim	/^function! elixir#util#get_filename(word) abort$/;"	f
elm_ls#GetOptions	nvim/plugged/ale/ale_linters/elm/elm_ls.vim	/^function! elm_ls#GetOptions(buffer) abort$/;"	f
elm_ls#GetRootDir	nvim/plugged/ale/ale_linters/elm/elm_ls.vim	/^function! elm_ls#GetRootDir(buffer) abort$/;"	f
embrace	nvim/plugged/coc.nvim/build/index.js	/^function embrace(str) {$/;"	F
emit	nvim/plugged/coc.nvim/build/index.js	/^    emit: emit$/;"	P
emit	nvim/plugged/coc.nvim/build/index.js	/^  function emit(type, value) {$/;"	F
emitNotification	nvim/plugged/coc.nvim/build/index.js	/^    emitNotification(method, args) {$/;"	M
emmet#anchorizeURL	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#anchorizeURL(flag) abort$/;"	f
emmet#balanceTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#balanceTag(flag) range abort$/;"	f
emmet#codePretty	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#codePretty() range abort$/;"	f
emmet#completeTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#completeTag(findstart, base) abort$/;"	f
emmet#expandAbbr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandAbbr(mode, abbr) range abort$/;"	f
emmet#expandAbbrIntelligent	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandAbbrIntelligent(feedkey) abort$/;"	f
emmet#expandCursorExpr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandCursorExpr(expand, mode) abort$/;"	f
emmet#expandDollarExpr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandDollarExpr(expand) abort$/;"	f
emmet#expandWord	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandWord(abbr, type, orig) abort$/;"	f
emmet#getBaseType	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getBaseType(type) abort$/;"	f
emmet#getDollarExprs	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getDollarExprs(expand) abort$/;"	f
emmet#getDollarValueByKey	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getDollarValueByKey(key) abort$/;"	f
emmet#getExpandos	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getExpandos(type, key) abort$/;"	f
emmet#getFileType	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getFileType(...) abort$/;"	f
emmet#getFilters	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getFilters(type) abort$/;"	f
emmet#getIndentation	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getIndentation(...) abort$/;"	f
emmet#getResource	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getResource(type, name, default) abort$/;"	f
emmet#getSettings	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getSettings() abort$/;"	f
emmet#getSnippets	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getSnippets(type) abort$/;"	f
emmet#imageEncode	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#imageEncode() abort$/;"	f
emmet#imageSize	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#imageSize() abort$/;"	f
emmet#isExpandable	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#isExpandable() abort$/;"	f
emmet#isExtends	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#isExtends(type, extend) abort$/;"	f
emmet#lang#css#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#balanceTag(flag) range abort$/;"	f
emmet#lang#css#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#findTokens(str) abort$/;"	f
emmet#lang#css#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#imageEncode() abort$/;"	f
emmet#lang#css#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#imageSize() abort$/;"	f
emmet#lang#css#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#mergeLines() abort$/;"	f
emmet#lang#css#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#moveNextPrev(flag) abort$/;"	f
emmet#lang#css#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#css#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#css#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#parseTag(tag) abort$/;"	f
emmet#lang#css#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#removeTag() abort$/;"	f
emmet#lang#css#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#splitJoinTag() abort$/;"	f
emmet#lang#css#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#css#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#toggleComment() abort$/;"	f
emmet#lang#elm#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#balanceTag(flag) range abort$/;"	f
emmet#lang#elm#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#findTokens(str) abort$/;"	f
emmet#lang#elm#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#imageEncode() abort$/;"	f
emmet#lang#elm#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#mergeLines() abort$/;"	f
emmet#lang#elm#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#moveNextPrev(flag) abort$/;"	f
emmet#lang#elm#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#elm#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#elm#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#parseTag(tag) abort$/;"	f
emmet#lang#elm#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#removeTag() abort$/;"	f
emmet#lang#elm#renderNode	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#renderNode(node)$/;"	f
emmet#lang#elm#renderParam	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#renderParam(param)$/;"	f
emmet#lang#elm#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#splitJoinTag() abort$/;"	f
emmet#lang#elm#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#elm#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#toggleComment() abort$/;"	f
emmet#lang#exists	nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#exists(type) abort$/;"	f
emmet#lang#getExtends	nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#getExtends(type) abort$/;"	f
emmet#lang#haml#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#balanceTag(flag) range abort$/;"	f
emmet#lang#haml#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#findTokens(str) abort$/;"	f
emmet#lang#haml#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#imageEncode() abort$/;"	f
emmet#lang#haml#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#imageSize() abort$/;"	f
emmet#lang#haml#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#mergeLines() abort$/;"	f
emmet#lang#haml#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#moveNextPrev(flag) abort$/;"	f
emmet#lang#haml#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#haml#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#haml#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#parseTag(tag) abort$/;"	f
emmet#lang#haml#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#removeTag() abort$/;"	f
emmet#lang#haml#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#splitJoinTag() abort$/;"	f
emmet#lang#haml#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#haml#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#toggleComment() abort$/;"	f
emmet#lang#html#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#balanceTag(flag) range abort$/;"	f
emmet#lang#html#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#findTokens(str) abort$/;"	f
emmet#lang#html#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#imageEncode() abort$/;"	f
emmet#lang#html#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#imageSize() abort$/;"	f
emmet#lang#html#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#mergeLines() abort$/;"	f
emmet#lang#html#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#moveNextPrev(flag) abort$/;"	f
emmet#lang#html#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#html#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#html#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#parseTag(tag) abort$/;"	f
emmet#lang#html#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#removeTag() abort$/;"	f
emmet#lang#html#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#splitJoinTag() abort$/;"	f
emmet#lang#html#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#html#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#toggleComment() abort$/;"	f
emmet#lang#jade#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#balanceTag(flag) range abort$/;"	f
emmet#lang#jade#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#findTokens(str) abort$/;"	f
emmet#lang#jade#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#imageEncode() abort$/;"	f
emmet#lang#jade#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#imageSize() abort$/;"	f
emmet#lang#jade#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#mergeLines() abort$/;"	f
emmet#lang#jade#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#moveNextPrev(flag) abort$/;"	f
emmet#lang#jade#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#jade#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#jade#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#parseTag(tag) abort$/;"	f
emmet#lang#jade#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#removeTag() abort$/;"	f
emmet#lang#jade#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#splitJoinTag() abort$/;"	f
emmet#lang#jade#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#jade#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#toggleComment() abort$/;"	f
emmet#lang#less#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#balanceTag(flag) range abort$/;"	f
emmet#lang#less#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#findTokens(str) abort$/;"	f
emmet#lang#less#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#imageEncode() abort$/;"	f
emmet#lang#less#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#imageSize() abort$/;"	f
emmet#lang#less#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#mergeLines() abort$/;"	f
emmet#lang#less#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#moveNextPrev(flag) abort$/;"	f
emmet#lang#less#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#less#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#less#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#parseTag(tag) abort$/;"	f
emmet#lang#less#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#removeTag() abort$/;"	f
emmet#lang#less#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#splitJoinTag() abort$/;"	f
emmet#lang#less#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#less#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#toggleComment() abort$/;"	f
emmet#lang#sass#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#balanceTag(flag) range abort$/;"	f
emmet#lang#sass#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#findTokens(str) abort$/;"	f
emmet#lang#sass#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#imageEncode() abort$/;"	f
emmet#lang#sass#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#imageSize() abort$/;"	f
emmet#lang#sass#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#mergeLines() abort$/;"	f
emmet#lang#sass#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#moveNextPrev(flag) abort$/;"	f
emmet#lang#sass#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#sass#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#sass#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#parseTag(tag) abort$/;"	f
emmet#lang#sass#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#removeTag() abort$/;"	f
emmet#lang#sass#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#splitJoinTag() abort$/;"	f
emmet#lang#sass#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#sass#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#toggleComment() abort$/;"	f
emmet#lang#scss#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#balanceTag(flag) range abort$/;"	f
emmet#lang#scss#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#findTokens(str) abort$/;"	f
emmet#lang#scss#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#imageEncode() abort$/;"	f
emmet#lang#scss#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#imageSize() abort$/;"	f
emmet#lang#scss#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#mergeLines() abort$/;"	f
emmet#lang#scss#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#moveNextPrev(flag) abort$/;"	f
emmet#lang#scss#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#scss#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#scss#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#parseTag(tag) abort$/;"	f
emmet#lang#scss#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#removeTag() abort$/;"	f
emmet#lang#scss#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#splitJoinTag() abort$/;"	f
emmet#lang#scss#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#scss#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#toggleComment() abort$/;"	f
emmet#lang#slim#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#balanceTag(flag) range abort$/;"	f
emmet#lang#slim#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#findTokens(str) abort$/;"	f
emmet#lang#slim#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#imageEncode() abort$/;"	f
emmet#lang#slim#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#imageSize() abort$/;"	f
emmet#lang#slim#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#mergeLines() abort$/;"	f
emmet#lang#slim#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#moveNextPrev(flag) abort$/;"	f
emmet#lang#slim#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#slim#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#slim#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#parseTag(tag) abort$/;"	f
emmet#lang#slim#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#removeTag() abort$/;"	f
emmet#lang#slim#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#splitJoinTag() abort$/;"	f
emmet#lang#slim#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#slim#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#toggleComment() abort$/;"	f
emmet#lang#type	nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#type(type) abort$/;"	f
emmet#lorem#en#expand	nvim/plugged/emmet-vim/autoload/emmet/lorem/en.vim	/^function! emmet#lorem#en#expand(command) abort$/;"	f
emmet#lorem#ja#expand	nvim/plugged/emmet-vim/autoload/emmet/lorem/ja.vim	/^function! emmet#lorem#ja#expand(command) abort$/;"	f
emmet#mergeConfig	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeConfig(lhs, rhs) abort$/;"	f
emmet#mergeLines	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeLines() abort$/;"	f
emmet#mergeLines	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeLines() range abort$/;"	f
emmet#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#moveNextPrev(flag) abort$/;"	f
emmet#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#moveNextPrevItem(flag) abort$/;"	f
emmet#newNode	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#newNode() abort$/;"	f
emmet#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#parseIntoTree(abbr, type) abort$/;"	f
emmet#reExpandDollarExpr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#reExpandDollarExpr(expand, times) abort$/;"	f
emmet#removeTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#removeTag() abort$/;"	f
emmet#splitFilterArg	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#splitFilterArg(filters) abort$/;"	f
emmet#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#splitJoinTag() abort$/;"	f
emmet#toString	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#toString(...) abort$/;"	f
emmet#toggleComment	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#toggleComment() abort$/;"	f
emmet#unescapeDollarExpr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#unescapeDollarExpr(expand) abort$/;"	f
emmet#updateTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#updateTag() abort$/;"	f
emmet#useFilter	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#useFilter(filters, filter) abort$/;"	f
emmet#util#cache	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#cache(name, ...) abort$/;"	f
emmet#util#closePopup	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#closePopup() abort$/;"	f
emmet#util#cursorInRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#cursorInRegion(region) abort$/;"	f
emmet#util#deleteContent	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#deleteContent(region) abort$/;"	f
emmet#util#getContent	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getContent(region) abort$/;"	f
emmet#util#getContentFromURL	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getContentFromURL(url) abort$/;"	f
emmet#util#getImageSize	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getImageSize(fn) abort$/;"	f
emmet#util#getTextFromHTML	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getTextFromHTML(buf) abort$/;"	f
emmet#util#getVisualBlock	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getVisualBlock() abort$/;"	f
emmet#util#getcurpos	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getcurpos() abort$/;"	f
emmet#util#imageEncodeDecode	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#imageEncodeDecode(fn, flag) abort$/;"	f
emmet#util#imageSizeWithImageMagick	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#imageSizeWithImageMagick(fn) abort$/;"	f
emmet#util#isImageMagickInstalled	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#isImageMagickInstalled() abort$/;"	f
emmet#util#pointInRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#pointInRegion(point, region) abort$/;"	f
emmet#util#rand	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#rand() abort$/;"	f
emmet#util#regionInRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#regionInRegion(outer, inner) abort$/;"	f
emmet#util#regionIsValid	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#regionIsValid(region) abort$/;"	f
emmet#util#searchRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#searchRegion(start, end) abort$/;"	f
emmet#util#selectRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#selectRegion(region) abort$/;"	f
emmet#util#setContent	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#setContent(region, content) abort$/;"	f
emmet#util#srand	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#srand(seed) abort$/;"	f
emmet#util#unique	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#unique(arr) abort$/;"	f
emmet_unittest_complete	nvim/plugged/emmet-vim/unittest.vim	/^function! s:emmet_unittest_complete(arglead, cmdline, cmdpos)$/;"	f
empty	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			empty: function(a){return !a.firstChild;},$/;"	M
empty	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	empty: function() {$/;"	M
emptyDirSync	nvim/plugged/coc.nvim/build/index.js	/^function emptyDirSync (dir) {$/;"	F
emptyObject	nvim/plugged/coc.nvim/build/index.js	/^function emptyObject(obj) {$/;"	F
emptyObject	nvim/plugged/coc.nvim/src/util/is.ts	/^export function emptyObject(obj: any): boolean {$/;"	f
emptyRange	nvim/plugged/coc.nvim/build/index.js	/^function emptyRange(range) {$/;"	F
emptyRange	nvim/plugged/coc.nvim/src/util/position.ts	/^export function emptyRange(range: Range): boolean {$/;"	f
emptyWorkspaceEdit	nvim/plugged/coc.nvim/build/index.js	/^function emptyWorkspaceEdit(edit) {$/;"	F
emptyWorkspaceEdit	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^function emptyWorkspaceEdit(edit: WorkspaceEdit): boolean {$/;"	f
empty_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:empty_item()$/;"	f
emptydir	nvim/plugged/coc.nvim/build/index.js	/^  emptydir: emptyDir$/;"	P
emptydirSync	nvim/plugged/coc.nvim/build/index.js	/^  emptydirSync: emptyDirSync,$/;"	P
enable	nvim/plugged/coc.nvim/build/index.js	/^	function enable(namespaces) {$/;"	F
enable	nvim/plugged/coc.nvim/build/index.js	/^            enable: enableFloat$/;"	P
enable	nvim/plugged/coc.nvim/build/index.js	/^            enable: true,$/;"	P
enable	nvim/plugged/coc.nvim/build/index.js	/^  function enable(namespaces) {$/;"	F
enable	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get enable(): boolean {$/;"	m
enableHighlight	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  private enableHighlight = true$/;"	m
enable_staging_from_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:enable_staging_from_hunk_preview_window()$/;"	f
enabled	nvim/plugged/coc.nvim/build/index.js	/^	function enabled(name) {$/;"	F
enabled	nvim/plugged/coc.nvim/build/index.js	/^  function enabled(name) {$/;"	F
enabled	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public enabled = true$/;"	m
enabled	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private enabled: boolean$/;"	m
enabled	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  public get enabled(): boolean {$/;"	m
enabled	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get enabled(): boolean {$/;"	m
enabled	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			enabled: function(a){return !a.disabled;},$/;"	M
encDate	nvim/plugged/coc.nvim/build/index.js	/^const encDate = (buf, off, size, date) =>$/;"	F
encNumber	nvim/plugged/coc.nvim/build/index.js	/^const encNumber = (buf, off, size, number) =>$/;"	F
encSmallNumber	nvim/plugged/coc.nvim/build/index.js	/^const encSmallNumber = (buf, off, size, number) =>$/;"	F
encString	nvim/plugged/coc.nvim/build/index.js	/^const encString = (buf, off, size, string) =>$/;"	F
enclosingPlaceholders	nvim/plugged/coc.nvim/build/index.js	/^    enclosingPlaceholders(placeholder) {$/;"	M
enclosingPlaceholders	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public enclosingPlaceholders(placeholder: Placeholder): Placeholder[] {$/;"	m
encode	nvim/plugged/coc.nvim/build/index.js	/^  function encode(encoder, value) {$/;"	F
encode	nvim/plugged/coc.nvim/build/index.js	/^Encoder.prototype.encode = function(chunk) {$/;"	M
encode	nvim/plugged/coc.nvim/build/index.js	/^function encode (obj, opt) {$/;"	F
encode	nvim/plugged/coc.nvim/build/index.js	/^function encode(input) {$/;"	F
encode	nvim/plugged/coc.nvim/build/index.js	/^function encode(input, options) {$/;"	F
encodeNegative	nvim/plugged/coc.nvim/build/index.js	/^const encodeNegative = (num, buf) => {$/;"	F
encodePositive	nvim/plugged/coc.nvim/build/index.js	/^const encodePositive = (num, buf) => {$/;"	F
encodeTable	nvim/plugged/coc.nvim/build/index.js	/^var encodeTable = (_a = {},$/;"	F
encodeURIComponentFast	nvim/plugged/coc.nvim/build/index.js	/^function encodeURIComponentFast(uriComponent, allowSlash) {$/;"	F
encodeURIComponentMinimal	nvim/plugged/coc.nvim/build/index.js	/^function encodeURIComponentMinimal(path) {$/;"	F
encoder	nvim/plugged/coc.nvim/build/index.js	/^  var encoder = new EncodeBuffer(options);$/;"	V
encoding	nvim/plugged/coc.nvim/build/index.js	/^      encoding: "utf8",$/;"	P
end	nvim/plugged/coc.nvim/build/index.js	/^                            let end;$/;"	V
end	nvim/plugged/coc.nvim/build/index.js	/^                end: linenr,$/;"	P
end	nvim/plugged/coc.nvim/build/index.js	/^                end: { line: lnum, character: 0 }$/;"	P
end	nvim/plugged/coc.nvim/build/index.js	/^            end: start,$/;"	P
end	nvim/plugged/coc.nvim/build/index.js	/^            end: { line: end.line, col: endCol }$/;"	P
end	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.end = function() {$/;"	M
end	nvim/plugged/coc.nvim/build/index.js	/^Decoder.prototype.end = function(chunk) {$/;"	M
end	nvim/plugged/coc.nvim/build/index.js	/^Encoder.prototype.end = function(chunk) {$/;"	M
end	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.end = function (data, encoding, callback) {$/;"	M
end	nvim/plugged/coc.nvim/src/cursors/range.ts	/^    public readonly end: number,$/;"	m
end	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public end: number$/;"	m
end	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^							end = ((parts[1] == "-=" ? -1 : 1) * end) + start;$/;"	M
end	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	end: function() {$/;"	M
end	nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def end end$/;"	f
endColour	nvim/plugged/coc.nvim/build/index.js	/^  function endColour(loggingEvent) {$/;"	F
endLine	nvim/plugged/coc.nvim/build/index.js	/^            endLine: endLine$/;"	P
endOfLine	nvim/plugged/coc.nvim/build/index.js	/^  function endOfLine() {$/;"	F
end_latency_measure	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:end_latency_measure()$/;"	f
ends_with_pair_start	nvim/plugged/coc.nvim/build/index.js	/^function ends_with_pair_start(str) {$/;"	F
engines	nvim/plugged/coc.nvim/build/index.js	/^                engines: {$/;"	P
engrossResult	nvim/plugged/coc.nvim/build/index.js	/^        let engrossResult = results.find(r => r.startcol != null && r.startcol != col);$/;"	F
enqueue	nvim/plugged/coc.nvim/build/index.js	/^function enqueue (elem) {$/;"	F
ensure	nvim/plugged/coc.nvim/build/index.js	/^function ensure(target, key) {$/;"	F
ensure	nvim/plugged/coc.nvim/src/language-client/client.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	nvim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	nvim/plugged/coc.nvim/src/language-client/declaration.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	nvim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	nvim/plugged/coc.nvim/src/language-client/implementation.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	nvim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	nvim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensureDir	nvim/plugged/coc.nvim/build/index.js	/^  ensureDir: mkdirs,$/;"	P
ensureDirSync	nvim/plugged/coc.nvim/build/index.js	/^  ensureDirSync: mkdirsSync$/;"	P
ensureDocument	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private async ensureDocument(): Promise<void> {$/;"	m
ensurePath	nvim/plugged/coc.nvim/build/index.js	/^        function ensurePath(config, path) {$/;"	F
ensurePath	nvim/plugged/coc.nvim/src/language-client/client.ts	/^    function ensurePath(config: any, path: string[]): any {$/;"	f
ensurePropertyComplete	nvim/plugged/coc.nvim/build/index.js	/^    function ensurePropertyComplete(endOffset) {$/;"	F
entries	nvim/plugged/coc.nvim/build/index.js	/^            let entries = new Map();$/;"	V
entryBlockSize	nvim/plugged/coc.nvim/build/index.js	/^      const entryBlockSize = 512 * Math.ceil(h.size \/ 512)$/;"	V
entryBlockSize	nvim/plugged/coc.nvim/build/index.js	/^      let entryBlockSize = 512 * Math.ceil(h.size \/ 512)$/;"	V
entrypoint	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> entrypoint <C-R>=DockerfileReplaceInstruction("entrypoint", "ENTRYPOINT")<CR>$/;"	m
enum	nvim/plugged/coc.nvim/build/index.js	/^                enum: ['--top', '--normal', '--no-sort', '--input', '--tab',$/;"	P
enum	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^export const enum TokenType {$/;"	v
enum	nvim/plugged/coc.nvim/src/util/charCode.ts	/^export const enum CharCode {$/;"	v
enum	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const enum OperatingSystem {$/;"	v
enumerable	nvim/plugged/coc.nvim/build/index.js	/^                enumerable: false$/;"	P
enumerable	nvim/plugged/coc.nvim/build/index.js	/^            enumerable: false$/;"	P
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: false,$/;"	P
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: true,$/;"	P
enumerable	nvim/plugged/coc.nvim/build/index.js	/^    enumerable: true,$/;"	P
env	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> env <C-R>=DockerfileReplaceInstruction("env", "ENV")<CR>$/;"	m
env	nvim/plugged/coc.nvim/build/index.js	/^    env: pathEnv,$/;"	P
env	nvim/plugged/coc.nvim/src/model/document.ts	/^    private env: Env) {$/;"	m
env	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^    private env: Env,$/;"	m
env	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get env(): Env {$/;"	m
eol	nvim/plugged/coc.nvim/src/model/document.ts	/^  private eol = true$/;"	m
eq	nvim/plugged/coc.nvim/build/index.js	/^function eq (a, b, loose) {$/;"	F
eq	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			eq: function(a,i,m){return m[3]-0==i;},$/;"	M
eq	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	eq: function( i ) {$/;"	M
equalEdit	nvim/plugged/coc.nvim/build/index.js	/^function equalEdit(one, two) {$/;"	F
equalEdit	nvim/plugged/coc.nvim/src/cursors/index.ts	/^function equalEdit(one: TextEdit, two: TextEdit): boolean {$/;"	f
equals	nvim/plugged/coc.nvim/build/index.js	/^    equals(other) {$/;"	M
equals	nvim/plugged/coc.nvim/build/index.js	/^  equals: function(other) {$/;"	M
equals	nvim/plugged/coc.nvim/build/index.js	/^function equals(one, other) {$/;"	F
equals	nvim/plugged/coc.nvim/src/util/object.ts	/^export function equals(one: any, other: any): boolean {$/;"	f
equalsIgnoreCase	nvim/plugged/coc.nvim/build/index.js	/^function equalsIgnoreCase(a, b) {$/;"	F
equalsIgnoreCase	nvim/plugged/coc.nvim/src/util/string.ts	/^export function equalsIgnoreCase(a: string, b: string): boolean {$/;"	f
er	nvim/plugged/coc.nvim/build/index.js	/^      const er = new Error('did not encounter expected EOF')$/;"	V
er	nvim/plugged/coc.nvim/build/index.js	/^      const er = new Error('encountered unexpected EOF')$/;"	V
er	nvim/plugged/coc.nvim/build/index.js	/^      const er = new Error(msg)$/;"	V
er	nvim/plugged/coc.nvim/build/index.js	/^  var er = new Error('not found: ' + cmd)$/;"	V
eraseChar	nvim/plugged/coc.nvim/build/index.js	/^    eraseChar = () => {$/;"	M
eraseChar	nvim/plugged/coc.nvim/build/index.js	/^    let eraseChar;$/;"	V
err	nvim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
err	nvim/plugged/coc.nvim/build/index.js	/^                let err = '';$/;"	V
errInval	nvim/plugged/coc.nvim/build/index.js	/^    const errInval = new Error(p + ' contains invalid WIN32 path characters.')$/;"	V
errMsg	nvim/plugged/coc.nvim/build/index.js	/^function errMsg (src, dest, funcName) {$/;"	F
errWrite	nvim/plugged/coc.nvim/build/index.js	/^    errWrite(str) {$/;"	M
errWriteLine	nvim/plugged/coc.nvim/build/index.js	/^    errWriteLine(str) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^            error: (...args) => {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^            let error = new Error('Connection got disposed.');$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^          var error = new Error(obj.error);$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^        var error = new Error(er.code + ' invalid cwd ' + this.cwd)$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^        var error = new Error(obj.error);$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^      const error = new ZlibError(err.message, err.errno)$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^      var error = new Error('got illegal response body from proxy');$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^      var error = new Error('tunneling socket could not be established, ' +$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^    error(_error, _message, count) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^    error(data, ...meta) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^    error(message) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^    error(message, data) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^    error: () => { },$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^    var error = new Error('tunneling socket could not be established, ' +$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^  let error;$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^  var error = new Error(why);$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^function error(value) {$/;"	F
error	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public error(_error: Error, _message: Message, count: number): ErrorAction {$/;"	m
error	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public error(message: string): void {$/;"	m
error	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public error(message: string, data?: any): void {$/;"	m
errorEmitter	nvim/plugged/coc.nvim/build/index.js	/^    let errorEmitter = new events_1.Emitter();$/;"	V
errorHandler	nvim/plugged/coc.nvim/build/index.js	/^        let errorHandler = (error, message, count) => {$/;"	F
errorItems	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public get errorItems(): ErrorItem[] {$/;"	m
errorOnExist	nvim/plugged/coc.nvim/build/index.js	/^    errorOnExist: true$/;"	P
errors	nvim/plugged/coc.nvim/build/index.js	/^    let errors = [];$/;"	A
errors	nvim/plugged/coc.nvim/build/index.js	/^    var errors = [];$/;"	A
esc	nvim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
escClose	nvim/plugged/coc.nvim/build/index.js	/^var escClose = '\\0CLOSE'+Math.random()+'\\0';$/;"	V
escComma	nvim/plugged/coc.nvim/build/index.js	/^var escComma = '\\0COMMA'+Math.random()+'\\0';$/;"	V
escOpen	nvim/plugged/coc.nvim/build/index.js	/^var escOpen = '\\0OPEN'+Math.random()+'\\0';$/;"	V
escPeriod	nvim/plugged/coc.nvim/build/index.js	/^var escPeriod = '\\0PERIOD'+Math.random()+'\\0';$/;"	V
escSlash	nvim/plugged/coc.nvim/build/index.js	/^var escSlash = '\\0SLASH'+Math.random()+'\\0';$/;"	V
escape	nvim/plugged/coc.nvim/build/index.js	/^    static escape(value) {$/;"	M
escape	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public static escape(value: string): string {$/;"	m
escape	nvim/plugged/emmet-vim/unittest.vim	/^function! s:escape(str)$/;"	f
escape	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
escapeBraces	nvim/plugged/coc.nvim/build/index.js	/^function escapeBraces(str) {$/;"	F
escapeRegex	nvim/plugged/coc.nvim/build/index.js	/^function escapeRegex(string) {$/;"	F
escapeSingleQuote	nvim/plugged/coc.nvim/build/index.js	/^function escapeSingleQuote(str) {$/;"	F
escapeSingleQuote	nvim/plugged/coc.nvim/src/util/index.ts	/^export function escapeSingleQuote(str: string): string {$/;"	f
escape_html_attribute	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:escape_html_attribute(string)$/;"	f
escaped	nvim/plugged/coc.nvim/build/index.js	/^            let escaped;$/;"	V
escrtp	nvim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
etc	nvim/plugged/coc.nvim/build/index.js	/^var etc = '\/etc'$/;"	V
eval	nvim/plugged/coc.nvim/build/index.js	/^    eval(expr) {$/;"	M
eval	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public async eval(expression: string): Promise<void> {$/;"	m
eval	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
evalExpression	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private async evalExpression(expr: string, _mode: string): Promise<void> {$/;"	m
evalScript	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function evalScript( i, elem ) {$/;"	F
evaluate_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:evaluate_tabline(tabline)$/;"	f
even	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			even: function(a,i){return i%2==0;},$/;"	M
event	nvim/plugged/coc.nvim/build/index.js	/^        let event = {$/;"	O
event	nvim/plugged/coc.nvim/build/index.js	/^    let event;$/;"	V
event	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.event = {$/;"	P
event_attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let event_attributes_value = {$/;"	v
event_handler_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let event_handler_attributes = {'onabort': [], 'onblur': [], 'oncanplay': [], 'oncanplaythrough': [], 'onchange': [], 'onclick': [], 'oncontextmenu': [], 'ondblclick': [], 'ondrag': [], 'ondragend': [], 'ondragenter': [], 'ondragleave': [], 'ondragover': [], 'ondragstart': [], 'ondrop': [], 'ondurationchange': [], 'onemptied': [], 'onended': [], 'onerror': [], 'onfocus': [], 'onformchange': [], 'onforminput': [], 'oninput': [], 'oninvalid': [], 'onkeydown': [], 'onkeypress': [], 'onkeyup': [], 'onload': [], 'onloadeddata': [], 'onloadedmetadata': [], 'onloadstart': [], 'onmousedown': [], 'onmousemove': [], 'onmouseout': [], 'onmouseover': [], 'onmouseup': [], 'onmousewheel': [], 'onpause': [], 'onplay': [], 'onplaying': [], 'onprogress': [], 'onratechange': [], 'onreadystatechange': [], 'onscroll': [], 'onseeked': [], 'onseeking': [], 'onselect': [], 'onshow': [], 'onstalled': [], 'onsubmit': [], 'onsuspend': [], 'ontimeupdate': [], 'onvolumechange': [], 'onwaiting': [], 'onselectstart': [], 'onselectchange': []}$/;"	v
example	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def example do$/;"	f
excmds	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
exec	nvim/plugged/vim-elixir/spec/indent/if_spec.rb	/^  def exec(command, progress_func \\\\ fn(_, state) -> state end, key \\\\ nil, output \\\\ nil) do$/;"	f	class:test
exec	nvim/plugged/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^        def exec(func \\\\ fn(_, state) -> state end) do$/;"	f
exec	nvim/plugged/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^      def exec(func \\\\ fn(_, state) -> state end) do$/;"	f
execPath	nvim/plugged/coc.nvim/build/index.js	/^                    execPath: runtime,$/;"	P
exec_separator	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:exec_separator(dict, from, to, inverse, suffix)$/;"	f
executable	nvim/plugged/coc.nvim/build/index.js	/^function executable(command) {$/;"	F
executable	nvim/plugged/coc.nvim/src/util/index.ts	/^export function executable(command: string): boolean {$/;"	f
executable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
execute	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:execute(cmd)$/;"	f
execute	nvim/plugged/coc.nvim/build/index.js	/^            execute: () => {$/;"	M
execute	nvim/plugged/coc.nvim/build/index.js	/^            execute: fn$/;"	P
execute	nvim/plugged/coc.nvim/build/index.js	/^    execute(...args) {$/;"	M
execute	nvim/plugged/coc.nvim/build/index.js	/^    execute(command) {$/;"	M
execute	nvim/plugged/coc.nvim/src/commands.ts	/^  public execute(...args: any[]): void | Promise<any> {$/;"	m
execute	nvim/plugged/coc.nvim/src/commands.ts	/^  public execute(command: language.Command): void {$/;"	m
executeCommand	nvim/plugged/coc.nvim/build/index.js	/^    executeCommand(command, ...rest) {$/;"	M
executeCommand	nvim/plugged/coc.nvim/src/commands.ts	/^  public executeCommand(command: string, ...rest: any[]): Promise<any> {$/;"	m
executeLua	nvim/plugged/coc.nvim/build/index.js	/^    executeLua(code, args = []) {$/;"	M
executing	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private executing = false$/;"	m
existingLevelIndex	nvim/plugged/coc.nvim/build/index.js	/^        const existingLevelIndex = Level.levels.findIndex(lvl => lvl.levelStr === levelStr);$/;"	F
existing_mkd_refs	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:existing_mkd_refs()$/;"	f
exists	nvim/plugged/coc.nvim/build/index.js	/^    exists(key) {$/;"	M
exists	nvim/plugged/coc.nvim/build/index.js	/^exports.exists = function (filename, callback) {$/;"	M
exists	nvim/plugged/coc.nvim/src/model/db.ts	/^  public exists(key: string): boolean {$/;"	m
exists_file	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:exists_file(bufnr) abort$/;"	f
exit	nvim/plugged/coc.nvim/build/index.js	/^        const exit = () => {$/;"	F
exit	nvim/plugged/coc.nvim/build/index.js	/^        exit: () => connection.sendNotification(vscode_languageserver_protocol_1.ExitNotification.type),$/;"	M
exit	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit()$/;"	f
exit_visual_mode	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit_visual_mode()$/;"	f
exotic	nvim/plugged/coc.nvim/build/index.js	/^                        exotic: \/^https?:\/.test(val),$/;"	P
exotic	nvim/plugged/coc.nvim/build/index.js	/^                        exotic: false,$/;"	P
expand	nvim/plugged/coc.nvim/build/index.js	/^function expand(str, isTop) {$/;"	F
expandTop	nvim/plugged/coc.nvim/build/index.js	/^function expandTop(str) {$/;"	F
expando	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var expando = "jQuery" + now(), uuid = 0, windowData = {},$/;"	V
expansions	nvim/plugged/coc.nvim/build/index.js	/^  var expansions = [];$/;"	A
expectCode	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.expectCode = function(expected) {$/;"	M
expected	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 1, 'name': 'GitGutterLineRemovedFirstLine'}]$/;"	v
expected	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 2, 'name': 'GitGutterLineRemoved'}]$/;"	v
export_info	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^    def export_info(users) do$/;"	f	class:test.test.test
exports	nvim/plugged/coc.nvim/build/index.js	/^            exports: {$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^  module.exports = function inherits(ctor, superCtor) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^  var exports = {$/;"	O
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = () => new Date();$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = (flag, argv) => {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = (mode, isDir) => {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = (name = 'coc-nvim') => {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = ({ file, keepFileExt, pattern }) => {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = ({$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (Yallist) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (args, opts) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (name, defaults, argv, parse) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (size) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (str, opts) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (xs, fn) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function getLogger(logger4js, options) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function nodeRNG() {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function(val, options) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
exports	nvim/plugged/coc.nvim/webpack.config.js	/^module.exports = {$/;"	P
expose	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> expose <C-R>=DockerfileReplaceInstruction("expose", "EXPOSE")<CR>$/;"	m
expr	nvim/plugged/coc.nvim/build/index.js	/^    expr(expr) {$/;"	M
expr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	expr: {$/;"	P
expression	nvim/plugged/coc.nvim/build/index.js	/^            expression: ['allof', ['match', '**\/*', 'wholename']],$/;"	P
ext	nvim/plugged/coc.nvim/build/index.js	/^        let ext;$/;"	V
ext	nvim/plugged/coc.nvim/build/index.js	/^    ext: ext,$/;"	P
ext	nvim/plugged/coc.nvim/build/index.js	/^    ext: pathExt,$/;"	P
ext	nvim/plugged/coc.nvim/build/index.js	/^  const ext = f => f + file.ext;$/;"	F
ext	nvim/plugged/coc.nvim/build/index.js	/^  function ext(encoder, value) {$/;"	F
ext	nvim/plugged/coc.nvim/build/index.js	/^function ext (a, b) {$/;"	F
ext	nvim/plugged/coc.nvim/build/index.js	/^function ext(decoder, len) {$/;"	F
ext.add_inactive_statusline_func	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_inactive_statusline_func(name) dict$/;"	f
ext.add_statusline_func	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_func(name) dict$/;"	f
ext.add_statusline_funcref	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_funcref(function) dict$/;"	f
ext.add_theme_func	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_theme_func(name) dict$/;"	f
extAtEnd	nvim/plugged/coc.nvim/build/index.js	/^  const extAtEnd = f => {$/;"	F
extExe	nvim/plugged/coc.nvim/build/index.js	/^    extExe: pathExtExe$/;"	P
extInMiddle	nvim/plugged/coc.nvim/build/index.js	/^  const extInMiddle = f => {$/;"	F
extPacker	nvim/plugged/coc.nvim/build/index.js	/^  function extPacker(value) {$/;"	F
extUnpacker	nvim/plugged/coc.nvim/build/index.js	/^  function extUnpacker(buffer) {$/;"	F
ext_hlstate	nvim/plugged/coc.nvim/build/index.js	/^                ext_hlstate: true,$/;"	P
ext_linegrid	nvim/plugged/coc.nvim/build/index.js	/^                ext_linegrid: true$/;"	P
extend	nvim/plugged/coc.nvim/build/index.js	/^	function extend(namespace, delimiter) {$/;"	F
extend	nvim/plugged/coc.nvim/build/index.js	/^  function extend(namespace, delimiter) {$/;"	F
extend	nvim/plugged/coc.nvim/build/index.js	/^function extend (origin, add) {$/;"	F
extend	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
extendStatics	nvim/plugged/coc.nvim/build/index.js	/^var extendStatics = function(d, b) {$/;"	F
extend_opts	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
extendsDefaults	nvim/plugged/coc.nvim/build/index.js	/^    extendsDefaults(props) {$/;"	M
extendsDefaults	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public extendsDefaults(props: { [key: string]: any }): void {$/;"	m
extension	nvim/plugged/coc.nvim/build/index.js	/^            let extension = {$/;"	O
extension	nvim/plugged/coc.nvim/build/index.js	/^        let extension = {$/;"	O
extensionPath	nvim/plugged/coc.nvim/build/index.js	/^                    extensionPath: root,$/;"	P
extensionPath	nvim/plugged/coc.nvim/build/index.js	/^                extensionPath: filepath,$/;"	P
extensionPath	nvim/plugged/coc.nvim/build/index.js	/^            extensionPath: {$/;"	P
extmap	nvim/plugged/coc.nvim/build/index.js	/^var extmap = [];$/;"	A
extract	nvim/plugged/coc.nvim/build/index.js	/^const extract = opt => {$/;"	F
extractDateParts	nvim/plugged/coc.nvim/build/index.js	/^function extractDateParts(pattern, str, missingValuesDate) {$/;"	F
extractFile	nvim/plugged/coc.nvim/build/index.js	/^const extractFile = (opt, cb) => {$/;"	F
extractFileSync	nvim/plugged/coc.nvim/build/index.js	/^const extractFileSync = opt => {$/;"	F
extractSettingsInformation	nvim/plugged/coc.nvim/build/index.js	/^    extractSettingsInformation(keys) {$/;"	M
extractSettingsInformation	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private extractSettingsInformation(keys: string[]): any {$/;"	m
extractSync	nvim/plugged/coc.nvim/build/index.js	/^const extractSync = opt => {$/;"	F
extract_name	nvim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
extract_return_type	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:extract_return_type(line)$/;"	f
f	nvim/plugged/coc.nvim/build/index.js	/^    f: fileName,$/;"	P
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^AClass<T>(Fred f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^AClass<T>(Fred<T> f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^AClass<T>(Fred<T>::List f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^getThing<T>(Fred f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^getThing<T>(Fred<T> f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^getThing<T>(Fred<T>::List f);$/;"	v
f	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^  def f do$/;"	f	class:name.name
f	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^  def f do$/;"	f	class:name.name.f
factory	nvim/plugged/coc.nvim/build/index.js	/^  function factory(name, bigendian, unsigned) {$/;"	F
fadeIn	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeIn: function(speed, callback){$/;"	M
fadeOut	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeOut: function(speed, callback){$/;"	M
fadeTo	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeTo: function(speed,to,callback){$/;"	M
fakeError	nvim/plugged/coc.nvim/build/index.js	/^          const fakeError = new Error(e);$/;"	V
fast	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^ 		fast: 200,$/;"	P
fd	nvim/plugged/coc.nvim/build/index.js	/^            fd: fd,$/;"	P
fd	nvim/plugged/coc.nvim/build/index.js	/^    fd: fd,$/;"	P
feedKeys	nvim/plugged/coc.nvim/build/index.js	/^    feedKeys(keys, mode, escapeCsi) {$/;"	M
feedkeys	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async feedkeys(key: string, remap = true): Promise<void> {$/;"	m
feedkeys	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:feedkeys(keys)$/;"	f
fetch	nvim/plugged/coc.nvim/build/index.js	/^    fetch(key) {$/;"	M
fetch	nvim/plugged/coc.nvim/build/index.js	/^    fetch: fetch,$/;"	P
fetch	nvim/plugged/coc.nvim/build/index.js	/^  function fetch() {$/;"	F
fetch	nvim/plugged/coc.nvim/build/index.js	/^DecodeBuffer.prototype.fetch = function() {$/;"	M
fetch	nvim/plugged/coc.nvim/build/index.js	/^function fetch() {$/;"	F
fetch	nvim/plugged/coc.nvim/build/index.js	/^function fetch(url, data, options = {}) {$/;"	F
fetch	nvim/plugged/coc.nvim/install.sh	/^fetch() {$/;"	f
fetch	nvim/plugged/coc.nvim/src/model/db.ts	/^  public fetch(key: string): any {$/;"	m
fetch	nvim/plugged/coc.nvim/src/model/fetch.ts	/^export default function fetch(url: string, data?: string | { [key: string]: any }, options: RequestOptions = {}): Promise<string | { [key: string]: any }> {$/;"	f
fetchContent	nvim/plugged/coc.nvim/build/index.js	/^    fetchContent(id, key) {$/;"	M
fetchContent	nvim/plugged/coc.nvim/src/model/document.ts	/^  public fetchContent: Function & { clear(): void }$/;"	m
fetchContent	nvim/plugged/coc.nvim/src/model/memos.ts	/^  private fetchContent(id: string, key: string): any {$/;"	m
fetchDocumentCodeLenes	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private async fetchDocumentCodeLenes(retry = 0): Promise<void> {$/;"	m
fetch_github	nvim/plugged/html5.vim/Makefile	/^fetch_github = \\$/;"	m
fetch_local	nvim/plugged/html5.vim/Makefile	/^fetch_local = @cp -v $(1) $(2) \\$/;"	m
fetch_url	nvim/plugged/html5.vim/Makefile	/^fetch_url = \\$/;"	m
fetching	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private fetching: Set<number> = new Set()$/;"	m
fields	nvim/plugged/coc.nvim/build/index.js	/^            fields: ['name', 'size', 'exists', 'type', 'mtime_ms', 'ctime_ms'],$/;"	P
fields	nvim/plugged/coc.nvim/build/index.js	/^            let fields = [item.detail || '', obj.abbr, obj.word];$/;"	A
file	nvim/plugged/coc.nvim/build/index.js	/^            let file = files.find(f => \/^readme\/i.test(f));$/;"	F
file	nvim/plugged/coc.nvim/build/index.js	/^        vscode_uri_1.URI.file = (path) => {$/;"	M
file	nvim/plugged/coc.nvim/build/index.js	/^    URI.file = function (path) {$/;"	M
file	nvim/plugged/coc.nvim/build/index.js	/^  file: fileAppenderAdapter,$/;"	P
file	nvim/plugged/coc.nvim/src/model/mru.ts	/^  private file: string$/;"	m
file	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			file: function(a){return "file"==a.type;},$/;"	M
fileAppender	nvim/plugged/coc.nvim/build/index.js	/^function fileAppender(file, layout, logSize, numBackups, options, timezoneOffset) {$/;"	F
fileAppenderAdapter	nvim/plugged/coc.nvim/build/index.js	/^function fileAppenderAdapter(config) {$/;"	F
fileItem	nvim/plugged/coc.nvim/build/index.js	/^            let fileItem = this.fileItems.find(o => o.filepath == item.filepath);$/;"	F
fileItem	nvim/plugged/coc.nvim/build/index.js	/^        let fileItem = this.fileItems.find(o => o.filepath == filepath);$/;"	F
fileItem	nvim/plugged/coc.nvim/build/index.js	/^        let fileItem;$/;"	V
fileItems	nvim/plugged/coc.nvim/build/index.js	/^        let fileItems = [];$/;"	A
fileItems	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private fileItems: FileItem[] = []$/;"	m
fileName	nvim/plugged/coc.nvim/build/index.js	/^  function fileName(loggingEvent, specifier) {$/;"	F
fileRange	nvim/plugged/coc.nvim/build/index.js	/^                    let fileRange = {$/;"	O
fileSync	nvim/plugged/coc.nvim/build/index.js	/^  fileSync: fileAppenderAdapter$/;"	P
file_exists	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:file_exists(fname)$/;"	f
file_options	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
file_source	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
file_split_prefix	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
filename	nvim/plugged/coc.nvim/build/index.js	/^            filename: logfile,$/;"	P
filename	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:filename(bufnr) abort$/;"	f
filepath	nvim/plugged/coc.nvim/build/index.js	/^                        filepath: fsPath,$/;"	P
filepath	nvim/plugged/coc.nvim/build/index.js	/^            filepath: __filename$/;"	P
filepath	nvim/plugged/coc.nvim/src/model/source.ts	/^  public readonly filepath: string$/;"	m
files	nvim/plugged/coc.nvim/build/index.js	/^            let files = arr.map(s => path_1.default.join(folder, s));$/;"	F
files	nvim/plugged/coc.nvim/build/index.js	/^        let files = 0;$/;"	V
files	nvim/plugged/coc.nvim/build/index.js	/^    const files = await fs.readdir(this.fileObject.dir).catch(() => []);$/;"	F
filesFilter	nvim/plugged/coc.nvim/build/index.js	/^const filesFilter = (opt, files) => {$/;"	F
filetype	nvim/plugged/coc.nvim/build/index.js	/^            let filetype = 'Error';$/;"	V
filetype	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get filetype(): string {$/;"	m
filetypedetect	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  augroup filetypedetect$/;"	a
filetypes	nvim/plugged/coc.nvim/build/index.js	/^            filetypes: languageIds,$/;"	P
filetypes	nvim/plugged/coc.nvim/build/index.js	/^            let filetypes = array_1.distinct(docs.map(d => d.filetype));$/;"	F
filetypes	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get filetypes(): string[] | null {$/;"	m
filetypes	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get filetypes(): Set<string> {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/build/index.js	/^    fillClientCapabilities(capabilites) {$/;"	M
fillClientCapabilities	nvim/plugged/coc.nvim/build/index.js	/^    fillClientCapabilities(capabilities) {$/;"	M
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public abstract fillClientCapabilities(capabilities: ClientCapabilities): void$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilities: ClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/configuration.ts	/^  public fillClientCapabilities(capabilities: ClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/declaration.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/implementation.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities & SelectionRangeClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m
fillClientCapabilities	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  public fillClientCapabilities(capabilities: ClientCapabilities): void {$/;"	m
fillInitializeParams	nvim/plugged/coc.nvim/build/index.js	/^    fillInitializeParams(params) {$/;"	M
fillInitializeParams	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private fillInitializeParams(params: InitializeParams): void {$/;"	m
fillInitializeParams	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  public fillInitializeParams(params: InitializeParams): void {$/;"	m
fill_quickfix	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
filter	nvim/plugged/ale/test/script/run-vader-tests	/^function filter-vader-output() {$/;"	f
filter	nvim/plugged/coc.nvim/build/index.js	/^function filter (pattern, options) {$/;"	F
filter	nvim/plugged/coc.nvim/build/index.js	/^function filter(filter) {$/;"	F
filter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				elem.filter = (elem.filter || "").replace( \/alpha\\([^)]*\\)\/, "" ) +$/;"	M
filter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	filter: function( selector ) {$/;"	M
filter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	filter: function(t,r,not) {$/;"	M
filterFiles	nvim/plugged/coc.nvim/build/index.js	/^    filterFiles(files) {$/;"	M
filterFiles	nvim/plugged/coc.nvim/src/source/file.ts	/^  public filterFiles(files: string[]): string[] {$/;"	m
filterItems	nvim/plugged/coc.nvim/build/index.js	/^    filterItems(items) {$/;"	M
filterItems	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private filterItems(items: ListItem[]): { items: ListItem[], highlights: ListHighlights[] } {$/;"	m
filterResults	nvim/plugged/coc.nvim/build/index.js	/^    filterResults(input, cid = 0) {$/;"	M
filterResults	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public filterResults(input: string, cid = 0): VimCompleteItem[] {$/;"	m
filterText	nvim/plugged/coc.nvim/build/index.js	/^                    filterText: id,$/;"	P
filterText	nvim/plugged/coc.nvim/build/index.js	/^                filterText: key,$/;"	P
filterWords	nvim/plugged/coc.nvim/build/index.js	/^    filterWords(words, opt) {$/;"	M
filterWords	nvim/plugged/coc.nvim/src/model/source.ts	/^  protected filterWords(words: string[], opt: CompleteOption): string[] {$/;"	m
filtered	nvim/plugged/coc.nvim/build/index.js	/^        let filtered = [];$/;"	A
filtered	nvim/plugged/coc.nvim/build/index.js	/^        let filtered = placeholders.filter(o => !o.transform);$/;"	F
filtered	nvim/plugged/coc.nvim/build/index.js	/^        let filtered;$/;"	V
filtered	nvim/plugged/coc.nvim/build/index.js	/^  const filtered = regexp.filter(el => ((el != null) && (el !== '')));$/;"	F
finalPlaceholder	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public get finalPlaceholder(): CocSnippetPlaceholder {$/;"	m
find	nvim/plugged/coc.nvim/build/index.js	/^        let find = exports.validKeys.find(s => s.toLowerCase() == key.toLowerCase());$/;"	F
find	nvim/plugged/coc.nvim/build/index.js	/^  function find(start, rel) {$/;"	F
find	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	find: function( selector ) {$/;"	M
find	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	find: function( t, context ) {$/;"	M
findAndRevealPath	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr)$/;"	f
findLocations	nvim/plugged/coc.nvim/src/plugin.ts	/^  public async findLocations(id: string, method: string, params: any, openCommand?: string | false): Promise<void> {$/;"	m
findNodeAtLocation	nvim/plugged/coc.nvim/build/index.js	/^function findNodeAtLocation(root, path) {$/;"	F
findNodeAtOffset	nvim/plugged/coc.nvim/build/index.js	/^function findNodeAtOffset(node, offset, includeRightBound) {$/;"	F
findPlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    findPlaceholder(range) {$/;"	M
findPlaceholder	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public findPlaceholder(range: Range): CocSnippetPlaceholder | null {$/;"	m
findUp	nvim/plugged/coc.nvim/build/index.js	/^function findUp(name, cwd) {$/;"	F
findUp	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function findUp(name: string | string[], cwd: string): string {$/;"	f
findUp	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async findUp(filename: string | string[]): Promise<string | null> {$/;"	m
find_autoload_file	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:find_autoload_file(name)$/;"	f
find_current_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:find_current_signs(bufnr) abort$/;"	f
find_cursor_edit_diff	nvim/plugged/coc.nvim/build/index.js	/^function find_cursor_edit_diff(oldText, newText, cursor_pos) {$/;"	F
find_last_pos	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:find_last_pos(lnum, text, match)$/;"	f
find_name	nvim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
find_next	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:find_next(text)$/;"	f
find_open_window	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
finish	nvim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish	nvim/plugged/coc.nvim/build/index.js	/^    finish(err, res) {$/;"	M
finish	nvim/plugged/coc.nvim/build/index.js	/^function finish (self) {$/;"	F
finish_bindings	nvim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
fire	nvim/plugged/coc.nvim/build/index.js	/^    fire(event) {$/;"	M
fire	nvim/plugged/coc.nvim/src/events.ts	/^  public async fire(event: string, args: any[]): Promise<void> {$/;"	m
fireClose	nvim/plugged/coc.nvim/build/index.js	/^    fireClose() {$/;"	M
fireContentChanges	nvim/plugged/coc.nvim/src/model/document.ts	/^  public fireContentChanges: Function & { clear(): void }$/;"	m
fireError	nvim/plugged/coc.nvim/build/index.js	/^    fireError(error) {$/;"	M
fireError	nvim/plugged/coc.nvim/build/index.js	/^    fireError(error, message, count) {$/;"	M
firePartialMessage	nvim/plugged/coc.nvim/build/index.js	/^    firePartialMessage(info) {$/;"	M
fire_pre_triggers	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:fire_pre_triggers()$/;"	f
first	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					first = (test[1] + (test[2] || 1)) - 0, last = test[3] - 0;$/;"	M
first	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			first: function(a,i){return i==0;},$/;"	M
firstMatch	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get firstMatch(): boolean {$/;"	m
firstPlaceholder	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public get firstPlaceholder(): CocSnippetPlaceholder | null {$/;"	m
firstPosition	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private get firstPosition(): Position {$/;"	m
first_char	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:first_char(string)$/;"	f
first_line	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
fix	nvim/plugged/coc.nvim/build/index.js	/^function fix(len, method) {$/;"	F
fix	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fix: function(event) {$/;"	M
fixCompleteOption	nvim/plugged/coc.nvim/build/index.js	/^    fixCompleteOption(opt) {$/;"	M
fixCompleteOption	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private fixCompleteOption(opt: CompleteOption): void {$/;"	m
fixDocumentation	nvim/plugged/coc.nvim/build/index.js	/^function fixDocumentation(str) {$/;"	F
fixDocumentation	nvim/plugged/coc.nvim/src/languages.ts	/^function fixDocumentation(str: string): string {$/;"	f
fixDriver	nvim/plugged/coc.nvim/build/index.js	/^function fixDriver(filepath) {$/;"	F
fixDriver	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function fixDriver(filepath: string): string {$/;"	f
fixFiletype	nvim/plugged/coc.nvim/build/index.js	/^    fixFiletype(filetype) {$/;"	M
fixFiletype	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  private fixFiletype(filetype: string): string {$/;"	m
fixKey	nvim/plugged/coc.nvim/build/index.js	/^    fixKey(key) {$/;"	M
fixKey	nvim/plugged/coc.nvim/src/list/configuration.ts	/^  public fixKey(key: string): string {$/;"	m
fixLabel	nvim/plugged/coc.nvim/build/index.js	/^    fixLabel(label) {$/;"	M
fixLabel	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private fixLabel(label: string): string {$/;"	m
fixRange	nvim/plugged/coc.nvim/build/index.js	/^    fixRange(range) {$/;"	M
fixRange	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private fixRange(range: Range): Range {$/;"	m
fixStartcol	nvim/plugged/coc.nvim/build/index.js	/^    fixStartcol(opt, valids) {$/;"	M
fixStartcol	nvim/plugged/coc.nvim/build/index.js	/^    fixStartcol(position, valids) {$/;"	M
fixStartcol	nvim/plugged/coc.nvim/src/model/document.ts	/^  public fixStartcol(position: Position, valids: string[]): number {$/;"	m
fixStartcol	nvim/plugged/coc.nvim/src/model/source.ts	/^  protected fixStartcol(opt: CompleteOption, valids: string[]): number {$/;"	m
fixUserMappings	nvim/plugged/coc.nvim/build/index.js	/^    fixUserMappings(mappings) {$/;"	M
fixUserMappings	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private fixUserMappings(mappings: { [key: string]: string }): Map<string, string> {$/;"	m
fixWinEPERM	nvim/plugged/coc.nvim/build/index.js	/^const fixWinEPERM = (p, options, er, cb) => {$/;"	F
fixWinEPERM	nvim/plugged/coc.nvim/build/index.js	/^function fixWinEPERM (p, options, er, cb) {$/;"	F
fixWinEPERMSync	nvim/plugged/coc.nvim/build/index.js	/^const fixWinEPERMSync = (p, options, er) => {$/;"	F
fixWinEPERMSync	nvim/plugged/coc.nvim/build/index.js	/^function fixWinEPERMSync (p, options, er) {$/;"	F
fix_file_references	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:fix_file_references(filepath, hunk_diff)$/;"	f
flag	nvim/plugged/coc.nvim/build/index.js	/^    let flag = 'r+'$/;"	V
flags	nvim/plugged/coc.nvim/build/index.js	/^      flags: "a",$/;"	P
flags	nvim/plugged/coc.nvim/build/index.js	/^    var flags = { bools : {}, strings : {}, unknownFn: null };$/;"	O
flatMap	nvim/plugged/coc.nvim/build/index.js	/^exports.flatMap = (xs, f) => xs.reduce((x, y) => [...x, ...f(y)], []);$/;"	M
flatMap	nvim/plugged/coc.nvim/src/util/array.ts	/^export const flatMap = <T, U>(xs: T[], f: (item: T) => U[]): U[] =>$/;"	v
flex	nvim/plugged/coc.nvim/build/index.js	/^function flex(lenFunc, decodeFunc) {$/;"	F
floatBuffer	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private floatBuffer: FloatBuffer$/;"	m
floatBuffer	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private floatBuffer: FloatBuffer$/;"	m
floatFactory	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private floatFactory: FloatFactory$/;"	m
floatSupported	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get floatSupported(): boolean {$/;"	m
floating	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private floating: Floating$/;"	m
flow_elements	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let flow_elements = phrasing_elements + ['p', 'hr', 'pre', 'ul', 'ol', 'dl', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'address', 'blockquote', 'ins', 'del', 'element', 'object', 'main', 'map', 'noscript', 'section', 'nav', 'article', 'aside', 'header', 'footer', 'video', 'audio', 'figure', 'table', 'template', 'form', 'fieldset', 'menu', 'canvas', 'details']$/;"	v
flush	nvim/plugged/coc.nvim/build/index.js	/^    flush: flush,$/;"	P
flush	nvim/plugged/coc.nvim/build/index.js	/^  debounced.flush = function() {$/;"	M
flush	nvim/plugged/coc.nvim/build/index.js	/^  function flush() {$/;"	F
fmtLong	nvim/plugged/coc.nvim/build/index.js	/^function fmtLong(ms) {$/;"	F
fmtShort	nvim/plugged/coc.nvim/build/index.js	/^function fmtShort(ms) {$/;"	F
fmt_cell	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:fmt_cell(cell, max_len)$/;"	f
fmt_cell_sep	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:fmt_cell_sep(max_len)$/;"	f
fmt_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:fmt_row(cells, max_lens, col1, col2)$/;"	f
fmt_sep	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:fmt_sep(max_lens, col1, col2)$/;"	f
fn	nvim/plugged/coc.nvim/build/index.js	/^            let fn = () => { };$/;"	F
fn	nvim/plugged/coc.nvim/build/index.js	/^        let fn = (event) => {$/;"	F
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
fn	nvim/plugged/coc.nvim/src/util/throttle.ts	/^  function fn(): any {$/;"	f
fn	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	V
fname_prefix	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
fnameescape	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
fold	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async fold(kind?: string): Promise<boolean> {$/;"	m
fold	nvim/plugged/vim-elixir/spec/folding/basic_spec.rb	/^  def self.fold(content)$/;"	F
foldConfigurations	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public get foldConfigurations(): Map<string, ConfigurationModel> {$/;"	m
fold_and_replace	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def fold_and_replace(content, fold_on_line)$/;"	f	class:Buffer
foldable	nvim/plugged/vim-ruby/syntax/ruby.vim	/^function! s:foldable(...) abort$/;"	f
folded	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:folded()$/;"	f
folderPaths	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get folderPaths(): string[] {$/;"	m
folders	nvim/plugged/coc.nvim/build/index.js	/^                    let folders = workspace_1.default.workspaceFolders.map(o => vscode_uri_1.URI.parse(o.uri).fsPath);$/;"	F
folders	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private get folders(): string[] {$/;"	m
foldingRangeManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private foldingRangeManager = new FoldingRangeManager()$/;"	m
fontSize	nvim/plugged/vim-css-color/tests/example.jsx	/^			fontSize: 200$/;"	P
foo	nvim/plugged/vim-elixir/spec/syntax/comments_spec.rb	/^    def foo(<<$/;"	f
foo	nvim/plugged/vim-elixir/spec/syntax/operator_spec.rb	/^      def foo(bar \/\/ :baz)$/;"	f	class:foo
foo	nvim/plugged/vim-elixir/spec/syntax/operator_spec.rb	/^      def foo(bar \\\\ :baz)$/;"	f
foo	nvim/plugged/vim-jsdoc/test/flow.js	/^  foo: string$/;"	P
foo	nvim/plugged/vim-jsdoc/test/flow.js	/^function foo(arg1 :string, arg2: number): string {$/;"	F
foo	nvim/plugged/vim-jsdoc/test/test.js	/^  static foo(bar, baz) { } \/\/ static method$/;"	M
foo	nvim/plugged/vim-jsdoc/test/test.ts	/^  private foo(arg1: string, arg2: number = 0): void {$/;"	m
foo	nvim/plugged/vim-jsdoc/test/test.ts	/^  private foo: number$/;"	m
foo	nvim/plugged/vim-jsdoc/test/test.ts	/^function foo(foo: string = 'foo', bar: number = 1): string {$/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def foo$/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      def foo$/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      def foo(job)$/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/continuations_spec.rb	/^      def foo$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar:; end$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar=:baz$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^          def foo &bar$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo **bar$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo *bar$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(&bar)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(*)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(**)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(**bar)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(*bar)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(bar,$/;"	f
for	nvim/plugged/coc.nvim/build/index.js	/^  for(var k in env) {$/;"	M
forEach	nvim/plugged/coc.nvim/build/index.js	/^    forEach(callback, thisArg) {$/;"	M
forEach	nvim/plugged/coc.nvim/build/index.js	/^    forEach(callbackfn, thisArg) {$/;"	M
forEach	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.forEach = function (fn, thisp) {$/;"	M
forEach	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public forEach(callback: (uri: string, diagnostics: Diagnostic[], collection: DiagnosticCollection) => any, thisArg?: any): void {$/;"	m
forEachReverse	nvim/plugged/coc.nvim/build/index.js	/^    forEachReverse(callbackfn, thisArg) {$/;"	M
forEachReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.forEachReverse = function (fn, thisp) {$/;"	M
forceColor	nvim/plugged/coc.nvim/build/index.js	/^let forceColor;$/;"	V
forceDebug	nvim/plugged/coc.nvim/build/index.js	/^        let forceDebug;$/;"	V
forceDocumentSync	nvim/plugged/coc.nvim/build/index.js	/^    forceDocumentSync() {$/;"	M
forceDocumentSync	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private forceDocumentSync(): void {$/;"	m
forceSync	nvim/plugged/coc.nvim/build/index.js	/^    forceSync(ignorePause = true) {$/;"	M
forceSync	nvim/plugged/coc.nvim/src/model/document.ts	/^  public forceSync(ignorePause = true): void {$/;"	m
foregroundColors	nvim/plugged/coc.nvim/build/index.js	/^const foregroundColors = {$/;"	O
forkOptions	nvim/plugged/coc.nvim/build/index.js	/^                let forkOptions = {$/;"	O
format	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.format = function () {$/;"	M
format	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.format = function () {$/;"	M
format	nvim/plugged/coc.nvim/build/index.js	/^function format(documentText, range, options) {$/;"	F
format	nvim/plugged/coc.nvim/build/index.js	/^function format(str, tokens) {$/;"	F
formatArgs	nvim/plugged/coc.nvim/build/index.js	/^function formatArgs(args) {$/;"	F
formatAsDate	nvim/plugged/coc.nvim/build/index.js	/^  function formatAsDate(loggingEvent, specifier) {$/;"	F
formatManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private formatManager = new FormatManager()$/;"	m
formatMessage	nvim/plugged/coc.nvim/build/index.js	/^  function formatMessage(loggingEvent) {$/;"	F
formatRangeManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private formatRangeManager = new FormatRangeManager()$/;"	m
formatText	nvim/plugged/coc.nvim/build/index.js	/^    var formatText;$/;"	V
formatTextStart	nvim/plugged/coc.nvim/build/index.js	/^    var formatTextStart;$/;"	V
formatUri	nvim/plugged/coc.nvim/build/index.js	/^function formatUri(uri) {$/;"	F
formatUri	nvim/plugged/coc.nvim/src/list/source/links.ts	/^function formatUri(uri: string): string {$/;"	f
format_buffer	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_buffer(b)$/;"	f
format_cmd	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
format_diary	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:format_diary()$/;"	f
format_excmd	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
format_for_log	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:format_for_log(data) abort$/;"	f
format_git_log	nvim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_mark	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
format_message	nvim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
format_name	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
format_win	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
format_wordcount	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      function! s:format_wordcount(_)$/;"	f
format_wordcount	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:format_wordcount(wordcount)$/;"	f
formattedString	nvim/plugged/coc.nvim/build/index.js	/^    let formattedString = '';$/;"	V
formatters	nvim/plugged/coc.nvim/build/index.js	/^	createDebug.formatters = {};$/;"	P
formatters	nvim/plugged/coc.nvim/build/index.js	/^  createDebug.formatters = {};$/;"	P
formattingOptions	nvim/plugged/coc.nvim/build/index.js	/^        let formattingOptions = { tabSize: 2, insertSpaces: true };$/;"	O
found	nvim/plugged/coc.nvim/build/index.js	/^  var found = []$/;"	A
fragments	nvim/plugged/coc.nvim/build/index.js	/^        let fragments = [];$/;"	A
frames	nvim/plugged/coc.nvim/build/index.js	/^const frames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];$/;"	A
freeze	nvim/plugged/coc.nvim/build/index.js	/^    freeze() {$/;"	M
freeze	nvim/plugged/coc.nvim/src/configuration/model.ts	/^  public freeze(): ConfigurationModel {$/;"	m
friendly_name	nvim/plugged/vim-gitgutter/test/runner.vim	/^  let friendly_name = FriendlyName(test)$/;"	v
from	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> from <C-R>=DockerfileReplaceInstruction("from", "FROM")<CR>$/;"	m
from	nvim/plugged/coc.nvim/build/index.js	/^    URI.from = function (components) {$/;"	M
from	nvim/plugged/coc.nvim/build/index.js	/^SafeBuffer.from = function (arg, encodingOrOffset, length) {$/;"	M
from	nvim/plugged/coc.nvim/build/index.js	/^function from(value) {$/;"	F
fromArray	nvim/plugged/coc.nvim/build/index.js	/^  function fromArray(destbuf, destoff, srcbuf, srcoff) {$/;"	F
fromCallback	nvim/plugged/coc.nvim/build/index.js	/^exports.fromCallback = function (fn) {$/;"	M
fromKeywordOption	nvim/plugged/coc.nvim/build/index.js	/^    static fromKeywordOption(keywordOption) {$/;"	M
fromKeywordOption	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public static fromKeywordOption(keywordOption: string): Range[] {$/;"	m
fromLines	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public async fromLines(lines: string[]): Promise<void> {$/;"	m
fromNegativeBE	nvim/plugged/coc.nvim/build/index.js	/^  function fromNegativeBE(buffer, offset, value) {$/;"	F
fromNegativeLE	nvim/plugged/coc.nvim/build/index.js	/^  function fromNegativeLE(buffer, offset, value) {$/;"	F
fromPlainText	nvim/plugged/coc.nvim/build/index.js	/^    function fromPlainText(plainText) {$/;"	F
fromPositiveBE	nvim/plugged/coc.nvim/build/index.js	/^  function fromPositiveBE(buffer, offset, value) {$/;"	F
fromPositiveLE	nvim/plugged/coc.nvim/build/index.js	/^  function fromPositiveLE(buffer, offset, value) {$/;"	F
fromPromise	nvim/plugged/coc.nvim/build/index.js	/^exports.fromPromise = function (fn) {$/;"	M
fromString	nvim/plugged/coc.nvim/build/index.js	/^    function fromString(buffer, offset, str, raddix) {$/;"	F
fromString	nvim/plugged/coc.nvim/build/index.js	/^    function fromString(value) {$/;"	F
fromString	nvim/plugged/coc.nvim/build/index.js	/^function fromString(value) {$/;"	F
fromWinid	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private fromWinid: number$/;"	m
fromWorkspaceEdit	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public async fromWorkspaceEdit(edit: WorkspaceEdit, filetype?: string): Promise<void> {$/;"	m
fs$rename	nvim/plugged/coc.nvim/build/index.js	/^      fs$rename(from, to, function CB (er) {$/;"	M
fsPath	nvim/plugged/coc.nvim/build/index.js	/^        let fsPath;$/;"	V
ft	nvim/plugged/coc.nvim/build/index.js	/^                let ft = setTimeout(() => {$/;"	F
ft	nvim/plugged/coc.nvim/build/index.js	/^        let ft = '';$/;"	V
fugitive	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#BlameComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameSyntax	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#BufReadCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus() abort$/;"	f
fugitive#BufWriteCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#Cd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#CommitComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P) abort$/;"	f
fugitive#CommonDir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
fugitive#Complete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteObject	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#Cwindow	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#Diffsplit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, args) abort$/;"	f
fugitive#EditComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Expand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#FetchComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P) abort$/;"	f
fugitive#FileReadCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GitVersion	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#Init	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#LogCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P) abort$/;"	f
fugitive#MessageCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#Object	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, args) abort$/;"	f
fugitive#Path	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#Prepare	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
fugitive#PrepareDirEnvArgv	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvArgv(...) abort$/;"	f
fugitive#PullComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P) abort$/;"	f
fugitive#PushComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P) abort$/;"	f
fugitive#ReadCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#ReadComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P) abort$/;"	f
fugitive#ReloadStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#RemoteUrl	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#RevParse	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P) abort$/;"	f
fugitive#SourceCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#StatusCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#StatusCfile() abort$/;"	f
fugitive#Statusline	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#WqCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#buffer	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#delete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#detect	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#filereadable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#head	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#isdirectory	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive_blame	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_commit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive_diff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_folding	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_folding$/;"	a
fugitive_merge	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_merge$/;"	a
fugitive_status	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
fulfill	nvim/plugged/coc.nvim/build/index.js	/^    function fulfill(value) { resume("next", value); }$/;"	F
fulfilled	nvim/plugged/coc.nvim/build/index.js	/^        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }$/;"	F
fullLen	nvim/plugged/coc.nvim/build/index.js	/^    fullLen(marker) {$/;"	M
fullLen	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public fullLen(marker: Marker): number {$/;"	m
fun	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^    def fun do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
func	nvim/plugged/coc.nvim/build/index.js	/^    function func(value) {$/;"	F
func	nvim/plugged/coc.nvim/build/index.js	/^function func(value) {$/;"	F
func	nvim/plugged/coc.nvim/src/util/is.ts	/^export function func(value: any): value is Function {$/;"	f
func	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^void func<std::map<std::string, std::string<double>>>() {$/;"	f
funcs	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^  private funcs: Set<Function> = new Set()$/;"	m
funcs.buf_add_highlight	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_add_highlight(bufnr, srcId, hlGroup, line, colStart, colEnd) abort$/;"	f
funcs.buf_attach	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_attach(...)$/;"	f
funcs.buf_clear_namespace	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_clear_namespace(bufnr, srcId, startLine, endLine) abort$/;"	f
funcs.buf_del_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_del_var(bufnr, name)$/;"	f
funcs.buf_detach	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_detach()$/;"	f
funcs.buf_get_changedtick	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_changedtick(bufnr)$/;"	f
funcs.buf_get_lines	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_lines(bufnr, start, end, strict) abort$/;"	f
funcs.buf_get_mark	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_mark(bufnr, name)$/;"	f
funcs.buf_get_name	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_name(bufnr)$/;"	f
funcs.buf_get_option	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_option(bufnr, name)$/;"	f
funcs.buf_get_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_var(bufnr, name)$/;"	f
funcs.buf_is_valid	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_is_valid(bufnr)$/;"	f
funcs.buf_line_count	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_line_count(bufnr) abort$/;"	f
funcs.buf_set_lines	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_lines(bufnr, start, end, strict, ...) abort$/;"	f
funcs.buf_set_name	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_name(bufnr, name) abort$/;"	f
funcs.buf_set_option	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_option(bufnr, name, val)$/;"	f
funcs.buf_set_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_var(bufnr, name, val)$/;"	f
funcs.call_atomic	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_atomic(calls)$/;"	f
funcs.call_dict_function	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_dict_function(dict, method, args) abort$/;"	f
funcs.call_function	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_function(method, args) abort$/;"	f
funcs.command	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command(command) abort$/;"	f
funcs.command_output	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command_output(cmd)$/;"	f
funcs.create_namespace	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.create_namespace(name) abort$/;"	f
funcs.del_current_line	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_current_line(line)$/;"	f
funcs.del_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_var(name) abort$/;"	f
funcs.err_write	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_write(str)$/;"	f
funcs.err_writeln	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_writeln(str)$/;"	f
funcs.eval	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.eval(expr) abort$/;"	f
funcs.feedkeys	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.feedkeys(keys, mode, escape_csi)$/;"	f
funcs.get_api_info	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_api_info()$/;"	f
funcs.get_current_buf	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_buf()$/;"	f
funcs.get_current_line	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_line()$/;"	f
funcs.get_current_tabpage	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_tabpage()$/;"	f
funcs.get_current_win	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_win()$/;"	f
funcs.get_mode	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_mode()$/;"	f
funcs.get_option	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_option(name)$/;"	f
funcs.get_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_var(var)$/;"	f
funcs.get_vvar	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_vvar(var)$/;"	f
funcs.list_bufs	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_bufs()$/;"	f
funcs.list_runtime_paths	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_runtime_paths()$/;"	f
funcs.list_tabpages	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_tabpages()$/;"	f
funcs.list_wins	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_wins() abort$/;"	f
funcs.out_write	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.out_write(str)$/;"	f
funcs.set_client_info	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_client_info(...) abort$/;"	f
funcs.set_current_buf	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_buf(bufnr) abort$/;"	f
funcs.set_current_dir	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_dir(dir) abort$/;"	f
funcs.set_current_line	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_line(line)$/;"	f
funcs.set_current_tabpage	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_tabpage(tabnr) abort$/;"	f
funcs.set_current_win	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_win(win_id) abort$/;"	f
funcs.set_option	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_option(name, value) abort$/;"	f
funcs.set_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_var(name, value) abort$/;"	f
funcs.strwidth	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.strwidth(str)$/;"	f
funcs.subscribe	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.subscribe(...) abort$/;"	f
funcs.tabpage_del_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_del_var(tabnr, name)$/;"	f
funcs.tabpage_get_number	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_number(id)$/;"	f
funcs.tabpage_get_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_var(tabnr, name)$/;"	f
funcs.tabpage_get_win	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_win(tabnr)$/;"	f
funcs.tabpage_is_valid	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_is_valid(tabnr)$/;"	f
funcs.tabpage_list_wins	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_list_wins(tabnr)$/;"	f
funcs.tabpage_set_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_set_var(tabnr, name, value)$/;"	f
funcs.unsubscribe	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.unsubscribe(...) abort$/;"	f
funcs.win_close	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_close(win_id, ...) abort$/;"	f
funcs.win_del_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_del_var(win_id, name) abort$/;"	f
funcs.win_get_buf	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_buf(winid)$/;"	f
funcs.win_get_cursor	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_cursor(win_id) abort$/;"	f
funcs.win_get_height	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_height(win_id) abort$/;"	f
funcs.win_get_number	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_number(win_id) abort$/;"	f
funcs.win_get_option	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_option(win_id, name) abort$/;"	f
funcs.win_get_position	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_position(win_id) abort$/;"	f
funcs.win_get_tabpage	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_tabpage(win_id) abort$/;"	f
funcs.win_get_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_var(win_id, name) abort$/;"	f
funcs.win_get_width	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_width(win_id) abort$/;"	f
funcs.win_is_valid	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_is_valid(win_id) abort$/;"	f
funcs.win_set_cursor	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_cursor(win_id, pos) abort$/;"	f
funcs.win_set_height	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_height(win_id, height) abort$/;"	f
funcs.win_set_option	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_option(win_id, name, value) abort$/;"	f
funcs.win_set_var	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_var(win_id, name, value) abort$/;"	f
funcs.win_set_width	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_width(win_id, width) abort$/;"	f
function	nvim/plugged/coc.nvim/build/index.js	/^    function(p, m) {$/;"	M
function	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
function	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
function	nvim/plugged/vim-elixir/spec/syntax/strings_spec.rb	/^      def function do$/;"	f
function	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
functionName	nvim/plugged/coc.nvim/build/index.js	/^        let functionName = '';$/;"	V
fuzzyChar	nvim/plugged/coc.nvim/build/index.js	/^function fuzzyChar(a, b) {$/;"	F
fuzzyChar	nvim/plugged/coc.nvim/src/util/fuzzy.ts	/^export function fuzzyChar(a: string, b: string): boolean {$/;"	f
fuzzyMatch	nvim/plugged/coc.nvim/build/index.js	/^function fuzzyMatch(needle, text) {$/;"	F
fuzzyMatch	nvim/plugged/coc.nvim/src/util/fuzzy.ts	/^export function fuzzyMatch(needle: number[], text: string): boolean {$/;"	f
fx	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fx: function( elem, options, prop ){$/;"	M
fzf	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
fzf#complete	nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#vim#_lines	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_uniq	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...)$/;"	f
fzf#vim#buffer_lines	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...)$/;"	f
fzf#vim#complete	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, has_column, ...)$/;"	f
fzf#vim#helptags	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf_buffers	nvim/plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_restore_colors	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
fzf_vim_term	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
g	nvim/plugged/coc.nvim/build/index.js	/^  var g = new Glob(pattern, options)$/;"	V
g:AutoPairs	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":"'''", "`":"`"}$/;"	v
g:AutoPairsCenterLine	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsFlyMode	nvim/init.vim	/^let g:AutoPairsFlyMode = 0$/;"	v
g:AutoPairsFlyMode	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsFlyMode = 0$/;"	v
g:AutoPairsLoaded	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^let g:AutoPairsLoaded = 1$/;"	v
g:AutoPairsMapBS	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCR	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCR = 1$/;"	v
g:AutoPairsMapCh	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCh = 1$/;"	v
g:AutoPairsMapSpace	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapSpace = 1$/;"	v
g:AutoPairsMoveCharacter	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMoveCharacter = "()[]{}\\"'"$/;"	v
g:AutoPairsMultilineClose	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMultilineClose = 1$/;"	v
g:AutoPairsShortcutBackInsert	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsShortcutFastWrap	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsShortcutJump	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsShortcutToggle	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsSmartQuotes	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsSmartQuotes = 1$/;"	v
g:AutoPairsWildClosedPair	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsWildClosedPair = ''$/;"	v
g:NERDTree	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoDeleteBuffer	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeCreator	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirNode	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	nvim/plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeIgnore	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeKeyMap	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapOpenVSplit	nvim/init.vim	/^let g:NERDTreeMapOpenVSplit = "v"$/;"	v
g:NERDTreeMenuController	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuItem	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeOldSortOrder	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeSortOrder	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"$/;"	v
g:NERDTreeUI	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:__ale_c_project_filenames	nvim/plugged/ale/autoload/ale/c.vim	/^let g:__ale_c_project_filenames = ['.git\/HEAD', 'configure', 'Makefile', 'CMakeLists.txt']$/;"	v
g:__gutentags_vim_is_leaving	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:airline#extensions#default#layout	nvim/plugged/vim-airline/t/extensions_default.vim	/^let g:airline#extensions#default#layout = [$/;"	v
g:airline#extensions#example#number_of_cats	nvim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^  let g:airline#extensions#example#number_of_cats = 42$/;"	v
g:airline#extensions#localsearch#loaded	nvim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#loaded = 001$/;"	v
g:airline#extensions#obsession#indicator_text	nvim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^  let g:airline#extensions#obsession#indicator_text = '$'$/;"	v
g:airline#extensions#quickfix#location_text	nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#location_text = 'Location'$/;"	v
g:airline#extensions#quickfix#quickfix_text	nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'$/;"	v
g:airline#extensions#tabline#enabled	nvim/init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#enabled	nvim/plugged/vim-airline/t/extensions_tabline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#windowswap#indicator_text	nvim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^  let g:airline#extensions#windowswap#indicator_text = 'WS'$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^  let g:airline#themes#dark#palette.ctrlp = airline#extensions#ctrlp#generate_color_map($/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette = {}$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.accents = {$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.commandline = airline#themes#generate_color_map(s:airline_a_commandline, s:airline_b_commandline, s:airline_c_commandline)$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive = airline#themes#generate_color_map(s:airline_a_inactive, s:airline_b_inactive, s:airline_c_inactive)$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive_modified = {$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert = airline#themes#generate_color_map(s:airline_a_insert, s:airline_b_insert, s:airline_c_insert)$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_modified = {$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_paste = {$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal = airline#themes#generate_color_map(s:airline_a_normal, s:airline_b_normal, s:airline_c_normal)$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal_modified = {$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace = copy(g:airline#themes#dark#palette.insert)$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace.airline_a = [ s:airline_b_insert[0]   , '#af0000' , s:airline_b_insert[2] , 124     , ''     ]$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace_modified = g:airline#themes#dark#palette.insert_modified$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual = airline#themes#generate_color_map(s:airline_a_visual, s:airline_b_visual, s:airline_c_visual)$/;"	v
g:airline#themes#dark#palette	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual_modified = {$/;"	v
g:airline#themes#gruvbox#palette	nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^let g:airline#themes#gruvbox#palette = {}$/;"	v
g:airline_inactive_collapse	nvim/plugged/vim-airline/t/airline.vim	/^    let g:airline_inactive_collapse = 0$/;"	v
g:airline_inactive_collapse	nvim/plugged/vim-airline/t/airline.vim	/^    let g:airline_inactive_collapse = 1$/;"	v
g:airline_section_	nvim/plugged/vim-airline/t/init.vim	/^      let g:airline_section_{s} = s$/;"	v
g:airline_section_a	nvim/plugged/vim-airline/t/airline.vim	/^    let g:airline_section_a = airline#section#create(['mode', 'mode'])$/;"	v
g:airline_statusline_funcrefs	nvim/plugged/vim-airline/autoload/airline.vim	/^let g:airline_statusline_funcrefs = get(g:, 'airline_statusline_funcrefs', [])$/;"	v
g:airline_statusline_funcrefs	nvim/plugged/vim-airline/t/airline.vim	/^    let g:airline_statusline_funcrefs = []$/;"	v
g:airline_theme	nvim/plugged/vim-airline/t/airline.vim	/^let g:airline_theme = 'dark'$/;"	v
g:airline_theme	nvim/plugged/vim-airline/t/builder.vim	/^let g:airline_theme = 'dark'$/;"	v
g:airline_theme	nvim/plugged/vim-airline/t/highlighter.vim	/^let g:airline_theme = 'dark'$/;"	v
g:ale#util#error_priority	nvim/plugged/ale/autoload/ale/util.vim	/^let g:ale#util#error_priority = 5$/;"	v
g:ale#util#info_priority	nvim/plugged/ale/autoload/ale/util.vim	/^let g:ale#util#info_priority = 3$/;"	v
g:ale#util#nul_file	nvim/plugged/ale/autoload/ale/util.vim	/^        let g:ale#util#nul_file = 'nul'$/;"	v
g:ale#util#nul_file	nvim/plugged/ale/autoload/ale/util.vim	/^    let g:ale#util#nul_file = '\/dev\/null'$/;"	v
g:ale#util#style_error_priority	nvim/plugged/ale/autoload/ale/util.vim	/^let g:ale#util#style_error_priority = 2$/;"	v
g:ale#util#style_warning_priority	nvim/plugged/ale/autoload/ale/util.vim	/^let g:ale#util#style_warning_priority = 1$/;"	v
g:ale#util#warning_priority	nvim/plugged/ale/autoload/ale/util.vim	/^let g:ale#util#warning_priority = 4$/;"	v
g:ale_buffer_info	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_buffer_info = {}$/;"	v
g:ale_c_build_dir_names	nvim/plugged/ale/autoload/ale/c.vim	/^let g:ale_c_build_dir_names = get(g:, 'ale_c_build_dir_names', [$/;"	v
g:ale_change_sign_column_color	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_change_sign_column_color = get(g:, 'ale_change_sign_column_color', 0)$/;"	v
g:ale_close_preview_on_insert	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_close_preview_on_insert = get(g:, 'ale_close_preview_on_insert', 0)$/;"	v
g:ale_cmake_cmakelint_executable	nvim/plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_executable =$/;"	v
g:ale_cmake_cmakelint_options	nvim/plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_options =$/;"	v
g:ale_command_wrapper	nvim/plugged/ale/autoload/ale/job.vim	/^let g:ale_command_wrapper = get(g:, 'ale_command_wrapper', '')$/;"	v
g:ale_completion_delay	nvim/plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_delay = get(g:, 'ale_completion_delay', 100)$/;"	v
g:ale_completion_enabled	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_completion_enabled = get(g:, 'ale_completion_enabled', 0)$/;"	v
g:ale_completion_excluded_words	nvim/plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_excluded_words = get(g:, 'ale_completion_excluded_words', [])$/;"	v
g:ale_completion_max_suggestions	nvim/plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_max_suggestions = get(g:, 'ale_completion_max_suggestions', 50)$/;"	v
g:ale_completion_symbols	nvim/plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_symbols = get(g:, 'ale_completion_symbols', {$/;"	v
g:ale_completion_tsserver_autoimport	nvim/plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_tsserver_autoimport = get(g:, 'ale_completion_tsserver_autoimport', 0)$/;"	v
g:ale_cs_mcs_options	nvim/plugged/ale/ale_linters/cs/mcs.vim	/^let g:ale_cs_mcs_options = get(g:, 'ale_cs_mcs_options', '')$/;"	v
g:ale_cursor_detail	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_cursor_detail = get(g:, 'ale_cursor_detail', 0)$/;"	v
g:ale_disable_lsp	nvim/plugged/ale/autoload/ale.vim	/^let g:ale_disable_lsp = get(g:, 'ale_disable_lsp', 0)$/;"	v
g:ale_echo_cursor	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_echo_cursor = get(g:, 'ale_echo_cursor', 1)$/;"	v
g:ale_echo_delay	nvim/plugged/ale/autoload/ale/cursor.vim	/^let g:ale_echo_delay = get(g:, 'ale_echo_delay', 10)$/;"	v
g:ale_echo_msg_error_str	nvim/plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_error_str = get(g:, 'ale_echo_msg_error_str', 'Error')$/;"	v
g:ale_echo_msg_format	nvim/plugged/ale/autoload/ale/cursor.vim	/^let g:ale_echo_msg_format = get(g:, 'ale_echo_msg_format', '%code: %%s')$/;"	v
g:ale_echo_msg_info_str	nvim/plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_info_str = get(g:, 'ale_echo_msg_info_str', 'Info')$/;"	v
g:ale_echo_msg_log_str	nvim/plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_log_str = get(g:, 'ale_echo_msg_log_str', 'Log')$/;"	v
g:ale_echo_msg_warning_str	nvim/plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_warning_str = get(g:, 'ale_echo_msg_warning_str', 'Warning')$/;"	v
g:ale_enabled	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_enabled = get(g:, 'ale_enabled', 1)$/;"	v
g:ale_erlang_dialyzer_executable	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_executable =$/;"	v
g:ale_erlang_dialyzer_plt_file	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_plt_file =$/;"	v
g:ale_erlang_dialyzer_rebar3_profile	nvim/plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_rebar3_profile =$/;"	v
g:ale_erlang_erlc_options	nvim/plugged/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_options = get(g:, 'ale_erlang_erlc_options', '')$/;"	v
g:ale_filetype_blacklist	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_filetype_blacklist = [$/;"	v
g:ale_fix_buffer_data	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_fix_buffer_data = {}$/;"	v
g:ale_fix_on_save	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_fix_on_save = get(g:, 'ale_fix_on_save', 0)$/;"	v
g:ale_fixers	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_fixers = get(g:, 'ale_fixers', {})$/;"	v
g:ale_go_go111module	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_go_go111module = get(g:, 'ale_go_go111module', '')$/;"	v
g:ale_history_enabled	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_history_enabled = get(g:, 'ale_history_enabled', 1)$/;"	v
g:ale_history_log_output	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_history_log_output = get(g:, 'ale_history_log_output', 1)$/;"	v
g:ale_html_tidy_executable	nvim/plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_executable = get(g:, 'ale_html_tidy_executable', 'tidy')$/;"	v
g:ale_html_tidy_options	nvim/plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_options = get(g:, 'ale_html_tidy_options', '-q -e -language en')$/;"	v
g:ale_ignore_2_4_warnings	nvim/plugged/ale/test/.config/nvim/init.vim	/^let g:ale_ignore_2_4_warnings = 1$/;"	v
g:ale_java_pmd_options	nvim/plugged/ale/ale_linters/java/pmd.vim	/^    let g:ale_java_pmd_options = '-R category\/java\/bestpractices.xml'$/;"	v
g:ale_keep_list_window_open	nvim/plugged/ale/autoload/ale/list.vim	/^let g:ale_keep_list_window_open = get(g:, 'ale_keep_list_window_open', 0)$/;"	v
g:ale_kotlin_kotlinc_classpath	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_classpath = get(g:, 'ale_kotlin_kotlinc_classpath', '')$/;"	v
g:ale_kotlin_kotlinc_config_file	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_config_file = get(g:, 'ale_kotlin_kotlinc_config_file', '.ale_kotlinc_config')$/;"	v
g:ale_kotlin_kotlinc_enable_config	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_enable_config = get(g:, 'ale_kotlin_kotlinc_enable_config', 0)$/;"	v
g:ale_kotlin_kotlinc_module_filename	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_module_filename = get(g:, 'ale_kotlin_kotlinc_module_filename', 'module.xml')$/;"	v
g:ale_kotlin_kotlinc_options	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_options = get(g:, 'ale_kotlin_kotlinc_options', '')$/;"	v
g:ale_kotlin_kotlinc_sourcepath	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_sourcepath = get(g:, 'ale_kotlin_kotlinc_sourcepath', '')$/;"	v
g:ale_kotlin_kotlinc_use_module_file	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_use_module_file = get(g:, 'ale_kotlin_kotlinc_use_module_file', 0)$/;"	v
g:ale_lint_delay	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_delay = get(g:, 'ale_lint_delay', 200)$/;"	v
g:ale_lint_on_enter	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_enter = get(g:, 'ale_lint_on_enter', 1)$/;"	v
g:ale_lint_on_filetype_changed	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_filetype_changed = get(g:, 'ale_lint_on_filetype_changed', 1)$/;"	v
g:ale_lint_on_insert_leave	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_insert_leave = get(g:, 'ale_lint_on_insert_leave', 1)$/;"	v
g:ale_lint_on_save	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_save = get(g:, 'ale_lint_on_save', 1)$/;"	v
g:ale_lint_on_text_changed	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_text_changed = get(g:, 'ale_lint_on_text_changed', 'normal')$/;"	v
g:ale_linter_aliases	nvim/init.vim	/^let g:ale_linter_aliases = {'javascript': ['vue', 'javascript']}$/;"	v
g:ale_linter_aliases	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_linter_aliases = get(g:, 'ale_linter_aliases', {})$/;"	v
g:ale_linters	nvim/init.vim	/^let g:ale_linters = {'javascript': ['eslint'], 'ruby': ['rubocop']}$/;"	v
g:ale_linters	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_linters = get(g:, 'ale_linters', {})$/;"	v
g:ale_linters_explicit	nvim/init.vim	/^let g:ale_linters_explicit = 1$/;"	v
g:ale_linters_explicit	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_linters_explicit = get(g:, 'ale_linters_explicit', 0)$/;"	v
g:ale_linters_ignore	nvim/plugged/ale/autoload/ale.vim	/^let g:ale_linters_ignore = get(g:, 'ale_linters_ignore', {})$/;"	v
g:ale_list_vertical	nvim/plugged/ale/autoload/ale/list.vim	/^let g:ale_list_vertical = get(g:, 'ale_list_vertical', 0)$/;"	v
g:ale_list_window_size	nvim/plugged/ale/autoload/ale/list.vim	/^let g:ale_list_window_size = get(g:, 'ale_list_window_size', 10)$/;"	v
g:ale_loclist_msg_format	nvim/plugged/ale/autoload/ale/list.vim	/^let g:ale_loclist_msg_format = get(g:, 'ale_loclist_msg_format',$/;"	v
g:ale_lsp_next_message_id	nvim/plugged/ale/autoload/ale/lsp.vim	/^let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_version_id	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^let g:ale_lsp_next_version_id = 1$/;"	v
g:ale_lsp_root	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_lsp_root = get(g:, 'ale_lsp_root', {})$/;"	v
g:ale_lsp_show_message_format	nvim/plugged/ale/autoload/ale.vim	/^let g:ale_lsp_show_message_format = get(g:, 'ale_lsp_show_message_format', '%severity%:%linter%: %s')$/;"	v
g:ale_lsp_show_message_severity	nvim/plugged/ale/autoload/ale.vim	/^let g:ale_lsp_show_message_severity = get(g:, 'ale_lsp_show_message_severity', 'error')$/;"	v
g:ale_lsp_types	nvim/plugged/ale/autoload/ale/completion.vim	/^let g:ale_lsp_types = {$/;"	v
g:ale_max_buffer_history_size	nvim/plugged/ale/autoload/ale/history.vim	/^let g:ale_max_buffer_history_size = get(g:, 'ale_max_buffer_history_size', 20)$/;"	v
g:ale_max_signs	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_max_signs = get(g:, 'ale_max_signs', -1)$/;"	v
g:ale_objc_clang_options	nvim/plugged/ale/ale_linters/objc/clang.vim	/^    let g:ale_objc_clang_options = '-std=c11 -Wall'$/;"	v
g:ale_objcpp_clang_options	nvim/plugged/ale/ale_linters/objcpp/clang.vim	/^    let g:ale_objcpp_clang_options = '-std=c++14 -Wall'$/;"	v
g:ale_open_list	nvim/plugged/ale/autoload/ale/list.vim	/^let g:ale_open_list = get(g:, 'ale_open_list', 0)$/;"	v
g:ale_perl6_perl6_executable	nvim/plugged/ale/ale_linters/perl6/perl6.vim	/^let g:ale_perl6_perl6_executable =$/;"	v
g:ale_perl6_perl6_options	nvim/plugged/ale/ale_linters/perl6/perl6.vim	/^let g:ale_perl6_perl6_options =$/;"	v
g:ale_php_phan_executable	nvim/plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_executable = get(g:, 'ale_php_phan_executable', 'phan')$/;"	v
g:ale_php_phan_minimum_severity	nvim/plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_minimum_severity = get(g:, 'ale_php_phan_minimum_severity', 0)$/;"	v
g:ale_php_phan_use_client	nvim/plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_use_client = get(g:, 'ale_php_phan_use_client', 0)$/;"	v
g:ale_php_phpcs_standard	nvim/plugged/ale/ale_linters/php/phpcs.vim	/^let g:ale_php_phpcs_standard = get(g:, 'ale_php_phpcs_standard', '')$/;"	v
g:ale_php_phpmd_executable	nvim/plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_executable = get(g:, 'ale_php_phpmd_executable', 'phpmd')$/;"	v
g:ale_php_phpmd_ruleset	nvim/plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_ruleset = get(g:, 'ale_php_phpmd_ruleset', 'cleancode,codesize,controversial,design,naming,unusedcode')$/;"	v
g:ale_php_phpstan_autoload	nvim/plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_autoload = get(g:, 'ale_php_phpstan_autoload', '')$/;"	v
g:ale_php_phpstan_configuration	nvim/plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_configuration = get(g:, 'ale_php_phpstan_configuration', '')$/;"	v
g:ale_php_phpstan_executable	nvim/plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_executable = get(g:, 'ale_php_phpstan_executable', 'phpstan')$/;"	v
g:ale_php_phpstan_level	nvim/plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_level = get(g:, 'ale_php_phpstan_level', '')$/;"	v
g:ale_puppet_puppetlint_executable	nvim/plugged/ale/autoload/ale/fixers/puppetlint.vim	/^    let g:ale_puppet_puppetlint_executable = 'puppet-lint'$/;"	v
g:ale_puppet_puppetlint_options	nvim/plugged/ale/autoload/ale/fixers/puppetlint.vim	/^    let g:ale_puppet_puppetlint_options = ''$/;"	v
g:ale_python_auto_pipenv	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_python_auto_pipenv = get(g:, 'ale_python_auto_pipenv', 0)$/;"	v
g:ale_python_prospector_executable	nvim/plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_executable =$/;"	v
g:ale_python_prospector_options	nvim/plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_options =$/;"	v
g:ale_python_prospector_use_global	nvim/plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_use_global = get(g:, 'ale_python_prospector_use_global', get(g:, 'ale_use_global_executables', 0))$/;"	v
g:ale_r_lintr_lint_package	nvim/plugged/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_lint_package = get(g:, 'ale_r_lintr_lint_package', 0)$/;"	v
g:ale_r_lintr_options	nvim/plugged/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_options = get(g:, 'ale_r_lintr_options', 'with_defaults()')$/;"	v
g:ale_rename_tsserver_find_in_comments	nvim/plugged/ale/autoload/ale/rename.vim	/^let g:ale_rename_tsserver_find_in_comments = get(g:, 'ale_rename_tsserver_find_in_comments')$/;"	v
g:ale_rename_tsserver_find_in_strings	nvim/plugged/ale/autoload/ale/rename.vim	/^let g:ale_rename_tsserver_find_in_strings = get(g:, 'ale_rename_tsserver_find_in_strings')$/;"	v
g:ale_rust_ignore_error_codes	nvim/plugged/ale/autoload/ale/handlers/rust.vim	/^    let g:ale_rust_ignore_error_codes = []$/;"	v
g:ale_rust_ignore_secondary_spans	nvim/plugged/ale/autoload/ale/handlers/rust.vim	/^    let g:ale_rust_ignore_secondary_spans = 0$/;"	v
g:ale_set_balloons	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_set_balloons = get(g:, 'ale_set_balloons', has('balloon_eval') && has('gui_running'))$/;"	v
g:ale_set_highlights	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_set_highlights = get(g:, 'ale_set_highlights', has('syntax'))$/;"	v
g:ale_set_lists_synchronously	nvim/plugged/ale/test/.config/nvim/init.vim	/^let g:ale_set_lists_synchronously = 1$/;"	v
g:ale_set_loclist	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_set_loclist = get(g:, 'ale_set_loclist', 1)$/;"	v
g:ale_set_quickfix	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_set_quickfix = get(g:, 'ale_set_quickfix', 0)$/;"	v
g:ale_set_signs	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_set_signs = get(g:, 'ale_set_signs', has('signs'))$/;"	v
g:ale_sh_shell_default_shell	nvim/plugged/ale/ale_linters/sh/shell.vim	/^        let g:ale_sh_shell_default_shell = 'bash'$/;"	v
g:ale_sh_shell_default_shell	nvim/plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = fnamemodify($SHELL, ':t')$/;"	v
g:ale_sh_shell_default_shell	nvim/plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = g:ale_linters_sh_shell_default_shell$/;"	v
g:ale_sign_column_always	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_column_always = get(g:, 'ale_sign_column_always', 0)$/;"	v
g:ale_sign_error	nvim/init.vim	/^let g:ale_sign_error = '❌'$/;"	v
g:ale_sign_error	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_error = get(g:, 'ale_sign_error', '>>')$/;"	v
g:ale_sign_highlight_linenrs	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_highlight_linenrs = get(g:, 'ale_sign_highlight_linenrs', 0)$/;"	v
g:ale_sign_info	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_info = get(g:, 'ale_sign_info', g:ale_sign_warning)$/;"	v
g:ale_sign_offset	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_offset = get(g:, 'ale_sign_offset', 1000000)$/;"	v
g:ale_sign_priority	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_priority = get(g:, 'ale_sign_priority', 30)$/;"	v
g:ale_sign_style_error	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_style_error = get(g:, 'ale_sign_style_error', g:ale_sign_error)$/;"	v
g:ale_sign_style_warning	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_style_warning = get(g:, 'ale_sign_style_warning', g:ale_sign_warning)$/;"	v
g:ale_sign_warning	nvim/init.vim	/^let g:ale_sign_warning = '⚠️'$/;"	v
g:ale_sign_warning	nvim/plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_warning = get(g:, 'ale_sign_warning', '--')$/;"	v
g:ale_tex_chktex_executable	nvim/plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_executable =$/;"	v
g:ale_tex_chktex_options	nvim/plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_options =$/;"	v
g:ale_tsserver_types	nvim/plugged/ale/autoload/ale/completion.vim	/^let g:ale_tsserver_types = {$/;"	v
g:ale_type_map	nvim/plugged/ale/autoload/ale/engine.vim	/^let g:ale_type_map = get(g:, 'ale_type_map', {})$/;"	v
g:ale_update_tagstack	nvim/plugged/ale/autoload/ale/definition.vim	/^let g:ale_update_tagstack = get(g:, 'ale_update_tagstack', 1)$/;"	v
g:ale_verilog_verilator_options	nvim/plugged/ale/ale_linters/verilog/verilator.vim	/^    let g:ale_verilog_verilator_options = ''$/;"	v
g:ale_virtualenv_dir_names	nvim/plugged/ale/autoload/ale/python.vim	/^let g:ale_virtualenv_dir_names = get(g:, 'ale_virtualenv_dir_names', [$/;"	v
g:ale_virtualtext_cursor	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_virtualtext_cursor = get(g:, 'ale_virtualtext_cursor', 0)$/;"	v
g:ale_virtualtext_delay	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^let g:ale_virtualtext_delay = get(g:, 'ale_virtualtext_delay', 10)$/;"	v
g:ale_warn_about_trailing_blank_lines	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_warn_about_trailing_blank_lines = get(g:, 'ale_warn_about_trailing_blank_lines', 1)$/;"	v
g:ale_warn_about_trailing_whitespace	nvim/plugged/ale/plugin/ale.vim	/^let g:ale_warn_about_trailing_whitespace = get(g:, 'ale_warn_about_trailing_whitespace', 1)$/;"	v
g:ale_xml_xmllint_executable	nvim/plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_executable = get(g:, 'ale_xml_xmllint_executable', 'xmllint')$/;"	v
g:ale_xml_xmllint_options	nvim/plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_options = get(g:, 'ale_xml_xmllint_options', '')$/;"	v
g:aria_attributes_complete	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^  let g:aria_attributes_complete = 1$/;"	v
g:autoloaded_fugitive	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:autoloaded_fugitive_gitlab	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^let g:autoloaded_fugitive_gitlab = 1$/;"	v
g:autoloaded_rhubarb	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^let g:autoloaded_rhubarb = 1$/;"	v
g:calendar_action	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  let g:calendar_action = 'vimwiki#diary#calendar_action'$/;"	v
g:calendar_sign	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  let g:calendar_sign = 'vimwiki#diary#calendar_sign'$/;"	v
g:coc#_context	nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc#_context = {'start': 0, 'preselect': -1,'candidates': []}$/;"	v
g:coc_cygqwin_path_prefixes	nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_cygqwin_path_prefixes = get(g:, 'coc_cygqwin_path_prefixes', {})$/;"	v
g:coc_global_extensions	nvim/init.vim	/^let g:coc_global_extensions = ['coc-json', 'coc-tsserver', 'coc-eslint', 'coc-highlight', 'coc-html', 'coc-tslint', 'coc-vetur', 'coc-elixir']$/;"	v
g:coc_global_extensions	nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_global_extensions = get(g:, 'coc_global_extensions', [])$/;"	v
g:coc_selected_text	nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_selected_text = ''$/;"	v
g:coc_service_initialized	nvim/plugged/coc.nvim/plugin/coc.vim	/^let g:coc_service_initialized = 0$/;"	v
g:coc_user_config	nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_user_config = get(g:, 'coc_user_config', {})$/;"	v
g:coc_vim_commands	nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_vim_commands = []$/;"	v
g:colors_name	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:colors_name='gruvbox'$/;"	v
g:colors_name	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^let g:colors_name = 'gruvbox8'$/;"	v
g:colors_name	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^let g:colors_name = 'gruvbox8_hard'$/;"	v
g:colors_name	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^let g:colors_name = 'gruvbox8_soft'$/;"	v
g:count	nvim/plugged/vim-airline/t/util.vim	/^    let g:count = 0$/;"	v
g:cursormode_exit_mode	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^  let g:cursormode_exit_mode='n'$/;"	v
g:did_coc_loaded	nvim/plugged/coc.nvim/plugin/coc.vim	/^let g:did_coc_loaded = 1$/;"	v
g:did_ruby_ftplugin_functions	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:dispatch_compilers	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^  let g:dispatch_compilers = {}$/;"	v
g:dispatch_compilers	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^let g:dispatch_compilers['hub'] = 'git'$/;"	v
g:eelixir_default_subtype	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:eelixir_default_subtype	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:elixir_indent_debug	nvim/plugged/vim-elixir/test.init.vim	/^let g:elixir_indent_debug=1$/;"	v
g:elixir_indent_max_lookbehind	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^  let g:elixir_indent_max_lookbehind = 30$/;"	v
g:elixir_use_markdown_for_docs	nvim/plugged/vim-elixir/syntax/elixir.vim	/^  let g:elixir_use_markdown_for_docs = 0$/;"	v
g:emmet_curl_command	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_curl_command = 'curl -s -L -A Mozilla\/5.0'$/;"	v
g:emmet_debug	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_debug = 0$/;"	v
g:emmet_docroot	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_docroot = {}$/;"	v
g:emmet_html5	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_html5 = 1$/;"	v
g:eruby_default_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:fugitive_browse_handlers	nvim/plugged/fugitive-gitlab.vim/plugin/gitlab.vim	/^    let g:fugitive_browse_handlers = []$/;"	v
g:fugitive_browse_handlers	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^  let g:fugitive_browse_handlers = []$/;"	v
g:fugitive_git_command	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^  let g:fugitive_git_command = 'hub'$/;"	v
g:fugitive_git_executable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'env ' . g:fugitive_git_executable$/;"	v
g:fugitive_git_executable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:fzf#vim#buffers	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:gitgutter_grep	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^      let g:gitgutter_grep .= ' --color=never'$/;"	v
g:gitgutter_grep	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    let g:gitgutter_grep = ''$/;"	v
g:gitgutter_override_sign_column_highlight	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gitgutter_override_sign_column_highlight = 0$/;"	v
g:gitgutter_sign_allow_clobber	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_allow_clobber = 1$/;"	v
g:gruvbox_bold	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_bold=1$/;"	v
g:gruvbox_contrast_dark	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_contrast_dark='medium'$/;"	v
g:gruvbox_contrast_light	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_contrast_light='medium'$/;"	v
g:gruvbox_guisp_fallback	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_guisp_fallback='NONE'$/;"	v
g:gruvbox_improved_strings	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_improved_strings=0$/;"	v
g:gruvbox_improved_warnings	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_improved_warnings=0$/;"	v
g:gruvbox_inverse	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_inverse=1$/;"	v
g:gruvbox_invert_indent_guides	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_invert_indent_guides=0$/;"	v
g:gruvbox_italic	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let g:gruvbox_italic=0$/;"	v
g:gruvbox_italic	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let g:gruvbox_italic=1$/;"	v
g:gruvbox_termcolors	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_termcolors=256$/;"	v
g:gruvbox_undercurl	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_undercurl=1$/;"	v
g:gruvbox_underline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_underline=1$/;"	v
g:gutentags_add_ctrlp_root_markers	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'])$/;"	v
g:gutentags_fake	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:html5_aria_attributes_complete	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_aria_attributes_complete = 1$/;"	v
g:html5_event_handler_attributes_complete	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_event_handler_attributes_complete = 1$/;"	v
g:html5_microdata_attributes_complete	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_microdata_attributes_complete = 1$/;"	v
g:html5_rdfa_attributes_complete	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_rdfa_attributes_complete = 1$/;"	v
g:indentLine_color_gui	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indentLine_color_gui = s:bg2[0]$/;"	v
g:indentLine_color_gui	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:indentLine_color_gui = '#504945'$/;"	v
g:indentLine_color_gui	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:indentLine_color_gui = '#d5c4a1'$/;"	v
g:indentLine_color_gui	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:indentLine_color_gui = '#504945'$/;"	v
g:indentLine_color_gui	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:indentLine_color_gui = '#d5c4a1'$/;"	v
g:indentLine_color_gui	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:indentLine_color_gui = '#504945'$/;"	v
g:indentLine_color_gui	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:indentLine_color_gui = '#d5c4a1'$/;"	v
g:indentLine_color_term	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indentLine_color_term = s:bg2[1]$/;"	v
g:indentLine_color_term	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:indentLine_color_term = 239$/;"	v
g:indentLine_color_term	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:indentLine_color_term = 187$/;"	v
g:indentLine_color_term	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:indentLine_color_term = 239$/;"	v
g:indentLine_color_term	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:indentLine_color_term = 187$/;"	v
g:indentLine_color_term	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:indentLine_color_term = 239$/;"	v
g:indentLine_color_term	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:indentLine_color_term = 180$/;"	v
g:indent_guides_auto_colors	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indent_guides_auto_colors = 0$/;"	v
g:io_fugitive	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:jsdoc_access_descriptions	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_access_descriptions     = get(g:, 'jsdoc_access_descriptions')$/;"	v
g:jsdoc_additional_descriptions	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_additional_descriptions = get(g:, 'jsdoc_additional_descriptions')$/;"	v
g:jsdoc_allow_input_prompt	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_allow_input_prompt      = get(g:, 'jsdoc_allow_input_prompt')$/;"	v
g:jsdoc_allow_shorthand	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_allow_shorthand         = get(g:, 'jsdoc_allow_shorthand')$/;"	v
g:jsdoc_custom_args_hook	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_custom_args_hook = exists('g:jsdoc_custom_args_hook')$/;"	v
g:jsdoc_custom_args_regex_only	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_custom_args_regex_only  = get(g:, 'jsdoc_custom_args_regex_only')$/;"	v
g:jsdoc_enable_es6	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_enable_es6              = get(g:, 'jsdoc_enable_es6')$/;"	v
g:jsdoc_input_description	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_input_description       = get(g:, 'jsdoc_input_description')$/;"	v
g:jsdoc_param_description_separator	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_param_description_separator =$/;"	v
g:jsdoc_return	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_return                  = get(g:, 'jsdoc_return', 1)$/;"	v
g:jsdoc_return_description	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_return_description      = get(g:, 'jsdoc_return_description', 1)$/;"	v
g:jsdoc_tags	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_tags = exists('g:jsdoc_tags')$/;"	v
g:jsdoc_type_hook	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_type_hook = exists('g:jsdoc_type_hook')$/;"	v
g:jsdoc_underscore_private	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_underscore_private      = get(g:, 'jsdoc_underscore_private')$/;"	v
g:jsdoc_user_defined_tags	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_user_defined_tags = exists('g:jsdoc_user_defined_tags')$/;"	v
g:lightline#colorscheme#gruvbox#palette	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let g:lightline#colorscheme#gruvbox#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:loaded_airline	nvim/plugged/vim-airline/plugin/airline.vim	/^let g:loaded_airline = 1$/;"	v
g:loaded_ale	nvim/plugged/ale/plugin/ale.vim	/^let g:loaded_ale = 1$/;"	v
g:loaded_ale_dont_use_this_in_other_plugins_please	nvim/plugged/ale/plugin/ale.vim	/^let g:loaded_ale_dont_use_this_in_other_plugins_please = 1$/;"	v
g:loaded_commentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_emmet_vim	nvim/plugged/emmet-vim/plugin/emmet.vim	/^let g:loaded_emmet_vim = 1$/;"	v
g:loaded_fugitive	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_fugitive_gitlab	nvim/plugged/fugitive-gitlab.vim/plugin/gitlab.vim	/^let g:loaded_fugitive_gitlab = 1$/;"	v
g:loaded_gitgutter	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:loaded_gitgutter = 1$/;"	v
g:loaded_gutentags	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_nerdtree_autoload	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	nvim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_plug	nvim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_rhubarb	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^let g:loaded_rhubarb = 1$/;"	v
g:loaded_syntastic_vue_eslint_checker	nvim/plugged/vim-vue/syntax_checkers/vue/eslint.vim	/^let g:loaded_syntastic_vue_eslint_checker = 1$/;"	v
g:loaded_tagbar	nvim/plugged/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_vimwiki	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let g:loaded_vimwiki = 1$/;"	v
g:loaded_vimwiki_auto	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^let g:loaded_vimwiki_auto = 1$/;"	v
g:loaded_vimwiki_diary_auto	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^let g:loaded_vimwiki_diary_auto = 1$/;"	v
g:loaded_vimwiki_html_auto	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^let g:loaded_vimwiki_html_auto = 1$/;"	v
g:loaded_vimwiki_list_auto	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^let g:loaded_vimwiki_list_auto = 1$/;"	v
g:loaded_vimwiki_tbl_auto	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^let g:loaded_vimwiki_tbl_auto = 1$/;"	v
g:mapleader	nvim/plugged/ale/test/.config/nvim/init.vim	/^let g:mapleader=','$/;"	v
g:multi_cursor_normal_maps	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_normal_maps =$/;"	v
g:multi_cursor_start_word_key	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^    let g:multi_cursor_start_word_key = g:multi_cursor_next_key$/;"	v
g:multi_cursor_visual_maps	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_visual_maps =$/;"	v
g:niji_dark_colours	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:plugs_order	nvim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:pug_self_closing_tags	nvim/plugged/vim-pug/indent/pug.vim	/^  let g:pug_self_closing_tags = 'meta|link|img|hr|br|input'$/;"	v
g:rainbow_conf	nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_ctermfgs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_guifgs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rbpt_colorpairs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:rbpt_colorpairs =$/;"	v
g:rbpt_colorpairs	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:ruby_default_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# "." ? "" : v:val')$/;"	v
g:ruby_default_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_default_path = s:query_path($HOME)$/;"	v
g:ruby_indent_access_modifier_style	nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_access_modifier_style = 'normal'$/;"	v
g:ruby_indent_assignment_style	nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_assignment_style = 'hanging'$/;"	v
g:ruby_indent_block_style	nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_block_style = 'expression'$/;"	v
g:ruby_version_paths	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))$/;"	v
g:ruby_version_paths	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let g:ruby_version_paths = {}$/;"	v
g:rubycomplete_buffer_loading	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_classes_in_global	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_include_object	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:taboo_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  let g:taboo_tabline = 0$/;"	v
g:tagbar#icon_closed	nvim/plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	nvim/plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_iconchars	nvim/plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	nvim/plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▶', '▼']$/;"	v
g:terminal_ansi_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_ansi_colors = ['#282828', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^  let g:terminal_ansi_colors = ['#fbf1c7', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_ansi_colors = ['#1d2021', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^  let g:terminal_ansi_colors = ['#f9f5d7', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_ansi_colors = ['#32302f', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^  let g:terminal_ansi_colors = ['#f2e5bc', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_color_0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_0 = s:bg0[0]$/;"	v
g:terminal_color_0	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_0 = '#282828'$/;"	v
g:terminal_color_0	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_0 = '#fbf1c7'$/;"	v
g:terminal_color_0	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_0 = '#1d2021'$/;"	v
g:terminal_color_0	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_0 = '#f9f5d7'$/;"	v
g:terminal_color_0	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_0 = '#32302f'$/;"	v
g:terminal_color_0	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_0 = '#f2e5bc'$/;"	v
g:terminal_color_1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_1 = s:gb.neutral_red[0]$/;"	v
g:terminal_color_1	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_10	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_10 = s:green[0]$/;"	v
g:terminal_color_10	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_10 = '#b8bb26'$/;"	v
g:terminal_color_10	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_10 = '#79740e'$/;"	v
g:terminal_color_10	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_10 = '#b8bb26'$/;"	v
g:terminal_color_10	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_10 = '#79740e'$/;"	v
g:terminal_color_10	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_10 = '#b8bb26'$/;"	v
g:terminal_color_10	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_10 = '#79740e'$/;"	v
g:terminal_color_11	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_11 = s:yellow[0]$/;"	v
g:terminal_color_11	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_11 = '#fabd2f'$/;"	v
g:terminal_color_11	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_11 = '#b57614'$/;"	v
g:terminal_color_11	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_11 = '#fabd2f'$/;"	v
g:terminal_color_11	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_11 = '#b57614'$/;"	v
g:terminal_color_11	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_11 = '#fabd2f'$/;"	v
g:terminal_color_11	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_11 = '#b57614'$/;"	v
g:terminal_color_12	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_12 = s:blue[0]$/;"	v
g:terminal_color_12	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_12 = '#83a598'$/;"	v
g:terminal_color_12	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_12 = '#076678'$/;"	v
g:terminal_color_12	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_12 = '#83a598'$/;"	v
g:terminal_color_12	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_12 = '#076678'$/;"	v
g:terminal_color_12	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_12 = '#83a598'$/;"	v
g:terminal_color_12	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_12 = '#076678'$/;"	v
g:terminal_color_13	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_13 = s:purple[0]$/;"	v
g:terminal_color_13	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_13 = '#d3869b'$/;"	v
g:terminal_color_13	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_13 = '#8f3f71'$/;"	v
g:terminal_color_13	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_13 = '#d3869b'$/;"	v
g:terminal_color_13	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_13 = '#8f3f71'$/;"	v
g:terminal_color_13	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_13 = '#d3869b'$/;"	v
g:terminal_color_13	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_13 = '#8f3f71'$/;"	v
g:terminal_color_14	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_14 = s:aqua[0]$/;"	v
g:terminal_color_14	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_14 = '#8ec07c'$/;"	v
g:terminal_color_14	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_14 = '#427b58'$/;"	v
g:terminal_color_14	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_14 = '#8ec07c'$/;"	v
g:terminal_color_14	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_14 = '#427b58'$/;"	v
g:terminal_color_14	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_14 = '#8ec07c'$/;"	v
g:terminal_color_14	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_14 = '#427b58'$/;"	v
g:terminal_color_15	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_15 = s:fg1[0]$/;"	v
g:terminal_color_15	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_15 = '#ebdbb2'$/;"	v
g:terminal_color_15	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_15 = '#3c3836'$/;"	v
g:terminal_color_15	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_15 = '#ebdbb2'$/;"	v
g:terminal_color_15	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_15 = '#3c3836'$/;"	v
g:terminal_color_15	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_15 = '#ebdbb2'$/;"	v
g:terminal_color_15	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_15 = '#3c3836'$/;"	v
g:terminal_color_2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_2 = s:gb.neutral_green[0]$/;"	v
g:terminal_color_2	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_3 = s:gb.neutral_yellow[0]$/;"	v
g:terminal_color_3	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_4 = s:gb.neutral_blue[0]$/;"	v
g:terminal_color_4	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_5	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_5 = s:gb.neutral_purple[0]$/;"	v
g:terminal_color_5	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_6	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_6 = s:gb.neutral_aqua[0]$/;"	v
g:terminal_color_6	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_7	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_7 = s:fg4[0]$/;"	v
g:terminal_color_7	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_7 = '#a89984'$/;"	v
g:terminal_color_7	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_7 = '#7c6f64'$/;"	v
g:terminal_color_7	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_7 = '#a89984'$/;"	v
g:terminal_color_7	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_7 = '#7c6f64'$/;"	v
g:terminal_color_7	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_7 = '#a89984'$/;"	v
g:terminal_color_7	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_7 = '#7c6f64'$/;"	v
g:terminal_color_8	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_8 = s:gray[0]$/;"	v
g:terminal_color_8	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_9	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_9 = s:red[0]$/;"	v
g:terminal_color_9	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_9 = '#fb4934'$/;"	v
g:terminal_color_9	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_9 = '#9d0006'$/;"	v
g:terminal_color_9	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_9 = '#fb4934'$/;"	v
g:terminal_color_9	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_9 = '#9d0006'$/;"	v
g:terminal_color_9	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_9 = '#fb4934'$/;"	v
g:terminal_color_9	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_9 = '#9d0006'$/;"	v
g:testname	nvim/plugged/vim-gitgutter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
g:typescript_compiler_binary	nvim/plugged/typescript-vim/compiler/typescript.vim	/^  let g:typescript_compiler_binary = "tsc"$/;"	v
g:typescript_compiler_options	nvim/plugged/typescript-vim/compiler/typescript.vim	/^  let g:typescript_compiler_options = ""$/;"	v
g:user_emmet_leader_key	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:user_emmet_leader_key = '<c-y>'$/;"	v
g:vimshell_escape_colors	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:vimshell_escape_colors = [$/;"	v
g:vimwiki_list	nvim/init.vim	/^let g:vimwiki_list = [{'path': '~\/vimwiki\/',$/;"	v
g:vue_pre_processors	nvim/init.vim	/^let g:vue_pre_processors = 'detect_on_enter'$/;"	v
g:vue_pre_processors	nvim/plugged/vim-vue/syntax/vue.vim	/^  let g:vue_pre_processors = []$/;"	v
g:xmldata_aria	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let g:xmldata_aria = {$/;"	v
g:xmldata_html5	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let g:xmldata_html5 = {$/;"	v
gL<Space>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gL<Space> <Plug>VimwikiRemoveCBInList$/;"	m
gLH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gLH <Plug>VimwikiDecreaseLvlWholeItem$/;"	m
gLL	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gLL <Plug>VimwikiIncreaseLvlWholeItem$/;"	m
gLR	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> gLR <Plug>VimwikiRenumberAllLists$/;"	m
gLh	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gLh <Plug>VimwikiDecreaseLvlWholeItem$/;"	m
gLl	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gLl <Plug>VimwikiIncreaseLvlWholeItem$/;"	m
gLr	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> gLr <Plug>VimwikiRenumberAllLists$/;"	m
gather_candidates	nvim/plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gc	nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	nvim/plugged/vim-commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gcc	nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
gcu	nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
gd	nvim/init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gen	nvim/plugged/coc.nvim/build/index.js	/^function gen(method) {$/;"	F
gen_tests	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def gen_tests(method, str)$/;"	f	class:Differ
generate	nvim/plugged/coc.nvim/build/index.js	/^internals.generate = function () {$/;"	M
generateApi	nvim/plugged/coc.nvim/build/index.js	/^    generateApi() {$/;"	M
generateRandomPipeName	nvim/plugged/coc.nvim/build/index.js	/^function generateRandomPipeName() {$/;"	F
generateUuid	nvim/plugged/coc.nvim/build/index.js	/^function generateUuid() {$/;"	F
generateUuid	nvim/plugged/coc.nvim/src/language-client/utils/uuid.ts	/^export function generateUuid(): string {$/;"	f
generate_wildignore_options	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => exports$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => id$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => isActive$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => packageJSON$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => root$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^            get: () => this.nvim$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^            get: () => {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^            get: (key, defaultValue) => {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^        get: function () {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    descriptor.get = function (...args) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    get(key) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    get(key, defaultValue) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    get(uri) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function () { return this._currentRequest[property]; },$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function () {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function() {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    wrappedProtocol.get = function (input, options, callback) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.get = function (n) {$/;"	M
get	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public get(uri: string): Diagnostic[] {$/;"	m
get	nvim/plugged/coc.nvim/src/list/configuration.ts	/^  public get<T>(key: string, defaultValue?: T): T {$/;"	m
get	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	get: function( num ) {$/;"	M
get	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	get: function( url, data, callback, type ) {$/;"	M
get	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
getAgent	nvim/plugged/coc.nvim/build/index.js	/^function getAgent(endpoint) {$/;"	F
getAgent	nvim/plugged/coc.nvim/src/model/fetch.ts	/^export function getAgent(endpoint: UrlWithStringQuery): Agent {$/;"	f
getArgs	nvim/plugged/coc.nvim/build/index.js	/^    getArgs(args) {$/;"	M
getArgsByPrefix	nvim/plugged/coc.nvim/build/index.js	/^    getArgsByPrefix(args) {$/;"	M
getBoundings	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  public async getBoundings(docs: Documentation[], offsetX = 0): Promise<WindowConfig> {$/;"	m
getChanInfo	nvim/plugged/coc.nvim/build/index.js	/^    getChanInfo(chan) {$/;"	M
getChange	nvim/plugged/coc.nvim/build/index.js	/^function getChange(oldStr, newStr, cursorEnd) {$/;"	F
getChange	nvim/plugged/coc.nvim/src/util/diff.ts	/^export function getChange(oldStr: string, newStr: string, cursorEnd?: number): Change {$/;"	f
getChangedFromEdits	nvim/plugged/coc.nvim/build/index.js	/^function getChangedFromEdits(start, edits) {$/;"	F
getChangedFromEdits	nvim/plugged/coc.nvim/src/util/position.ts	/^export function getChangedFromEdits(start: Position, edits: TextEdit[]): Position | null {$/;"	f
getChangedKeys	nvim/plugged/coc.nvim/build/index.js	/^function getChangedKeys(from, to) {$/;"	F
getChangedKeys	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function getChangedKeys(from: { [key: string]: any }, to: { [key: string]: any }): string[] {$/;"	f
getChangedPosition	nvim/plugged/coc.nvim/build/index.js	/^function getChangedPosition(start, edit) {$/;"	F
getChangedPosition	nvim/plugged/coc.nvim/src/util/position.ts	/^export function getChangedPosition(start: Position, edit: TextEdit): { line: number, character: number } {$/;"	f
getCharCodes	nvim/plugged/coc.nvim/build/index.js	/^function getCharCodes(str) {$/;"	F
getCharCodes	nvim/plugged/coc.nvim/src/util/fuzzy.ts	/^export function getCharCodes(str: string): number[] {$/;"	f
getCharMap	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private async getCharMap(): Promise<void> {$/;"	m
getChildren	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
getChildrenByName	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
getClosedParentTline	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
getCmdline	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async getCmdline(): Promise<string> {$/;"	m
getCodeActions	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async getCodeActions(bufnr: number, range?: Range, only?: CodeActionKind[]): Promise<CodeAction[]> {$/;"	m
getCodeActions	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getCodeActions(document: TextDocument, range: Range, context: CodeActionContext, silent = false): Promise<Map<string, CodeAction[]>> {$/;"	m
getCodeLens	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getCodeLens(document: TextDocument): Promise<CodeLens[]> {$/;"	m
getCollections	nvim/plugged/coc.nvim/build/index.js	/^    getCollections(uri) {$/;"	M
getCollections	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private getCollections(uri: string): DiagnosticCollection[] {$/;"	m
getColor	nvim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^function getColor(r: number, g: number, b: number): Color {$/;"	f
getColorByName	nvim/plugged/coc.nvim/build/index.js	/^    getColorByName(name) {$/;"	M
getColorRanges	nvim/plugged/coc.nvim/build/index.js	/^    getColorRanges(infos) {$/;"	M
getColorRanges	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  private getColorRanges(infos: ColorInformation[]): ColorRanges[] {$/;"	m
getCommands	nvim/plugged/coc.nvim/build/index.js	/^    getCommands(options = {}) {$/;"	M
getCommands	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async getCommands(): Promise<CommandItem[]> {$/;"	m
getCompleteConfig	nvim/plugged/coc.nvim/build/index.js	/^    getCompleteConfig() {$/;"	M
getCompleteConfig	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private getCompleteConfig(): CompleteConfig {$/;"	m
getCompleteItem	nvim/plugged/coc.nvim/build/index.js	/^    getCompleteItem(item) {$/;"	M
getCompleteItem	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private getCompleteItem(item: VimCompleteItem): VimCompleteItem | null {$/;"	m
getCompleteSources	nvim/plugged/coc.nvim/build/index.js	/^    getCompleteSources(opt) {$/;"	M
getCompleteSources	nvim/plugged/coc.nvim/src/sources.ts	/^  public getCompleteSources(opt: CompleteOption): ISource[] {$/;"	m
getConfig	nvim/plugged/coc.nvim/build/index.js	/^        function getConfig(key, defaultValue) {$/;"	F
getConfig	nvim/plugged/coc.nvim/build/index.js	/^    getConfig() {$/;"	M
getConfig	nvim/plugged/coc.nvim/build/index.js	/^    getConfig(key, defaultValue) {$/;"	M
getConfig	nvim/plugged/coc.nvim/src/completion/index.ts	/^    function getConfig<T>(key, defaultValue: T): T {$/;"	f
getConfig	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    function getConfig<T>(key: string, defaultValue: T): T {$/;"	f
getConfig	nvim/plugged/coc.nvim/src/languages.ts	/^    function getConfig<T>(key, defaultValue: T): T {$/;"	f
getConfig	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected getConfig(): WorkspaceConfiguration {$/;"	m
getConfig	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public getConfig<T>(key: string, defaultValue: T): T {$/;"	m
getConfig	nvim/plugged/coc.nvim/src/model/source.ts	/^  public getConfig<T>(key: string, defaultValue?: T): T | null {$/;"	m
getConfigFile	nvim/plugged/coc.nvim/build/index.js	/^    getConfigFile(target) {$/;"	M
getConfigFile	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public getConfigFile(target: ConfigurationTarget): string {$/;"	m
getConfigFile	nvim/plugged/coc.nvim/src/workspace.ts	/^  public getConfigFile(target: ConfigurationTarget): string {$/;"	m
getConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    getConfiguration(resource, section) {$/;"	M
getConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    getConfiguration(section, resource) {$/;"	M
getConfiguration	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public getConfiguration(section?: string, resource?: string): WorkspaceConfiguration {$/;"	m
getConfiguration	nvim/plugged/coc.nvim/src/language-client/configuration.ts	/^  private getConfiguration($/;"	m
getConfiguration	nvim/plugged/coc.nvim/src/workspace.ts	/^  public getConfiguration(section?: string, resource?: string): WorkspaceConfiguration {$/;"	m
getConfigurationModel	nvim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^function getConfigurationModel(): IConfigurationModel {$/;"	f
getConfigurationValue	nvim/plugged/coc.nvim/build/index.js	/^function getConfigurationValue(config, settingPath, defaultValue) {$/;"	F
getConfigurationValue	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function getConfigurationValue<T>($/;"	f
getConfiguredSettings	nvim/plugged/coc.nvim/build/index.js	/^    getConfiguredSettings(key) {$/;"	M
getConfiguredSettings	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private getConfiguredSettings(key: string): any {$/;"	m
getConsolidateConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    getConsolidateConfiguration() {$/;"	M
getConsolidateConfiguration	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^  private getConsolidateConfiguration(): ConfigurationModel {$/;"	m
getContext	nvim/plugged/coc.nvim/src/__tests__/extensions/global/index.js	/^    getContext: () => {$/;"	M
getContext	nvim/plugged/coc.nvim/src/__tests__/extensions/local/index.js	/^    getContext: () => {$/;"	M
getContext	nvim/plugged/coc.nvim/src/__tests__/extensions/test/index.js	/^    getContext: () => {$/;"	M
getCurrentCodeActions	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async getCurrentCodeActions(mode?: string, only?: CodeActionKind[]): Promise<CodeAction[]> {$/;"	m
getCurrentDiagnostics	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public async getCurrentDiagnostics(): Promise<Diagnostic[]> {$/;"	m
getCurrentFunctionSymbol	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async getCurrentFunctionSymbol(): Promise<string> {$/;"	m
getCurrentState	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async getCurrentState(): Promise<EditerState> {$/;"	m
getCursorPosition	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async getCursorPosition(): Promise<Position> {$/;"	m
getDate	nvim/plugged/coc.nvim/build/index.js	/^function getDate() {$/;"	F
getDeclaration	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getDeclaration(document: TextDocument, position: Position): Promise<Location[] | Location | LocationLink[] | null> {$/;"	m
getDecoder	nvim/plugged/coc.nvim/build/index.js	/^function getDecoder(options) {$/;"	F
getDecoderMethods	nvim/plugged/coc.nvim/build/index.js	/^function getDecoderMethods() {$/;"	F
getDefinition	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getDefinition(document: TextDocument, position: Position): Promise<Location[]> {$/;"	m
getDiagnosticList	nvim/plugged/coc.nvim/build/index.js	/^    getDiagnosticList() {$/;"	M
getDiagnosticList	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public getDiagnosticList(): DiagnosticItem[] {$/;"	m
getDiagnostics	nvim/plugged/coc.nvim/build/index.js	/^    getDiagnostics(uri) {$/;"	M
getDiagnostics	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public getDiagnostics(uri: string): ReadonlyArray<Diagnostic> {$/;"	m
getDiagnosticsAt	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private async getDiagnosticsAt(bufnr: number, cursor: [number, number]): Promise<Diagnostic[]> {$/;"	m
getDiagnosticsInRange	nvim/plugged/coc.nvim/build/index.js	/^    getDiagnosticsInRange(document, range) {$/;"	M
getDiagnosticsInRange	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public getDiagnosticsInRange(document: TextDocument, range: Range): Diagnostic[] {$/;"	m
getDocument	nvim/plugged/coc.nvim/build/index.js	/^    getDocument(uri) {$/;"	M
getDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  public getDocument(uri: number | string): Document {$/;"	m
getDocumentContent	nvim/plugged/coc.nvim/build/index.js	/^    getDocumentContent() {$/;"	M
getDocumentContent	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getDocumentContent(): string {$/;"	m
getDocumentHighLight	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getDocumentHighLight(document: TextDocument, position: Position): Promise<DocumentHighlight[]> {$/;"	m
getDocumentLinks	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getDocumentLinks(document: TextDocument): Promise<DocumentLink[]> {$/;"	m
getDocumentOption	nvim/plugged/coc.nvim/build/index.js	/^    getDocumentOption(name, doc) {$/;"	M
getDocumentOption	nvim/plugged/coc.nvim/src/workspace.ts	/^  private getDocumentOption(name: string, doc?: Document): Promise<any> {$/;"	m
getDocumentSymbol	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getDocumentSymbol(document: TextDocument): Promise<SymbolInformation[] | DocumentSymbol[]> {$/;"	m
getDocumentSymbols	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async getDocumentSymbols(document?: Document): Promise<SymbolInfo[]> {$/;"	m
getDocumentation	nvim/plugged/coc.nvim/build/index.js	/^function getDocumentation(item) {$/;"	F
getDocumentation	nvim/plugged/coc.nvim/src/util/complete.ts	/^export function getDocumentation(item: CompletionItem): string {$/;"	f
getEOL	nvim/plugged/coc.nvim/build/index.js	/^function getEOL(options, text) {$/;"	F
getEnableCallStackForCategory	nvim/plugged/coc.nvim/build/index.js	/^const getEnableCallStackForCategory = category => configForCategory(category).enableCallStack === true;$/;"	F
getEncoder	nvim/plugged/coc.nvim/build/index.js	/^function getEncoder(options) {$/;"	F
getEncoderMethods	nvim/plugged/coc.nvim/build/index.js	/^function getEncoderMethods() {$/;"	F
getEndOffset	nvim/plugged/coc.nvim/build/index.js	/^    getEndOffset(lnum, col, insert) {$/;"	M
getEndOffset	nvim/plugged/coc.nvim/src/model/document.ts	/^  private getEndOffset(lnum: number, col: number, insert: boolean): number {$/;"	m
getEnvironment	nvim/plugged/coc.nvim/build/index.js	/^        function getEnvironment(env) {$/;"	F
getEnvironment	nvim/plugged/coc.nvim/src/language-client/index.ts	/^    function getEnvironment(env: any): any {$/;"	f
getExtPacker	nvim/plugged/coc.nvim/build/index.js	/^  getExtPacker: getExtPacker,$/;"	P
getExtPacker	nvim/plugged/coc.nvim/build/index.js	/^function getExtPacker(value) {$/;"	F
getExtUnpacker	nvim/plugged/coc.nvim/build/index.js	/^  getExtUnpacker: getExtUnpacker,$/;"	P
getExtUnpacker	nvim/plugged/coc.nvim/build/index.js	/^function getExtUnpacker(type) {$/;"	F
getExtension	nvim/plugged/coc.nvim/build/index.js	/^    getExtension(id) {$/;"	M
getExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public getExtension(id: string): ExtensionItem {$/;"	m
getExtensionApi	nvim/plugged/coc.nvim/build/index.js	/^    getExtensionApi(id) {$/;"	M
getExtensionApi	nvim/plugged/coc.nvim/src/extensions.ts	/^  public getExtensionApi(id: string): API | null {$/;"	m
getExtensionState	nvim/plugged/coc.nvim/build/index.js	/^    getExtensionState(id) {$/;"	M
getExtensionState	nvim/plugged/coc.nvim/src/extensions.ts	/^  public getExtensionState(id: string): ExtensionState {$/;"	m
getExtensionStates	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async getExtensionStates(): Promise<ExtensionInfo[]> {$/;"	m
getFileChanges	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public async getFileChanges(): Promise<FileChange[]> {$/;"	m
getFileEncoding	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async getFileEncoding(): Promise<string> {$/;"	m
getFileItem	nvim/plugged/coc.nvim/src/source/file.ts	/^  private async getFileItem(root: string, filename: string): Promise<VimCompleteItem | null> {$/;"	m
getFileLineCount	nvim/plugged/coc.nvim/build/index.js	/^function getFileLineCount(filepath) {$/;"	F
getFileLineCount	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function getFileLineCount(filepath: string): Promise<number> {$/;"	f
getFileRange	nvim/plugged/coc.nvim/build/index.js	/^    getFileRange(lnum) {$/;"	M
getFileRange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public getFileRange(lnum: number): FileRange {$/;"	m
getFileRangeRange	nvim/plugged/coc.nvim/build/index.js	/^    getFileRangeRange(range, lineOnly = true) {$/;"	M
getFileRangeRange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private getFileRangeRange(range: FileRange, lineOnly = true): Range {$/;"	m
getFilepath	nvim/plugged/coc.nvim/build/index.js	/^    getFilepath(filepath) {$/;"	M
getFilepath	nvim/plugged/coc.nvim/src/workspace.ts	/^  public getFilepath(filepath: string): string {$/;"	m
getFilterLabel	nvim/plugged/coc.nvim/build/index.js	/^function getFilterLabel(item) {$/;"	F
getFilterLabel	nvim/plugged/coc.nvim/src/list/worker.ts	/^function getFilterLabel(item: ListItem): string {$/;"	f
getFloat	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async getFloat(): Promise<Window> {$/;"	m
getFolderConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    getFolderConfiguration(uri) {$/;"	M
getFolderConfiguration	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private getFolderConfiguration(uri: string): ConfigurationModel {$/;"	m
getFollowPart	nvim/plugged/coc.nvim/build/index.js	/^    getFollowPart() {$/;"	M
getFollowPart	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  private getFollowPart(): string {$/;"	m
getForkOptions	nvim/plugged/coc.nvim/build/index.js	/^function getForkOptions(config) {$/;"	F
getForkOptions	nvim/plugged/coc.nvim/src/services.ts	/^function getForkOptions(config: LanguageServerConfig): ForkOptions {$/;"	f
getFormatOptions	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async getFormatOptions(uri?: string): Promise<FormattingOptions> {$/;"	m
getGruvColor	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^function! s:getGruvColor(group)$/;"	f
getHeight	nvim/plugged/coc.nvim/build/index.js	/^    getHeight(docs, maxWidth) {$/;"	M
getHeight	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  public getHeight(docs: Documentation[], maxWidth: number): number {$/;"	m
getHighlight	nvim/plugged/coc.nvim/build/index.js	/^    getHighlight(nameOrId, isRgb = true) {$/;"	M
getHighlightById	nvim/plugged/coc.nvim/build/index.js	/^    getHighlightById(id, isRgb = true) {$/;"	M
getHighlightByName	nvim/plugged/coc.nvim/build/index.js	/^    getHighlightByName(name, isRgb = true) {$/;"	M
getHighlighter	nvim/plugged/coc.nvim/build/index.js	/^    getHighlighter(bufnr) {$/;"	M
getHighlighter	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  private getHighlighter(bufnr: number): Highlighter {$/;"	m
getHighlights	nvim/plugged/coc.nvim/build/index.js	/^    getHighlights(text, matches) {$/;"	M
getHighlights	nvim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^  public async getHighlights(document: Document | null): Promise<DocumentHighlight[]> {$/;"	m
getHighlights	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private getHighlights(text: string, matches: number[]): ListHighlights {$/;"	m
getHiglights	nvim/plugged/coc.nvim/build/index.js	/^function getHiglights(lines, filetype) {$/;"	F
getHiglights	nvim/plugged/coc.nvim/src/util/highlight.ts	/^export function getHiglights(lines: string[], filetype: string): Promise<Highlight[]> {$/;"	f
getHover	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getHover(document: TextDocument, position: Position): Promise<Hover[]> {$/;"	m
getImplementation	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getImplementation(document: TextDocument, position: Position): Promise<Location[]> {$/;"	m
getInfo	nvim/plugged/coc.nvim/src/model/extension.ts	/^  private async getInfo(ref: string): Promise<Info> {$/;"	m
getInfoFromUri	nvim/plugged/coc.nvim/src/model/extension.ts	/^  private async getInfoFromUri(uri: string): Promise<Info> {$/;"	m
getInput	nvim/plugged/coc.nvim/build/index.js	/^    getInput(document, pre) {$/;"	M
getInput	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private getInput(document: Document, pre: string): string {$/;"	m
getItem	nvim/plugged/coc.nvim/build/index.js	/^    getItem(delta) {$/;"	M
getItem	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public getItem(delta: number): ListItem {$/;"	m
getItemUri	nvim/plugged/coc.nvim/build/index.js	/^function getItemUri(item) {$/;"	F
getItemUri	nvim/plugged/coc.nvim/src/list/worker.ts	/^function getItemUri(item: ListItem): string {$/;"	f
getItems	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async getItems(): Promise<VimCompleteItem[]> {$/;"	m
getItems	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async getItems(): Promise<ListItem[]> {$/;"	m
getItemsFromRoot	nvim/plugged/coc.nvim/src/source/file.ts	/^  public async getItemsFromRoot(pathstr: string, root: string): Promise<VimCompleteItem[]> {$/;"	m
getItemsFromWorkspaceEdit	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private async getItemsFromWorkspaceEdit(edit: WorkspaceEdit): Promise<FileItem[]> {$/;"	m
getItemsHighlight	nvim/plugged/coc.nvim/build/index.js	/^    getItemsHighlight(items) {$/;"	M
getItemsHighlight	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private getItemsHighlight(items: ListItem[]): ListHighlights[] {$/;"	m
getJSON	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	getJSON: function( url, data, callback ) {$/;"	M
getKey	nvim/plugged/coc.nvim/build/index.js	/^    const getKey = n =>$/;"	F
getKeymap	nvim/plugged/coc.nvim/build/index.js	/^    getKeymap(mode) {$/;"	M
getKeymapModifier	nvim/plugged/coc.nvim/build/index.js	/^function getKeymapModifier(mode) {$/;"	F
getKeymapModifier	nvim/plugged/coc.nvim/src/util/index.ts	/^export function getKeymapModifier(mode: MapMode): string {$/;"	f
getKeys	nvim/plugged/coc.nvim/build/index.js	/^function getKeys(obj, curr) {$/;"	F
getKeys	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function getKeys(obj: { [key: string]: any }, curr?: string): string[] {$/;"	f
getKind	nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
getLanguageServerOptions	nvim/plugged/coc.nvim/build/index.js	/^function getLanguageServerOptions(id, name, config) {$/;"	F
getLanguageServerOptions	nvim/plugged/coc.nvim/src/services.ts	/^export function getLanguageServerOptions(id: string, name: string, config: LanguageServerConfig): [LanguageClientOptions, ServerOptions] {$/;"	f
getLevel	nvim/plugged/coc.nvim/build/index.js	/^  static getLevel(sArg, defaultLevel) {$/;"	M
getLevelForCategory	nvim/plugged/coc.nvim/build/index.js	/^const getLevelForCategory = category => configForCategory(category).level;$/;"	F
getLine	nvim/plugged/coc.nvim/build/index.js	/^    getLine() {$/;"	M
getLine	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async getLine(uri: string, line: number): Promise<string> {$/;"	m
getLineCount	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private async getLineCount(uri: string): Promise<number> {$/;"	m
getLineOffsets	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.getLineOffsets = function () {$/;"	M
getLines	nvim/plugged/coc.nvim/build/index.js	/^    getLines(start, end) {$/;"	M
getLines	nvim/plugged/coc.nvim/build/index.js	/^    getLines({ start, end, strictIndexing } = { start: 0, end: -1, strictIndexing: true }) {$/;"	M
getLines	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private async getLines(fsPath: string, start: number, end: number): Promise<string[]> {$/;"	m
getLines	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getLines(start: number, end: number): string[] {$/;"	m
getLinesRange	nvim/plugged/coc.nvim/build/index.js	/^    getLinesRange(lnum) {$/;"	M
getLinesRange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private getLinesRange(lnum: number): [number, number] | null {$/;"	m
getListeners	nvim/plugged/coc.nvim/build/index.js	/^  function getListeners(that, type, readonly) {$/;"	F
getLiteralNodeType	nvim/plugged/coc.nvim/build/index.js	/^function getLiteralNodeType(value) {$/;"	F
getLocalifyBonus	nvim/plugged/coc.nvim/build/index.js	/^    getLocalifyBonus(sp, ep) {$/;"	M
getLocalifyBonus	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getLocalifyBonus(sp: Position, ep: Position): Map<string, number> {$/;"	m
getLocation	nvim/plugged/coc.nvim/build/index.js	/^            function getLocation(item) {$/;"	F
getLocation	nvim/plugged/coc.nvim/build/index.js	/^function getLocation(text, position) {$/;"	F
getLocation	nvim/plugged/coc.nvim/src/plugin.ts	/^      function getLocation(item: any): void {$/;"	f
getLocationListItem	nvim/plugged/coc.nvim/build/index.js	/^function getLocationListItem(owner, bufnr, diagnostic) {$/;"	F
getLocationListItem	nvim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function getLocationListItem(owner: string, bufnr: number, diagnostic: Diagnostic): LocationListItem {$/;"	f
getLockedList	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async getLockedList(): Promise<string[]> {$/;"	m
getLogFile	nvim/plugged/coc.nvim/build/index.js	/^    logger.getLogFile = () => {$/;"	M
getLogFile	nvim/plugged/coc.nvim/build/index.js	/^function getLogFile() {$/;"	F
getLogFile	nvim/plugged/coc.nvim/src/util/logger.ts	/^function getLogFile(): string {$/;"	f
getLogger	nvim/plugged/coc.nvim/build/index.js	/^function getLogger(category) {$/;"	F
getMatchResult	nvim/plugged/coc.nvim/build/index.js	/^function getMatchResult(text, query, filename = '') {$/;"	F
getMatchResult	nvim/plugged/coc.nvim/src/util/score.ts	/^export function getMatchResult(text: string, query: string, filename = ''): MatchResult {$/;"	f
getMiddleware	nvim/plugged/coc.nvim/build/index.js	/^    getMiddleware() {$/;"	M
getMiddleware	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private getMiddleware() {$/;"	m
getMissingExtensions	nvim/plugged/coc.nvim/build/index.js	/^    getMissingExtensions() {$/;"	M
getMissingExtensions	nvim/plugged/coc.nvim/src/extensions.ts	/^  public getMissingExtensions(): string[] {$/;"	m
getMoreWords	nvim/plugged/coc.nvim/build/index.js	/^    getMoreWords() {$/;"	M
getMoreWords	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getMoreWords(): string[] {$/;"	m
getNameFromSeverity	nvim/plugged/coc.nvim/build/index.js	/^function getNameFromSeverity(severity) {$/;"	F
getNameFromSeverity	nvim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function getNameFromSeverity(severity: DiagnosticSeverity): string {$/;"	f
getNextPlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    getNextPlaceholder(index) {$/;"	M
getNextPlaceholder	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public getNextPlaceholder(index: number): CocSnippetPlaceholder {$/;"	m
getNodePath	nvim/plugged/coc.nvim/build/index.js	/^function getNodePath(node) {$/;"	F
getNodeValue	nvim/plugged/coc.nvim/build/index.js	/^function getNodeValue(node) {$/;"	F
getNotFoundError	nvim/plugged/coc.nvim/build/index.js	/^function getNotFoundError (cmd) {$/;"	F
getOffset	nvim/plugged/coc.nvim/build/index.js	/^    getOffset(index) {$/;"	M
getOffset	nvim/plugged/coc.nvim/build/index.js	/^    getOffset(lnum, col) {$/;"	M
getOffset	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getOffset(lnum: number, col: number): number {$/;"	m
getOffset	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async getOffset(): Promise<number> {$/;"	m
getOption	nvim/plugged/coc.nvim/build/index.js	/^    getOption() {$/;"	M
getOption	nvim/plugged/coc.nvim/build/index.js	/^    getOption(name) {$/;"	M
getPathInfo	nvim/plugged/coc.nvim/build/index.js	/^function getPathInfo (cmd, opt) {$/;"	F
getPathOption	nvim/plugged/coc.nvim/build/index.js	/^    getPathOption(opt) {$/;"	M
getPathOption	nvim/plugged/coc.nvim/src/source/file.ts	/^  private getPathOption(opt: CompleteOption): PathOption | null {$/;"	m
getPlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    getPlaceholder(index) {$/;"	M
getPlaceholder	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public getPlaceholder(index: number): CocSnippetPlaceholder {$/;"	m
getPlaceholderById	nvim/plugged/coc.nvim/build/index.js	/^    getPlaceholderById(id) {$/;"	M
getPlaceholderById	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public getPlaceholderById(id: number): CocSnippetPlaceholder {$/;"	m
getPlaceholderByRange	nvim/plugged/coc.nvim/build/index.js	/^    getPlaceholderByRange(range) {$/;"	M
getPlaceholderByRange	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public getPlaceholderByRange(range: Range): CocSnippetPlaceholder {$/;"	m
getPlaceholderText	nvim/plugged/coc.nvim/build/index.js	/^    getPlaceholderText(id, value) {$/;"	M
getPlaceholderText	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public getPlaceholderText(id: number, value: string): string {$/;"	m
getPos	nvim/plugged/coc.nvim/build/index.js	/^  const getPos = (fd, size, cb_) => {$/;"	F
getPosition	nvim/plugged/coc.nvim/build/index.js	/^        getPosition: function () { return pos; },$/;"	M
getPosition	nvim/plugged/coc.nvim/build/index.js	/^    getPosition(lnum, col) {$/;"	M
getPosition	nvim/plugged/coc.nvim/build/index.js	/^function getPosition(opt) {$/;"	F
getPosition	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getPosition(lnum: number, col: number): Position {$/;"	m
getPosition	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public async getPosition(): Promise<any> {$/;"	m
getPosition	nvim/plugged/coc.nvim/src/util/complete.ts	/^export function getPosition(opt: CompleteOption): Position {$/;"	f
getPreferences	nvim/plugged/coc.nvim/build/index.js	/^    getPreferences() {$/;"	M
getPreferences	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private getPreferences(): void {$/;"	m
getPrevPlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    getPrevPlaceholder(index) {$/;"	M
getPrevPlaceholder	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public getPrevPlaceholder(index: number): CocSnippetPlaceholder {$/;"	m
getPreviewCommand	nvim/plugged/coc.nvim/build/index.js	/^    getPreviewCommand(context) {$/;"	M
getPreviewCommand	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected getPreviewCommand(context: ListContext): string {$/;"	m
getPreviousContainer	nvim/plugged/coc.nvim/build/index.js	/^function getPreviousContainer(containerName, symbols) {$/;"	F
getPreviousContainer	nvim/plugged/coc.nvim/src/handler/index.ts	/^function getPreviousContainer(containerName: string, symbols: SymbolInfo[]): SymbolInfo {$/;"	f
getPreviousContent	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async getPreviousContent(document: Document): Promise<string> {$/;"	m
getPriority	nvim/plugged/coc.nvim/build/index.js	/^function getPriority(stat) {$/;"	F
getPriority	nvim/plugged/coc.nvim/src/list/source/extensions.ts	/^function getPriority(stat: string): number {$/;"	f
getProc	nvim/plugged/coc.nvim/build/index.js	/^    getProc(pid) {$/;"	M
getProcChildren	nvim/plugged/coc.nvim/build/index.js	/^    getProcChildren(pid) {$/;"	M
getPrototype	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getProvider	nvim/plugged/coc.nvim/build/index.js	/^    getProvider(document) {$/;"	M
getProvider	nvim/plugged/coc.nvim/build/index.js	/^    getProvider(document, triggerCharacter) {$/;"	M
getProvider	nvim/plugged/coc.nvim/src/provider/manager.ts	/^  protected getProvider(document: TextDocument): ProviderItem<T> {$/;"	m
getProvider	nvim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  public getProvider(document: TextDocument, triggerCharacter: string): OnTypeFormattingEditProvider | null {$/;"	m
getProviders	nvim/plugged/coc.nvim/build/index.js	/^    getProviders(document) {$/;"	M
getProviders	nvim/plugged/coc.nvim/src/provider/manager.ts	/^  protected getProviders(document: TextDocument): ProviderItem<T>[] {$/;"	m
getPublicState	nvim/plugged/coc.nvim/build/index.js	/^    getPublicState() {$/;"	M
getPublicState	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public getPublicState(): State {$/;"	m
getQuickfixItem	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async getQuickfixItem(loc: Location | LocationLink, text?: string, type = '', module?: string): Promise<QuickfixItem> {$/;"	m
getReadFormat	nvim/plugged/coc.nvim/build/index.js	/^function getReadFormat(options) {$/;"	F
getReadToken	nvim/plugged/coc.nvim/build/index.js	/^function getReadToken(options) {$/;"	F
getReferences	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getReferences(document: TextDocument, context: ReferenceContext, position: Position): Promise<Location[]> {$/;"	m
getRemianResult	nvim/plugged/coc.nvim/build/index.js	/^    function getRemianResult(index) {$/;"	F
getRemianResult	nvim/plugged/coc.nvim/src/util/score.ts	/^  function getRemianResult(index: number): void {$/;"	f
getResumeInput	nvim/plugged/coc.nvim/build/index.js	/^    getResumeInput(pre) {$/;"	M
getResumeInput	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public getResumeInput(pre: string): string {$/;"	m
getRevealOutputChannelOn	nvim/plugged/coc.nvim/build/index.js	/^function getRevealOutputChannelOn(revealOn) {$/;"	F
getRevealOutputChannelOn	nvim/plugged/coc.nvim/src/services.ts	/^export function getRevealOutputChannelOn(revealOn: string | undefined): RevealOutputChannelOn {$/;"	f
getReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.getReverse = function (n) {$/;"	M
getRootPath	nvim/plugged/coc.nvim/build/index.js	/^function getRootPath (p) {$/;"	F
getRootPatterns	nvim/plugged/coc.nvim/build/index.js	/^    getRootPatterns(document, patternType) {$/;"	M
getRootPatterns	nvim/plugged/coc.nvim/src/workspace.ts	/^  public getRootPatterns(document: Document, patternType: PatternType): string[] {$/;"	m
getScript	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	getScript: function( url, callback ) {$/;"	M
getSelectedRange	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private async getSelectedRange(): Promise<[number, number]> {$/;"	m
getSelectedRange	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async getSelectedRange(mode: string, document: Document): Promise<Range | null> {$/;"	m
getSelectionRanges	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async getSelectionRanges(): Promise<SelectionRange[] | null> {$/;"	m
getSelectionRanges	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getSelectionRanges(document: TextDocument, positions: Position[]): Promise<SelectionRange[] | null> {$/;"	m
getServerRootPatterns	nvim/plugged/coc.nvim/build/index.js	/^    getServerRootPatterns(filetype) {$/;"	M
getServerRootPatterns	nvim/plugged/coc.nvim/src/workspace.ts	/^  private getServerRootPatterns(filetype: string): string[] {$/;"	m
getService	nvim/plugged/coc.nvim/build/index.js	/^    getService(id) {$/;"	M
getService	nvim/plugged/coc.nvim/src/services.ts	/^  public getService(id: string): IServiceProvider {$/;"	m
getServiceStats	nvim/plugged/coc.nvim/build/index.js	/^    getServiceStats() {$/;"	M
getServiceStats	nvim/plugged/coc.nvim/src/services.ts	/^  public getServiceStats(): ServiceInfo[] {$/;"	m
getServices	nvim/plugged/coc.nvim/build/index.js	/^    getServices(document) {$/;"	M
getServices	nvim/plugged/coc.nvim/src/services.ts	/^  public getServices(document: TextDocument): IServiceProvider[] {$/;"	m
getSession	nvim/plugged/coc.nvim/build/index.js	/^    getSession(bufnr) {$/;"	M
getSession	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public getSession(bufnr: number): SnippetSession {$/;"	m
getSeverityName	nvim/plugged/coc.nvim/build/index.js	/^function getSeverityName(severity) {$/;"	F
getSeverityName	nvim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function getSeverityName(severity: DiagnosticSeverity): string {$/;"	f
getSeverityType	nvim/plugged/coc.nvim/build/index.js	/^function getSeverityType(severity) {$/;"	F
getSeverityType	nvim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function getSeverityType(severity: DiagnosticSeverity): string {$/;"	f
getSignatureHelp	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getSignatureHelp(document: TextDocument, position: Position, token: CancellationToken): Promise<SignatureHelp> {$/;"	m
getSnippetDocumentation	nvim/plugged/coc.nvim/build/index.js	/^function getSnippetDocumentation(languageId, body) {$/;"	F
getSnippetDocumentation	nvim/plugged/coc.nvim/src/util/complete.ts	/^export function getSnippetDocumentation(languageId: string, body: string): string {$/;"	f
getSortedRanges	nvim/plugged/coc.nvim/build/index.js	/^    getSortedRanges(uri, severity) {$/;"	M
getSortedRanges	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public getSortedRanges(uri: string, severity?: string): Range[] {$/;"	m
getSource	nvim/plugged/coc.nvim/build/index.js	/^    getSource(name) {$/;"	M
getSource	nvim/plugged/coc.nvim/src/sources.ts	/^  public getSource(name: string): ISource | null {$/;"	m
getSourcesForFiletype	nvim/plugged/coc.nvim/build/index.js	/^    getSourcesForFiletype(filetype, isTriggered) {$/;"	M
getSourcesForFiletype	nvim/plugged/coc.nvim/src/sources.ts	/^  public getSourcesForFiletype(filetype: string, isTriggered: boolean): ISource[] {$/;"	m
getSpawnOptions	nvim/plugged/coc.nvim/build/index.js	/^function getSpawnOptions(config) {$/;"	F
getSpawnOptions	nvim/plugged/coc.nvim/src/services.ts	/^function getSpawnOptions(config: LanguageServerConfig): SpawnOptions {$/;"	f
getStateName	nvim/plugged/coc.nvim/build/index.js	/^function getStateName(state) {$/;"	F
getStateName	nvim/plugged/coc.nvim/src/services.ts	/^export function getStateName(state: ServiceStat): string {$/;"	f
getStats	nvim/plugged/coc.nvim/build/index.js	/^  function getStats(source) {$/;"	F
getStats	nvim/plugged/coc.nvim/build/index.js	/^function getStats (destStat, src, dest, opts) {$/;"	F
getStats	nvim/plugged/coc.nvim/build/index.js	/^function getStats (destStat, src, dest, opts, cb) {$/;"	F
getStats	nvim/plugged/coc.nvim/build/index.js	/^function getStats (src, dest, cb) {$/;"	F
getStatsSync	nvim/plugged/coc.nvim/build/index.js	/^function getStatsSync (src, dest) {$/;"	F
getSupportLevel	nvim/plugged/coc.nvim/build/index.js	/^function getSupportLevel(stream) {$/;"	F
getSymbolKind	nvim/plugged/coc.nvim/build/index.js	/^function getSymbolKind(kind) {$/;"	F
getSymbolKind	nvim/plugged/coc.nvim/src/util/convert.ts	/^export function getSymbolKind(kind: SymbolKind): string {$/;"	f
getSymbolRanges	nvim/plugged/coc.nvim/build/index.js	/^    getSymbolRanges(word) {$/;"	M
getSymbolRanges	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getSymbolRanges(word: string): Range[] {$/;"	m
getSymbolsRanges	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async getSymbolsRanges(): Promise<Range[]> {$/;"	m
getTags	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
getTagsByName	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
getText	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.getText = function (range) {$/;"	M
getText	nvim/plugged/coc.nvim/build/index.js	/^    getText() {$/;"	M
getText	nvim/plugged/coc.nvim/build/index.js	/^    getText(level, data, meta) {$/;"	M
getText	nvim/plugged/coc.nvim/src/model/status.ts	/^  private getText(): string {$/;"	m
getTextEditChange	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.getTextEditChange = function (key) {$/;"	M
getTextRange	nvim/plugged/coc.nvim/build/index.js	/^    getTextRange(range, text) {$/;"	M
getTextRange	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private getTextRange(range: Range, text: string): TextRange | null {$/;"	m
getToken	nvim/plugged/coc.nvim/build/index.js	/^        getToken: function () { return token; },$/;"	M
getTokenError	nvim/plugged/coc.nvim/build/index.js	/^        getTokenError: function () { return scanError; },$/;"	M
getTokenLength	nvim/plugged/coc.nvim/build/index.js	/^        getTokenLength: function () { return pos - tokenOffset; },$/;"	M
getTokenOffset	nvim/plugged/coc.nvim/build/index.js	/^        getTokenOffset: function () { return tokenOffset; },$/;"	M
getTokenStartCharacter	nvim/plugged/coc.nvim/build/index.js	/^        getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },$/;"	M
getTokenStartLine	nvim/plugged/coc.nvim/build/index.js	/^        getTokenStartLine: function () { return lineStartOffset; },$/;"	M
getTokenValue	nvim/plugged/coc.nvim/build/index.js	/^        getTokenValue: function () { return value; },$/;"	M
getTransportKind	nvim/plugged/coc.nvim/build/index.js	/^function getTransportKind(config) {$/;"	F
getTransportKind	nvim/plugged/coc.nvim/src/services.ts	/^export function getTransportKind(config: LanguageServerConfig): Transport {$/;"	f
getTriggerSources	nvim/plugged/coc.nvim/build/index.js	/^    getTriggerSources(pre, languageId) {$/;"	M
getTriggerSources	nvim/plugged/coc.nvim/src/sources.ts	/^  public getTriggerSources(pre: string, languageId: string): ISource[] {$/;"	m
getType	nvim/plugged/coc.nvim/build/index.js	/^const getType = stat =>$/;"	F
getTypeDefinition	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getTypeDefinition(document: TextDocument, position: Position): Promise<Location[]> {$/;"	m
getUri	nvim/plugged/coc.nvim/build/index.js	/^function getUri(fullpath, id, buftype, isCygwin) {$/;"	F
getUri	nvim/plugged/coc.nvim/src/util/index.ts	/^export function getUri(fullpath: string, id: number, buftype: string, isCygwin: boolean): string {$/;"	f
getUrl	nvim/plugged/coc.nvim/build/index.js	/^function getUrl(req) {$/;"	F
getValidWord	nvim/plugged/coc.nvim/build/index.js	/^function getValidWord(text, invalidChars) {$/;"	F
getValidWord	nvim/plugged/coc.nvim/src/util/complete.ts	/^export function getValidWord(text: string, invalidChars: string[]): string {$/;"	f
getValue	nvim/plugged/coc.nvim/build/index.js	/^    getValue(section) {$/;"	M
getValue	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^  public getValue(section?: string): any {$/;"	m
getValue	nvim/plugged/coc.nvim/src/configuration/model.ts	/^  public getValue<V>(section: string): V {$/;"	m
getVar	nvim/plugged/coc.nvim/build/index.js	/^    getVar(key, defaultValue) {$/;"	M
getVar	nvim/plugged/coc.nvim/build/index.js	/^    getVar(name) {$/;"	M
getVar	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getVar<T>(key: string, defaultValue?: T): T {$/;"	m
getVirtualCol	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private async getVirtualCol(line: number, col: number): Promise<number> {$/;"	m
getVisualRanges	nvim/plugged/coc.nvim/build/index.js	/^function getVisualRanges(doc, range) {$/;"	F
getVisualRanges	nvim/plugged/coc.nvim/src/cursors/index.ts	/^function getVisualRanges(doc: Document, range: Range): Range[] {$/;"	f
getVvar	nvim/plugged/coc.nvim/build/index.js	/^    getVvar(name) {$/;"	M
getWH	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			function getWH() {$/;"	F
getWatchmanPath	nvim/plugged/coc.nvim/build/index.js	/^    getWatchmanPath() {$/;"	M
getWatchmanPath	nvim/plugged/coc.nvim/src/workspace.ts	/^  public getWatchmanPath(): string | null {$/;"	m
getWidth	nvim/plugged/coc.nvim/build/index.js	/^    getWidth(line) {$/;"	M
getWidth	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  private getWidth(line: string): number {$/;"	m
getWindows	nvim/plugged/coc.nvim/build/index.js	/^    getWindows() {$/;"	M
getWord	nvim/plugged/coc.nvim/build/index.js	/^function getWord(item, opt, invalidInsertCharacters) {$/;"	F
getWord	nvim/plugged/coc.nvim/src/util/complete.ts	/^export function getWord(item: CompletionItem, opt: CompleteOption, invalidInsertCharacters: string[]): string {$/;"	f
getWordEdit	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async getWordEdit(): Promise<WorkspaceEdit> {$/;"	m
getWordRangeAtPosition	nvim/plugged/coc.nvim/build/index.js	/^    getWordRangeAtPosition(position, extraChars, current = true) {$/;"	M
getWordRangeAtPosition	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getWordRangeAtPosition(position: Position, extraChars?: string, current = true): Range | null {$/;"	m
getWords	nvim/plugged/coc.nvim/build/index.js	/^    getWords(bufnr) {$/;"	M
getWords	nvim/plugged/coc.nvim/src/source/buffer.ts	/^  private getWords(bufnr: number): string[] {$/;"	m
getWorkspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^    getWorkspaceFolder(uri) {$/;"	M
getWorkspaceFolder	nvim/plugged/coc.nvim/src/workspace.ts	/^  public getWorkspaceFolder(uri: string): WorkspaceFolder | null {$/;"	m
getWorkspaceSymbols	nvim/plugged/coc.nvim/src/languages.ts	/^  public async getWorkspaceSymbols(document: TextDocument, query: string): Promise<SymbolInformation[]> {$/;"	m
getWriteToken	nvim/plugged/coc.nvim/build/index.js	/^function getWriteToken(options) {$/;"	F
getWriteType	nvim/plugged/coc.nvim/build/index.js	/^function getWriteType(options) {$/;"	F
get_a_neighbor_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_a_neighbor_item(item)$/;"	f
get_a_neighbor_item_in_column	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_a_neighbor_item_in_column(lnum, column)$/;"	f
get_accented_line	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_accented_line(self, group, contents)$/;"	f
get_airline_themes	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:get_airline_themes(a, l, p)$/;"	f
get_aligned_rows	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:get_aligned_rows(lnum, col1, col2)$/;"	f
get_another_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:get_another_header(headers, current_index, direction, operation)$/;"	f
get_any_item_of_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_any_item_of_level(cur_ln, cur_lvl, org_lvl)$/;"	f
get_array	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:get_array(fg, bg, opts)$/;"	f
get_background_colors	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_background_colors(group) abort$/;"	f
get_base_indent	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:get_base_indent(lnum, text)$/;"	f
get_cell_max_lens	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:get_cell_max_lens(lnum, ...)$/;"	f
get_channel	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:get_channel(client)$/;"	f
get_char	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_char(...)$/;"	f
get_color	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
get_color_map	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_color_map()$/;"	f
get_complete_position	nvim/plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
get_corresponding_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_corresponding_item(lnum)$/;"	f
get_counts	nvim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! s:get_counts()$/;"	f
get_ctags_executable	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
get_diagnostics	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:get_diagnostics()$/;"	f
get_diary_files	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:get_diary_files()$/;"	f
get_file_content	nvim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def get_file_content()$/;"	f
get_file_content	nvim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def get_file_content()$/;"	f
get_first_child	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_first_child(item)$/;"	f
get_first_item_in_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_first_item_in_list(item, ignore_kind)$/;"	f
get_foreground_colors	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_colors(group) abort$/;"	f
get_git_root	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
get_hl	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_hl(group, what, mode) abort$/;"	f
get_html_template	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:get_html_template(template)$/;"	f
get_hunks_changes	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_changes()$/;"	f
get_hunks_empty	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_empty()$/;"	f
get_hunks_gitgutter	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitgutter()$/;"	f
get_hunks_signify	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_signify()$/;"	f
get_idx_list_markers	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_idx_list_markers(item)$/;"	f
get_indent	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:get_indent(lnum)$/;"	f
get_indentexpr	nvim/plugged/vim-vue/indent/vue.vim	/^function! s:get_indentexpr(language)$/;"	f
get_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_item(lnum)$/;"	f
get_item_of_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_item_of_level(cur_ln, cur_lvl, org_lvl, org_regex)$/;"	f
get_last_item_in_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_last_item_in_list(item, ignore_kind)$/;"	f
get_last_line_of_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_last_line_of_item(item)$/;"	f
get_last_line_of_item_incl_children	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_last_line_of_item_incl_children(item)$/;"	f
get_latest_release	nvim/plugged/coc.nvim/install.sh	/^get_latest_release() {$/;"	f
get_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_level(lnum)$/;"	f
get_links	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:get_links(wikifile, idx)$/;"	f
get_map_str	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
get_mode	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_mode()$/;"	f
get_month_name	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:get_month_name(month)$/;"	f
get_ms_since	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! s:get_ms_since(time)$/;"	f
get_next_child_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_next_child_item(parent, child)$/;"	f
get_next_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_next_line(lnum, ...)$/;"	f
get_next_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_next_list_item(item, ignore_kind)$/;"	f
get_next_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_next_mrkr(item)$/;"	f
get_number	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:get_number(index)$/;"	f
get_parent	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_parent(item)$/;"	f
get_position_links	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:get_position_links(link)$/;"	f
get_prev_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_prev_line(lnum)$/;"	f
get_prev_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_prev_list_item(item, ignore_kind)$/;"	f
get_prev_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_prev_mrkr(item)$/;"	f
get_rate	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_rate(item)$/;"	f
get_regex	nvim/plugged/vim-ruby/spec/syntax/statement_modifiers_spec.rb	/^      def get_regex$/;"	f
get_rows	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:get_rows(lnum)$/;"	f
get_section	nvim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:get_section(winnr, key, ...)$/;"	f
get_separator_change	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change(new_group, old_group, end_group, sep_size, alt_sep_size)$/;"	f
get_separator_change_with_end	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change_with_end(new_group, old_group, new_end_group, old_end_group, sep_size, alt_sep_size)$/;"	f
get_seperator	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_seperator(self, prev_group, group, side)$/;"	f
get_syn	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:get_syn(group, what)$/;"	f
get_tag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:get_tag(tagname)$/;"	f
get_text	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_text(region)$/;"	f
get_time_in_ms	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_time_in_ms()$/;"	f
get_transitioned_seperator	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_transitioned_seperator(self, prev_group, group, side)$/;"	f
get_version	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:get_version()$/;"	f
get_visual_region	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_visual_region(pos)$/;"	f
get_wiki_buffers	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:get_wiki_buffers()$/;"	f
get_wikifile_url	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:get_wikifile_url(wikifile)$/;"	f
get_wordcount	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^  function! s:get_wordcount(visual_mode_active)$/;"	f
getcwd	nvim/plugged/coc.nvim/src/model/document.ts	/^  public async getcwd(): Promise<string> {$/;"	m
getline	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:getline()$/;"	f
getline	nvim/plugged/coc.nvim/build/index.js	/^    getline(line) {$/;"	M
getline	nvim/plugged/coc.nvim/build/index.js	/^    getline(line, current = true) {$/;"	M
getline	nvim/plugged/coc.nvim/src/model/document.ts	/^  public getline(line: number, current = true): string {$/;"	m
getline	nvim/plugged/coc.nvim/src/model/highligher.ts	/^  public getline(line: number): string {$/;"	m
gettime	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
gg	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  normal gg$/;"	m
gi	nvim/init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gitCheck	nvim/plugged/coc.nvim/build/index.js	/^    gitCheck() {$/;"	M
gitCheck	nvim/plugged/coc.nvim/src/model/document.ts	/^  private gitCheck(): void {$/;"	m
git_diff	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff(...)$/;"	f
git_diff_staged	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff_staged(...)$/;"	f
git_supports_command_line_config_override	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:git_supports_command_line_config_override() abort$/;"	f
git_validate	nvim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:git_version()$/;"	f
git_version_requirement	nvim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
gitgutter	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^augroup gitgutter$/;"	a
gitgutter#all	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#all(force) abort$/;"	f
gitgutter#async#available	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#available()$/;"	f
gitgutter#async#execute	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#execute(cmd, bufnr, handler) abort$/;"	f
gitgutter#buffer_disable	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_disable() abort$/;"	f
gitgutter#buffer_enable	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_enable() abort$/;"	f
gitgutter#buffer_toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_toggle() abort$/;"	f
gitgutter#debug#debug	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#debug()$/;"	f
gitgutter#debug#log	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#log(message, ...) abort$/;"	f
gitgutter#diff#handler	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#handler(bufnr, diff) abort$/;"	f
gitgutter#diff#hunk_diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#hunk_diff(bufnr, full_diff, ...)$/;"	f
gitgutter#diff#parse_diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_diff(diff) abort$/;"	f
gitgutter#diff#parse_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_hunk(line) abort$/;"	f
gitgutter#diff#process_hunks	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunks(bufnr, hunks) abort$/;"	f
gitgutter#diff#run_diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#run_diff(bufnr, from, preserve_full_diff) abort$/;"	f
gitgutter#diff_highlight#common_prefix	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_prefix(a, b)$/;"	f
gitgutter#diff_highlight#common_suffix	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_suffix(a, b, start)$/;"	f
gitgutter#diff_highlight#lcs	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#lcs(s1, s2)$/;"	f
gitgutter#diff_highlight#process	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! gitgutter#diff_highlight#process(hunk_body)$/;"	f
gitgutter#diff_highlight#split	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#split(str, delimiter)$/;"	f
gitgutter#disable	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#disable() abort$/;"	f
gitgutter#enable	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#enable() abort$/;"	f
gitgutter#fold#disable	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#disable()$/;"	f
gitgutter#fold#enable	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#enable()$/;"	f
gitgutter#fold#foldtext	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#foldtext()$/;"	f
gitgutter#fold#is_changed	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#is_changed()$/;"	f
gitgutter#fold#level	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#level(lnum)$/;"	f
gitgutter#fold#toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#toggle()$/;"	f
gitgutter#highlight#define_highlights	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_highlights() abort$/;"	f
gitgutter#highlight#define_sign_column_highlight	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_column_highlight() abort$/;"	f
gitgutter#highlight#define_sign_text_highlights	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text_highlights() abort$/;"	f
gitgutter#highlight#define_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_signs() abort$/;"	f
gitgutter#highlight#line_disable	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_disable() abort$/;"	f
gitgutter#highlight#line_enable	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_enable() abort$/;"	f
gitgutter#highlight#line_toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_toggle() abort$/;"	f
gitgutter#highlight#linenr_disable	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_disable() abort$/;"	f
gitgutter#highlight#linenr_enable	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_enable() abort$/;"	f
gitgutter#highlight#linenr_toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_toggle() abort$/;"	f
gitgutter#hunk#cursor_in_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#cursor_in_hunk(hunk) abort$/;"	f
gitgutter#hunk#fix_file_references	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^  function! gitgutter#hunk#fix_file_references(filepath, hunk_diff)$/;"	f
gitgutter#hunk#hunks	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#hunks(bufnr) abort$/;"	f
gitgutter#hunk#in_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#in_hunk(lnum)$/;"	f
gitgutter#hunk#increment_lines_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_added(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_modified	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_modified(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_removed(bufnr, count) abort$/;"	f
gitgutter#hunk#next_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#next_hunk(count) abort$/;"	f
gitgutter#hunk#prev_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#prev_hunk(count) abort$/;"	f
gitgutter#hunk#preview	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#preview() abort$/;"	f
gitgutter#hunk#reset	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#reset(bufnr) abort$/;"	f
gitgutter#hunk#set_hunks	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#set_hunks(bufnr, hunks) abort$/;"	f
gitgutter#hunk#stage	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#stage(...) abort$/;"	f
gitgutter#hunk#summary	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#summary(bufnr) abort$/;"	f
gitgutter#hunk#text_object	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#text_object(inner) abort$/;"	f
gitgutter#hunk#undo	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#undo() abort$/;"	f
gitgutter#process_buffer	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#process_buffer(bufnr, force) abort$/;"	f
gitgutter#quickfix	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#quickfix()$/;"	f
gitgutter#setup_maps	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#setup_maps()$/;"	f
gitgutter#sign#clear_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#clear_signs(bufnr) abort$/;"	f
gitgutter#sign#disable	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#disable() abort$/;"	f
gitgutter#sign#enable	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#enable() abort$/;"	f
gitgutter#sign#reset	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#reset()$/;"	f
gitgutter#sign#toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#toggle() abort$/;"	f
gitgutter#sign#update_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#update_signs(bufnr, modified_lines) abort$/;"	f
gitgutter#toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#toggle() abort$/;"	f
gitgutter#utility#cd_cmd	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#cd_cmd(bufnr, cmd) abort$/;"	f
gitgutter#utility#extension	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#extension(bufnr) abort$/;"	f
gitgutter#utility#file	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file(bufnr)$/;"	f
gitgutter#utility#getbufvar	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#getbufvar(buffer, varname, ...)$/;"	f
gitgutter#utility#is_active	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_active(bufnr) abort$/;"	f
gitgutter#utility#repo_path	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#repo_path(bufnr, shellesc) abort$/;"	f
gitgutter#utility#set_repo_path	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#set_repo_path(bufnr, continuation) abort$/;"	f
gitgutter#utility#setbufvar	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#setbufvar(buffer, varname, val)$/;"	f
gitgutter#utility#shellescape	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shellescape(arg) abort$/;"	f
gitgutter#utility#supports_overscore_sign	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#supports_overscore_sign()$/;"	f
gitgutter#utility#system	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#system(cmd, ...) abort$/;"	f
gitgutter#utility#warn	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn(message) abort$/;"	f
gitgutter#utility#warn_once	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn_once(bufnr, message, key) abort$/;"	f
gitgutter#utility#windows	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#windows()$/;"	f
gitlab	nvim/plugged/fugitive-gitlab.vim/plugin/gitlab.vim	/^augroup gitlab$/;"	a
gitlab#api_paths_for_remote	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#api_paths_for_remote(remote) abort$/;"	f
gitlab#contributors	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#contributors(...) abort$/;"	f
gitlab#fugitive_handler	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#fugitive_handler(opts, ...)$/;"	f
gitlab#homepage_for_remote	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#homepage_for_remote(remote) abort$/;"	f
gitlab#issues	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#issues(query, type, ...) abort$/;"	f
gitlab#json_generate	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#json_generate(object) abort$/;"	f
gitlab#json_parse	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#json_parse(string) abort$/;"	f
gitlab#members	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#members(query, type, ...) abort$/;"	f
gitlab#omnifunc	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#omnifunc(findstart, base) abort$/;"	f
gitlab#request	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#request(domain, path, ...) abort$/;"	f
gitlab_api_key	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! s:gitlab_api_key(root) abort$/;"	f
gitlab_project_from_repo	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! s:gitlab_project_from_repo(...) abort$/;"	f
gl<Space>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gl<Space> <Plug>VimwikiRemoveSingleCB$/;"	m
glh	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> glh <Plug>VimwikiDecreaseLvlSingleItem$/;"	m
gll	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gll <Plug>VimwikiIncreaseLvlSingleItem$/;"	m
gln	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> gln <Plug>VimwikiIncrementListItem$/;"	m
gln	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> gln <Plug>VimwikiIncrementListItem$/;"	m
glob	nvim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob	nvim/plugged/coc.nvim/build/index.js	/^function glob (pattern, options, cb) {$/;"	F
globOpts	nvim/plugged/coc.nvim/build/index.js	/^var globOpts = {$/;"	O
globPattern	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^    private globPattern: string,$/;"	m
globSync	nvim/plugged/coc.nvim/build/index.js	/^function globSync (pattern, options) {$/;"	F
globUnescape	nvim/plugged/coc.nvim/build/index.js	/^function globUnescape (s) {$/;"	F
glob_dir	nvim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
global	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		global: true,$/;"	P
global	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	global: {},$/;"	P
globalEval	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	globalEval: function( data ) {$/;"	M
globalExtensionStats	nvim/plugged/coc.nvim/src/extensions.ts	/^  private async globalExtensionStats(): Promise<ExtensionInfo[]> {$/;"	m
globalExtensions	nvim/plugged/coc.nvim/src/extensions.ts	/^  public get globalExtensions(): string[] {$/;"	m
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, event_handler_attributes)$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, microdata_attributes)$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, rdfa_attributes)$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, {'role': role})$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let global_attributes = extend(core_attributes, xml_attributes)$/;"	v
global_states_and_properties	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let global_states_and_properties = {$/;"	v
globals	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const globals: any = _globals$/;"	v
glp	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> glp <Plug>VimwikiDecrementListItem$/;"	m
glp	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> glp <Plug>VimwikiDecrementListItem$/;"	m
glr	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> glr <Plug>VimwikiRenumberList$/;"	m
glx	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> glx <Plug>VimwikiToggleRejectedListItem$/;"	m
glx	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> glx <Plug>VimwikiToggleRejectedListItem$/;"	m
gmatcher	nvim/plugged/coc.nvim/build/index.js	/^    gmatcher: gmatcher$/;"	P
go	nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:go(...) abort$/;"	f
go$appendFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$appendFile (path, data, options, cb) {$/;"	F
go$open	nvim/plugged/coc.nvim/build/index.js	/^    function go$open (path, flags, mode, cb) {$/;"	F
go$readFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$readFile (path, options, cb) {$/;"	F
go$readdir	nvim/plugged/coc.nvim/build/index.js	/^  function go$readdir (args) {$/;"	F
go$readdir$cb	nvim/plugged/coc.nvim/build/index.js	/^    function go$readdir$cb (err, files) {$/;"	F
go$writeFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$writeFile (path, data, options, cb) {$/;"	F
gotResolvedLink	nvim/plugged/coc.nvim/build/index.js	/^  function gotResolvedLink(resolvedLink) {$/;"	F
gotStat	nvim/plugged/coc.nvim/build/index.js	/^  function gotStat(err, stat) {$/;"	F
gotTarget	nvim/plugged/coc.nvim/build/index.js	/^  function gotTarget(err, target, base) {$/;"	F
gotoDeclaration	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async gotoDeclaration(openCommand?: string): Promise<boolean> {$/;"	m
gotoDefinition	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async gotoDefinition(openCommand?: string): Promise<boolean> {$/;"	m
gotoImplementation	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async gotoImplementation(openCommand?: string): Promise<boolean> {$/;"	m
gotoReferences	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async gotoReferences(openCommand?: string): Promise<boolean> {$/;"	m
gotoTypeDefinition	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async gotoTypeDefinition(openCommand?: string): Promise<boolean> {$/;"	m
goto_markedwin	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
goto_original_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:goto_original_window()$/;"	f
goto_tagbar	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
goto_win	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
gqq	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <buffer> gqq :VimwikiTableAlignQ<CR>$/;"	m
gr	nvim/init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
graphic_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let graphic_role = [$/;"	v
green	nvim/plugged/coc.nvim/build/index.js	/^            green: (res[1] \/ 65535),$/;"	M
green	nvim/plugged/coc.nvim/build/index.js	/^            green: green,$/;"	P
green	nvim/plugged/coc.nvim/build/index.js	/^  green: [32, 39],$/;"	P
grep	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	grep: function( elems, callback, inv ) {$/;"	M
grep_version	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:grep_version()$/;"	f
grey	nvim/plugged/coc.nvim/build/index.js	/^  grey: [90, 39],$/;"	P
group	nvim/plugged/coc.nvim/build/index.js	/^function group(array, size) {$/;"	F
group	nvim/plugged/coc.nvim/src/util/array.ts	/^export function group<T>(array: T[], size: number): T[][] {$/;"	f
group	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^      let group = airline#extensions#tabline#group_of_bufnr(buffers, nr) . "_right"$/;"	v
group_links	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:group_links(links)$/;"	f
group_not_done	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:group_not_done(list, name)$/;"	f
groups	nvim/plugged/coc.nvim/build/index.js	/^        let groups = {};$/;"	O
gruvbox#hls_hide	nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_hide()$/;"	f
gruvbox#hls_show	nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_show()$/;"	f
gruvbox#hls_toggle	nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_toggle()$/;"	f
gruvbox#invert_signs_toggle	nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#invert_signs_toggle()$/;"	f
gsub	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gt	nvim/plugged/coc.nvim/build/index.js	/^function gt (a, b, loose) {$/;"	F
gt	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			gt: function(a,i,m){return i>m[3]-0;},$/;"	M
gte	nvim/plugged/coc.nvim/build/index.js	/^function gte (a, b, loose) {$/;"	F
gte	nvim/plugged/coc.nvim/build/index.js	/^function gte(i, y) {$/;"	F
gtfn	nvim/plugged/coc.nvim/build/index.js	/^  var gtfn, ltefn, ltfn, comp, ecomp$/;"	V
gtr	nvim/plugged/coc.nvim/build/index.js	/^function gtr (version, range, options) {$/;"	F
guess_kind_of_numbered_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:guess_kind_of_numbered_item(item)$/;"	f
gui2cui	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:gui2cui(rgb, fallback)$/;"	f
guid	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	guid: 1,$/;"	P
gutentags#add_job	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave_pre	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#remove_job	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
gww	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <buffer> gww :VimwikiTableAlignW<CR>$/;"	m
gy	nvim/init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
gzip	nvim/plugged/coc.nvim/build/index.js	/^        opt.gzip = {}$/;"	P
gzip	nvim/plugged/coc.nvim/build/index.js	/^  const gzip = (f, i) => (i && compress ? f + ZIP_EXT : f);$/;"	F
h	nvim/plugged/coc.nvim/build/index.js	/^      const h = new Header(headBuf)$/;"	V
h	nvim/plugged/coc.nvim/build/index.js	/^      let h = new Header(headBuf)$/;"	V
h	nvim/plugged/coc.nvim/build/index.js	/^    h: hostname,$/;"	P
handeWillSaveUntil	nvim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^  public async handeWillSaveUntil(event: TextDocumentWillSaveEvent): Promise<void> {$/;"	m
handle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	handle: function(event) {$/;"	M
handleApplyWorkspaceEdit	nvim/plugged/coc.nvim/build/index.js	/^    handleApplyWorkspaceEdit(params) {$/;"	M
handleApplyWorkspaceEdit	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private handleApplyWorkspaceEdit($/;"	m
handleConnectionClosed	nvim/plugged/coc.nvim/build/index.js	/^    handleConnectionClosed() {$/;"	M
handleConnectionClosed	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected handleConnectionClosed() {$/;"	m
handleConnectionClosed	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  protected handleConnectionClosed(): void {$/;"	m
handleConnectionError	nvim/plugged/coc.nvim/build/index.js	/^    handleConnectionError(error, message, count) {$/;"	M
handleConnectionError	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private handleConnectionError(error: Error, message: Message, count: number) {$/;"	m
handleDiagnostics	nvim/plugged/coc.nvim/build/index.js	/^    handleDiagnostics(params) {$/;"	M
handleDiagnostics	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private handleDiagnostics(params: PublishDiagnosticsParams) {$/;"	m
handleError	nvim/plugged/coc.nvim/build/index.js	/^    function handleError(error, skipUntilAfter, skipUntil) {$/;"	F
handleError	nvim/plugged/coc.nvim/build/index.js	/^    handleError(error, msg) {$/;"	M
handleError	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	handleError: function( s, xhr, status, e ) {$/;"	M
handleFilter	nvim/plugged/coc.nvim/build/index.js	/^function handleFilter (onInclude, destStat, src, dest, opts, cb) {$/;"	F
handleFilterAndCopy	nvim/plugged/coc.nvim/build/index.js	/^function handleFilterAndCopy (destStat, src, dest, opts) {$/;"	F
handleInvalidMessage	nvim/plugged/coc.nvim/build/index.js	/^    function handleInvalidMessage(message) {$/;"	F
handleLeftClick	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick()$/;"	f
handleLocations	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async handleLocations(definition: Definition | LocationLink[], openCommand?: string | false): Promise<void> {$/;"	m
handleMiddleMouse	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse()$/;"	f
handleNotification	nvim/plugged/coc.nvim/build/index.js	/^    function handleNotification(message) {$/;"	F
handleNotification	nvim/plugged/coc.nvim/build/index.js	/^    handleNotification(method, args) {$/;"	M
handleRegistrationRequest	nvim/plugged/coc.nvim/build/index.js	/^    handleRegistrationRequest(params) {$/;"	M
handleRegistrationRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private handleRegistrationRequest($/;"	m
handleRequest	nvim/plugged/coc.nvim/build/index.js	/^    function handleRequest(requestMessage) {$/;"	F
handleRequest	nvim/plugged/coc.nvim/build/index.js	/^    handleRequest(method, args, resp) {$/;"	M
handleResponse	nvim/plugged/coc.nvim/build/index.js	/^    function handleResponse(responseMessage) {$/;"	F
handleUnregistrationRequest	nvim/plugged/coc.nvim/build/index.js	/^    handleUnregistrationRequest(params) {$/;"	M
handleUnregistrationRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private handleUnregistrationRequest($/;"	m
handle_call	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_call({:notify, event}, _from, state) do$/;"	f
handle_call	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_call({:notify, event}, from, {queue, pending_demand}) do$/;"	f
handle_call	nvim/plugged/vim-elixir/spec/indent/def_spec.rb	/^    def handle_call({:release_lock, key}, _from, state) do$/;"	f
handle_call	nvim/plugged/vim-elixir/spec/indent/keyword_spec.rb	/^  def handle_call({:get_in_line_for_lock, key}, from, state) do$/;"	f
handle_call	nvim/plugged/vim-elixir/spec/syntax/variable_spec.rb	/^      def handle_call(:pop, _from, [h|stack]) do$/;"	f
handle_call	nvim/plugged/vim-elixir/spec/syntax/variable_spec.rb	/^      def handle_call(:pop,$/;"	f
handle_call	nvim/plugged/vim-elixir/spec/syntax/variable_spec.rb	/^    def handle_call(:pop)$/;"	f
handle_cancel	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_cancel(_, from, producers) do$/;"	f
handle_demand	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_demand(_demand, state) do$/;"	f
handle_demand	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_demand(demand, counter) when demand > 0 do$/;"	f
handle_demand	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_demand(incoming_demand, {queue, pending_demand}) do$/;"	f
handle_demand	nvim/plugged/vim-elixir/large_file.ex	/^      def handle_demand(demand, state) do$/;"	f
handle_double_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:handle_double_hunk(modified_lines)$/;"	f
handle_events	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_events(events, _from, number) do$/;"	f
handle_events	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_events(events, _from, state) do$/;"	f
handle_events	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_events(events, from, producers) do$/;"	f
handle_info	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_info({:ask, from}, producers) do$/;"	f
handle_info	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^  def handle_info(:tick, state = %{policy_iteration: []}) do$/;"	f	class:name.name.f.f.hello
handle_special_key	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_special_key(key, mode)$/;"	f
handle_subscribe	nvim/plugged/vim-elixir/large_file.ex	/^        def handle_subscribe(:producer, opts, from, producers) do$/;"	f
handle_subscribe	nvim/plugged/vim-elixir/large_file.ex	/^      def handle_subscribe(:producer, _options, from, state) do$/;"	f
handle_visual_IA_to_insert	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_insert()$/;"	f
handle_visual_IA_to_normal	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_normal()$/;"	f
handle_with	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:handle_with(start_lnum, start_col, context)$/;"	f
handler	nvim/plugged/coc.nvim/src/plugin.ts	/^  private handler: Handler$/;"	m
handler	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			handler: function(event) {$/;"	M
handlerResult	nvim/plugged/coc.nvim/build/index.js	/^                let handlerResult;$/;"	V
handlers	nvim/plugged/coc.nvim/build/index.js	/^        const handlers = (bufferMap.get(eventName) || []).filter(handler => handler !== cb);$/;"	F
handlers	nvim/plugged/coc.nvim/src/events.ts	/^  private handlers: Map<string, Function[]> = new Map()$/;"	m
handlers	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		handlers = ( jQuery.data(this, "events") || {} )[event.type];$/;"	M
has	nvim/plugged/coc.nvim/build/index.js	/^            has(key) {$/;"	M
has	nvim/plugged/coc.nvim/build/index.js	/^    has(id) {$/;"	M
has	nvim/plugged/coc.nvim/build/index.js	/^    has(key) {$/;"	M
has	nvim/plugged/coc.nvim/build/index.js	/^    has(name) {$/;"	M
has	nvim/plugged/coc.nvim/build/index.js	/^    has(uri) {$/;"	M
has	nvim/plugged/coc.nvim/src/commands.ts	/^  public has(id: string): boolean {$/;"	m
has	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public has(uri: string): boolean {$/;"	m
has	nvim/plugged/coc.nvim/src/extensions.ts	/^  public has(id: string): boolean {$/;"	m
has	nvim/plugged/coc.nvim/src/sources.ts	/^  public has(name): boolean {$/;"	m
has	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			has: function(a,i,m){return jQuery.find(m[3],a).length;},$/;"	M
has	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		has: function( elem, className ) {$/;"	M
hasBasic	nvim/plugged/coc.nvim/build/index.js	/^		hasBasic: true,$/;"	P
hasCallback	nvim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^  public get hasCallback(): boolean {$/;"	m
hasClass	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hasClass: function( selector ) {$/;"	M
hasColor	nvim/plugged/coc.nvim/build/index.js	/^    hasColor() {$/;"	M
hasColor	nvim/plugged/coc.nvim/build/index.js	/^    hasColor(bufnr) {$/;"	M
hasColor	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  public hasColor(bufnr: number): boolean {$/;"	m
hasColor	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public hasColor(): boolean {$/;"	m
hasColorAtPostion	nvim/plugged/coc.nvim/build/index.js	/^    hasColorAtPostion(bufnr, position) {$/;"	M
hasColorAtPostion	nvim/plugged/coc.nvim/build/index.js	/^    hasColorAtPostion(position) {$/;"	M
hasColorAtPostion	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  public hasColorAtPostion(bufnr: number, position: Position): boolean {$/;"	m
hasColorAtPostion	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public hasColorAtPostion(position: Position): boolean {$/;"	m
hasFlag	nvim/plugged/coc.nvim/build/index.js	/^		hasFlag('color=truecolor')) {$/;"	M
hasFlag	nvim/plugged/coc.nvim/build/index.js	/^	hasFlag('color=always')) {$/;"	M
hasFlag	nvim/plugged/coc.nvim/build/index.js	/^	hasFlag('color=never')) {$/;"	M
hasFolderConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    hasFolderConfiguration(filepath) {$/;"	M
hasFolderConfiguration	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public hasFolderConfiguration(filepath: string): boolean {$/;"	m
hasFunction	nvim/plugged/coc.nvim/build/index.js	/^    hasFunction(name) {$/;"	M
hasKey	nvim/plugged/coc.nvim/build/index.js	/^function hasKey (obj, keys) {$/;"	F
hasKeymap	nvim/plugged/coc.nvim/src/__tests__/modules/cursors.test.ts	/^  async function hasKeymap(key): Promise<boolean> {$/;"	f
hasMagic	nvim/plugged/coc.nvim/build/index.js	/^glob.hasMagic = function (pattern, options_) {$/;"	M
hasMatch	nvim/plugged/coc.nvim/build/index.js	/^    hasMatch(input) {$/;"	M
hasMatch	nvim/plugged/coc.nvim/build/index.js	/^function hasMatch(needle, haystack) {$/;"	F
hasMatch	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public hasMatch(input: string): boolean {$/;"	m
hasMatch	nvim/plugged/coc.nvim/src/util/fzy.ts	/^export function hasMatch(needle, haystack): boolean {$/;"	f
hasMillisRes	nvim/plugged/coc.nvim/build/index.js	/^function hasMillisRes (callback) {$/;"	F
hasMillisResSync	nvim/plugged/coc.nvim/build/index.js	/^function hasMillisResSync () {$/;"	F
hasOnTypeProvider	nvim/plugged/coc.nvim/build/index.js	/^    hasOnTypeProvider(character, document) {$/;"	M
hasOnTypeProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public hasOnTypeProvider(character: string, document: TextDocument): boolean {$/;"	m
hasProvider	nvim/plugged/coc.nvim/build/index.js	/^    hasProvider(document) {$/;"	M
hasProvider	nvim/plugged/coc.nvim/build/index.js	/^    hasProvider(id, document) {$/;"	M
hasProvider	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async hasProvider(id: string): Promise<boolean> {$/;"	m
hasProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public hasProvider(id: string, document: TextDocument): boolean {$/;"	m
hasProvider	nvim/plugged/coc.nvim/src/provider/manager.ts	/^  public hasProvider(document: TextDocument): boolean {$/;"	m
hasProvider	nvim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  public hasProvider(document: TextDocument): boolean {$/;"	m
hasSelected	nvim/plugged/coc.nvim/build/index.js	/^    hasSelected() {$/;"	M
hasSelected	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public hasSelected(): boolean {$/;"	m
hasService	nvim/plugged/coc.nvim/build/index.js	/^    hasService(id) {$/;"	M
hasService	nvim/plugged/coc.nvim/src/services.ts	/^  private hasService(id: string): boolean {$/;"	m
hasValue	nvim/plugged/coc.nvim/build/index.js	/^                hasValue: true$/;"	P
has_abs_path	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:has_abs_path(fname)$/;"	f
has_fresh_changes	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:has_fresh_changes(bufnr) abort$/;"	f
hash	nvim/plugged/coc.nvim/build/index.js	/^			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);$/;"	M
hash	nvim/plugged/coc.nvim/build/index.js	/^		let hash = 0;$/;"	V
hash	nvim/plugged/coc.nvim/build/index.js	/^      hash = (hash << 5) - hash + namespace.charCodeAt(i);$/;"	M
hash	nvim/plugged/coc.nvim/build/index.js	/^    var hash = 0;$/;"	V
hash_match	nvim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
have_cap	nvim/plugged/coc.nvim/build/index.js	/^function have_cap(vers, name) {$/;"	F
head	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^        let head = idx$/;"	v
head	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let head = 0$/;"	v
header	nvim/plugged/coc.nvim/build/index.js	/^    const header = new Header(chunk, position, this[EX], this[GEX])$/;"	V
header	nvim/plugged/coc.nvim/build/index.js	/^    var header;$/;"	V
header	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			header: function(a){return \/h\\d\/i.test(a.nodeName);},$/;"	M
headers	nvim/plugged/coc.nvim/build/index.js	/^                    headers: {},$/;"	P
headers	nvim/plugged/coc.nvim/build/index.js	/^        headers: {$/;"	P
headers	nvim/plugged/coc.nvim/build/index.js	/^        let headers = [$/;"	A
headers	nvim/plugged/coc.nvim/build/index.js	/^    headers: {$/;"	P
headers	nvim/plugged/coc.nvim/build/index.js	/^    options.headers = {};$/;"	P
health#coc#check	nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! health#coc#check() abort$/;"	f
height	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private height: number$/;"	m
height	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					height: "toggle", width: "toggle", opacity: "toggle"$/;"	P
height	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				height: "hide", width: "hide", opacity: "hide"$/;"	P
height	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				height: "show", width: "show", opacity: "show"$/;"	P
hello	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^      def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
hello	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello
hello	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello
hello	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello
hello	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello
hello	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello
hello	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	nvim/plugged/vim-elixir/spec/indent/binary_operator_spec.rb	/^  def hello do$/;"	f
hello	nvim/plugged/vim-elixir/spec/indent/binary_operator_spec.rb	/^  def hello do$/;"	f	class:hello
hello	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def hello do$/;"	f	class:name.name.f.f
hello	nvim/plugged/vim-elixir/spec/indent/def_spec.rb	/^  def hello do$/;"	f	class:handle_call
hello	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def hello do$/;"	f	class:test.test.test.build_command.build_command.build_command
hello	nvim/plugged/vim-ruby/spec/syntax/symbols_spec.rb	/^      def hello$/;"	f
helptag_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
hexDigitOnly	nvim/plugged/coc.nvim/build/index.js	/^    var hexDigitOnly = '[' + hexDigit + ']';$/;"	V
hi	nvim/plugged/coc.nvim/build/index.js	/^        hi = (hi + '').replace(\/^0x\/, '');$/;"	M
hi	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def hi do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hidden	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			hidden: function(a){return "hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"visibility")=="hidden";},$/;"	M
hide	nvim/plugged/coc.nvim/build/index.js	/^            hide: () => {$/;"	M
hide	nvim/plugged/coc.nvim/build/index.js	/^    hide() {$/;"	M
hide	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public hide(): void {$/;"	m
hide	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  public hide(): void {$/;"	m
hide	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public hide(): void {$/;"	m
hide	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  public async hide(): Promise<void> {$/;"	m
hide	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hide: function(){$/;"	M
hide	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hide: function(speed,callback){$/;"	M
hideFloat	nvim/plugged/coc.nvim/build/index.js	/^    hideFloat() {$/;"	M
hideFloat	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public hideFloat(): void {$/;"	m
high	nvim/plugged/coc.nvim/build/index.js	/^      var high = 0;$/;"	V
highligher	nvim/plugged/coc.nvim/build/index.js	/^                            let highligher = new highligher_1.default();$/;"	V
highligher	nvim/plugged/coc.nvim/build/index.js	/^        let highligher = new highligher_1.default();$/;"	V
highlight	nvim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^  public async highlight(bufnr: number): Promise<void> {$/;"	m
highlight	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public async highlight(colors: ColorInformation[]): Promise<void> {$/;"	m
highlight	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async highlight(): Promise<void> {$/;"	m
highlightColors	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  public async highlightColors(document: Document, force = false): Promise<void> {$/;"	m
highlightCurrent	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  private highlightCurrent: Function & { clear(): void }$/;"	m
highlightLineNr	nvim/plugged/coc.nvim/build/index.js	/^    highlightLineNr() {$/;"	M
highlightLineNr	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private highlightLineNr(): void {$/;"	m
highlightRanges	nvim/plugged/coc.nvim/build/index.js	/^    highlightRanges(ranges, hlGroup, srcId, priority = 10) {$/;"	M
highlightRanges	nvim/plugged/coc.nvim/src/model/document.ts	/^  public highlightRanges(ranges: Range[], hlGroup: string, srcId: number, priority = 10): number[] {$/;"	m
highlight_cursor	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_cursor(pos)$/;"	f
highlight_existing_links	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^function! s:highlight_existing_links()$/;"	f
highlight_existing_links	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:highlight_existing_links()$/;"	f
highlight_keys	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
highlight_line	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! s:highlight_line(bufnr, lnum, group) abort$/;"	f
highlight_name_for_change	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:highlight_name_for_change(text) abort$/;"	f
highlight_range	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! s:highlight_range(bufnr, range, group) abort$/;"	f
highlight_region	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_region(region)$/;"	f
highlighters	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  private highlighters: Map<number, Highlighter> = new Map()$/;"	m
highlights	nvim/plugged/coc.nvim/build/index.js	/^                    let highlights = [];$/;"	A
highlights	nvim/plugged/coc.nvim/build/index.js	/^            let highlights = [];$/;"	A
highlights	nvim/plugged/coc.nvim/build/index.js	/^        const highlights = new Map();$/;"	V
highlights	nvim/plugged/coc.nvim/build/index.js	/^        let highlights = [];$/;"	A
highlights	nvim/plugged/coc.nvim/build/index.js	/^        let highlights = lines.map((line, i) => {$/;"	F
highlights	nvim/plugged/coc.nvim/build/index.js	/^    let highlights = [];$/;"	A
highlights	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private highlights: ListHighlights[] = []$/;"	m
highlights	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  private highlights: Highlight[]$/;"	m
highlights	nvim/plugged/coc.nvim/src/model/highligher.ts	/^  private highlights: HighlightItem[] = []$/;"	m
history	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public history: History$/;"	m
history	nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, bang)$/;"	f
history_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
history_source	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
hl	nvim/plugged/vim-airline/t/highlighter.vim	/^    let hl = airline#highlighter#get_highlight('Foo1_to_Foo2')$/;"	v
hl	nvim/plugged/vim-airline/t/themes.vim	/^    let hl = airline#themes#get_highlight('Foo', 'bold', 'italic')$/;"	v
hl	nvim/plugged/vim-airline/t/themes.vim	/^    let hl = airline#themes#get_highlight2(['Foo','bg'], ['Foo','fg'], 'italic', 'bold')$/;"	v
hlGroup	nvim/plugged/coc.nvim/build/index.js	/^                                let hlGroup = '';$/;"	V
hlGroup	nvim/plugged/coc.nvim/build/index.js	/^            let hlGroup = '';$/;"	V
hlGroup	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected get hlGroup(): string {$/;"	m
hlMap	nvim/plugged/coc.nvim/build/index.js	/^    const hlMap = new Map();$/;"	V
hlRanges	nvim/plugged/coc.nvim/build/index.js	/^        let hlRanges = [];$/;"	A
hl_group_exists	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:hl_group_exists(group)$/;"	f
hm	nvim/plugged/coc.nvim/build/index.js	/^  var hm;$/;"	V
hookArgs	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:hookArgs(lines, space, arg, hook, argType, argDescription) abort$/;"	f
hookConfigurationChanged	nvim/plugged/coc.nvim/build/index.js	/^    hookConfigurationChanged(connection) {$/;"	M
hookConfigurationChanged	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private hookConfigurationChanged(connection: IConnection): void {$/;"	m
hookFileEvents	nvim/plugged/coc.nvim/build/index.js	/^    hookFileEvents(_connection) {$/;"	M
hookFileEvents	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private hookFileEvents(_connection: IConnection): void {$/;"	m
hookListeners	nvim/plugged/coc.nvim/build/index.js	/^    hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, listeners) {$/;"	M
hookListeners	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private hookListeners($/;"	m
host	nvim/plugged/coc.nvim/build/index.js	/^      host: host,$/;"	P
host	nvim/plugged/coc.nvim/build/index.js	/^    var host = '(?:' + internals.rfc3986.IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';$/;"	V
hostname	nvim/plugged/coc.nvim/build/index.js	/^  function hostname() {$/;"	F
hover	nvim/plugged/coc.nvim/build/index.js	/^            let hover = hovers.find(o => vscode_languageserver_protocol_1.Range.is(o.range));$/;"	F
hover	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hover: function(fnOver, fnOut) {$/;"	M
hoverFactory	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private hoverFactory: FloatFactory$/;"	m
hoverManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private hoverManager = new HoverManager()$/;"	m
hoverPosition	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private hoverPosition: [number, number, number]$/;"	m
hoverProvider	nvim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^    hoverProvider: true,$/;"	P
how_are_you	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def how_are_you do$/;"	f	class:name.name.f.f
hsl2color	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:hsl2color(h,s,l)$/;"	f
html	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			html: "text\/html",$/;"	P
html	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	html: function( value ) {$/;"	M
html_insert_contents	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:html_insert_contents(html_lines, content)$/;"	f
htmlcomplete#CheckDoctype	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
htmlcomplete#CompleteTags	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#DetectOmniFlavor	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#LoadAria	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadAria() " {{{$/;"	f
htmlcomplete#LoadData	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
httpData	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpData: function( xhr, type, filter ) {$/;"	M
httpNotModified	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpNotModified: function( xhr, url ) {$/;"	M
httpOverHttp	nvim/plugged/coc.nvim/build/index.js	/^function httpOverHttp(options) {$/;"	F
httpOverHttps	nvim/plugged/coc.nvim/build/index.js	/^function httpOverHttps(options) {$/;"	F
httpSuccess	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpSuccess: function( xhr ) {$/;"	M
httpsOverHttp	nvim/plugged/coc.nvim/build/index.js	/^function httpsOverHttp(options) {$/;"	F
httpsOverHttps	nvim/plugged/coc.nvim/build/index.js	/^function httpsOverHttps(options) {$/;"	F
hunk_op	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:hunk_op(op, ...)$/;"	f
hyphenReplace	nvim/plugged/coc.nvim/build/index.js	/^function hyphenReplace ($0,$/;"	F
i	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> i <NOP>$/;"	m
i	nvim/plugged/coc.nvim/build/index.js	/^		let i;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^            let i = 0;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^        let i = 0;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^        var i = 0;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^    let i = 0;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^    let i;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^    var i = 0;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^    var i, p;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^    var i;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^  let i = 0$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^  var i = 0$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^  var i = 0;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^  var i;$/;"	V
i	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var i = 0, elem, pos = first.length;$/;"	V
i	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var name, i = 0, length = object.length;$/;"	V
i	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def i(str)$/;"	f	class:Differ
i	nvim/plugged/vim-gitgutter/test/runner.vim	/^      let i += 1$/;"	v
i	nvim/plugged/vim-gitgutter/test/runner.vim	/^    let i = 0$/;"	v
iH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> iH :<C-U>call vimwiki#base#TO_header(1, 1, v:count1)<CR>$/;"	m
iH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> iH :<C-U>call vimwiki#base#TO_header(1, 1, v:count1)<CR>$/;"	m
iM	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
i\	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> i\\ :<C-U>call vimwiki#base#TO_table_cell(1, 0)<CR>$/;"	m
i\	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> i\\ :<C-U>call vimwiki#base#TO_table_cell(1, 1)<CR>$/;"	m
ic	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> ic :<C-U>call vimwiki#base#TO_table_col(1, 0)<CR>$/;"	m
ic	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> ic :<C-U>call vimwiki#base#TO_table_col(1, 1)<CR>$/;"	m
id	nvim/plugged/coc.nvim/build/index.js	/^                        id: key,$/;"	P
id	nvim/plugged/coc.nvim/build/index.js	/^                    id: id,$/;"	P
id	nvim/plugged/coc.nvim/build/index.js	/^                id: idx,$/;"	P
id	nvim/plugged/coc.nvim/build/index.js	/^            id: {$/;"	P
id	nvim/plugged/coc.nvim/build/index.js	/^            let id = 2000;$/;"	V
id	nvim/plugged/coc.nvim/build/index.js	/^        let id;$/;"	V
id	nvim/plugged/coc.nvim/src/commands.ts	/^    public id: string,$/;"	m
id	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get id(): string {$/;"	m
id	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public id: number$/;"	m
identity	nvim/plugged/coc.nvim/build/index.js	/^function identity(e) {$/;"	F
ids	nvim/plugged/coc.nvim/build/index.js	/^            let ids = [];$/;"	A
ids	nvim/plugged/coc.nvim/build/index.js	/^        let ids = [];$/;"	A
idx	nvim/plugged/coc.nvim/build/index.js	/^                            let idx = results.findIndex(o => o.source == name);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^                        let idx = codeActions.findIndex(o => o.title == action.title);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^                    let idx = res.findIndex(l => l.uri == uri && l.range.start.line == range.start.line);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^                let idx = res.findIndex(l => l.uri == uri && l.range.start.line == range.start.line);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^                let idx = this.list.findIndex(o => o.id == id);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^            let idx = 0;$/;"	V
idx	nvim/plugged/coc.nvim/build/index.js	/^            let idx = await workspace_1.default.showQuickpick(codeActions.map(o => o.title));$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^            let idx = items.findIndex(item => {$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^            let idx = res.findIndex(o => {$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^            let idx = this.collections.findIndex(o => o == collection);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^            let idx = this.list.findIndex(o => o.id == id);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = 0;$/;"	V
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = ranges.findIndex(o => position_1.rangeIntersect(o.range, range));$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this._workspaceFolders.findIndex(f => vscode_uri_1.URI.parse(f.uri).fsPath == fsPath);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this._workspaceFolders.findIndex(f => vscode_uri_1.URI.parse(f.uri).fsPath == oldPath);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.actions.findIndex(o => o.name == name);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.buffers.findIndex(b => b.bufnr == doc.bufnr);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.buffers.findIndex(buf => buf.bufnr == bufnr);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.list.findIndex(o => o.id == id);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.sources.findIndex(s => {$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^    let idx = 0;$/;"	V
idx	nvim/plugged/coc.nvim/build/index.js	/^    let idx = 1;$/;"	V
if	nvim/plugged/coc.nvim/build/index.js	/^      if(clobber) {$/;"	M
if	nvim/plugged/coc.nvim/build/index.js	/^    if(k.toLowerCase().indexOf(prefix.toLowerCase()) === 0) {$/;"	M
if	nvim/plugged/coc.nvim/build/index.js	/^    if(rename) {$/;"	M
if	nvim/plugged/coc.nvim/build/index.js	/^    if(transform) {$/;"	M
if	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		if( array != null ){$/;"	M
if	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		if( data != undefined ) {$/;"	M
ifoo	nvim/plugged/vim-jsdoc/test/test.ts	/^function ifoo(): IFoo {$/;"	f
ignoreChangeEvents	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^    public ignoreChangeEvents: boolean,$/;"	m
ignoreCreateEvents	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^    public ignoreCreateEvents: boolean,$/;"	m
ignoreDeleteEvents	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^    public ignoreDeleteEvents: boolean$/;"	m
ignoreFilepath	nvim/plugged/coc.nvim/build/index.js	/^        let ignoreFilepath = locs.every(o => o.bufnr && bufnr && o.bufnr == bufnr);$/;"	F
ignoreGitignore	nvim/plugged/coc.nvim/src/source/buffer.ts	/^  public get ignoreGitignore(): boolean {$/;"	m
ignoreMap	nvim/plugged/coc.nvim/build/index.js	/^function ignoreMap (pattern) {$/;"	F
ih	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> ih :<C-U>call vimwiki#base#TO_header(1, 0, v:count1)<CR>$/;"	m
ih	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> ih :<C-U>call vimwiki#base#TO_header(1, 0, v:count1)<CR>$/;"	m
il	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> il :<C-U>call vimwiki#lst#TO_list_item(1, 0)<CR>$/;"	m
il	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> il :<C-U>call vimwiki#lst#TO_list_item(1, 1)<CR>$/;"	m
im	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
image	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			image: function(a){return "image"==a.type;},$/;"	M
impl	nvim/plugged/coc.nvim/src/commands.ts	/^    private impl: (...args: any[]) => void,$/;"	m
implementationManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private implementationManager = new ImplementationManager()$/;"	m
inArray	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	inArray: function( elem, array ) {$/;"	M
inDirectory	nvim/plugged/coc.nvim/build/index.js	/^function inDirectory(dir, subs) {$/;"	F
inDirectory	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function inDirectory(dir: string, subs: string[]): boolean {$/;"	f
in_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:in_hunk_preview_window()$/;"	f
in_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let in_list = (len(a:lists) > 0)$/;"	v
inc	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.inc = function (release, identifier) {$/;"	M
inc	nvim/plugged/coc.nvim/build/index.js	/^function inc (version, release, loose, identifier) {$/;"	F
incl_match_arg	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:incl_match_arg(nn_index)$/;"	f
includePrerelease	nvim/plugged/coc.nvim/build/index.js	/^      includePrerelease: false$/;"	P
includeText	nvim/plugged/coc.nvim/build/index.js	/^                            includeText: false$/;"	P
included	nvim/plugged/coc.nvim/build/index.js	/^        let included = exclude.map(o => o.root);$/;"	F
incompletePlaceholders	nvim/plugged/coc.nvim/build/index.js	/^        const incompletePlaceholders = [];$/;"	A
increase_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increase_level(item)$/;"	f
increment_1	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_1(value)$/;"	f
increment_A	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_A(value)$/;"	f
increment_I	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_I(value)$/;"	f
increment_a	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_a(value)$/;"	f
increment_i	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_i(value)$/;"	f
indent	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let indent = stridx(line, lstSym)$/;"	v
indentLevel	nvim/plugged/coc.nvim/build/index.js	/^    var indentLevel = 0;$/;"	V
indentValue	nvim/plugged/coc.nvim/build/index.js	/^    var indentValue;$/;"	V
indent_line_by	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:indent_line_by(lnum, indent_by)$/;"	f
indent_multiline	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:indent_multiline(prev_item, lnum)$/;"	f
index	nvim/plugged/coc.nvim/build/index.js	/^			let index = 0;$/;"	V
index	nvim/plugged/coc.nvim/build/index.js	/^	let index = 0;$/;"	V
index	nvim/plugged/coc.nvim/build/index.js	/^        index: i$/;"	P
index	nvim/plugged/coc.nvim/build/index.js	/^        let index;$/;"	V
index	nvim/plugged/coc.nvim/build/index.js	/^      index: 0$/;"	P
index	nvim/plugged/coc.nvim/build/index.js	/^      index: 0,$/;"	P
index	nvim/plugged/coc.nvim/build/index.js	/^      var index = 0;$/;"	V
index	nvim/plugged/coc.nvim/build/index.js	/^  const index = (f, i, d) =>$/;"	F
index	nvim/plugged/coc.nvim/build/index.js	/^  const index = (f, p) => {$/;"	F
index	nvim/plugged/coc.nvim/build/index.js	/^  var index = 0;$/;"	V
index	nvim/plugged/coc.nvim/src/list/history.ts	/^  private index = -1$/;"	m
index	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public get index(): number {$/;"	m
index	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public set index(n: number) {$/;"	m
index	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	index: function( elem ) {$/;"	M
indexOf	nvim/plugged/coc.nvim/build/index.js	/^function indexOf(str, ch, count = 1) {$/;"	F
indexOf	nvim/plugged/coc.nvim/src/util/string.ts	/^export function indexOf(str: string, ch: string, count = 1): number {$/;"	f
infer_properties	nvim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
inflight	nvim/plugged/coc.nvim/build/index.js	/^function inflight (key, cb) {$/;"	F
info	nvim/plugged/coc.nvim/build/index.js	/^            info: (...args) => {$/;"	M
info	nvim/plugged/coc.nvim/build/index.js	/^        let info = { error: 0, warning: 0, information: 0, hint: 0, lnums };$/;"	O
info	nvim/plugged/coc.nvim/build/index.js	/^        let info = {};$/;"	O
info	nvim/plugged/coc.nvim/build/index.js	/^    info(data, ...meta) {$/;"	M
info	nvim/plugged/coc.nvim/build/index.js	/^    info(message) {$/;"	M
info	nvim/plugged/coc.nvim/build/index.js	/^    info(message, data) {$/;"	M
info	nvim/plugged/coc.nvim/build/index.js	/^    info: () => { },$/;"	M
info	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public info(message: string): void {$/;"	m
info	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public info(message: string, data?: any): void {$/;"	m
infoChannel	nvim/plugged/coc.nvim/src/plugin.ts	/^  private infoChannel: OutputChannel$/;"	m
inheritFromParent	nvim/plugged/coc.nvim/build/index.js	/^function inheritFromParent(config, category, categoryName) {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^    function init(that, buffer, offset, value, raddix) {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^    init() {$/;"	M
init	nvim/plugged/coc.nvim/build/index.js	/^    init(nvim) {$/;"	M
init	nvim/plugged/coc.nvim/build/index.js	/^    init(nvim, plugin) {$/;"	M
init	nvim/plugged/coc.nvim/build/index.js	/^  init: init$/;"	P
init	nvim/plugged/coc.nvim/build/index.js	/^Codec.prototype.init = function() {$/;"	M
init	nvim/plugged/coc.nvim/build/index.js	/^function init() {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^function init(debug) {$/;"	F
init	nvim/plugged/coc.nvim/src/commands.ts	/^  public init(nvim: Neovim, plugin: Plugin): void {$/;"	m
init	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public init(): void {$/;"	m
init	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public init(): void {$/;"	m
init	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async init(): Promise<void> {$/;"	m
init	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private async init(): Promise<void> {$/;"	m
init	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public init(nvim: Neovim): void {$/;"	m
init	nvim/plugged/coc.nvim/src/model/document.ts	/^  public async init(nvim: Neovim, token: CancellationToken): Promise<boolean> {$/;"	m
init	nvim/plugged/coc.nvim/src/plugin.ts	/^  public async init(): Promise<void> {$/;"	m
init	nvim/plugged/coc.nvim/src/services.ts	/^  public init(): void {$/;"	m
init	nvim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^  public async init(document: Document): Promise<void> {$/;"	m
init	nvim/plugged/coc.nvim/src/sources.ts	/^  public init(): void {$/;"	m
init	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async init(): Promise<void> {$/;"	m
init	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	init: function( selector, context ) {$/;"	M
init	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:init()$/;"	f
init	nvim/plugged/vim-elixir/large_file.ex	/^        def init(:ok) do$/;"	f
init	nvim/plugged/vim-elixir/large_file.ex	/^        def init(_) do$/;"	f
init	nvim/plugged/vim-elixir/large_file.ex	/^        def init(counter) do$/;"	f
init	nvim/plugged/vim-elixir/large_file.ex	/^        def init(number) do$/;"	f
init	nvim/plugged/vim-elixir/large_file.ex	/^      def init(:ok) do$/;"	f
init	nvim/plugged/vim-elixir/large_file.ex	/^      def init(args) do$/;"	f
init	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def init(_) do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
init	nvim/plugged/vim-elixir/spec/syntax/atom_spec.rb	/^          def init(args) do$/;"	f
initCustomOpenArgs	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs()$/;"	f
initFoldState	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
initParams	nvim/plugged/coc.nvim/build/index.js	/^        let initParams = {$/;"	O
initVariable	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
init_buffer	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:init_buffer()$/;"	f
init_safe	nvim/plugged/coc.nvim/build/index.js	/^function init_safe() {$/;"	F
init_settings	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^function! s:init_settings(settings)$/;"	f
init_token	nvim/plugged/coc.nvim/build/index.js	/^function init_token() {$/;"	F
init_token	nvim/plugged/coc.nvim/build/index.js	/^function init_token(format) {$/;"	F
init_uint8array	nvim/plugged/coc.nvim/build/index.js	/^function init_uint8array() {$/;"	F
init_useraw	nvim/plugged/coc.nvim/build/index.js	/^function init_useraw(format) {$/;"	F
init_var	nvim/plugged/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
initialIndentLevel	nvim/plugged/coc.nvim/build/index.js	/^    var initialIndentLevel;$/;"	V
initialize	nvim/plugged/coc.nvim/build/index.js	/^        initialize: (params) => connection.sendRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params),$/;"	M
initialize	nvim/plugged/coc.nvim/build/index.js	/^    initialize() {$/;"	M
initialize	nvim/plugged/coc.nvim/build/index.js	/^    initialize(_capabilities, _documentSelector) { }$/;"	M
initialize	nvim/plugged/coc.nvim/build/index.js	/^    initialize(capabilities) {$/;"	M
initialize	nvim/plugged/coc.nvim/build/index.js	/^    initialize(capabilities, documentSelector) {$/;"	M
initialize	nvim/plugged/coc.nvim/build/index.js	/^    initialize(connection) {$/;"	M
initialize	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private initialize(connection: IConnection): Thenable<InitializeResult> {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public abstract initialize($/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize(): void {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize(capabilities: ServerCapabilities): void {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  public initialize($/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/configuration.ts	/^  public initialize(): void {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/declaration.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^  public initialize($/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/implementation.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^  public initialize(capabilities: ServerCapabilities & SelectionRangeServerCapabilities, documentSelector: DocumentSelector): void {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void {$/;"	m
initialize	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  public initialize(capabilities: ServerCapabilities): void {$/;"	m
initialize	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def initialize$/;"	f	class:Differ
initialize	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def initialize(vim, type)$/;"	f	class:Buffer
initializeFeatures	nvim/plugged/coc.nvim/build/index.js	/^    initializeFeatures(_connection) {$/;"	M
initializeFeatures	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private initializeFeatures(_connection: IConnection): void {$/;"	m
initializeResult	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get initializeResult(): InitializeResult | undefined {$/;"	m
initializeRoot	nvim/plugged/coc.nvim/src/extensions.ts	/^  private async initializeRoot(): Promise<void> {$/;"	m
initialized	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get initialized(): boolean {$/;"	m
inject_snippet	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
input	nvim/plugged/coc.nvim/build/index.js	/^            input: resumeInput,$/;"	P
input	nvim/plugged/coc.nvim/build/index.js	/^        let input = '';$/;"	V
input	nvim/plugged/coc.nvim/build/index.js	/^    input(keys) {$/;"	M
input	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public get input(): string {$/;"	m
input	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private input: string$/;"	m
input	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public get input(): string {$/;"	m
input	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public set input(str: string) {$/;"	m
input	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private get input(): string {$/;"	m
input	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			input: function(a){return \/input|select|textarea|button\/i.test(a.nodeName);},$/;"	M
inputPrompt	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
insert	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.insert = function (position, newText) {$/;"	M
insert	nvim/plugged/coc.nvim/build/index.js	/^    function insert(position, newText) {$/;"	F
insert	nvim/plugged/coc.nvim/build/index.js	/^    insert(lines, start) {$/;"	M
insertAfter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	insertAfter: "after",$/;"	P
insertBefore	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	insertBefore: "before",$/;"	P
insertCharTs	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private insertCharTs = 0$/;"	m
insertLeaveTs	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private insertLeaveTs = 0$/;"	m
insertMappings	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private insertMappings: Map<string, () => void | Promise<void>> = new Map()$/;"	m
insertMode	nvim/plugged/coc.nvim/src/events.ts	/^  private insertMode = false$/;"	m
insertMode	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get insertMode(): boolean {$/;"	m
insertRegister	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public async insertRegister(): Promise<void> {$/;"	m
insertSnippet	nvim/plugged/coc.nvim/build/index.js	/^    insertSnippet(placeholder, snippet, range) {$/;"	M
insertSnippet	nvim/plugged/coc.nvim/build/index.js	/^    insertSnippet(snippet, id, range) {$/;"	M
insertSnippet	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public async insertSnippet(snippet: string, select = true, range?: Range): Promise<boolean> {$/;"	m
insertSnippet	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public insertSnippet(snippet: string, id: number, range: Range): number {$/;"	m
insertSnippet	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public insertSnippet(placeholder: CocSnippetPlaceholder, snippet: string, range: Range): number {$/;"	m
inspect	nvim/plugged/coc.nvim/build/index.js	/^            inspect: (key) => {$/;"	M
inspect	nvim/plugged/coc.nvim/build/index.js	/^        inspect: () => {$/;"	M
inspect	nvim/plugged/coc.nvim/build/index.js	/^    inspect(key) {$/;"	M
inspect	nvim/plugged/coc.nvim/build/index.js	/^  inspect: function() {$/;"	M
inspect	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^  public inspect<C>(key: string): {$/;"	m
inspectOpts	nvim/plugged/coc.nvim/build/index.js	/^	debug.inspectOpts = {};$/;"	P
inspectOpts	nvim/plugged/coc.nvim/build/index.js	/^  debug.inspectOpts = {};$/;"	P
install	nvim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
install	nvim/plugged/coc.nvim/build/index.js	/^function install(props) {$/;"	F
install	nvim/plugged/coc.nvim/src/model/extension.ts	/^  public async install(npm: string, def: string): Promise<string> {$/;"	m
installExtensions	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async installExtensions(list: string[] = []): Promise<void> {$/;"	m
install_file	nvim/plugged/html5.vim/Makefile	/^install_file = \\$/;"	m
install_git_source	nvim/plugged/html5.vim/Makefile	/^install_git_source = \\$/;"	m
install_plugin	nvim/plugged/emmet-vim/plugin/emmet.vim	/^function! s:install_plugin(mode, buffer)$/;"	f
install_source	nvim/plugged/html5.vim/Makefile	/^install_source = \\$/;"	m
instance	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def self.instance$/;"	F	class:Differ
int16	nvim/plugged/coc.nvim/build/index.js	/^    int16: int16,$/;"	P
int16	nvim/plugged/coc.nvim/build/index.js	/^function int16(decoder) {$/;"	F
int32	nvim/plugged/coc.nvim/build/index.js	/^    int32: int32,$/;"	P
int32	nvim/plugged/coc.nvim/build/index.js	/^function int32(decoder) {$/;"	F
int64	nvim/plugged/coc.nvim/build/index.js	/^  function int64(encoder, value) {$/;"	F
int8	nvim/plugged/coc.nvim/build/index.js	/^    int8: int8,$/;"	P
int8	nvim/plugged/coc.nvim/build/index.js	/^function int8(decoder) {$/;"	F
interactive	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public interactive = true$/;"	m
interactive	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  private interactive = false$/;"	m
interactive	nvim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public readonly interactive = true$/;"	m
internal	nvim/plugged/coc.nvim/src/commands.ts	/^    public internal = false$/;"	m
internals	nvim/plugged/coc.nvim/build/index.js	/^var internals = {$/;"	O
intersect	nvim/plugged/coc.nvim/build/index.js	/^function intersect(array, other) {$/;"	F
intersect	nvim/plugged/coc.nvim/src/util/array.ts	/^export function intersect<T>(array: T[], other: T[]): boolean {$/;"	f
intersects	nvim/plugged/coc.nvim/build/index.js	/^Comparator.prototype.intersects = function (comp, options) {$/;"	M
intersects	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.intersects = function (range, options) {$/;"	M
intersects	nvim/plugged/coc.nvim/build/index.js	/^function intersects (r1, r2, options) {$/;"	F
interval	nvim/plugged/coc.nvim/build/index.js	/^            let interval = setInterval(() => {$/;"	F
interval	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private interval: NodeJS.Timer$/;"	m
interval	nvim/plugged/coc.nvim/src/model/status.ts	/^  private interval: NodeJS.Timer$/;"	m
invalidWin32Path	nvim/plugged/coc.nvim/build/index.js	/^function invalidWin32Path (p) {$/;"	F
invalidate	nvim/plugged/coc.nvim/src/util/lazy.ts	/^  public invalidate(): void {$/;"	m
inverse	nvim/plugged/coc.nvim/build/index.js	/^  inverse: [7, 27],$/;"	P
invoke	nvim/plugged/coc.nvim/build/index.js	/^    invoke(...args) {$/;"	M
invoke_funcrefs	nvim/plugged/vim-airline/autoload/airline.vim	/^function! s:invoke_funcrefs(context, funcrefs)$/;"	f
ip	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def ip(str)$/;"	f	class:Differ
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
is	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  export function is(value: any): value is MessageTransports {$/;"	f
is	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  export function is<T>(value: any): value is DynamicFeature<T> {$/;"	f
is	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  export function is(value: any): value is ChildProcessInfo {$/;"	f
is	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  export function is(value: any): value is Executable {$/;"	f
is	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  export function is(value: any): value is NodeModule {$/;"	f
is	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  export function is(value: any): value is StreamInfo {$/;"	f
is	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	is: function( selector ) {$/;"	M
isActivated	nvim/plugged/coc.nvim/build/index.js	/^    isActivated(id) {$/;"	M
isActivated	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public get isActivated(): boolean {$/;"	m
isActivated	nvim/plugged/coc.nvim/src/extensions.ts	/^  public isActivated(id: string): boolean {$/;"	m
isActivated	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public get isActivated(): boolean {$/;"	m
isActive	nvim/plugged/coc.nvim/build/index.js	/^            isActive: {$/;"	P
isActive	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public get isActive(): boolean {$/;"	m
isActived	nvim/plugged/coc.nvim/build/index.js	/^    isActived(bufnr) {$/;"	M
isActived	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public isActived(bufnr: number): boolean {$/;"	m
isAlphaSequence	nvim/plugged/coc.nvim/build/index.js	/^  var isAlphaSequence = \/^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$\/.test(m.body);$/;"	V
isArrayBuffer	nvim/plugged/coc.nvim/build/index.js	/^function isArrayBuffer(value) {$/;"	F
isAsciiLetter	nvim/plugged/coc.nvim/build/index.js	/^function isAsciiLetter(code) {$/;"	F
isAsciiLetter	nvim/plugged/coc.nvim/src/util/string.ts	/^export function isAsciiLetter(code: number): boolean {$/;"	f
isAtPropertyKey	nvim/plugged/coc.nvim/build/index.js	/^        isAtPropertyKey: isAtPropertyKey,$/;"	P
isAttached	nvim/plugged/coc.nvim/build/index.js	/^    isAttached(bufnr) {$/;"	M
isCanceled	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public get isCanceled(): boolean {$/;"	m
isCancellationRequested	nvim/plugged/coc.nvim/build/index.js	/^        isCancellationRequested: false,$/;"	P
isCancellationRequested	nvim/plugged/coc.nvim/build/index.js	/^        isCancellationRequested: true,$/;"	P
isClosed	nvim/plugged/coc.nvim/build/index.js	/^    function isClosed() {$/;"	F
isCompleting	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public get isCompleting(): boolean {$/;"	m
isConnectionActive	nvim/plugged/coc.nvim/build/index.js	/^    isConnectionActive() {$/;"	M
isConnectionActive	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private isConnectionActive(): boolean {$/;"	m
isDark	nvim/plugged/coc.nvim/build/index.js	/^function isDark(color) {$/;"	F
isDark	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^function isDark(color: Color): boolean {$/;"	f
isDigit	nvim/plugged/coc.nvim/build/index.js	/^function isDigit(ch) {$/;"	F
isDigitCharacter	nvim/plugged/coc.nvim/build/index.js	/^    static isDigitCharacter(ch) {$/;"	M
isDigitCharacter	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public static isDigitCharacter(ch: number): boolean {$/;"	m
isDirectory	nvim/plugged/coc.nvim/build/index.js	/^async function isDirectory(filepath) {$/;"	F
isDirectory	nvim/plugged/coc.nvim/src/util/fs.ts	/^export async function isDirectory(filepath: string): Promise<boolean> {$/;"	f
isDisabled	nvim/plugged/coc.nvim/build/index.js	/^    isDisabled(id) {$/;"	M
isDisabled	nvim/plugged/coc.nvim/src/extensions.ts	/^  public isDisabled(id: string): boolean {$/;"	m
isDisposed	nvim/plugged/coc.nvim/build/index.js	/^    function isDisposed() {$/;"	F
isDocumentEdit	nvim/plugged/coc.nvim/build/index.js	/^function isDocumentEdit(edit) {$/;"	F
isDocumentEdit	nvim/plugged/coc.nvim/src/util/index.ts	/^export function isDocumentEdit(edit: any): boolean {$/;"	f
isDocumentSymbol	nvim/plugged/coc.nvim/build/index.js	/^function isDocumentSymbol(a) {$/;"	F
isDocumentSymbol	nvim/plugged/coc.nvim/src/handler/index.ts	/^function isDocumentSymbol(a: DocumentSymbol | SymbolInformation): a is DocumentSymbol {$/;"	f
isDocumentSymbols	nvim/plugged/coc.nvim/build/index.js	/^function isDocumentSymbols(a) {$/;"	F
isDocumentSymbols	nvim/plugged/coc.nvim/src/handler/index.ts	/^function isDocumentSymbols(a: DocumentSymbol[] | SymbolInformation[]): a is DocumentSymbol[] {$/;"	f
isEOL	nvim/plugged/coc.nvim/build/index.js	/^function isEOL(text, offset) {$/;"	F
isEmpty	nvim/plugged/coc.nvim/build/index.js	/^    isEmpty() {$/;"	M
isEmpty	nvim/plugged/coc.nvim/build/index.js	/^function isEmpty(location) {$/;"	F
isEmpty	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public get isEmpty(): boolean {$/;"	m
isEmpty	nvim/plugged/coc.nvim/src/handler/index.ts	/^function isEmpty(location: any): boolean {$/;"	f
isEqualTo	nvim/plugged/coc.nvim/build/index.js	/^  isEqualTo(otherLevel) {$/;"	M
isFile	nvim/plugged/coc.nvim/build/index.js	/^function isFile(uri) {$/;"	F
isFile	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function isFile(uri: string): boolean {$/;"	f
isFinalTabstop	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get isFinalTabstop(): boolean {$/;"	m
isFoldable	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFoldable	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFolded	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
isFolded	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
isFunction	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isFunction: function( fn ) {$/;"	M
isGitIgnored	nvim/plugged/coc.nvim/build/index.js	/^async function isGitIgnored(fullpath) {$/;"	F
isGitIgnored	nvim/plugged/coc.nvim/src/util/fs.ts	/^export async function isGitIgnored(fullpath: string): Promise<boolean> {$/;"	f
isGlobalExtension	nvim/plugged/coc.nvim/build/index.js	/^    isGlobalExtension(id) {$/;"	M
isGlobalExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  private isGlobalExtension(id: string): boolean {$/;"	m
isGreaterThanOrEqualTo	nvim/plugged/coc.nvim/build/index.js	/^  isGreaterThanOrEqualTo(otherLevel) {$/;"	M
isIgnored	nvim/plugged/coc.nvim/build/index.js	/^function isIgnored (self, path) {$/;"	F
isIgnored	nvim/plugged/coc.nvim/src/model/document.ts	/^  public isIgnored = false$/;"	m
isIncomplete	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public get isIncomplete(): boolean {$/;"	m
isInt64	nvim/plugged/coc.nvim/build/index.js	/^    function isInt64(b) {$/;"	F
isKeyword	nvim/plugged/coc.nvim/build/index.js	/^    isKeyword(word) {$/;"	M
isKeyword	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public isKeyword(word: string): boolean {$/;"	m
isKeywordChar	nvim/plugged/coc.nvim/build/index.js	/^    isKeywordChar(ch) {$/;"	M
isKeywordChar	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public isKeywordChar(ch: string): boolean {$/;"	m
isKeywordCode	nvim/plugged/coc.nvim/build/index.js	/^    isKeywordCode(code) {$/;"	M
isKeywordCode	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public isKeywordCode(code: number): boolean {$/;"	m
isKindheader	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
isKindheader	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
isLSPMessage	nvim/plugged/coc.nvim/build/index.js	/^            isLSPMessage: true,$/;"	P
isLessThanOrEqualTo	nvim/plugged/coc.nvim/build/index.js	/^  isLessThanOrEqualTo(otherLevel) {$/;"	M
isLevelEnabled	nvim/plugged/coc.nvim/build/index.js	/^  isLevelEnabled(otherLevel) {$/;"	M
isLineBreak	nvim/plugged/coc.nvim/build/index.js	/^function isLineBreak(ch) {$/;"	F
isLineStart	nvim/plugged/coc.nvim/build/index.js	/^                isLineStart = (ch === '\\r' || ch === '\\n');$/;"	M
isLinux	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const isLinux = _isLinux$/;"	v
isListening	nvim/plugged/coc.nvim/build/index.js	/^    function isListening() {$/;"	F
isLoading	nvim/plugged/coc.nvim/src/list/worker.ts	/^  public get isLoading(): boolean {$/;"	m
isLocal	nvim/plugged/coc.nvim/build/index.js	/^                        isLocal: false,$/;"	P
isLocal	nvim/plugged/coc.nvim/build/index.js	/^                        isLocal: true,$/;"	P
isMacintosh	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const isMacintosh = _isMacintosh$/;"	v
isMaster	nvim/plugged/coc.nvim/build/index.js	/^const isMaster = () => disabled || cluster.isMaster || isPM2Master();$/;"	F
isMessageReader	nvim/plugged/coc.nvim/build/index.js	/^function isMessageReader(value) {$/;"	F
isMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^function isMessageWriter(value) {$/;"	F
isName	nvim/plugged/coc.nvim/build/index.js	/^    var isName = "is" + name;$/;"	V
isNative	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const isNative = _isNative$/;"	v
isNormalTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isNormalTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isNotificationMessage	nvim/plugged/coc.nvim/build/index.js	/^function isNotificationMessage(message) {$/;"	F
isNumber	nvim/plugged/coc.nvim/build/index.js	/^function isNumber (x) {$/;"	F
isNumericSequence	nvim/plugged/coc.nvim/build/index.js	/^  var isNumericSequence = \/^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$\/.test(m.body);$/;"	V
isNvim	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get isNvim(): boolean {$/;"	m
isPM2Master	nvim/plugged/coc.nvim/build/index.js	/^const isPM2Master = () => pm2 && process.env[pm2InstanceVar] === "0";$/;"	F
isPadded	nvim/plugged/coc.nvim/build/index.js	/^function isPadded(el) {$/;"	F
isParentFolder	nvim/plugged/coc.nvim/build/index.js	/^function isParentFolder(folder, filepath, checkEqual = false) {$/;"	F
isParentFolder	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function isParentFolder(folder: string, filepath: string, checkEqual = false): boolean {$/;"	f
isPlainText	nvim/plugged/coc.nvim/build/index.js	/^    isPlainText(text) {$/;"	M
isPlainText	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public isPlainText(text: string): boolean {$/;"	m
isPlainText	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public get isPlainText(): boolean {$/;"	m
isPseudoTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isPseudoTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isQuoted	nvim/plugged/coc.nvim/build/index.js	/^function isQuoted (val) {$/;"	F
isReady	nvim/plugged/coc.nvim/src/plugin.ts	/^  public get isReady(): boolean {$/;"	m
isReady	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isReady: false,$/;"	P
isRequestMessage	nvim/plugged/coc.nvim/build/index.js	/^function isRequestMessage(message) {$/;"	F
isResolving	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private isResolving = false$/;"	m
isResponseMessage	nvim/plugged/coc.nvim/build/index.js	/^function isResponseMessage(message) {$/;"	F
isRunning	nvim/plugged/coc.nvim/build/index.js	/^function isRunning(pid) {$/;"	F
isRunning	nvim/plugged/coc.nvim/src/util/index.ts	/^export function isRunning(pid: number): boolean {$/;"	f
isSatisfiable	nvim/plugged/coc.nvim/build/index.js	/^function isSatisfiable (comparators, options) {$/;"	F
isSingleLine	nvim/plugged/coc.nvim/build/index.js	/^function isSingleLine(range) {$/;"	F
isSingleLine	nvim/plugged/coc.nvim/src/util/position.ts	/^export function isSingleLine(range: Range): boolean {$/;"	f
isSnippet	nvim/plugged/coc.nvim/src/model/source.ts	/^  public readonly isSnippet: boolean$/;"	m
isSocket	nvim/plugged/coc.nvim/build/index.js	/^    function isSocket(value) {$/;"	F
isSocket	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  export function isSocket(value: Transport): value is SocketTransport {$/;"	f
isSpecificValue	nvim/plugged/coc.nvim/build/index.js	/^function isSpecificValue(val) {$/;"	F
isSplitTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
isSplitTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
isSrcSubdir	nvim/plugged/coc.nvim/build/index.js	/^function isSrcSubdir (src, dest) {$/;"	F
isTest	nvim/plugged/coc.nvim/build/index.js	/^const isTest = "none" == 'test';$/;"	V
isText	nvim/plugged/coc.nvim/build/index.js	/^                            let isText = \/^[\\w-\\s.,\\t]+$\/.test(detail);$/;"	V
isText	nvim/plugged/coc.nvim/build/index.js	/^            let isText = \/^[\\w-\\s.,\\t]+$\/.test(info);$/;"	V
isTriggerCharacter	nvim/plugged/coc.nvim/build/index.js	/^function isTriggerCharacter(character) {$/;"	F
isTriggerCharacter	nvim/plugged/coc.nvim/src/util/string.ts	/^export function isTriggerCharacter(character: string): boolean {$/;"	f
isTriggered	nvim/plugged/coc.nvim/build/index.js	/^    isTriggered() {$/;"	M
isUnknownContentCharacter	nvim/plugged/coc.nvim/build/index.js	/^    function isUnknownContentCharacter(code) {$/;"	F
isUri	nvim/plugged/coc.nvim/build/index.js	/^    URI.isUri = function (thing) {$/;"	M
isUsed	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get isUsed(): boolean {$/;"	m
isValid	nvim/plugged/coc.nvim/build/index.js	/^internals.Uri.isValid = function (val) {$/;"	M
isValidBuffer	nvim/plugged/coc.nvim/build/index.js	/^  function isValidBuffer(buffer, offset) {$/;"	F
isVariableCharacter	nvim/plugged/coc.nvim/build/index.js	/^    static isVariableCharacter(ch) {$/;"	M
isVariableCharacter	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public static isVariableCharacter(ch: number): boolean {$/;"	m
isVim	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get isVim(): boolean {$/;"	m
isVisual	nvim/plugged/coc.nvim/build/index.js	/^        let isVisual = ['v', 'V', '\\x16'].indexOf(mode) != -1;$/;"	A
isWS	nvim/plugged/coc.nvim/build/index.js	/^function isWS(text, offset) {$/;"	F
isWeb	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const isWeb = _isWeb$/;"	v
isWhiteSpace	nvim/plugged/coc.nvim/build/index.js	/^function isWhiteSpace(ch) {$/;"	F
isWindows	nvim/plugged/coc.nvim/build/index.js	/^var isWindows;$/;"	V
isWindows	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const isWindows = _isWindows$/;"	v
isWord	nvim/plugged/coc.nvim/build/index.js	/^    isWord(word) {$/;"	M
isWord	nvim/plugged/coc.nvim/build/index.js	/^function isWord(character) {$/;"	F
isWord	nvim/plugged/coc.nvim/src/model/document.ts	/^  public isWord(word: string): boolean {$/;"	m
isWord	nvim/plugged/coc.nvim/src/util/string.ts	/^export function isWord(character: string): boolean {$/;"	f
isWordIndex	nvim/plugged/coc.nvim/build/index.js	/^function isWordIndex(index, codes) {$/;"	F
isWordIndex	nvim/plugged/coc.nvim/src/completion/match.ts	/^function isWordIndex(index: number, codes: number[]): boolean {$/;"	f
isWritable	nvim/plugged/coc.nvim/build/index.js	/^    isWritable(target, function (writable) {$/;"	M
isWritable	nvim/plugged/coc.nvim/build/index.js	/^  function isWritable(path, done) {$/;"	F
isX	nvim/plugged/coc.nvim/build/index.js	/^function isX (id) {$/;"	F
isXMLDoc	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isXMLDoc: function( elem ) {$/;"	M
is_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_added(from_count, to_count) abort$/;"	f
is_branch_empty	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:is_branch_empty()$/;"	f
is_closed	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:is_closed(item)$/;"	f
is_diary_file	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:is_diary_file(filename)$/;"	f
is_excluded_window	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:is_excluded_window()$/;"	f
is_file_buffer	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:is_file_buffer(bufnr) abort$/;"	f
is_first_column	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_first_column(lnum, cnum)$/;"	f
is_html_uptodate	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:is_html_uptodate(wikifile)$/;"	f
is_img_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:is_img_link(lnk)$/;"	f
is_last_column	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_last_column(lnum, cnum)$/;"	f
is_local_plug	nvim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	nvim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_modified	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified(from_count, to_count) abort$/;"	f
is_modified_and_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_added(from_count, to_count) abort$/;"	f
is_modified_and_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_removed(from_count, to_count) abort$/;"	f
is_preview_window_open	nvim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_removed(from_count, to_count) abort$/;"	f
is_separator	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_separator(line)$/;"	f
is_separator_tail	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_separator_tail(line)$/;"	f
is_string_or_comment	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:is_string_or_comment(line, col)$/;"	f
is_surrogate_pair_end	nvim/plugged/coc.nvim/build/index.js	/^function is_surrogate_pair_end(charCode) {$/;"	F
is_surrogate_pair_start	nvim/plugged/coc.nvim/build/index.js	/^function is_surrogate_pair_start(charCode) {$/;"	F
is_table	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_table(line)$/;"	f
is_updated	nvim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
is_web_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:is_web_link(lnk)$/;"	f
iscontOne	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:iscontOne(i,num,cont)$/;"	f
isexe	nvim/plugged/coc.nvim/build/index.js	/^      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {$/;"	M
isexe	nvim/plugged/coc.nvim/build/index.js	/^      isexe(path, options || {}, function (er, is) {$/;"	M
isexe	nvim/plugged/coc.nvim/build/index.js	/^function isexe (path, options, cb) {$/;"	F
islower	nvim/plugged/coc.nvim/build/index.js	/^function islower(s) {$/;"	F
islower	nvim/plugged/coc.nvim/src/util/fzy.ts	/^function islower(s): boolean {$/;"	f
isupper	nvim/plugged/coc.nvim/build/index.js	/^function isupper(s) {$/;"	F
isupper	nvim/plugged/coc.nvim/src/util/fzy.ts	/^function isupper(s): boolean {$/;"	f
italic	nvim/plugged/coc.nvim/build/index.js	/^  italic: [3, 23],$/;"	P
item	nvim/plugged/coc.nvim/build/index.js	/^            let item = this.fileItems.find(o => o.filepath == filepath);$/;"	F
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = Array.from(this.providers).find(o => o.id == id);$/;"	F
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = Array.from(this.providers).find(o => o.id == symbolInfo.source);$/;"	F
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = this.list.find(o => o.id == id);$/;"	F
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = {$/;"	O
item	nvim/plugged/coc.nvim/build/index.js	/^      var item = {};$/;"	O
item	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public get item(): Promise<ListItem> {$/;"	m
item	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^        let item = remove(a:lists, -1)$/;"	v
item	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^      let item = remove(a:lists, -1)$/;"	v
itemno	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! s:itemno(itemno, current) abort$/;"	f
items	nvim/plugged/coc.nvim/build/index.js	/^                                items: {$/;"	P
items	nvim/plugged/coc.nvim/build/index.js	/^                    let items;$/;"	V
items	nvim/plugged/coc.nvim/build/index.js	/^                let items = completeItems.map((o, index) => {$/;"	F
items	nvim/plugged/coc.nvim/build/index.js	/^                let items = params.actions.map(o => typeof o === 'string' ? o : o.title);$/;"	F
items	nvim/plugged/coc.nvim/build/index.js	/^            items = (items || []);$/;"	M
items	nvim/plugged/coc.nvim/build/index.js	/^            items: filtered,$/;"	P
items	nvim/plugged/coc.nvim/build/index.js	/^            items: { type: 'string' }$/;"	P
items	nvim/plugged/coc.nvim/build/index.js	/^            items: {$/;"	P
items	nvim/plugged/coc.nvim/build/index.js	/^            let items = await Promise.all(files.map(filename => {$/;"	F
items	nvim/plugged/coc.nvim/build/index.js	/^        let items = [];$/;"	A
items	nvim/plugged/coc.nvim/build/index.js	/^        let items = await Promise.all(locations.map(loc => {$/;"	F
items	nvim/plugged/coc.nvim/build/index.js	/^        let items = codeActions.map(action => {$/;"	F
items	nvim/plugged/coc.nvim/build/index.js	/^        let items = locs.map(loc => {$/;"	F
items	nvim/plugged/coc.nvim/build/index.js	/^        let items;$/;"	V
items	nvim/plugged/coc.nvim/build/index.js	/^    let items = [];$/;"	A
items	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async items(): Promise<VimCompleteItem[]> {$/;"	m
items	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private items: ListItem[] = []$/;"	m
items	nvim/plugged/coc.nvim/src/model/status.ts	/^  private items: Map<string, StatusBarItem> = new Map()$/;"	m
iterator	nvim/plugged/coc.nvim/build/index.js	/^  function iterator(value, filter) {$/;"	F
j	nvim/plugged/coc.nvim/build/index.js	/^formatters.j = function (v) {$/;"	M
j	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^char j = reinterpret_cast<char>(k);$/;"	v
jQuery	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				jQuery( "option", this ).each(function(){$/;"	M
jQuery	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery( "*", this ).add(this).each(function(){$/;"	M
jQuery	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery(window).bind("unload", function() {$/;"	M
job	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^    let job = term_getjob(bufnr)$/;"	v
job	nvim/plugged/coc.nvim/build/index.js	/^      const job = new PackJob(p.path, absolute, false)$/;"	V
job_abort	nvim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	nvim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	nvim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_id	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^    let job_id = termopen(a:cmd, {$/;"	v
job_out_cb	nvim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
join	nvim/plugged/coc.nvim/build/index.js	/^function join(filters) {$/;"	F
jquery	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	jquery: "1.2.6",$/;"	P
jsdoc#insert	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! jsdoc#insert() abort$/;"	f
jsdoc#listDataTypes	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! jsdoc#listDataTypes(A, L, P) abort$/;"	f
json	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			json: "application\/json, text\/javascript",$/;"	P
jsonfile	nvim/plugged/coc.nvim/build/index.js	/^var jsonfile = {$/;"	O
jsonp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var jsonp, jsre = \/=\\?(&|$)\/g, status, data,$/;"	V
jsonrpc	nvim/plugged/coc.nvim/build/index.js	/^                    jsonrpc: version,$/;"	P
jsonrpc	nvim/plugged/coc.nvim/build/index.js	/^                jsonrpc: version,$/;"	P
jsre	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var jsonp, jsre = \/=\\?(&|$)\/g, status, data,$/;"	V
jump	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
jumpNext	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public async jumpNext(severity?: string): Promise<void> {$/;"	m
jumpPrevious	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public async jumpPrevious(severity?: string): Promise<void> {$/;"	m
jumpRelated	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public async jumpRelated(): Promise<void> {$/;"	m
jumpTo	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public async jumpTo(location: Location | LocationWithLine | string, command?: string): Promise<void> {$/;"	m
jumpTo	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async jumpTo(uri: string, position?: Position | null, openCommand?: string): Promise<void> {$/;"	m
jumpToChild	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last)$/;"	f
jumpToFirstChild	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node)$/;"	f
jumpToLastChild	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node)$/;"	f
jumpToNextSibling	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node)$/;"	f
jumpToParent	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node)$/;"	f
jumpToPrevSibling	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
jumpToRoot	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward)$/;"	f
jump_to_anchor	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:jump_to_anchor(anchor)$/;"	f
jump_to_tab	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:jump_to_tab(offset)$/;"	f
jumpable	nvim/plugged/coc.nvim/build/index.js	/^    jumpable() {$/;"	M
jumpable	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public jumpable(): boolean {$/;"	m
k	nvim/plugged/coc.nvim/build/index.js	/^            var k = 0;$/;"	V
k	nvim/plugged/coc.nvim/build/index.js	/^  var k = new Array(len);$/;"	V
k1end	nvim/plugged/coc.nvim/build/index.js	/^  var k1end = 0;$/;"	V
k1start	nvim/plugged/coc.nvim/build/index.js	/^  var k1start = 0;$/;"	V
k2end	nvim/plugged/coc.nvim/build/index.js	/^  var k2end = 0;$/;"	V
k2start	nvim/plugged/coc.nvim/build/index.js	/^  var k2start = 0;$/;"	V
kbd_create_new_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_create_new_row(cols, goto_first)$/;"	f
kbd_goto_next_col	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_goto_next_col(jumpdown)$/;"	f
kbd_goto_next_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_goto_next_row()$/;"	f
kbd_goto_prev_col	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_goto_prev_col(jumpup)$/;"	f
kbd_goto_prev_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_goto_prev_row()$/;"	f
keepFileExt	nvim/plugged/coc.nvim/build/index.js	/^      keepFileExt: false,$/;"	P
key	nvim/plugged/coc.nvim/build/index.js	/^    let key;$/;"	V
key_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
keymaps	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly keymaps: Map<string, [Function, boolean]> = new Map()$/;"	m
keys	nvim/plugged/coc.nvim/build/index.js	/^    keys() {$/;"	M
keys	nvim/plugged/coc.nvim/build/index.js	/^    let keys = [];$/;"	A
keys	nvim/plugged/coc.nvim/build/index.js	/^webpackEmptyContext.keys = function() { return []; };$/;"	M
keyword	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:keyword(expr)$/;"	f
kind	nvim/plugged/coc.nvim/build/index.js	/^            kind: kind,$/;"	P
kinds	nvim/plugged/coc.nvim/build/index.js	/^            kinds: codeActionKinds,$/;"	P
known_files.get	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
known_files.has	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
known_files.put	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
known_files.rm	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
l	nvim/plugged/coc.nvim/build/index.js	/^        let l = 0;$/;"	V
l	nvim/plugged/coc.nvim/build/index.js	/^    l: lineNumber,$/;"	P
label	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> label <C-R>=DockerfileReplaceInstruction("label", "LABEL")<CR>$/;"	m
label	nvim/plugged/coc.nvim/build/index.js	/^                    label: id,$/;"	P
label	nvim/plugged/coc.nvim/build/index.js	/^            label: label,$/;"	P
labelOffsetSupport	nvim/plugged/coc.nvim/build/index.js	/^                labelOffsetSupport: true$/;"	P
label_col	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:label_col()$/;"	f
labels	nvim/plugged/coc.nvim/build/index.js	/^        this.labels = {};$/;"	P
labels	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private labels: { [key: string]: string } = {}$/;"	m
landmark_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let landmark_role = [$/;"	v
landmark_role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let landmark_role = ['application', 'banner', 'complementary', 'contentinfo', 'form', 'main', 'navigation', 'search']$/;"	v
lang_tag	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let lang_tag = [$/;"	v
language	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const language = 'en'$/;"	v
languageclient_refresh	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:languageclient_refresh()$/;"	f
last	nvim/plugged/coc.nvim/build/index.js	/^            let last;$/;"	V
last	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			last: function(a,i,m,r){return i==r.length-1;},$/;"	M
last	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var last;$/;"	V
lastC	nvim/plugged/coc.nvim/build/index.js	/^	let lastC = 0;$/;"	V
lastC	nvim/plugged/coc.nvim/build/index.js	/^  var lastC = 0;$/;"	V
lastChanageTs	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private lastChanageTs = 0$/;"	m
lastIndex	nvim/plugged/coc.nvim/build/index.js	/^function lastIndex(array, fn) {$/;"	F
lastIndex	nvim/plugged/coc.nvim/src/util/array.ts	/^export function lastIndex<T>(array: T[], fn: (t: T) => boolean): number {$/;"	f
lastInsert	nvim/plugged/coc.nvim/build/index.js	/^        let lastInsert;$/;"	V
lastInsert	nvim/plugged/coc.nvim/build/index.js	/^        this.lastInsert = {$/;"	P
lastInsert	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private lastInsert?: LastInsert$/;"	m
lastLine	nvim/plugged/coc.nvim/build/index.js	/^    let lastLine = newLines[newLines.length - 1];$/;"	V
lastMessage	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private lastMessage = ''$/;"	m
lastModified	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	lastModified: {},$/;"	P
lastPlaceholder	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public get lastPlaceholder(): CocSnippetPlaceholder {$/;"	m
lastPosition	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private get lastPosition(): Position {$/;"	m
lastToggle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			this.lastToggle = ( this.lastToggle || 0 ) % i;$/;"	M
lastTs	nvim/plugged/coc.nvim/build/index.js	/^            let lastTs;$/;"	V
last_buffer	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let last_buffer = len(b.buffers) - 1$/;"	v
last_ch	nvim/plugged/coc.nvim/build/index.js	/^    let last_ch = '\/';$/;"	V
last_char	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:last_char()$/;"	f
last_non_empty_line	nvim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	nvim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
later	nvim/plugged/coc.nvim/build/index.js	/^  function later() {$/;"	F
latestInsert	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private get latestInsert(): LastInsert | null {$/;"	m
latestInsertChar	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private get latestInsertChar(): string {$/;"	m
layout	nvim/plugged/coc.nvim/build/index.js	/^            layout: {$/;"	P
layoutMakers	nvim/plugged/coc.nvim/build/index.js	/^const layoutMakers = {$/;"	O
lazy	nvim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lchmod	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmod = function (path, mode, callback) {$/;"	M
lchmod	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmod = function (path, mode, cb) {$/;"	M
lchmodSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmodSync = function () {}$/;"	M
lchmodSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmodSync = function (path, mode) {$/;"	M
lchown	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchown = function (path, uid, gid, cb) {$/;"	M
lchownSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchownSync = function () {}$/;"	M
lcs	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:lcs(s1, s2)$/;"	f
ldest	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let ldest = a:ldest$/;"	v
left	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:left(s)$/;"	f
left	nvim/plugged/coc.nvim/build/index.js	/^  var begs, beg, left, right, result;$/;"	V
left	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var left = 0, top = 0, results;$/;"	V
left	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var left = 0, top = 0, elem = this[0], results;$/;"	V
leftIdx	nvim/plugged/coc.nvim/build/index.js	/^        var leftIdx = 0;$/;"	V
legacy	nvim/plugged/coc.nvim/build/index.js	/^function legacy (fs) {$/;"	F
legacy_airline_ale_get_line_number	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:legacy_airline_ale_get_line_number(cnt, type) abort$/;"	f
len	nvim/plugged/coc.nvim/build/index.js	/^		let len;$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^        let len = '.settings'.length;$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^        let len = 0;$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^    len() {$/;"	M
len	nvim/plugged/coc.nvim/build/index.js	/^    let len = newLines.length;$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^    let len;$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^    var len;$/;"	V
len	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public len(): number {$/;"	m
length	nvim/plugged/coc.nvim/build/index.js	/^        length: 0,$/;"	P
length	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public get length(): number {$/;"	m
length	nvim/plugged/coc.nvim/src/list/worker.ts	/^  public get length(): number {$/;"	m
length	nvim/plugged/coc.nvim/src/model/highligher.ts	/^  public get length(): number {$/;"	m
length	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	length: 0,$/;"	P
level	nvim/plugged/coc.nvim/build/index.js	/^        let level = 0;$/;"	V
levelMethod	nvim/plugged/coc.nvim/build/index.js	/^  const levelMethod = levelStrLower.replace(\/_([a-z])\/g, g =>$/;"	F
limit	nvim/plugged/coc.nvim/build/index.js	/^    limit: limit,$/;"	P
limit	nvim/plugged/coc.nvim/build/index.js	/^  limit = (limit < 1) ? 1 : (limit > 512) ? 512 : limit;$/;"	M
limitCompleteItems	nvim/plugged/coc.nvim/build/index.js	/^    limitCompleteItems(items) {$/;"	M
limitCompleteItems	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  private limitCompleteItems(items: VimCompleteItem[]): VimCompleteItem[] {$/;"	m
line	nvim/plugged/coc.nvim/build/index.js	/^                    let line = '';$/;"	V
line	nvim/plugged/coc.nvim/build/index.js	/^                line: i,$/;"	P
line	nvim/plugged/coc.nvim/build/index.js	/^          const line = fmt(req, res, str => format(str, combinedTokens));$/;"	F
line	nvim/plugged/coc.nvim/build/index.js	/^        let line = await new Promise(resolve => {$/;"	F
line	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let line = substitute(a:line, '\\t', repeat(' ', &tabstop), 'g')$/;"	v
lineChanges	nvim/plugged/coc.nvim/build/index.js	/^        let lineChanges = [];$/;"	A
lineCount	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get lineCount(): number {$/;"	m
lineInRange	nvim/plugged/coc.nvim/build/index.js	/^function lineInRange(line, range) {$/;"	F
lineInRange	nvim/plugged/coc.nvim/src/util/position.ts	/^export function lineInRange(line: number, range: Range): boolean {$/;"	f
lineNumber	nvim/plugged/coc.nvim/build/index.js	/^  function lineNumber(loggingEvent) {$/;"	F
lineOffsets	nvim/plugged/coc.nvim/build/index.js	/^            var lineOffsets = [];$/;"	A
lineRanges	nvim/plugged/coc.nvim/build/index.js	/^            let lineRanges = [];$/;"	A
lineStart	nvim/plugged/coc.nvim/build/index.js	/^            lineStart: 0,$/;"	P
line_adjustment_for_current_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:line_adjustment_for_current_hunk() abort$/;"	f
line_handler	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
line_has_marker	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:line_has_marker(lnum)$/;"	f
linear	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		linear: function( p, n, firstNum, diff ) {$/;"	M
linechars	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
lines	nvim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
lines	nvim/plugged/coc.nvim/build/index.js	/^                        lines: arr,$/;"	P
lines	nvim/plugged/coc.nvim/build/index.js	/^                let lines = folders.map(folder => vscode_uri_1.URI.parse(folder.uri).fsPath);$/;"	F
lines	nvim/plugged/coc.nvim/build/index.js	/^            let lines = [];$/;"	A
lines	nvim/plugged/coc.nvim/build/index.js	/^            let lines = docs.map(d => d.content).join('\\n').split(\/\\r?\\n\/);$/;"	F
lines	nvim/plugged/coc.nvim/build/index.js	/^            let lines = list.detail.split('\\n').map(s => '  ' + s);$/;"	F
lines	nvim/plugged/coc.nvim/build/index.js	/^            this.lines = (this.eol && content.endsWith('\\n') ? content.slice(0, -1) : content).split('\\n');$/;"	M
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = [];$/;"	A
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = new Set();$/;"	V
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = newText.split('\\n');$/;"	V
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = this.items.map(item => item.label);$/;"	F
lines	nvim/plugged/coc.nvim/src/model/document.ts	/^  private lines: string[] = []$/;"	m
lines	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  private lines: string[] = []$/;"	m
lines	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private get lines(): number {$/;"	m
lines	nvim/plugged/coc.nvim/src/model/highligher.ts	/^  private lines: string[] = []$/;"	m
lines	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let lines = []$/;"	v
link_file	nvim/plugged/html5.vim/Makefile	/^link_file = \\$/;"	m
linkify_image	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:linkify_image(src, descr, verbatim_str)$/;"	f
linkify_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:linkify_link(src, descr)$/;"	f
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['amphtml']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['apple-touch-icon', 'apple-touch-icon-precomposed', 'apple-touch-startup-image']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['canonical']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['chrome-webstore-item']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['hub']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['import']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['manifest']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['pgpkey']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['search']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['sitemap']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['webmention']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linktypes$/;"	v
links	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async links(): Promise<DocumentLink[]> {$/;"	m
linktypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linktypes = ['alternate', 'author', 'bookmark', 'dns-prefetch', 'external', 'help', 'icon', 'license', 'next', 'nofollow', 'noreferrer', 'noopener', 'pingback', 'preconnect', 'prefetch', 'preload', 'prerender', 'prev', 'search', 'stylesheet', 'tag']$/;"	v
linux_handler	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^  function! s:linux_handler(url)$/;"	f
list	nvim/plugged/coc.nvim/build/index.js	/^        const list = ['fuzzy', 'strict', 'regex'];$/;"	A
list	nvim/plugged/coc.nvim/build/index.js	/^        let list = new Map();$/;"	V
list	nvim/plugged/coc.nvim/build/index.js	/^const list = opt => new Parser(opt)$/;"	F
list	nvim/plugged/coc.nvim/src/extensions.ts	/^  private list: ExtensionItem[] = []$/;"	m
list	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public get list(): IList {$/;"	m
list	nvim/plugged/vim-jsdoc/test/test.ts	/^function list(args: Array<Bar>): void {$/;"	f
listArgs	nvim/plugged/coc.nvim/build/index.js	/^        let listArgs = ['--normal', '--number-select', 'actions', `-start`, start + '', `-end`, end + ''];$/;"	A
listArgs	nvim/plugged/coc.nvim/build/index.js	/^        let listArgs = [];$/;"	A
listArgs	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private listArgs: string[] = []$/;"	m
listFile	nvim/plugged/coc.nvim/build/index.js	/^const listFile = (opt, cb) => {$/;"	F
listFileSync	nvim/plugged/coc.nvim/build/index.js	/^const listFileSync = opt => {$/;"	F
listMap	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private listMap: Map<string, IList> = new Map()$/;"	m
listOptions	nvim/plugged/coc.nvim/build/index.js	/^        let listOptions = [];$/;"	A
listOptions	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public listOptions: ListOptions$/;"	m
listen	nvim/plugged/coc.nvim/build/index.js	/^        listen: () => connection.listen(),$/;"	M
listen	nvim/plugged/coc.nvim/build/index.js	/^        listen: () => {$/;"	M
listen	nvim/plugged/coc.nvim/build/index.js	/^    listen(callback) {$/;"	M
listen	nvim/plugged/coc.nvim/build/index.js	/^    listen(eventName, cb) {$/;"	M
listen	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  private async listen(client: Watchman): Promise<Disposable> {$/;"	m
listener	nvim/plugged/coc.nvim/build/index.js	/^            let listener = clientId => {$/;"	F
listeners	nvim/plugged/coc.nvim/build/index.js	/^const listeners = [];$/;"	A
listners	nvim/plugged/coc.nvim/build/index.js	/^    var listners;$/;"	V
live_region_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let live_region_attributes = {$/;"	v
lnum	nvim/plugged/coc.nvim/build/index.js	/^        let lnum;$/;"	V
lnums	nvim/plugged/coc.nvim/build/index.js	/^                let lnums = array_1.distinct(this.ranges.map(r => r.line));$/;"	F
lnums	nvim/plugged/coc.nvim/build/index.js	/^        let lnums = [0, 0, 0, 0];$/;"	A
load	nvim/plugged/coc.nvim/build/index.js	/^    load() {$/;"	M
load	nvim/plugged/coc.nvim/build/index.js	/^function load() {$/;"	F
load	nvim/plugged/coc.nvim/src/list/history.ts	/^  public load(): void {$/;"	m
load	nvim/plugged/coc.nvim/src/model/db.ts	/^  private load(): any {$/;"	m
load	nvim/plugged/coc.nvim/src/model/mru.ts	/^  public async load(): Promise<string[]> {$/;"	m
load	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	load: function( url, params, callback ) {$/;"	M
loadAppenderModule	nvim/plugged/coc.nvim/build/index.js	/^const loadAppenderModule = (type, config) => coreAppenders.get(type)$/;"	F
loadCompleteConfig	nvim/plugged/coc.nvim/build/index.js	/^    loadCompleteConfig() {$/;"	M
loadCompleteConfig	nvim/plugged/coc.nvim/src/languages.ts	/^  private loadCompleteConfig(): void {$/;"	m
loadConfig	nvim/plugged/coc.nvim/build/index.js	/^    loadConfig() {$/;"	M
loadConfig	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private loadConfig(): void {$/;"	m
loadConfigurationFile	nvim/plugged/coc.nvim/build/index.js	/^function loadConfigurationFile(filename) {$/;"	F
loadCtagsSymbols	nvim/plugged/coc.nvim/src/list/source/outline.ts	/^  public async loadCtagsSymbols(document: Document): Promise<ListItem[]> {$/;"	m
loadDefaultConfigurations	nvim/plugged/coc.nvim/build/index.js	/^function loadDefaultConfigurations() {$/;"	F
loadDefaultConfigurations	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function loadDefaultConfigurations(): IConfigurationModel {$/;"	f
loadExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async loadExtension(folder: string, isLocal = false): Promise<void> {$/;"	m
loadExtensionFile	nvim/plugged/coc.nvim/build/index.js	/^    loadExtensionFile(filepath) {$/;"	M
loadExtensionFile	nvim/plugged/coc.nvim/src/extensions.ts	/^  public loadExtensionFile(filepath: string): void {$/;"	m
loadFile	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async loadFile(uri: string): Promise<Document> {$/;"	m
loadFileExtensions	nvim/plugged/coc.nvim/src/extensions.ts	/^  private async loadFileExtensions(): Promise<void> {$/;"	m
loadFiles	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async loadFiles(uris: string[]): Promise<void> {$/;"	m
loadFromBuffer	nvim/plugged/coc.nvim/build/index.js	/^function loadFromBuffer(input) {$/;"	F
loadItems	nvim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public loadItems(_context: ListContext, token: CancellationToken): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^  public loadItems(_context: ListContext, _token: CancellationToken): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public loadItems(_context: ListContext, _token: CancellationToken): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public loadItems(_context: ListContext, _token: CancellationToken): Promise<ListTask> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public loadItems(_context: ListContext, token: CancellationToken): Promise<ListTask> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public loadItems(context: ListContext, _token: CancellationToken): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public abstract loadItems(context: ListContext, token?: CancellationToken): Promise<ListItem[] | ListTask | null | undefined>$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/actions.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/commands.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/folders.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/links.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/lists.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/location.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/outline.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/output.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/services.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/sources.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m
loadItems	nvim/plugged/coc.nvim/src/list/worker.ts	/^  public async loadItems(reload = false): Promise<void> {$/;"	m
loadJson	nvim/plugged/coc.nvim/build/index.js	/^    loadJson() {$/;"	M
loadJson	nvim/plugged/coc.nvim/build/index.js	/^function loadJson(file) {$/;"	F
loadJson	nvim/plugged/coc.nvim/src/extensions.ts	/^  private loadJson(): any {$/;"	m
loadJson	nvim/plugged/coc.nvim/src/extensions.ts	/^function loadJson(file: string): any {$/;"	f
loadMru	nvim/plugged/coc.nvim/build/index.js	/^    loadMru() {$/;"	M
loadMru	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private loadMru(): void {$/;"	m
load_apps	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp load_apps do$/;"	f
load_plugin	nvim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
load_tags_metadata	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:load_tags_metadata() abort$/;"	f
loaded	nvim/plugged/coc.nvim/src/list/history.ts	/^  private loaded: string[] = []$/;"	m
loaded_names	nvim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
loaded_nerd_tree	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loading	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private set loading(loading: boolean) {$/;"	m
localAddress	nvim/plugged/coc.nvim/build/index.js	/^      localAddress: localAddress$/;"	P
localBonus	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  private localBonus: Map<string, number>$/;"	m
localExtensionStats	nvim/plugged/coc.nvim/src/extensions.ts	/^  private async localExtensionStats(exclude: ExtensionInfo[]): Promise<ExtensionInfo[]> {$/;"	m
localstorage	nvim/plugged/coc.nvim/build/index.js	/^function localstorage() {$/;"	F
localvar	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! s:localvar(current, key) abort$/;"	f
location	nvim/plugged/coc.nvim/build/index.js	/^            let location;$/;"	V
location	nvim/plugged/coc.nvim/build/index.js	/^            location: location,$/;"	P
location	nvim/plugged/coc.nvim/build/index.js	/^            location: { uri: uri, range: range }$/;"	P
locations	nvim/plugged/coc.nvim/build/index.js	/^        let locations = [];$/;"	A
locations	nvim/plugged/coc.nvim/build/index.js	/^        let locations = diagnostic.relatedInformation.map(o => o.location);$/;"	F
lod	nvim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	nvim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	nvim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	nvim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	nvim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log	nvim/plugged/coc.nvim/build/index.js	/^            log: (...args) => {$/;"	M
log	nvim/plugged/coc.nvim/build/index.js	/^            log: (messageOrDataObject, data) => {$/;"	M
log	nvim/plugged/coc.nvim/build/index.js	/^    log(message) {$/;"	M
log	nvim/plugged/coc.nvim/build/index.js	/^    log: () => { }$/;"	M
log	nvim/plugged/coc.nvim/build/index.js	/^  log(level, ...args) {$/;"	M
log	nvim/plugged/coc.nvim/build/index.js	/^function log() {$/;"	F
log	nvim/plugged/coc.nvim/build/index.js	/^function log(...args) {$/;"	F
log	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public log(message: string): void {$/;"	m
log	nvim/plugged/emmet-vim/unittest.vim	/^function! s:log(msg)$/;"	f
log4	nvim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
log4js	nvim/plugged/coc.nvim/build/index.js	/^const log4js = {$/;"	O
logData	nvim/plugged/coc.nvim/build/index.js	/^    const logData = this.data.map((e) => {$/;"	F
logError	nvim/plugged/coc.nvim/build/index.js	/^Promise.prototype.logError = function () {$/;"	M
logFailedRequest	nvim/plugged/coc.nvim/build/index.js	/^    logFailedRequest(type, error) {$/;"	M
logFailedRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public logFailedRequest(type: RPCMessageType, error: any): void {$/;"	m
logFile	nvim/plugged/coc.nvim/build/index.js	/^  const logFile = new streams.DateRollingFileStream($/;"	V
logLSPMessage	nvim/plugged/coc.nvim/build/index.js	/^    function logLSPMessage(type, message) {$/;"	F
logLevel	nvim/plugged/coc.nvim/build/index.js	/^  function logLevel(loggingEvent) {$/;"	F
logLevelFilter	nvim/plugged/coc.nvim/build/index.js	/^function logLevelFilter(minLevelString, maxLevelString, appender, levels) {$/;"	F
logObjectTrace	nvim/plugged/coc.nvim/build/index.js	/^    logObjectTrace(data) {$/;"	M
logObjectTrace	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private logObjectTrace(data: any): void {$/;"	m
logTrace	nvim/plugged/coc.nvim/build/index.js	/^    logTrace(message, data) {$/;"	M
logTrace	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private logTrace(message: string, data?: any): void {$/;"	m
logger	nvim/plugged/coc.nvim/build/index.js	/^    let logger = new ConsoleLogger();$/;"	V
loggingEvent	nvim/plugged/coc.nvim/build/index.js	/^    const loggingEvent = new LoggingEvent($/;"	V
logn	nvim/plugged/emmet-vim/unittest.vim	/^function! s:logn(msg)$/;"	f
logpos	nvim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lol	nvim/plugged/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^    def lol do$/;"	f
lol	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def lol do$/;"	f
lookUp	nvim/plugged/coc.nvim/build/index.js	/^function lookUp(tree, key) {$/;"	F
lookUp	nvim/plugged/coc.nvim/src/configuration/index.ts	/^function lookUp(tree: any, key: string): any {$/;"	f
looking_at	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:looking_at()$/;"	f
low	nvim/plugged/coc.nvim/build/index.js	/^        var low = 0, high = lineOffsets.length;$/;"	V
low	nvim/plugged/coc.nvim/build/index.js	/^      var low = 0;$/;"	V
lpad	nvim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
ls32	nvim/plugged/coc.nvim/build/index.js	/^    var ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';$/;"	V
lspMessage	nvim/plugged/coc.nvim/build/index.js	/^        const lspMessage = {$/;"	O
lstRegExp	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstRegExp = ''$/;"	v
lstRegExp	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstRegExp = '^\\s*'.s:bullets.'\\s'$/;"	v
lstRegExp	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstRegExp = '^\\s*'.s:numbers.'\\s'$/;"	v
lstSym	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstSym = ''$/;"	v
lstSym	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstSym = matchstr(a:line, s:bullets)$/;"	v
lstSym	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstSym = matchstr(a:line, s:numbers)$/;"	v
lstTagClose	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagClose = ''$/;"	v
lstTagClose	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagClose = '<\/ol>'$/;"	v
lstTagClose	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagClose = '<\/ul>'$/;"	v
lstTagOpen	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagOpen = ''$/;"	v
lstTagOpen	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagOpen = '<ol>'$/;"	v
lstTagOpen	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagOpen = '<ul>'$/;"	v
lstatcb_	nvim/plugged/coc.nvim/build/index.js	/^  function lstatcb_ (er, lstat) {$/;"	F
lstatkey	nvim/plugged/coc.nvim/build/index.js	/^  var lstatkey = 'lstat\\0' + abs$/;"	V
lt	nvim/plugged/coc.nvim/build/index.js	/^function lt (a, b, loose) {$/;"	F
lt	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			lt: function(a,i,m){return i<m[3]-0;},$/;"	M
lte	nvim/plugged/coc.nvim/build/index.js	/^function lte (a, b, loose) {$/;"	F
lte	nvim/plugged/coc.nvim/build/index.js	/^function lte(i, y) {$/;"	F
ltefn	nvim/plugged/coc.nvim/build/index.js	/^        ltefn(version, low.semver)) {$/;"	M
ltefn	nvim/plugged/coc.nvim/build/index.js	/^  var gtfn, ltefn, ltfn, comp, ecomp$/;"	V
ltfn	nvim/plugged/coc.nvim/build/index.js	/^  var gtfn, ltefn, ltfn, comp, ecomp$/;"	V
ltr	nvim/plugged/coc.nvim/build/index.js	/^function ltr (version, range, options) {$/;"	F
lua	nvim/plugged/coc.nvim/build/index.js	/^    lua(code, args = []) {$/;"	M
lum	nvim/plugged/coc.nvim/build/index.js	/^    let lum = [];$/;"	A
luma	nvim/plugged/coc.nvim/build/index.js	/^    let luma = 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];$/;"	V
lutimes	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }$/;"	M
lutimes	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimes = function (path, at, mt, cb) {$/;"	M
lutimesSync	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimesSync = function () {}$/;"	M
lutimesSync	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimesSync = function (path, at, mt) {$/;"	M
m	nvim/plugged/coc.nvim/build/index.js	/^      m = ((value * c) - 1) * Math.pow(2, mLen)$/;"	M
m	nvim/plugged/coc.nvim/build/index.js	/^    m: formatMessage,$/;"	P
m	nvim/plugged/coc.nvim/build/index.js	/^  var e, m$/;"	V
m	nvim/plugged/coc.nvim/build/index.js	/^  var e, m, c$/;"	V
macunix_handler	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^  function! s:macunix_handler(url)$/;"	f
magenta	nvim/plugged/coc.nvim/build/index.js	/^  magenta: [35, 39],$/;"	P
main	nvim/plugged/ale/test/dumb_tcp_client.py	/^def main():$/;"	f
main	nvim/plugged/ale/test/dumb_tcp_server.py	/^def main():$/;"	f
main	nvim/plugged/ale/test/script/block-padding-checker	/^def main():$/;"	f
main	nvim/plugged/coc.nvim/build/index.js	/^            main: filename,$/;"	P
main	nvim/plugged/vim-elixir/autoload/db/adapter/get_repos.exs	/^  def main do$/;"	f
main_syntax	nvim/plugged/Dockerfile.vim/syntax/docker-compose.vim	/^    let main_syntax = 'yaml'$/;"	v
main_syntax	nvim/plugged/scss-syntax.vim/syntax/scss.vim	/^  let main_syntax = 'scss'$/;"	v
main_syntax	nvim/plugged/svg.vim/syntax/svg.vim	/^  let main_syntax = 'svg'$/;"	v
main_syntax	nvim/plugged/typescript-vim/syntax/typescript.vim	/^  let main_syntax = "typescript"$/;"	v
main_syntax	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^  let main_syntax = 'eelixir'$/;"	v
main_syntax	nvim/plugged/vim-elixir/syntax/elixir.vim	/^  let main_syntax = "elixir"$/;"	v
main_syntax	nvim/plugged/vim-javascript/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	nvim/plugged/vim-pug/syntax/pug.vim	/^  let main_syntax = 'pug'$/;"	v
main_syntax	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
maintainer	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> maintainer <C-R>=DockerfileReplaceInstruction("maintainer", "MAINTAINER")<CR>$/;"	m
major	nvim/plugged/coc.nvim/build/index.js	/^function major (a, loose) {$/;"	F
make	nvim/plugged/coc.nvim/build/index.js	/^function make () {$/;"	F
makeAbs	nvim/plugged/coc.nvim/build/index.js	/^function makeAbs (self, f) {$/;"	F
makeArray	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	makeArray: function( array ) {$/;"	M
makeFile	nvim/plugged/coc.nvim/build/index.js	/^  function makeFile () {$/;"	F
makeLink	nvim/plugged/coc.nvim/build/index.js	/^  function makeLink (srcpath, dstpath) {$/;"	F
makeLink	nvim/plugged/coc.nvim/build/index.js	/^  function makeLink(linkPath, target) {$/;"	F
makeRe	nvim/plugged/coc.nvim/build/index.js	/^function makeRe () {$/;"	F
makeRe	nvim/plugged/coc.nvim/build/index.js	/^minimatch.makeRe = function (pattern, options) {$/;"	M
makeRequireFunction	nvim/plugged/coc.nvim/build/index.js	/^function makeRequireFunction() {$/;"	F
makeRequireFunction	nvim/plugged/coc.nvim/src/util/factory.ts	/^function makeRequireFunction(this: any): any {$/;"	f
makeSock	nvim/plugged/coc.nvim/build/index.js	/^  function makeSock(sockname) {$/;"	F
make_edit_splice	nvim/plugged/coc.nvim/build/index.js	/^function make_edit_splice(before, oldMiddle, newMiddle, after) {$/;"	F
make_tag	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:make_tag(line, regexp, func, ...)$/;"	f
makeres	nvim/plugged/coc.nvim/build/index.js	/^function makeres (key) {$/;"	F
manager	nvim/plugged/coc.nvim/src/extensions.ts	/^  private manager: ExtensionManager$/;"	m
manual_update_tags	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
map	nvim/plugged/coc.nvim/build/index.js	/^            let map = new Map();$/;"	V
map	nvim/plugged/coc.nvim/build/index.js	/^    map: (usemap ? map_to_map : map_to_obj),$/;"	M
map	nvim/plugged/coc.nvim/build/index.js	/^  const map = new Map(files.map(f => [f.replace(\/\\\/+$\/, ''), true]))$/;"	F
map	nvim/plugged/coc.nvim/build/index.js	/^  const map = new Map(files.map(f => [f.replace(\/\\\/+$\/, ''), true]))$/;"	V
map	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.map = function (fn, thisp) {$/;"	M
map	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	map: function( callback ) {$/;"	M
map	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	map: function( elems, callback ) {$/;"	M
map	nvim/plugged/vim-airline/t/themes.vim	/^    let map = airline#themes#generate_color_map($/;"	v
map	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:map(mode, flags, map) abort$/;"	f
mapHas	nvim/plugged/coc.nvim/build/index.js	/^  const mapHas = (file, r) => {$/;"	F
mapReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.mapReverse = function (fn, thisp) {$/;"	M
map_keys	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:map_keys()$/;"	f
map_to_map	nvim/plugged/coc.nvim/build/index.js	/^  function map_to_map(encoder, value) {$/;"	F
map_to_map	nvim/plugged/coc.nvim/build/index.js	/^function map_to_map(decoder, len) {$/;"	F
map_to_obj	nvim/plugged/coc.nvim/build/index.js	/^function map_to_obj(decoder, len) {$/;"	F
mapleader	nvim/init.vim	/^let mapleader="\\<space>"$/;"	v
mappings	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private mappings: Mappings$/;"	m
mark	nvim/plugged/coc.nvim/build/index.js	/^    mark(name) {$/;"	M
mark	nvim/plugged/coc.nvim/build/index.js	/^function mark (self, p) {$/;"	F
mark_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
mark_window	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
match	nvim/plugged/coc.nvim/build/index.js	/^    match(selector, document) {$/;"	M
match	nvim/plugged/coc.nvim/build/index.js	/^  var match = \/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$\/i.exec($/;"	V
match	nvim/plugged/coc.nvim/build/index.js	/^function match (f, partial) {$/;"	F
match	nvim/plugged/coc.nvim/build/index.js	/^minimatch.match = function (list, pattern, options) {$/;"	M
match	nvim/plugged/coc.nvim/src/workspace.ts	/^  public match(selector: DocumentSelector, document: TextDocument): number {$/;"	m
matchAddRanges	nvim/plugged/coc.nvim/build/index.js	/^    matchAddRanges(ranges, hlGroup, priority = 10) {$/;"	M
matchAddRanges	nvim/plugged/coc.nvim/src/model/document.ts	/^  public matchAddRanges(ranges: Range[], hlGroup: string, priority = 10): number[] {$/;"	m
matchIds	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private matchIds: number[] = []$/;"	m
matchIds	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public readonly matchIds: Set<number> = new Set()$/;"	m
matchIds	nvim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^  private matchIds: Set<number> = new Set()$/;"	m
matchIds	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  private matchIds: Set<number> = new Set()$/;"	m
matchIds	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private matchIds: Set<number> = new Set()$/;"	m
matchKeywords	nvim/plugged/coc.nvim/build/index.js	/^    matchKeywords(content, min = 3) {$/;"	M
matchKeywords	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public matchKeywords(content: string, min = 3): string[] {$/;"	m
matchOne	nvim/plugged/coc.nvim/build/index.js	/^Minimatch.prototype.matchOne = function (file, pattern, partial) {$/;"	M
matchRules	nvim/plugged/coc.nvim/build/index.js	/^function matchRules(statusCode, currentLevel, ruleSet) {$/;"	F
matchScore	nvim/plugged/coc.nvim/build/index.js	/^                    let matchScore = 0;$/;"	V
matchScore	nvim/plugged/coc.nvim/build/index.js	/^function matchScore(word, input) {$/;"	F
matchScore	nvim/plugged/coc.nvim/src/completion/match.ts	/^export function matchScore(word: string, input: number[]): number {$/;"	f
match_bonus	nvim/plugged/coc.nvim/build/index.js	/^    let match_bonus = new Array(m);$/;"	V
matchaddpos	nvim/plugged/ale/autoload/ale/highlight.vim	/^function! s:matchaddpos(group, pos_list) abort$/;"	f
matchbegin	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchbegin(text, close)$/;"	f
matched	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var matched = [],$/;"	A
matchedEntries	nvim/plugged/coc.nvim/build/index.js	/^  var matchedEntries = []$/;"	A
matchedRule	nvim/plugged/coc.nvim/build/index.js	/^    const matchedRule = ruleSet.find(rule => {$/;"	F
matchend	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchend(text, open)$/;"	f
matcher	nvim/plugged/coc.nvim/build/index.js	/^        let matcher = 'fuzzy';$/;"	V
matcher	nvim/plugged/coc.nvim/build/index.js	/^  var matcher = new RegExp(parsedPattern.regexp);$/;"	V
matcher	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public set matcher(val: Matcher) {$/;"	m
matchers	nvim/plugged/coc.nvim/build/index.js	/^  var matchers = [$/;"	A
matches	nvim/plugged/coc.nvim/build/index.js	/^                    let matches = [];$/;"	A
matches	nvim/plugged/coc.nvim/build/index.js	/^        let matches = 0;$/;"	V
matches	nvim/plugged/coc.nvim/build/index.js	/^        matches: function (pattern) {$/;"	M
matches	nvim/plugged/coc.nvim/build/index.js	/^    let matches = [];$/;"	A
matchingText	nvim/plugged/coc.nvim/build/index.js	/^    let matchingText = '';$/;"	V
maxBufferSize	nvim/plugged/coc.nvim/build/index.js	/^    maxBufferSize: MAX_BUFFER_SIZE,$/;"	P
maxFileSizeUnitTransform	nvim/plugged/coc.nvim/build/index.js	/^function maxFileSizeUnitTransform(maxLogSize) {$/;"	F
maxHeight	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^    private maxHeight = 999,$/;"	m
maxIndexNumber	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get maxIndexNumber(): number {$/;"	m
maxLogSize	nvim/plugged/coc.nvim/build/index.js	/^            maxLogSize: MAX_LOG_SIZE,$/;"	P
maxLogSize	nvim/plugged/coc.nvim/build/index.js	/^    maxLogSize: maxFileSizeUnitTransform$/;"	P
maxMetaEntrySize	nvim/plugged/coc.nvim/build/index.js	/^const maxMetaEntrySize = 1024 * 1024$/;"	V
maxReadSize	nvim/plugged/coc.nvim/build/index.js	/^const maxReadSize = 16 * 1024 * 1024$/;"	V
maxRedirects	nvim/plugged/coc.nvim/build/index.js	/^    maxRedirects: 21,$/;"	P
maxSatisfying	nvim/plugged/coc.nvim/build/index.js	/^function maxSatisfying (versions, range, options) {$/;"	F
maxScore	nvim/plugged/coc.nvim/build/index.js	/^        let maxScore = 0;$/;"	V
maxWidth	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^    private maxWidth?: number,$/;"	m
maxlength	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		maxlength: "maxLength",$/;"	P
maxsize	nvim/plugged/coc.nvim/build/index.js	/^      var maxsize = 5 + length * 3;$/;"	V
mayCopyFile	nvim/plugged/coc.nvim/build/index.js	/^function mayCopyFile (srcStat, src, dest, opts) {$/;"	F
mayCopyFile	nvim/plugged/coc.nvim/build/index.js	/^function mayCopyFile (srcStat, src, dest, opts, cb) {$/;"	F
maybeCallback	nvim/plugged/coc.nvim/build/index.js	/^function maybeCallback(cb) {$/;"	F
maybeMatch	nvim/plugged/coc.nvim/build/index.js	/^function maybeMatch(reg, str) {$/;"	F
maybeNewCursor	nvim/plugged/coc.nvim/build/index.js	/^    var maybeNewCursor = newRange ? newRange.index : null;$/;"	V
memoKey	nvim/plugged/coc.nvim/build/index.js	/^    let memoKey = '$' + key;$/;"	V
memorize	nvim/plugged/coc.nvim/build/index.js	/^function memorize(_target, key, descriptor) {$/;"	F
memorize	nvim/plugged/coc.nvim/src/util/decorator.ts	/^export function memorize<R extends (...args: any[]) => Promise<R>>(_target: any, key: string, descriptor: any): void {$/;"	f
memos	nvim/plugged/coc.nvim/src/extensions.ts	/^  private memos: Memos$/;"	m
menu	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get menu(): string {$/;"	m
merge	nvim/plugged/coc.nvim/build/index.js	/^    merge(...others) {$/;"	M
merge	nvim/plugged/coc.nvim/build/index.js	/^const merge = (a, b) =>$/;"	F
merge	nvim/plugged/coc.nvim/src/configuration/model.ts	/^  public merge(...others: ConfigurationModel[]): ConfigurationModel {$/;"	m
merge	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					var merge = {};$/;"	O
merge	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var merge = {}, tmp = [],$/;"	O
merge	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	merge: function( first, second ) {$/;"	M
mergeContents	nvim/plugged/coc.nvim/build/index.js	/^    mergeContents(source, target) {$/;"	M
mergeContents	nvim/plugged/coc.nvim/src/configuration/model.ts	/^  private mergeContents(source: any, target: any): void {$/;"	m
mergeDefinitions	nvim/plugged/coc.nvim/build/index.js	/^    mergeDefinitions(arr) {$/;"	M
mergeDefinitions	nvim/plugged/coc.nvim/src/provider/manager.ts	/^  protected mergeDefinitions(arr: Definition[]): Location[] {$/;"	m
mergeDocumentChanges	nvim/plugged/coc.nvim/build/index.js	/^    mergeDocumentChanges(changes) {$/;"	M
mergeDocumentChanges	nvim/plugged/coc.nvim/src/workspace.ts	/^  private mergeDocumentChanges(changes: (TextDocumentEdit | CreateFile | RenameFile | DeleteFile)[]): any[] {$/;"	m
mergeOptions	nvim/plugged/coc.nvim/build/index.js	/^function mergeOptions(target) {$/;"	F
mergeSort	nvim/plugged/coc.nvim/build/index.js	/^    function mergeSort(data, compare) {$/;"	F
merge_opts	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
merge_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:merge_tags(metadata, pagename, file_metadata)$/;"	f
message	nvim/plugged/ale/autoload/ale/rename.vim	/^function! s:message(message) abort$/;"	f
message	nvim/plugged/coc.nvim/build/index.js	/^            let message = {$/;"	O
message	nvim/plugged/coc.nvim/build/index.js	/^            message: message$/;"	P
messageLevel	nvim/plugged/coc.nvim/src/workspace.ts	/^  private messageLevel: MessageLevel$/;"	m
messageParams	nvim/plugged/coc.nvim/build/index.js	/^            let messageParams;$/;"	V
messagePassThroughLayout	nvim/plugged/coc.nvim/build/index.js	/^function messagePassThroughLayout(loggingEvent) {$/;"	F
messageQueue	nvim/plugged/coc.nvim/build/index.js	/^    let messageQueue = new linkedMap_1.LinkedMap();$/;"	V
messages	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public abstract messages: RPCMessageType | RPCMessageType[]$/;"	m
messages	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get messages(): RPCMessageType {$/;"	m
messages	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get messages(): typeof DidChangeTextDocumentNotification.type {$/;"	m
messages	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get messages(): typeof DidCloseTextDocumentNotification.type {$/;"	m
messages	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get messages(): typeof DidOpenTextDocumentNotification.type {$/;"	m
messages	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  public get messages(): RPCMessageType {$/;"	m
metadata_elements	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let metadata_elements = ['link', 'style', 'meta', 'script', 'noscript', 'command']$/;"	v
method	nvim/plugged/coc.nvim/build/index.js	/^                    method: method,$/;"	P
method	nvim/plugged/coc.nvim/build/index.js	/^                method: method,$/;"	P
method	nvim/plugged/coc.nvim/build/index.js	/^            let method;$/;"	V
method	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var method = 'scroll' + name;$/;"	V
method	nvim/plugged/vim-elixir/spec/indent/tuples_spec.rb	/^  def method do$/;"	f	class:xpto
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^            def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
methods	nvim/plugged/coc.nvim/build/index.js	/^  const methods = [$/;"	A
methods	nvim/plugged/coc.nvim/build/index.js	/^  var methods = [$/;"	A
methods	nvim/plugged/coc.nvim/build/index.js	/^  var methods = {$/;"	O
microdata_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let microdata_attributes = {'itemid': [], 'itemscope': ['itemscope', ''], 'itemtype': [], 'itemprop': [], 'itemref': []}$/;"	v
microdata_attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let microdata_attributes_value = {$/;"	v
mid	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:mid(value, cnt)$/;"	f
minBufferSize	nvim/plugged/coc.nvim/build/index.js	/^    minBufferSize: MIN_BUFFER_SIZE,$/;"	P
minIndexNumber	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get minIndexNumber(): number {$/;"	m
minSatisfying	nvim/plugged/coc.nvim/build/index.js	/^function minSatisfying (versions, range, options) {$/;"	F
minVersion	nvim/plugged/coc.nvim/build/index.js	/^function minVersion (range, loose) {$/;"	F
minimatch	nvim/plugged/coc.nvim/build/index.js	/^function minimatch (p, pattern, options) {$/;"	F
minor	nvim/plugged/coc.nvim/build/index.js	/^function minor (a, loose) {$/;"	F
minver	nvim/plugged/coc.nvim/build/index.js	/^  var minver = new SemVer('0.0.0')$/;"	V
missingCallback	nvim/plugged/coc.nvim/build/index.js	/^  function missingCallback(err) {$/;"	F
mixin	nvim/plugged/coc.nvim/build/index.js	/^  function mixin(target) {$/;"	F
mixin	nvim/plugged/coc.nvim/build/index.js	/^function mixin(destination, source, overwrite = true) {$/;"	F
mixin	nvim/plugged/coc.nvim/src/util/object.ts	/^export function mixin($/;"	f
mixinFactory	nvim/plugged/coc.nvim/build/index.js	/^function mixinFactory(source) {$/;"	F
mkDir	nvim/plugged/coc.nvim/build/index.js	/^  function mkDir(dir, target) {$/;"	F
mkDirAndCopy	nvim/plugged/coc.nvim/build/index.js	/^function mkDirAndCopy (srcStat, src, dest, opts) {$/;"	F
mkDirAndCopy	nvim/plugged/coc.nvim/build/index.js	/^function mkDirAndCopy (srcStat, src, dest, opts, cb) {$/;"	F
mkdirP	nvim/plugged/coc.nvim/build/index.js	/^                mkdirP(path.dirname(p), opts, function (er, made) {$/;"	M
mkdirP	nvim/plugged/coc.nvim/build/index.js	/^function mkdirP (p, opts, f, made) {$/;"	F
mkdir_	nvim/plugged/coc.nvim/build/index.js	/^const mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {$/;"	F
mkdirp	nvim/plugged/coc.nvim/build/index.js	/^    mkdirp(path.dirname(dest), function(err) {$/;"	M
mkdirp	nvim/plugged/coc.nvim/build/index.js	/^  mkdirp: mkdirs,$/;"	P
mkdirp	nvim/plugged/coc.nvim/build/index.js	/^async function mkdirp(path, mode) {$/;"	F
mkdirp	nvim/plugged/coc.nvim/src/util/index.ts	/^export async function mkdirp(path: string, mode?: number): Promise<boolean> {$/;"	f
mkdirpSync	nvim/plugged/coc.nvim/build/index.js	/^  mkdirpSync: mkdirsSync,$/;"	P
mkdirs	nvim/plugged/coc.nvim/build/index.js	/^  function mkdirs() {$/;"	F
mkdirs	nvim/plugged/coc.nvim/build/index.js	/^function mkdirs (p, opts, callback, made) {$/;"	F
mkdirsSync	nvim/plugged/coc.nvim/build/index.js	/^function mkdirsSync (p, opts, made) {$/;"	F
mm	nvim/plugged/coc.nvim/build/index.js	/^  var mm = new Minimatch(pattern, options)$/;"	V
mockFunction	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async mockFunction(name: string, result: string | number | any): Promise<void> {$/;"	m
modRes	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					var modRes;$/;"	V
mode	nvim/plugged/coc.nvim/build/index.js	/^            mode: 0o666,$/;"	P
mode	nvim/plugged/coc.nvim/build/index.js	/^        mode: mode$/;"	P
mode	nvim/plugged/coc.nvim/build/index.js	/^      mode: mode$/;"	P
mode	nvim/plugged/coc.nvim/build/index.js	/^      mode: mode,$/;"	P
mode	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public get mode(): ListMode {$/;"	m
mode	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public set mode(val: ListMode) {$/;"	m
modify	nvim/plugged/coc.nvim/build/index.js	/^function modify(text, path, value, options) {$/;"	F
modifyConfiguration	nvim/plugged/coc.nvim/src/configuration/shape.ts	/^  private async modifyConfiguration(target: ConfigurationTarget, key: string, value?: any): Promise<void> {$/;"	m
module	nvim/plugged/coc.nvim/build/index.js	/^    const module = new Module(filename);$/;"	V
monkeypatch	nvim/plugged/coc.nvim/build/index.js	/^function monkeypatch () {$/;"	F
more	nvim/plugged/coc.nvim/build/index.js	/^        let more = '';$/;"	V
moreargs	nvim/plugged/coc.nvim/build/index.js	/^    function moreargs(func) {$/;"	F
mouseDown	nvim/plugged/coc.nvim/build/index.js	/^            this.mouseDown = { winid, lnum, col, current: winid == window.id };$/;"	P
mouseDown	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private mouseDown: MousePosition$/;"	m
mouseKeys	nvim/plugged/coc.nvim/build/index.js	/^const mouseKeys = ['<LeftMouse>', '<LeftDrag>', '<LeftRelease>', '<2-LeftMouse>'];$/;"	A
mouseenter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		mouseenter: {$/;"	P
mouseleave	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		mouseleave: {$/;"	P
move	nvim/plugged/coc.nvim/build/index.js	/^    move(options) {$/;"	M
move	nvim/plugged/coc.nvim/build/index.js	/^function move (src, dest, opts, cb) {$/;"	F
move	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public move(options: Partial<PopupOptions>): void {$/;"	m
moveAcrossDevice	nvim/plugged/coc.nvim/build/index.js	/^function moveAcrossDevice (src, dest, overwrite) {$/;"	F
moveAcrossDevice	nvim/plugged/coc.nvim/build/index.js	/^function moveAcrossDevice (src, dest, overwrite, cb) {$/;"	F
moveCmd	nvim/plugged/coc.nvim/build/index.js	/^            let moveCmd = '';$/;"	V
moveDirAcrossDevice	nvim/plugged/coc.nvim/build/index.js	/^function moveDirAcrossDevice(source, dest, clobber, limit, cb) {$/;"	F
moveFileAcrossDevice	nvim/plugged/coc.nvim/build/index.js	/^function moveFileAcrossDevice(source, dest, clobber, limit, cb) {$/;"	F
moveLeft	nvim/plugged/coc.nvim/build/index.js	/^    moveLeft() {$/;"	M
moveLeft	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public moveLeft(): void {$/;"	m
moveRight	nvim/plugged/coc.nvim/build/index.js	/^    moveRight() {$/;"	M
moveRight	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public moveRight(): void {$/;"	m
moveSync	nvim/plugged/coc.nvim/build/index.js	/^function moveSync (src, dest, opts) {$/;"	F
moveTo	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async moveTo(position: Position): Promise<void> {$/;"	m
moveToEnd	nvim/plugged/coc.nvim/build/index.js	/^    moveToEnd() {$/;"	M
moveToEnd	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public moveToEnd(): void {$/;"	m
moveToStart	nvim/plugged/coc.nvim/build/index.js	/^    moveToStart() {$/;"	M
moveToStart	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public moveToStart(): void {$/;"	m
move_cmd	nvim/plugged/coc.nvim/build/index.js	/^        let move_cmd = '';$/;"	V
mozilla	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	mozilla: \/mozilla\/.test( userAgent ) && !\/(compatible|webkit)\/.test( userAgent )$/;"	P
mru	nvim/plugged/coc.nvim/src/commands.ts	/^  private mru: Mru$/;"	m
mru	nvim/plugged/coc.nvim/src/list/source/commands.ts	/^  private mru: Mru$/;"	m
mru	nvim/plugged/coc.nvim/src/list/source/lists.ts	/^  private mru: Mru = new Mru('lists')$/;"	m
msg	nvim/plugged/coc.nvim/bin/server.js	/^  let msg = 'Uncaught exception: ' + err.stack$/;"	V
msg	nvim/plugged/coc.nvim/build/index.js	/^        let msg = 'parse error';$/;"	V
msg	nvim/plugged/coc.nvim/build/index.js	/^        var msg = 'fs: missing callback ' + (err.stack || err.message);$/;"	V
msg	nvim/plugged/coc.nvim/build/index.js	/^  let msg = 'Uncaught exception: ' + err.stack$/;"	V
msg	nvim/plugged/coc.nvim/jest.js	/^  let msg = 'Uncaught exception: ' + err.stack$/;"	V
msgs	nvim/plugged/coc.nvim/build/index.js	/^        let msgs = [placeholder + ':'];$/;"	A
msie	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	msie: \/msie\/.test( userAgent ) && !\/opera\/.test( userAgent ),$/;"	P
mtimeFilter	nvim/plugged/coc.nvim/build/index.js	/^const mtimeFilter = opt => {$/;"	F
multiComment	nvim/plugged/coc.nvim/build/index.js	/^var multiComment = 2;$/;"	V
multiFilter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	multiFilter: function( expr, elems, not ) {$/;"	M
multiple	nvim/plugged/coc.nvim/build/index.js	/^            multiple: true,$/;"	P
multiple_cursors#debug	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#debug()$/;"	f
multiple_cursors#find	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#find(start, end, pattern)$/;"	f
multiple_cursors#get_latency_debug_file	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#get_latency_debug_file()$/;"	f
multiple_cursors#new	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#new(mode, word_boundary)$/;"	f
multiple_cursors#prev	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#prev()$/;"	f
multiple_cursors#quit	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#quit()$/;"	f
multiple_cursors#select_all	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#select_all(mode, word_boundary)$/;"	f
multiple_cursors#skip	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#skip()$/;"	f
mutex	nvim/plugged/coc.nvim/build/index.js	/^        let mutex = new await_semaphore_1.Mutex();$/;"	V
mv	nvim/plugged/coc.nvim/build/index.js	/^function mv(source, dest, options, cb){$/;"	F
my_function	nvim/plugged/vim-elixir/spec/indent/with_spec.rb	/^  def my_function do$/;"	f	class:resend_confirmation.create_user
mygroup	nvim/init.vim	/^augroup mygroup$/;"	a
n	nvim/plugged/coc.nvim/build/index.js	/^        let n = 0;$/;"	V
n	nvim/plugged/coc.nvim/build/index.js	/^    let n = 0;$/;"	V
n	nvim/plugged/coc.nvim/build/index.js	/^    n: endOfLine,$/;"	P
n	nvim/plugged/coc.nvim/build/index.js	/^  let n = 0$/;"	V
n	nvim/plugged/coc.nvim/build/index.js	/^  var n = 0$/;"	V
n	nvim/plugged/coc.nvim/build/index.js	/^  var n;$/;"	V
nChars	nvim/plugged/coc.nvim/build/index.js	/^    var nChars = 0;$/;"	V
name	nvim/plugged/coc.nvim/build/index.js	/^            name: name,$/;"	P
name	nvim/plugged/coc.nvim/build/index.js	/^        let name;$/;"	V
name	nvim/plugged/coc.nvim/build/index.js	/^const name = '__coc_refactor__';$/;"	V
name	nvim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public name = 'test'$/;"	m
name	nvim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^  public name = 'option'$/;"	m
name	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public name = 'error'$/;"	m
name	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public name = 'task'$/;"	m
name	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public name = 'test'$/;"	m
name	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public readonly name: string$/;"	m
name	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get name(): string {$/;"	m
name	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public name: string$/;"	m
name	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public get name(): string {$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/actions.ts	/^  public name = 'actions'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/commands.ts	/^  public readonly name = 'commands'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public name = 'diagnostics'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public name = 'extensions'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/folders.ts	/^  public name = 'folders'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/links.ts	/^  public name = 'links'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/lists.ts	/^  public readonly name = 'lists'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/location.ts	/^  public name = 'location'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/outline.ts	/^  public name = 'outline'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/output.ts	/^  public name = 'output'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/services.ts	/^  public name = 'services'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/sources.ts	/^  public readonly name = 'sources'$/;"	m
name	nvim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public name = 'symbols'$/;"	m
name	nvim/plugged/coc.nvim/src/model/source.ts	/^  public readonly name: string$/;"	m
name	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  public get name(): string {$/;"	m
name	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var name, i = 0, length = object.length;$/;"	V
name	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def name(param) do$/;"	f	class:name
name	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def name(param) do$/;"	f	class:name.name
name	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def name, do: IO.puts "bobmarley"$/;"	f
name	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def name, do: IO.puts "bobmarley"$/;"	f	class:name
namedFunctionDeclaration	nvim/plugged/vim-jsdoc/test/test.js	/^function namedFunctionDeclaration(_a2, err) { }$/;"	F
namedFunctionExpression	nvim/plugged/vim-jsdoc/test/test.js	/^var namedFunctionExpression = function namedExpression(el, $jq) {}$/;"	F
namedGeneratorFunc	nvim/plugged/vim-jsdoc/test/test.js	/^function* namedGeneratorFunc(data) { }$/;"	G
namedGeneratorFunctionExpression	nvim/plugged/vim-jsdoc/test/test.js	/^var namedGeneratorFunctionExpression = function* namedGenerator(arg1, arg2) {};$/;"	G
names	nvim/autoload/plug.vim	/^function! s:names(...)$/;"	f
names	nvim/plugged/coc.nvim/build/index.js	/^            let names = globalExtensions.filter(name => !this.isDisabled(name));$/;"	F
names	nvim/plugged/coc.nvim/build/index.js	/^        let names = actions.map(o => o.name);$/;"	F
names	nvim/plugged/coc.nvim/build/index.js	/^        let names = arr.map(o => o.source);$/;"	F
names	nvim/plugged/coc.nvim/build/index.js	/^        let names = exclude.map(o => o.id);$/;"	F
names	nvim/plugged/coc.nvim/build/index.js	/^        let names = stats.map(o => o.id);$/;"	F
names	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public get names(): string[] {$/;"	m
names	nvim/plugged/coc.nvim/src/sources.ts	/^  public get names(): string[] {$/;"	m
namespace	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	V
namespace	nvim/plugged/vim-jsdoc/test/test.js	/^const namespace = {};$/;"	O
namespaceMap	nvim/plugged/coc.nvim/src/workspace.ts	/^  private namespaceMap: Map<string, number> = new Map()$/;"	m
namespaces	nvim/plugged/coc.nvim/build/index.js	/^		const namespaces = [$/;"	A
nanNull	nvim/plugged/coc.nvim/build/index.js	/^const nanNull = value => isNaN(value) ? null : value$/;"	F
nativeProtocols	nvim/plugged/coc.nvim/build/index.js	/^  var nativeProtocols = {};$/;"	O
ncp	nvim/plugged/coc.nvim/build/index.js	/^    ncp(source, dest, options, function(errList) {$/;"	M
ncp	nvim/plugged/coc.nvim/build/index.js	/^function ncp (source, dest, options, callback) {$/;"	F
ne	nvim/plugged/coc.nvim/build/index.js	/^    function ne(test) {$/;"	F
needsStart	nvim/plugged/coc.nvim/build/index.js	/^    needsStart() {$/;"	M
needsStart	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public needsStart(): boolean {$/;"	m
needsStop	nvim/plugged/coc.nvim/build/index.js	/^    needsStop() {$/;"	M
needsStop	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public needsStop(): boolean {$/;"	m
negateOffset	nvim/plugged/coc.nvim/build/index.js	/^  var negateOffset = 0$/;"	V
negativeLists	nvim/plugged/coc.nvim/build/index.js	/^  var negativeLists = []$/;"	A
neovim	nvim/plugged/coc.nvim/build/index.js	/^    let neovim;$/;"	V
neq	nvim/plugged/coc.nvim/build/index.js	/^function neq (a, b, loose) {$/;"	F
nerdtree#and	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#and(x,y)$/;"	f
nerdtree#checkForBrowse	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir)$/;"	f
nerdtree#compareNodes	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2)$/;"	f
nerdtree#compareNodesBySortKey	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodesBySortKey(n1, n2)$/;"	f
nerdtree#completeBookmarks	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P)$/;"	f
nerdtree#deprecated	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...)$/;"	f
nerdtree#echo	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg)$/;"	f
nerdtree#echoError	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg)$/;"	f
nerdtree#echoWarning	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg)$/;"	f
nerdtree#exec	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll)$/;"	f
nerdtree#has_opt	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name)$/;"	f
nerdtree#loadClassFiles	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles()$/;"	f
nerdtree#postSourceActions	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions()$/;"	f
nerdtree#renderView	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView()$/;"	f
nerdtree#runningCygwin	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin()$/;"	f
nerdtree#runningWindows	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows()$/;"	f
nerdtree#slash	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash()$/;"	f
nerdtree#ui_glue#bookmarkNode	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...)$/;"	f
nerdtree#ui_glue#chRootCwd	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd()$/;"	f
nerdtree#ui_glue#clearBookmarks	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks)$/;"	f
nerdtree#ui_glue#createDefaultBindings	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings()$/;"	f
nerdtree#ui_glue#invokeKeyMap	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key)$/;"	f
nerdtree#ui_glue#openBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name)$/;"	f
nerdtree#ui_glue#revealBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name)$/;"	f
nerdtree#ui_glue#setupCommands	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands()$/;"	f
nerdtree#ui_glue#upDir	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState)$/;"	f
nerdtree#version	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...)$/;"	f
nested	nvim/plugged/coc.nvim/build/index.js	/^        let nested = new SnippetParser().parse(snippet, false);$/;"	V
new	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	F	class:Differ.EexBuffer
new	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	F	class:Differ.ExBuffer
newAfter	nvim/plugged/coc.nvim/build/index.js	/^      var newAfter = newText.slice(cursor);$/;"	V
newAfter	nvim/plugged/coc.nvim/build/index.js	/^      var newAfter = newText.slice(newCursor);$/;"	V
newArray	nvim/plugged/coc.nvim/build/index.js	/^  function newArray(buffer, offset) {$/;"	F
newBefore	nvim/plugged/coc.nvim/build/index.js	/^      var newBefore = newText.slice(0, cursor);$/;"	V
newBefore	nvim/plugged/coc.nvim/build/index.js	/^      var newBefore = newText.slice(0, newCursor);$/;"	V
newError	nvim/plugged/coc.nvim/build/index.js	/^function newError (er) {$/;"	F
newLabel	nvim/plugged/coc.nvim/build/index.js	/^    let newLabel = '';$/;"	V
newLength	nvim/plugged/coc.nvim/build/index.js	/^  var newLength = newText.length;$/;"	V
newLineAndIndent	nvim/plugged/coc.nvim/build/index.js	/^    function newLineAndIndent() {$/;"	F
newLines	nvim/plugged/coc.nvim/build/index.js	/^                    let newLines = value.split('\\n').map((s, i) => {$/;"	F
newLines	nvim/plugged/coc.nvim/build/index.js	/^        let newLines = [];$/;"	A
newLines	nvim/plugged/coc.nvim/build/index.js	/^    let newLines = newText.split('\\n');$/;"	V
newMiddle	nvim/plugged/coc.nvim/build/index.js	/^      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);$/;"	V
newMiddle	nvim/plugged/coc.nvim/build/index.js	/^      var newMiddle = newBefore.slice(prefixLength);$/;"	V
newMiddle	nvim/plugged/coc.nvim/build/index.js	/^      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);$/;"	V
newName	nvim/plugged/coc.nvim/build/index.js	/^                newName: newName$/;"	P
newPrefix	nvim/plugged/coc.nvim/build/index.js	/^      var newPrefix = newBefore.slice(0, prefixLength);$/;"	V
newPrefix	nvim/plugged/coc.nvim/build/index.js	/^      var newPrefix = newText.slice(0, prefixLength);$/;"	V
newProperty	nvim/plugged/coc.nvim/build/index.js	/^            var newProperty = "" + JSON.stringify(value);$/;"	V
newSuffix	nvim/plugged/coc.nvim/build/index.js	/^      var newSuffix = newAfter.slice(newAfter.length - suffixLength);$/;"	V
newSuffix	nvim/plugged/coc.nvim/build/index.js	/^      var newSuffix = newText.slice(newLength - suffixLength);$/;"	V
newTab	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private newTab = false$/;"	m
newText	nvim/plugged/coc.nvim/build/index.js	/^                        let newText = '\\n' + preIndent + space;$/;"	V
newText	nvim/plugged/coc.nvim/build/index.js	/^    let newText = '';$/;"	V
newText	nvim/plugged/coc.nvim/build/index.js	/^    let newText;$/;"	V
newUri	nvim/plugged/coc.nvim/build/index.js	/^            newUri: newUri$/;"	P
new_airline_ale_get_line_number	nvim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:new_airline_ale_get_line_number(cnt, type) abort$/;"	f
new_window	nvim/autoload/plug.vim	/^function! s:new_window()$/;"	f
next	nvim/plugged/coc.nvim/build/index.js	/^        let next = () => {$/;"	F
next	nvim/plugged/coc.nvim/build/index.js	/^        next: function () {$/;"	M
next	nvim/plugged/coc.nvim/build/index.js	/^    const next = () => {$/;"	F
next	nvim/plugged/coc.nvim/build/index.js	/^    next() {$/;"	M
next	nvim/plugged/coc.nvim/build/index.js	/^  const next = (er) => {$/;"	F
next	nvim/plugged/coc.nvim/build/index.js	/^  function next () {$/;"	F
next	nvim/plugged/coc.nvim/build/index.js	/^  function next (er) {$/;"	F
next	nvim/plugged/coc.nvim/src/list/history.ts	/^  public next(): void {$/;"	m
next	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async next(): Promise<void> {$/;"	m
next	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get next(): Marker | null {$/;"	m
next	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public next(): Token {$/;"	m
next	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	next: function(elem){return jQuery.nth(elem,2,"nextSibling");},$/;"	M
nextAll	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nextAll: function(elem){return jQuery.dir(elem,"nextSibling");},$/;"	M
nextChar	nvim/plugged/coc.nvim/build/index.js	/^	var nextChar;$/;"	V
nextKey	nvim/plugged/coc.nvim/src/list/configuration.ts	/^  public get nextKey(): string {$/;"	m
nextPartRe	nvim/plugged/coc.nvim/build/index.js	/^  var nextPartRe = \/(.*?)(?:[\\\/\\\\]+|$)\/g;$/;"	V
nextPartRe	nvim/plugged/coc.nvim/build/index.js	/^  var nextPartRe = \/(.*?)(?:[\\\/]+|$)\/g;$/;"	V
nextPlaceholder	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public async nextPlaceholder(): Promise<void> {$/;"	m
nextPlaceholder	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public async nextPlaceholder(): Promise<void> {$/;"	m
nextPow2	nvim/plugged/coc.nvim/build/index.js	/^function nextPow2(size) {$/;"	F
nextResult	nvim/plugged/coc.nvim/build/index.js	/^function nextResult(codes, text, idx, curr) {$/;"	F
nextResult	nvim/plugged/coc.nvim/src/util/score.ts	/^function nextResult(codes: number[], text: string, idx: number, curr: MatchResult): MatchResult | null {$/;"	f
nextScore	nvim/plugged/coc.nvim/build/index.js	/^function nextScore(codes, index, inputCodes, allowFuzzy = true) {$/;"	F
nextScore	nvim/plugged/coc.nvim/src/completion/match.ts	/^function nextScore(codes: number[], index: number, inputCodes: number[], allowFuzzy = true): number {$/;"	f
nextWordIndex	nvim/plugged/coc.nvim/build/index.js	/^function nextWordIndex(start = 0, codes) {$/;"	F
nextWordIndex	nvim/plugged/coc.nvim/src/completion/match.ts	/^function nextWordIndex(start = 0, codes: number[]): number {$/;"	f
next_sign_id	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:next_sign_id() abort$/;"	f
nil	nvim/plugged/coc.nvim/build/index.js	/^  function nil(encoder, value) {$/;"	F
nl	nvim/plugged/coc.nvim/build/index.js	/^    let nl = newStr.length;$/;"	V
noConflict	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	noConflict: function( deep ) {$/;"	M
noLogFilter	nvim/plugged/coc.nvim/build/index.js	/^function noLogFilter(filters, appender) {$/;"	F
noResume	nvim/plugged/coc.nvim/build/index.js	/^        noResume: true,$/;"	P
nocomment	nvim/plugged/coc.nvim/build/index.js	/^  nocomment: true,$/;"	P
node	nvim/plugged/coc.nvim/webpack.config.js	/^  node: {$/;"	P
nodeFolder	nvim/plugged/coc.nvim/src/model/resolver.ts	/^  private get nodeFolder(): Promise<string> {$/;"	m
nodeName	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nodeName: function( elem, name ) {$/;"	M
nodeSupportsBigInt	nvim/plugged/coc.nvim/build/index.js	/^function nodeSupportsBigInt () {$/;"	F
nonegate	nvim/plugged/coc.nvim/build/index.js	/^  nonegate: true,$/;"	P
noop	nvim/plugged/coc.nvim/build/index.js	/^  function noop(key, value) {$/;"	F
noop	nvim/plugged/coc.nvim/build/index.js	/^const noop = _ => true$/;"	F
noop	nvim/plugged/coc.nvim/build/index.js	/^function noop () {}$/;"	F
noop	nvim/plugged/coc.nvim/build/index.js	/^function noop() { \/* empty *\/ }$/;"	F
normal	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async normal(command: string, bang = true): Promise<void> {$/;"	m
normalMappings	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private normalMappings: Map<string, () => void | Promise<void>> = new Map()$/;"	m
normalizeSnippetString	nvim/plugged/coc.nvim/build/index.js	/^function normalizeSnippetString(snippet, indent, opts) {$/;"	F
normalizeSnippetString	nvim/plugged/coc.nvim/src/snippets/session.ts	/^export function normalizeSnippetString(snippet: string, indent: string, opts: FormattingOptions): string {$/;"	f
normalize_global_settings	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:normalize_global_settings()$/;"	f
normalize_link_in_diary	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:normalize_link_in_diary(lnk)$/;"	f
normalize_link_syntax_n	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:normalize_link_syntax_n()$/;"	f
normalize_link_syntax_n	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! s:normalize_link_syntax_n()$/;"	f
normalize_link_syntax_v	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:normalize_link_syntax_v()$/;"	f
normalize_link_syntax_v	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! s:normalize_link_syntax_v()$/;"	f
normalize_path	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:normalize_path(path)$/;"	f
normalize_wikilocal_settings	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:normalize_wikilocal_settings()$/;"	f
nosort	nvim/plugged/coc.nvim/build/index.js	/^  nosort: true,$/;"	P
not	nvim/plugged/coc.nvim/build/index.js	/^const not = thing => !thing;$/;"	F
not	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	not: function( selector ) {$/;"	M
notFlags	nvim/plugged/coc.nvim/build/index.js	/^    var notFlags = [];$/;"	A
notVisible	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async notVisible(word: string): Promise<boolean> {$/;"	m
not_git_dir	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:not_git_dir(bufnr) abort$/;"	f
notificationHandler	nvim/plugged/coc.nvim/build/index.js	/^            notificationHandler = (params) => {$/;"	M
notificationHandler	nvim/plugged/coc.nvim/build/index.js	/^        let notificationHandler;$/;"	V
notificationMessage	nvim/plugged/coc.nvim/build/index.js	/^            let notificationMessage = {$/;"	O
notificationSent	nvim/plugged/coc.nvim/build/index.js	/^    notificationSent(_data) { }$/;"	M
notificationSent	nvim/plugged/coc.nvim/build/index.js	/^    notificationSent(textDocument) {$/;"	M
notificationSent	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected notificationSent(_data: E): void { }$/;"	m
notificationSent	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected notificationSent(textDocument: TextDocument): void {$/;"	m
notificationSquenceNumber	nvim/plugged/coc.nvim/build/index.js	/^    let notificationSquenceNumber = 0;$/;"	V
notify	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:notify(method, args) dict$/;"	f
notify	nvim/plugged/coc.nvim/build/index.js	/^    notify(event, data) {$/;"	M
notify	nvim/plugged/coc.nvim/build/index.js	/^    notify(method, args) {$/;"	M
notify	nvim/plugged/coc.nvim/build/index.js	/^    notify(name, args = []) {$/;"	M
notifyFileEvent	nvim/plugged/coc.nvim/build/index.js	/^    notifyFileEvent(event) {$/;"	M
notifyFileEvent	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private notifyFileEvent(event: FileEvent): void {$/;"	m
now	nvim/plugged/coc.nvim/build/index.js	/^            let now = new Date();$/;"	V
now	nvim/plugged/coc.nvim/build/index.js	/^function now() {$/;"	F
now	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function now(){$/;"	F
npm	nvim/plugged/coc.nvim/src/extensions.ts	/^  private get npm(): string {$/;"	m
nth	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			nth: function(a,i,m){return m[3]-0==i;},$/;"	M
nth	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nth: function(cur,result,dir,elem){$/;"	M
num	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var num = 0;$/;"	V
num	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function num(elem, prop) {$/;"	F
num	nvim/plugged/vim-gitgutter/unplace.vim	/^let num = 500$/;"	v
numStyles	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var numStyles;$/;"	V
numToDate	nvim/plugged/coc.nvim/build/index.js	/^const numToDate = num => num === null ? null : new Date(num * 1000)$/;"	F
number	nvim/plugged/coc.nvim/build/index.js	/^    function number(value) {$/;"	F
number	nvim/plugged/coc.nvim/build/index.js	/^  function number(encoder, value) {$/;"	F
number	nvim/plugged/coc.nvim/build/index.js	/^function number(value) {$/;"	F
number	nvim/plugged/coc.nvim/src/util/is.ts	/^export function number(value: any): value is number {$/;"	f
numeric	nvim/plugged/coc.nvim/build/index.js	/^function numeric(str) {$/;"	F
numeric	nvim/plugged/coc.nvim/build/index.js	/^var numeric = \/^[0-9]+$\/$/;"	V
nums	nvim/plugged/coc.nvim/build/index.js	/^        let nums = placeholders.map(p => p.index);$/;"	F
nvim	nvim/plugged/coc.nvim/build/index.js	/^    let nvim;$/;"	V
nvim	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public nvim: Neovim$/;"	m
nvim	nvim/plugged/coc.nvim/src/completion/complete.ts	/^    private nvim: Neovim) {$/;"	m
nvim	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private get nvim(): Neovim {$/;"	m
nvim	nvim/plugged/coc.nvim/src/configuration/shape.ts	/^  private get nvim(): Neovim {$/;"	m
nvim	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private get nvim(): Neovim {$/;"	m
nvim	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private get nvim(): Neovim {$/;"	m
nvim	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private nvim: Neovim$/;"	m
nvim	nvim/plugged/coc.nvim/src/languages.ts	/^  private get nvim(): Neovim {$/;"	m
nvim	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private nvim: Neovim$/;"	m
nvim	nvim/plugged/coc.nvim/src/list/mappings.ts	/^    private nvim: Neovim,$/;"	m
nvim	nvim/plugged/coc.nvim/src/model/document.ts	/^  private nvim: Neovim$/;"	m
nvim	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    private nvim: Neovim,$/;"	m
nvim	nvim/plugged/coc.nvim/src/model/source.ts	/^  protected readonly nvim: Neovim$/;"	m
nvim	nvim/plugged/coc.nvim/src/model/terminal.ts	/^    private nvim: Neovim,$/;"	m
nvim	nvim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^  private get nvim(): Neovim {$/;"	m
nvim	nvim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^  private get nvim(): Neovim {$/;"	m
nvim	nvim/plugged/coc.nvim/src/sources.ts	/^  private get nvim(): Neovim {$/;"	m
nvim	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly nvim: Neovim$/;"	m
nvim_cb	nvim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
nvim_job_exit_wrapper	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
nvim_job_out_wrapper	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
nvim_mq_job_handler	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_mq_job_handler(job_id, data, event) dict$/;"	f
nvim_output_handler	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_output_handler(job_id, data, event) dict$/;"	f
nvim_po_job_handler	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_po_job_handler(job_id, data, event) dict$/;"	f
nvim_untracked_job_handler	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_untracked_job_handler(job_id, data, event) dict$/;"	f
o	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> o <NOP>$/;"	m
o	nvim/plugged/coc.nvim/build/index.js	/^                    let o = {$/;"	O
o	nvim/plugged/coc.nvim/build/index.js	/^                let o = {$/;"	O
o	nvim/plugged/coc.nvim/build/index.js	/^        o = (o[key] || {});$/;"	M
o	nvim/plugged/coc.nvim/build/index.js	/^    let o = {};$/;"	O
o	nvim/plugged/coc.nvim/build/index.js	/^    o: columnNumber,$/;"	P
o	nvim/plugged/coc.nvim/build/index.js	/^formatters.o = function (v) {$/;"	M
o	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent> <buffer> o :<C-U>call vimwiki#lst#kbd_o()<CR>$/;"	m
o2	nvim/plugged/coc.nvim/build/index.js	/^    var o2 = {}$/;"	O
obj	nvim/plugged/coc.nvim/build/index.js	/^            let obj = { word: item.word, equal: 1 };$/;"	O
obj	nvim/plugged/coc.nvim/build/index.js	/^        let obj = {$/;"	O
obj	nvim/plugged/coc.nvim/build/index.js	/^    var obj = {};$/;"	O
obj	nvim/plugged/coc.nvim/build/index.js	/^  var obj = {}$/;"	O
obj_to_map	nvim/plugged/coc.nvim/build/index.js	/^  function obj_to_map(encoder, value) {$/;"	F
object	nvim/plugged/coc.nvim/build/index.js	/^            var object = {};$/;"	O
object	nvim/plugged/coc.nvim/build/index.js	/^  function object(encoder, value) {$/;"	F
objectLiteral	nvim/plugged/coc.nvim/build/index.js	/^    function objectLiteral(value) {$/;"	F
objectLiteral	nvim/plugged/coc.nvim/build/index.js	/^function objectLiteral(obj) {$/;"	F
objectLiteral	nvim/plugged/coc.nvim/src/util/is.ts	/^export function objectLiteral(obj: any): obj is object {$/;"	f
object_raw	nvim/plugged/coc.nvim/build/index.js	/^  function object_raw(encoder, value) {$/;"	F
obsolete_gitgutter_signs_to_remove	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:obsolete_gitgutter_signs_to_remove(bufnr, new_gitgutter_signs_line_numbers) abort$/;"	f
obtain_lock	nvim/plugged/vim-elixir/spec/indent/receive_spec.rb	/^  def obtain_lock(pid, key, timeout \\\\ 60_000) do$/;"	f
octalString	nvim/plugged/coc.nvim/build/index.js	/^const octalString = (number, size) =>$/;"	F
odd	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			odd: function(a,i){return i%2;},$/;"	M
off	nvim/plugged/coc.nvim/build/index.js	/^    off: off,$/;"	P
off	nvim/plugged/coc.nvim/build/index.js	/^  function off(type, func) {$/;"	F
offset	nvim/plugged/coc.nvim/build/index.js	/^	var offset = 0;$/;"	V
offset	nvim/plugged/coc.nvim/build/index.js	/^            let offset = 0;$/;"	V
offset	nvim/plugged/coc.nvim/build/index.js	/^        let offset = 0;$/;"	V
offset	nvim/plugged/coc.nvim/build/index.js	/^        offset: 0,$/;"	P
offset	nvim/plugged/coc.nvim/build/index.js	/^    let offset = 0;$/;"	V
offset	nvim/plugged/coc.nvim/build/index.js	/^    offset(marker) {$/;"	M
offset	nvim/plugged/coc.nvim/build/index.js	/^    offset: 0$/;"	P
offset	nvim/plugged/coc.nvim/build/index.js	/^    offset: 0,$/;"	P
offset	nvim/plugged/coc.nvim/build/index.js	/^  var offset = 0;$/;"	V
offset	nvim/plugged/coc.nvim/build/index.js	/^function offset(timezoneOffset) {$/;"	F
offset	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public offset(marker: Marker): number {$/;"	m
offset	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.fn.offset = function() {$/;"	M
offsetAt	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.offsetAt = function (position) {$/;"	M
offsetParent	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	offsetParent: function() {$/;"	M
ok	nvim/plugged/coc.nvim/build/index.js	/^var ok = \/^v[0-5]\\.\/.test(version)$/;"	V
old	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var old = {};$/;"	O
old	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var old, cur = [];$/;"	V
oldUri	nvim/plugged/coc.nvim/build/index.js	/^            oldUri: oldUri,$/;"	P
omit	nvim/plugged/coc.nvim/build/index.js	/^function omit(obj, properties) {$/;"	F
omit	nvim/plugged/coc.nvim/src/util/lodash.ts	/^export function omit<T>(obj: T, properties: string[]): T {$/;"	f
on	nvim/plugged/coc.nvim/build/index.js	/^    on(event, handler, thisArg, disposables) {$/;"	M
on	nvim/plugged/coc.nvim/build/index.js	/^    on: on,$/;"	P
on	nvim/plugged/coc.nvim/build/index.js	/^  function on(type, func) {$/;"	F
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'BufReadCmd', handler: (scheme: string, fullpath: string) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'BufWinEnter' | 'BufWinLeave', handler: (bufnr: number, winid: number) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'Command', handler: (name: string) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'CompleteDone', handler: (item: VimCompleteItem) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'DirChanged', handler: (cwd: string) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'FileType', handler: (filetype: string, bufnr: number) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'InputChar', handler: (character: string, mode: number) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'InsertCharPre', handler: (character: string) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'MenuPopupChanged', handler: (event: PopupChangeEvent, cursorline: number) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'OptionSet' | 'GlobalChange', handler: (option: string, oldVal: OptionValue, newVal: OptionValue) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'TaskExit', handler: (id: string, code: number) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'TaskStderr' | 'TaskStdout', handler: (id: string, lines: string[]) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: 'VimResized', handler: (columns: number, lines: number) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: AllEvents[] | AllEvents, handler: (...args: any[]) => Result, thisArg?: any, disposables?: Disposable[]): Disposable {$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: BufEvents, handler: (bufnr: number) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: EmptyEvents | AllEvents[], handler: () => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: MoveEvents, handler: (bufnr: number, cursor: [number, number]) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
on	nvim/plugged/coc.nvim/src/events.ts	/^  public on(event: TextChangedEvent, handler: (bufnr: number, changedtick: number) => Result, thisArg?: any, disposables?: Disposable[]): Disposable$/;"	m
onArrayBegin	nvim/plugged/coc.nvim/build/index.js	/^            onArrayBegin: function (offset, length) {$/;"	M
onArrayBegin	nvim/plugged/coc.nvim/build/index.js	/^        onArrayBegin: function () {$/;"	M
onArrayBegin	nvim/plugged/coc.nvim/build/index.js	/^        onArrayBegin: function (offset, length) {$/;"	M
onArrayEnd	nvim/plugged/coc.nvim/build/index.js	/^            onArrayEnd: function (offset, length) {$/;"	M
onArrayEnd	nvim/plugged/coc.nvim/build/index.js	/^        onArrayEnd: function () {$/;"	M
onArrayEnd	nvim/plugged/coc.nvim/build/index.js	/^        onArrayEnd: function (offset, length) {$/;"	M
onBackspace	nvim/plugged/coc.nvim/build/index.js	/^    onBackspace() {$/;"	M
onBackspace	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public onBackspace(): void {$/;"	m
onBufCreate	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async onBufCreate(buf: number | Buffer): Promise<void> {$/;"	m
onBufEnter	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async onBufEnter(bufnr: number): Promise<void> {$/;"	m
onBufReadCmd	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async onBufReadCmd(scheme: string, uri: string): Promise<void> {$/;"	m
onBufUnload	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async onBufUnload(bufnr: number, recreate = false): Promise<void> {$/;"	m
onBufWritePost	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async onBufWritePost(bufnr: number): Promise<void> {$/;"	m
onBufWritePre	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async onBufWritePre(bufnr: number): Promise<void> {$/;"	m
onBufferChange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private async onBufferChange(e: DidChangeTextDocumentParams): Promise<void> {$/;"	m
onCancel	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public readonly onCancel: Event<void> = this._onCancelEvent.event$/;"	m
onChange	nvim/plugged/coc.nvim/build/index.js	/^            const onChange = async (bufnr) => {$/;"	F
onChange	nvim/plugged/coc.nvim/src/model/document.ts	/^  private onChange($/;"	m
onCharacterType	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private async onCharacterType(ch: string, bufnr: number, insertLeave = false): Promise<void> {$/;"	m
onCharacterType	nvim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  public async onCharacterType(character: string, document: TextDocument, position: Position, token: CancellationToken): Promise<TextEdit[] | null> {$/;"	m
onClose	nvim/plugged/coc.nvim/build/index.js	/^  function onClose(){$/;"	F
onCloseOrRemove	nvim/plugged/coc.nvim/build/index.js	/^    function onCloseOrRemove(err) {$/;"	F
onCompleteDone	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async onCompleteDone(item: VimCompleteItem): Promise<void> {$/;"	m
onCompleteDone	nvim/plugged/coc.nvim/src/model/source-vim.ts	/^  public async onCompleteDone(item: VimCompleteItem, opt: CompleteOption): Promise<void> {$/;"	m
onCompleteDone	nvim/plugged/coc.nvim/src/model/source.ts	/^  public async onCompleteDone(item: VimCompleteItem, opt: CompleteOption): Promise<void> {$/;"	m
onConnect	nvim/plugged/coc.nvim/build/index.js	/^  function onConnect(res, socket, head) {$/;"	F
onConnected	nvim/plugged/coc.nvim/build/index.js	/^                onConnected: () => { return connected; }$/;"	M
onCursorMoved	nvim/plugged/coc.nvim/build/index.js	/^    onCursorMoved(insertMode, bufnr, cursor) {$/;"	M
onCursorMoved	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private onCursorMoved(insertMode: boolean, bufnr: number, cursor: [number, number]): void {$/;"	m
onCursorMoved	nvim/plugged/coc.nvim/src/workspace.ts	/^  private async onCursorMoved(bufnr: number): Promise<void> {$/;"	m
onData	nvim/plugged/coc.nvim/build/index.js	/^    onData(data) {$/;"	M
onDiagnostics	nvim/plugged/coc.nvim/build/index.js	/^        onDiagnostics: (handler) => connection.onNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, handler),$/;"	M
onDidActiveExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public readonly onDidActiveExtension: Event<Extension<API>> = this._onDidActiveExtension.event$/;"	m
onDidChange	nvim/plugged/coc.nvim/build/index.js	/^            onDidChange: null,$/;"	P
onDidChange	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public readonly onDidChange: Event<ConfigurationChangeEvent> = this._onChange.event$/;"	m
onDidChange	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public readonly onDidChange: Event<void> = this._onDidChange.event$/;"	m
onDidChange	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  public readonly onDidChange: Event<URI> = this._onDidChange.event$/;"	m
onDidChangeConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    onDidChangeConfiguration() {$/;"	M
onDidChangeConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    onDidChangeConfiguration(configurationSection) {$/;"	M
onDidChangeConfiguration	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private onDidChangeConfiguration(configurationSection: string | string[]): void {$/;"	m
onDidChangeConfiguration	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  private onDidChangeConfiguration(): void {$/;"	m
onDidChangeConfiguration	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidChangeConfiguration: Event<ConfigurationChangeEvent> = this._onDidChangeConfiguration.event$/;"	m
onDidChangeInput	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public readonly onDidChangeInput: Event<string> = this._onDidChangeInput.event$/;"	m
onDidChangeItems	nvim/plugged/coc.nvim/src/list/worker.ts	/^  public readonly onDidChangeItems: Event<ListItemsEvent> = this._onDidChangeItems.event$/;"	m
onDidChangeLine	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public readonly onDidChangeLine: Event<number> = this._onDidChangeLine.event$/;"	m
onDidChangeState	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get onDidChangeState(): Event<StateChangeEvent> {$/;"	m
onDidChangeTextDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidChangeTextDocument: Event<DidChangeTextDocumentParams> = this._onDidChangeDocument.event$/;"	m
onDidChangeWorkspaceFolders	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidChangeWorkspaceFolders: Event<WorkspaceFoldersChangeEvent> = this._onDidChangeWorkspaceFolders.event$/;"	m
onDidClose	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public readonly onDidClose: Event<number> = this._onDidClose.event$/;"	m
onDidCloseTerminal	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidCloseTerminal: Event<Terminal> = this._onDidCloseTerminal.event$/;"	m
onDidCloseTextDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidCloseTextDocument: Event<TextDocument> = this._onDidCloseDocument.event$/;"	m
onDidComplete	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public readonly onDidComplete: Event<void> = this._onDidComplete.event$/;"	m
onDidCreate	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  public readonly onDidCreate: Event<URI> = this._onDidCreate.event$/;"	m
onDidDelete	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  public readonly onDidDelete: Event<URI> = this._onDidDelete.event$/;"	m
onDidDiagnosticsChange	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public readonly onDidDiagnosticsChange: Event<string> = this._onDidDiagnosticsChange.event$/;"	m
onDidDiagnosticsClear	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public readonly onDidDiagnosticsClear: Event<string[]> = this._onDidDiagnosticsClear.event$/;"	m
onDidDoubleClick	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public readonly onDidDoubleClick: Event<void> = this._onDoubleClick.event$/;"	m
onDidLineChange	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public readonly onDidLineChange: Event<number> = this._onDidLineChange.event$/;"	m
onDidLoadExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public readonly onDidLoadExtension: Event<Extension<API>> = this._onDidLoadExtension.event$/;"	m
onDidOpen	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public readonly onDidOpen: Event<number> = this._onDidOpen.event$/;"	m
onDidOpenTerminal	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidOpenTerminal: Event<Terminal> = this._onDidOpenTerminal.event$/;"	m
onDidOpenTextDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidOpenTextDocument: Event<TextDocument> = this._onDidOpenDocument.event$/;"	m
onDidRefresh	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public readonly onDidRefresh: Event<void> = this._onDidRefresh.event$/;"	m
onDidRename	nvim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  public readonly onDidRename: Event<RenameEvent> = this._onDidRename.event$/;"	m
onDidSaveTextDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidSaveTextDocument: Event<TextDocument> = this._onDidSaveDocument.event$/;"	m
onDidServiceReady	nvim/plugged/coc.nvim/build/index.js	/^        let onDidServiceReady = new vscode_languageserver_protocol_1.Emitter();$/;"	V
onDidUnloadExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public readonly onDidUnloadExtension: Event<string> = this._onDidUnloadExtension.event$/;"	m
onDidWorkspaceInitialized	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onDidWorkspaceInitialized: Event<void> = this._onDidWorkspaceInitialized.event$/;"	m
onDir	nvim/plugged/coc.nvim/build/index.js	/^  function onDir(dir) {$/;"	F
onDir	nvim/plugged/coc.nvim/build/index.js	/^function onDir (srcStat, destStat, src, dest, opts) {$/;"	F
onDir	nvim/plugged/coc.nvim/build/index.js	/^function onDir (srcStat, destStat, src, dest, opts, cb) {$/;"	F
onDirChanged	nvim/plugged/coc.nvim/build/index.js	/^    onDirChanged(cwd) {$/;"	M
onDirChanged	nvim/plugged/coc.nvim/src/workspace.ts	/^  private onDirChanged(cwd: string): void {$/;"	m
onDispose	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public readonly onDispose: Event<void> = this._onDispose.event$/;"	m
onDocumentChange	nvim/plugged/coc.nvim/src/model/document.ts	/^  public readonly onDocumentChange: Event<DidChangeTextDocumentParams> = this._onDocumentChange.event$/;"	m
onDocumentDetach	nvim/plugged/coc.nvim/src/model/document.ts	/^  public readonly onDocumentDetach: Event<string> = this._onDocumentDetach.event$/;"	m
onDocumentEnter	nvim/plugged/coc.nvim/build/index.js	/^    onDocumentEnter(bufnr) {$/;"	M
onDocumentEnter	nvim/plugged/coc.nvim/src/sources.ts	/^  private onDocumentEnter(bufnr: number): void {$/;"	m
onEmptyLocation	nvim/plugged/coc.nvim/build/index.js	/^    onEmptyLocation(name, location) {$/;"	M
onEmptyLocation	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private onEmptyLocation(name: string, location: any | null): void {$/;"	m
onEnter	nvim/plugged/coc.nvim/build/index.js	/^    onEnter(bufnr) {$/;"	M
onEnter	nvim/plugged/coc.nvim/src/model/source-vim.ts	/^  public onEnter(bufnr: number): void {$/;"	m
onError	nvim/plugged/coc.nvim/build/index.js	/^        onError: function (error, offset, length) {$/;"	M
onError	nvim/plugged/coc.nvim/build/index.js	/^  function onError(cause) {$/;"	F
onError	nvim/plugged/coc.nvim/build/index.js	/^  function onError(err) {$/;"	F
onError	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public readonly onError: Event<ErrorItem[]> = this._onError.event$/;"	m
onError	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private async onError(msg: string): Promise<void> {$/;"	m
onExit	nvim/plugged/coc.nvim/src/model/task.ts	/^  public readonly onExit: Event<number> = this._onExit.event$/;"	m
onExtensionInstall	nvim/plugged/coc.nvim/src/extensions.ts	/^  private async onExtensionInstall(id: string): Promise<void> {$/;"	m
onFile	nvim/plugged/coc.nvim/build/index.js	/^  function onFile(file) {$/;"	F
onFile	nvim/plugged/coc.nvim/build/index.js	/^function onFile (srcStat, destStat, src, dest, opts) {$/;"	F
onFile	nvim/plugged/coc.nvim/build/index.js	/^function onFile (srcStat, destStat, src, dest, opts, cb) {$/;"	F
onFileTypeChange	nvim/plugged/coc.nvim/build/index.js	/^    onFileTypeChange(filetype, bufnr) {$/;"	M
onFileTypeChange	nvim/plugged/coc.nvim/src/workspace.ts	/^  private onFileTypeChange(filetype: string, bufnr: number): void {$/;"	m
onFinished	nvim/plugged/coc.nvim/build/index.js	/^                let onFinished = () => {$/;"	F
onFree	nvim/plugged/coc.nvim/build/index.js	/^    function onFree() {$/;"	F
onHover	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async onHover(): Promise<boolean> {$/;"	m
onInputChar	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private async onInputChar(ch: string, charmod: number): Promise<void> {$/;"	m
onInsertCharPre	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async onInsertCharPre(character: string): Promise<void> {$/;"	m
onInsertEnter	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async onInsertEnter(bufnr: number): Promise<void> {$/;"	m
onInsertInput	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private async onInsertInput(ch: string, charmod: number): Promise<void> {$/;"	m
onInsertLeave	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async onInsertLeave(bufnr: number): Promise<void> {$/;"	m
onLink	nvim/plugged/coc.nvim/build/index.js	/^  function onLink(link) {$/;"	F
onLink	nvim/plugged/coc.nvim/build/index.js	/^function onLink (destStat, src, dest, opts) {$/;"	F
onLink	nvim/plugged/coc.nvim/build/index.js	/^function onLink (destStat, src, dest, opts, cb) {$/;"	F
onLiteralValue	nvim/plugged/coc.nvim/build/index.js	/^            onLiteralValue: function (value, offset, length) {$/;"	M
onLiteralValue	nvim/plugged/coc.nvim/build/index.js	/^        onLiteralValue: function (value, offset, length) {$/;"	M
onLiteralValue	nvim/plugged/coc.nvim/build/index.js	/^        onLiteralValue: onValue,$/;"	P
onLogMessage	nvim/plugged/coc.nvim/build/index.js	/^        onLogMessage: (handler) => connection.onNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, handler),$/;"	M
onMouse	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async onMouse(event: MouseEvent): Promise<void> {$/;"	m
onMouseEvent	nvim/plugged/coc.nvim/build/index.js	/^    onMouseEvent(key) {$/;"	M
onMouseEvent	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public onMouseEvent(key): Promise<void> {$/;"	m
onNormalInput	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private async onNormalInput(ch: string, _charmod: number): Promise<void> {$/;"	m
onNotification	nvim/plugged/coc.nvim/build/index.js	/^        onNotification: (type, handler) => connection.onNotification(Is.string(type) ? type : type.method, handler),$/;"	M
onNotification	nvim/plugged/coc.nvim/build/index.js	/^        onNotification: (type, handler) => {$/;"	M
onNotification	nvim/plugged/coc.nvim/build/index.js	/^    onNotification(type, handler) {$/;"	M
onNotification	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public onNotification($/;"	m
onNotification	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public onNotification<P, RO>($/;"	m
onNotification	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public onNotification<RO>(type: NotificationType0<RO>, handler: NotificationHandler0): void$/;"	m
onObjectBegin	nvim/plugged/coc.nvim/build/index.js	/^            onObjectBegin: function (offset, length) {$/;"	M
onObjectBegin	nvim/plugged/coc.nvim/build/index.js	/^        onObjectBegin: function () {$/;"	M
onObjectBegin	nvim/plugged/coc.nvim/build/index.js	/^        onObjectBegin: function (offset) {$/;"	M
onObjectEnd	nvim/plugged/coc.nvim/build/index.js	/^            onObjectEnd: function (offset, length) {$/;"	M
onObjectEnd	nvim/plugged/coc.nvim/build/index.js	/^        onObjectEnd: function () {$/;"	M
onObjectEnd	nvim/plugged/coc.nvim/build/index.js	/^        onObjectEnd: function (offset, length) {$/;"	M
onObjectProperty	nvim/plugged/coc.nvim/build/index.js	/^            onObjectProperty: function (name, offset, length) {$/;"	M
onObjectProperty	nvim/plugged/coc.nvim/build/index.js	/^        onObjectProperty: function (name) {$/;"	M
onObjectProperty	nvim/plugged/coc.nvim/build/index.js	/^        onObjectProperty: function (name, offset, length) {$/;"	M
onPumChange	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public async onPumChange(ev: PopupChangeEvent): Promise<void> {$/;"	m
onReady	nvim/plugged/coc.nvim/build/index.js	/^    onReady() {$/;"	M
onReady	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public onReady(): Promise<void> {$/;"	m
onRefactorChange	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private async onRefactorChange(e: DidChangeTextDocumentParams): Promise<void> {$/;"	m
onRequest	nvim/plugged/coc.nvim/build/index.js	/^        onRequest: (type, handler) => connection.onRequest(Is.string(type) ? type : type.method, handler),$/;"	M
onRequest	nvim/plugged/coc.nvim/build/index.js	/^        onRequest: (type, handler) => {$/;"	M
onRequest	nvim/plugged/coc.nvim/build/index.js	/^    onRequest(type, handler) {$/;"	M
onRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public onRequest<P, R, E, RO>($/;"	m
onRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public onRequest<R, E, RO>($/;"	m
onRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public onRequest<R, E>($/;"	m
onResponse	nvim/plugged/coc.nvim/build/index.js	/^  function onResponse(res) {$/;"	F
onSeparator	nvim/plugged/coc.nvim/build/index.js	/^            onSeparator: function (sep, offset, length) {$/;"	M
onSeparator	nvim/plugged/coc.nvim/build/index.js	/^        onSeparator: function (sep, offset, length) {$/;"	M
onShowMessage	nvim/plugged/coc.nvim/build/index.js	/^        onShowMessage: (handler) => connection.onNotification(vscode_languageserver_protocol_1.ShowMessageNotification.type, handler),$/;"	M
onStderr	nvim/plugged/coc.nvim/src/model/task.ts	/^  public readonly onStderr: Event<string[]> = this._onStderr.event$/;"	m
onStdout	nvim/plugged/coc.nvim/src/model/task.ts	/^  public readonly onStdout: Event<string[]> = this._onStdout.event$/;"	m
onTelemetry	nvim/plugged/coc.nvim/build/index.js	/^        onTelemetry: (handler) => connection.onNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, handler),$/;"	M
onTextChangedI	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async onTextChangedI(bufnr: number): Promise<void> {$/;"	m
onTextChangedP	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async onTextChangedP(): Promise<void> {$/;"	m
onTypeFormatManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private onTypeFormatManager = new OnTypeFormatManager()$/;"	m
onUpgrade	nvim/plugged/coc.nvim/build/index.js	/^  function onUpgrade(res, socket, head) {$/;"	F
onValue	nvim/plugged/coc.nvim/build/index.js	/^    function onValue(value) {$/;"	F
onValue	nvim/plugged/coc.nvim/build/index.js	/^    function onValue(valueNode) {$/;"	F
onWillSaveTextDocument	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly onWillSaveTextDocument: Event<TextDocumentWillSaveEvent> = this._onWillSaveDocument.event$/;"	m
onWillSaveUntil	nvim/plugged/coc.nvim/build/index.js	/^    onWillSaveUntil(callback, thisArg, clientId) {$/;"	M
onWillSaveUntil	nvim/plugged/coc.nvim/src/workspace.ts	/^  public onWillSaveUntil(callback: (event: TextDocumentWillSaveEvent) => void, thisArg: any, clientId: string): Disposable {$/;"	m
on_async_response	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_async_response(id, resp, isErr) dict$/;"	f
on_bufenter	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:on_bufenter()$/;"	f
on_colorscheme_changed	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_colorscheme_changed()$/;"	f
on_cursor_moved	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_cursor_moved()$/;"	f
on_exit	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_exit(name, code) abort$/;"	f
on_exit	nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_exit(id, code) abort$/;"	f
on_exit_clean	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:on_exit_clean(...) dict abort$/;"	f
on_exit_mq	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_mq(channel) dict abort$/;"	f
on_exit_nvim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_nvim(_job_id, exit_code, _event) dict abort$/;"	f
on_exit_po	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_po(channel) dict abort$/;"	f
on_exit_untracked	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_untracked(channel) dict abort$/;"	f
on_exit_vim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_vim(channel) dict abort$/;"	f
on_stderr	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_stderr(name, msgs)$/;"	f
on_stderr	nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stderr(id, msgs)$/;"	f
on_stderr_nvim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_nvim(_job_id, data, _event) dict abort$/;"	f
on_stderr_vim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_vim(channel, _data) dict abort$/;"	f
on_stdout	nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stdout(id, msgs)$/;"	f
on_stdout	nvim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_stdout(channel, msg) dict abort$/;"	f
on_stdout_nvim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_nvim(_job_id, data, _event) dict abort$/;"	f
on_stdout_vim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_vim(_channel, data) dict abort$/;"	f
on_window_changed	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_window_changed(event)$/;"	f
onbuild	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> onbuild <C-R>=DockerfileReplaceInstruction("onbuild", "ONBUILD")<CR>$/;"	m
once	nvim/plugged/coc.nvim/build/index.js	/^    once: once,$/;"	P
once	nvim/plugged/coc.nvim/build/index.js	/^  function once(type, func) {$/;"	F
once	nvim/plugged/coc.nvim/build/index.js	/^function once (fn) {$/;"	F
onceStrict	nvim/plugged/coc.nvim/build/index.js	/^function onceStrict (fn) {$/;"	F
ondata	nvim/plugged/coc.nvim/build/index.js	/^      const ondata = value => {$/;"	F
one	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	one: function( type, data, fn ) {$/;"	M
one	nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def one$/;"	f
one	nvim/plugged/vim-ruby/spec/indent/method_definitions_spec.rb	/^        def one(x)$/;"	f
oneKeys	nvim/plugged/coc.nvim/build/index.js	/^        const oneKeys = [];$/;"	A
onearg	nvim/plugged/coc.nvim/build/index.js	/^    function onearg(func) {$/;"	F
onend	nvim/plugged/coc.nvim/build/index.js	/^      const onend = () => {$/;"	F
onentryFunction	nvim/plugged/coc.nvim/build/index.js	/^const onentryFunction = opt => {$/;"	F
oner	nvim/plugged/coc.nvim/build/index.js	/^    const oner = er => {$/;"	F
onerr	nvim/plugged/coc.nvim/build/index.js	/^      const onerr = er => {$/;"	F
onesComp	nvim/plugged/coc.nvim/build/index.js	/^const onesComp = byte => (0xff ^ byte) & 0xff$/;"	F
onlyOnMaster	nvim/plugged/coc.nvim/build/index.js	/^  onlyOnMaster: (fn, notMaster) => (isMaster() ? fn() : notMaster),$/;"	M
onmkdir	nvim/plugged/coc.nvim/build/index.js	/^const onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => er => {$/;"	F
onopen	nvim/plugged/coc.nvim/build/index.js	/^    const onopen = (er, fd) => {$/;"	F
onread	nvim/plugged/coc.nvim/build/index.js	/^    const onread = (er, bytes) => {$/;"	F
onreadystatechange	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var onreadystatechange = function(isTimeout){$/;"	F
onwarn	nvim/plugged/coc.nvim/build/index.js	/^      onwarn: (msg, data) => {$/;"	M
opacity	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		opacity: function(fx){$/;"	M
open	nvim/plugged/coc.nvim/build/index.js	/^    open(that.path, that.flags, that.mode, function (err, fd) {$/;"	M
open	nvim/plugged/coc.nvim/build/index.js	/^  function open (path, flags, mode, cb) {$/;"	F
open	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
openBuffer	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private async openBuffer(preserveFocus?: boolean): Promise<void> {$/;"	m
openClose	nvim/plugged/coc.nvim/build/index.js	/^                        openClose: false,$/;"	P
openClose	nvim/plugged/coc.nvim/build/index.js	/^                        openClose: true,$/;"	P
openExplorer	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node)$/;"	f
openFloatWindow	nvim/plugged/coc.nvim/build/index.js	/^    openFloatWindow(buffer, enter, options) {$/;"	M
openFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
openFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
openHSplit	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target)$/;"	f
openInNewTab	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target)$/;"	f
openInNewTabSilent	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target)$/;"	f
openKindFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
openLink	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async openLink(): Promise<boolean> {$/;"	m
openNodeRecursively	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node)$/;"	f
openParents	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
openResource	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async openResource(uri: string): Promise<void> {$/;"	m
openTheStream	nvim/plugged/coc.nvim/build/index.js	/^function openTheStream(file, fileSize, numFiles, options) {$/;"	F
openVSplit	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target)$/;"	f
open_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:open_hunk_preview_window()$/;"	f
open_wiki_buffer	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:open_wiki_buffer(item)$/;"	f
opera	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	opera: \/opera\/.test( userAgent ),$/;"	P
operator <	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^bool operator<(const ConnectionString& other) const {$/;"	f
ops	nvim/plugged/coc.nvim/build/index.js	/^    const ops = {$/;"	O
option	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public get option(): CompleteOption {$/;"	m
option	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:option(name)$/;"	f
optionMap	nvim/plugged/coc.nvim/src/list/basic.ts	/^  private optionMap: Map<string, ArgumentItem>$/;"	m
optional	nvim/plugged/coc.nvim/build/index.js	/^                optional: [],$/;"	P
optional	nvim/plugged/coc.nvim/build/index.js	/^      optional: optional,$/;"	P
optionalFns	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get optionalFns(): string[] {$/;"	m
options	nvim/plugged/coc.nvim/build/index.js	/^            let options = {$/;"	O
options	nvim/plugged/coc.nvim/build/index.js	/^            options: {$/;"	P
options	nvim/plugged/coc.nvim/build/index.js	/^        let options = [];$/;"	A
options	nvim/plugged/coc.nvim/build/index.js	/^  var options = {$/;"	O
options	nvim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^  public options: ListArgument[] = [{$/;"	m
options	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public options: ListArgument[] = []$/;"	m
options	nvim/plugged/coc.nvim/src/list/source/actions.ts	/^  public options: ListArgument[] = [{$/;"	m
options	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public readonly options: Text[] = []$/;"	m
opts	nvim/plugged/coc.nvim/build/index.js	/^  const opts = {$/;"	O
opts	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  let opts['sink*'] = remove(opts, 'sink')$/;"	v
or	nvim/plugged/coc.nvim/build/index.js	/^    var or = '|';$/;"	V
orig	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			options.orig = {};$/;"	P
origRealpath	nvim/plugged/coc.nvim/build/index.js	/^  origRealpath(p, cache, function (er, result) {$/;"	M
osascript	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:osascript(...) abort$/;"	f
otherKeys	nvim/plugged/coc.nvim/build/index.js	/^        const otherKeys = [];$/;"	A
others	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:others(p)$/;"	f
out	nvim/plugged/coc.nvim/build/index.js	/^        out: {$/;"	P
out	nvim/plugged/coc.nvim/build/index.js	/^    var out = new Array(8);$/;"	V
out	nvim/plugged/coc.nvim/build/index.js	/^    var out = new Buffer(8);$/;"	V
out	nvim/plugged/coc.nvim/build/index.js	/^    var out = new Class();$/;"	V
out	nvim/plugged/coc.nvim/build/index.js	/^  var out = ''$/;"	V
out	nvim/plugged/coc.nvim/build/index.js	/^  var out = [value.pop()];$/;"	A
out	nvim/plugged/coc.nvim/build/index.js	/^  var out = {}$/;"	O
out	nvim/plugged/coc.nvim/build/index.js	/^  var out = {};$/;"	O
outWrite	nvim/plugged/coc.nvim/build/index.js	/^    outWrite(str) {$/;"	M
outWriteLine	nvim/plugged/coc.nvim/build/index.js	/^    outWriteLine(str) {$/;"	M
output	nvim/plugged/coc.nvim/webpack.config.js	/^  output: {$/;"	P
output	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:output(text)$/;"	f
outputChannel	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get outputChannel(): OutputChannel {$/;"	m
outputChannelName	nvim/plugged/coc.nvim/build/index.js	/^        outputChannelName: id,$/;"	P
outputChannels	nvim/plugged/coc.nvim/src/workspace.ts	/^  private outputChannels: Map<string, OutputChannel> = new Map()$/;"	m
outputFile	nvim/plugged/coc.nvim/build/index.js	/^function outputFile (file, data, encoding, callback) {$/;"	F
outputFileSync	nvim/plugged/coc.nvim/build/index.js	/^function outputFileSync (file, ...args) {$/;"	F
outputJson	nvim/plugged/coc.nvim/build/index.js	/^function outputJson (file, data, options, callback) {$/;"	F
outputJsonSync	nvim/plugged/coc.nvim/build/index.js	/^function outputJsonSync (file, data, options) {$/;"	F
outside	nvim/plugged/coc.nvim/build/index.js	/^function outside (version, range, hilo, options) {$/;"	F
overlap	nvim/plugged/coc.nvim/build/index.js	/^                let overlap = lnums.some(line => line >= startLine && line <= endLine);$/;"	F
ownProp	nvim/plugged/coc.nvim/build/index.js	/^function ownProp (obj, field) {$/;"	F
p	nvim/plugged/coc.nvim/build/index.js	/^            let p = new Promise((resolve, reject) => {$/;"	V
p	nvim/plugged/coc.nvim/build/index.js	/^    const p = { dest: dest, opts: opts, ondrain: _ => this[RESUME]() }$/;"	O
p	nvim/plugged/coc.nvim/build/index.js	/^    p: logLevel,$/;"	P
p	nvim/plugged/coc.nvim/build/index.js	/^    var i, p;$/;"	V
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Pack(opt)$/;"	V
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Pack.Sync(opt)$/;"	V
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Promise((resolve, reject) => {$/;"	V
packError	nvim/plugged/coc.nvim/build/index.js	/^function packError(value) {$/;"	F
packRegExp	nvim/plugged/coc.nvim/build/index.js	/^function packRegExp(value) {$/;"	F
packValueOf	nvim/plugged/coc.nvim/build/index.js	/^function packValueOf(value) {$/;"	F
packageJSON	nvim/plugged/coc.nvim/build/index.js	/^            let packageJSON = {$/;"	O
packageJSON	nvim/plugged/coc.nvim/build/index.js	/^            packageJSON: {$/;"	P
packageJSON	nvim/plugged/coc.nvim/build/index.js	/^        let packageJSON = {$/;"	O
pad	nvim/plugged/coc.nvim/build/index.js	/^  function pad(padding, toPad) {$/;"	F
pad	nvim/plugged/coc.nvim/build/index.js	/^function pad(str) {$/;"	F
pad	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^function pad(str: string): string {$/;"	f
padOctal	nvim/plugged/coc.nvim/build/index.js	/^const padOctal = (string, size) =>$/;"	F
padWithZeros	nvim/plugged/coc.nvim/build/index.js	/^function padWithZeros(vNumber, width) {$/;"	F
padding	nvim/plugged/coc.nvim/build/index.js	/^                    padding: [0, 1, 0, 1],$/;"	P
padding	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var padding = 0, border = 0;$/;"	V
pairs	nvim/plugged/coc.nvim/build/index.js	/^const pairs = new Map([$/;"	V
param	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	param: function( a ) {$/;"	M
parameterInformation	nvim/plugged/coc.nvim/build/index.js	/^            parameterInformation: {$/;"	P
parameters	nvim/plugged/coc.nvim/build/index.js	/^        var parameters = [];$/;"	A
params	nvim/plugged/coc.nvim/build/index.js	/^                    let params = {$/;"	O
params	nvim/plugged/coc.nvim/build/index.js	/^                    params: messageParams$/;"	P
params	nvim/plugged/coc.nvim/build/index.js	/^                let params = { event };$/;"	O
params	nvim/plugged/coc.nvim/build/index.js	/^                let params = {$/;"	O
params	nvim/plugged/coc.nvim/build/index.js	/^                params: messageParams$/;"	P
params	nvim/plugged/coc.nvim/build/index.js	/^            let params = {$/;"	O
parent	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public parent: Marker$/;"	m
parent	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			parent: function(a){return a.firstChild;},$/;"	M
parent	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	parent: function(elem){return elem.parentNode;},$/;"	M
parentDirs	nvim/plugged/coc.nvim/build/index.js	/^function parentDirs(pth) {$/;"	F
parentDirs	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function parentDirs(pth: string): string[] {$/;"	f
parents	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	parents: function(elem){return jQuery.dir(elem,"parentNode");},$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^    URI.parse = function (value, _strict) {$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^    parse(value, insertFinalTabstop) {$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^    static parse(data) {$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^  const parse = new Parser(opt)$/;"	V
parse	nvim/plugged/coc.nvim/build/index.js	/^Comparator.prototype.parse = function (comp) {$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^Pax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g)$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse (pattern, isSub) {$/;"	F
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse (version, options) {$/;"	F
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse(pattern, str, missingValuesDate) {$/;"	F
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse(str) {$/;"	F
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse(text, errors, options) {$/;"	F
parse	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private static parse(data: IConfigurationData): Configuration {$/;"	m
parse	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public parse(value: string, insertFinalTabstop?: boolean): TextmateSnippet {$/;"	m
parse	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	parse: [$/;"	P
parseAnsiHighlights	nvim/plugged/coc.nvim/build/index.js	/^function parseAnsiHighlights(line) {$/;"	F
parseAnsiHighlights	nvim/plugged/coc.nvim/src/util/ansiparse.ts	/^export function parseAnsiHighlights(line: string): { line: string, highlights: AnsiHighlight[] } {$/;"	f
parseArgs	nvim/plugged/coc.nvim/build/index.js	/^    parseArgs(args) {$/;"	M
parseArgs	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public parseArgs(args: string[]): { list: IList, options: ListOptions, listArgs: string[] } | null {$/;"	m
parseArguments	nvim/plugged/coc.nvim/build/index.js	/^    parseArguments(args) {$/;"	M
parseArguments	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public parseArguments(args: string[]): { [key: string]: string | boolean } {$/;"	m
parseArray	nvim/plugged/coc.nvim/build/index.js	/^    function parseArray() {$/;"	F
parseCommaParts	nvim/plugged/coc.nvim/build/index.js	/^function parseCommaParts(str) {$/;"	F
parseComparator	nvim/plugged/coc.nvim/build/index.js	/^function parseComparator (comp, options) {$/;"	F
parseConfiguration	nvim/plugged/coc.nvim/build/index.js	/^function parseConfiguration(content) {$/;"	F
parseConfiguration	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function parseConfiguration(content: string): [ParseError[], any] {$/;"	f
parseContentFromFile	nvim/plugged/coc.nvim/build/index.js	/^    parseContentFromFile(filepath) {$/;"	M
parseContentFromFile	nvim/plugged/coc.nvim/build/index.js	/^function parseContentFromFile(filepath, onError) {$/;"	F
parseContentFromFile	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private parseContentFromFile(filepath: string): IConfigurationModel {$/;"	m
parseContentFromFile	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function parseContentFromFile(filepath: string | null, onError?: ShowError): IConfigurationModel {$/;"	f
parseData	nvim/plugged/coc.nvim/build/index.js	/^    parseData(str) {$/;"	M
parseExpression	nvim/plugged/coc.nvim/build/index.js	/^    parseExpression(expr, flags, highlight) {$/;"	M
parseJSON	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:parseJSON(buffer, lines) abort$/;"	f
parseKV	nvim/plugged/coc.nvim/build/index.js	/^const parseKV = string =>$/;"	F
parseKVLine	nvim/plugged/coc.nvim/build/index.js	/^const parseKVLine = (set, line) => {$/;"	F
parseLines	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:parseLines(buffer, lines) abort$/;"	f
parseListItemAnsi	nvim/plugged/coc.nvim/build/index.js	/^    parseListItemAnsi(item) {$/;"	M
parseListItemAnsi	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private parseListItemAnsi(item: ListItem): void {$/;"	m
parseLiteral	nvim/plugged/coc.nvim/build/index.js	/^    function parseLiteral() {$/;"	F
parseMessage	nvim/plugged/coc.nvim/build/index.js	/^    parseMessage(msg) {$/;"	M
parseNegate	nvim/plugged/coc.nvim/build/index.js	/^function parseNegate () {$/;"	F
parseObject	nvim/plugged/coc.nvim/build/index.js	/^    function parseObject() {$/;"	F
parseProperty	nvim/plugged/coc.nvim/build/index.js	/^    function parseProperty() {$/;"	F
parseRange	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.parseRange = function (range) {$/;"	M
parseString	nvim/plugged/coc.nvim/build/index.js	/^    function parseString(isValue) {$/;"	F
parseTree	nvim/plugged/coc.nvim/build/index.js	/^function parseTree(text, errors, options) {$/;"	F
parseValue	nvim/plugged/coc.nvim/build/index.js	/^    function parseValue() {$/;"	F
parse_keyword_arg	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:parse_keyword_arg(arg)$/;"	f
parse_line	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:parse_line(line, state)$/;"	f
parse_options	nvim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
parse_screen	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:parse_screen()$/;"	f
parse_type	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:parse_type(args)$/;"	f
parser	nvim/plugged/coc.nvim/build/index.js	/^        let parser = new Snippets.SnippetParser();$/;"	V
parser	nvim/plugged/coc.nvim/build/index.js	/^        let parser = new parser_1.SnippetParser();$/;"	V
part	nvim/plugged/coc.nvim/build/index.js	/^        let part = \/\\\/$\/.test(pathstr) ? pathstr : path_1.default.dirname(pathstr);$/;"	V
part_of_diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:part_of_diff(hunk_diff, first, last)$/;"	f
parts	nvim/plugged/coc.nvim/build/index.js	/^                let parts = [];$/;"	A
parts	nvim/plugged/coc.nvim/build/index.js	/^                let parts = opt.name.split(\/,\\s*\/g).map(s => s.replace(\/\\s+.*\/g, ''));$/;"	F
parts	nvim/plugged/coc.nvim/build/index.js	/^  let parts = [$/;"	A
parts	nvim/plugged/coc.nvim/build/index.js	/^  var parts = [];$/;"	A
password	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			password: function(a){return "password"==a.type;},$/;"	M
password	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		password: null,$/;"	P
paste	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public async paste(): Promise<void> {$/;"	m
patch	nvim/plugged/coc.nvim/build/index.js	/^function patch (a, loose) {$/;"	F
patch	nvim/plugged/coc.nvim/build/index.js	/^function patch (fs) {$/;"	F
patchChange	nvim/plugged/coc.nvim/src/model/document.ts	/^  public async patchChange(): Promise<void> {$/;"	m
patchChangedTick	nvim/plugged/coc.nvim/src/model/document.ts	/^  public async patchChangedTick(): Promise<void> {$/;"	m
patchLchmod	nvim/plugged/coc.nvim/build/index.js	/^  function patchLchmod (fs) {$/;"	F
patchLine	nvim/plugged/coc.nvim/build/index.js	/^function patchLine(from, to, fill = ' ') {$/;"	F
patchLine	nvim/plugged/coc.nvim/src/util/diff.ts	/^export function patchLine(from: string, to: string, fill = ' '): string {$/;"	f
patchLutimes	nvim/plugged/coc.nvim/build/index.js	/^  function patchLutimes (fs) {$/;"	F
path	nvim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
path	nvim/plugged/coc.nvim/build/index.js	/^        path: segments,$/;"	P
path	nvim/plugged/coc.nvim/build/index.js	/^      path: ('PaxHeader\/' + path.basename(this.path)).slice(0, 99),$/;"	M
path	nvim/plugged/coc.nvim/build/index.js	/^var path = { sep: '\/' }$/;"	O
pathAbEmpty	nvim/plugged/coc.nvim/build/index.js	/^    var pathAbEmpty = '(?:\\\\\/' + segment + ')*';$/;"	V
pathAbsolute	nvim/plugged/coc.nvim/build/index.js	/^    var pathAbsolute = '\\\\\/(?:' + segmentNz + pathAbEmpty + ')?';$/;"	V
pathExists	nvim/plugged/coc.nvim/build/index.js	/^function pathExists (path) {$/;"	F
pathExt	nvim/plugged/coc.nvim/build/index.js	/^  var pathExt = ['']$/;"	A
pathExtExe	nvim/plugged/coc.nvim/build/index.js	/^    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')$/;"	M
pathExtExe	nvim/plugged/coc.nvim/build/index.js	/^  var pathExtExe = ''$/;"	V
pathRe	nvim/plugged/coc.nvim/build/index.js	/^const pathRe = \/(?:\\.{0,2}|~|\\$HOME|([\\w]+)|)\\\/(?:[\\w.@()-]+\\\/)*(?:[\\w.@()-])*$\/;$/;"	V
pathSize	nvim/plugged/coc.nvim/build/index.js	/^  const pathSize = 100$/;"	V
pattern	nvim/plugged/coc.nvim/build/index.js	/^            let pattern = '*';$/;"	V
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/MM\/,$/;"	P
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/O\/,$/;"	P
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/SSS\/,$/;"	P
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/dd\/,$/;"	P
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/hh\/,$/;"	P
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/mm\/,$/;"	P
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/ss\/,$/;"	P
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/y{1,4}\/,$/;"	P
patternLayout	nvim/plugged/coc.nvim/build/index.js	/^function patternLayout(pattern, tokens) {$/;"	F
patternListStack	nvim/plugged/coc.nvim/build/index.js	/^  var patternListStack = []$/;"	A
patterns	nvim/plugged/coc.nvim/build/index.js	/^        let patterns = [];$/;"	A
pause	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.pause = function () {$/;"	M
pauseNotification	nvim/plugged/coc.nvim/build/index.js	/^    pauseNotification() {$/;"	M
paused	nvim/plugged/coc.nvim/src/model/document.ts	/^  public paused = false$/;"	m
pcharOnly	nvim/plugged/coc.nvim/build/index.js	/^    var pcharOnly = '[' + pchar + ']';$/;"	V
pctEncoded	nvim/plugged/coc.nvim/build/index.js	/^    var pctEncoded = '%' + hexDigit;$/;"	V
peekDouble	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.peekDouble = function() {$/;"	M
peekInt	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.peekInt = function(size) {$/;"	M
peekString	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.peekString = function(size) {$/;"	M
percent	nvim/plugged/coc.nvim/build/index.js	/^  function percent() {$/;"	F
persistent	nvim/plugged/coc.nvim/build/index.js	/^            persistent: true,$/;"	P
phrasing_elements	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let phrasing_elements = ['a', 'em', 'strong', 'small', 'mark', 'abbr', 'dfn', 'i', 'b', 'u', 'code', 'var', 'samp', 'kbd', 'sup', 'sub', 'q', 'cite', 'span', 'bdo', 'bdi', 'br', 'wbr', 'ins', 'del', 'img', 'picture', 'embed', 'object', 'iframe', 'map', 'area', 'script', 'noscript', 'ruby', 'video', 'audio', 'input', 'textarea', 'select', 'button', 'label', 'output', 'datalist', 'keygen', 'progress', 'command', 'canvas', 'time', 'meter', 'data', 'content', 'shadow']$/;"	v
pickColor	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  public async pickColor(): Promise<void> {$/;"	m
pickColor	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async pickColor(): Promise<void> {$/;"	m
pickPresentation	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  public async pickPresentation(): Promise<void> {$/;"	m
pickPresentation	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async pickPresentation(): Promise<void> {$/;"	m
pid	nvim/plugged/coc.nvim/build/index.js	/^  function pid(loggingEvent) {$/;"	F
pid	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  private pid = 0$/;"	m
pipeName	nvim/plugged/coc.nvim/build/index.js	/^            let pipeName;$/;"	V
plTypes	nvim/plugged/coc.nvim/build/index.js	/^var plTypes = {$/;"	O
placeholder	nvim/plugged/coc.nvim/build/index.js	/^        const placeholder = new Placeholder(Number(index));$/;"	V
placeholder	nvim/plugged/coc.nvim/build/index.js	/^  var placeholder = {};$/;"	O
placeholder	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public get placeholder(): CocSnippetPlaceholder {$/;"	m
placeholderDefaultValues	nvim/plugged/coc.nvim/build/index.js	/^        const placeholderDefaultValues = new Map();$/;"	V
placeholderInfo	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get placeholderInfo(): { all: Placeholder[], last?: Placeholder } {$/;"	m
placeholders	nvim/plugged/coc.nvim/build/index.js	/^        let placeholders = this._placeholders.filter(o => o.index == index);$/;"	F
placeholders	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get placeholders(): Placeholder[] {$/;"	m
platform	nvim/plugged/coc.nvim/src/util/platform.ts	/^export const platform = _platform$/;"	v
pluck	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
plug#	nvim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	nvim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	nvim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	nvim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	nvim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	nvim/autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plugTs	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private plugTs = 0$/;"	m
plug_window_exists	nvim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
plugin	nvim/plugged/coc.nvim/build/index.js	/^    const plugin = new plugin_1.default(nvim);$/;"	V
plugin	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public plugin: Plugin$/;"	m
pluginRoot	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get pluginRoot(): string {$/;"	m
plugins	nvim/plugged/coc.nvim/webpack.config.js	/^  plugins: [$/;"	P
plural	nvim/plugged/coc.nvim/build/index.js	/^function plural(ms, msAbs, n, name) {$/;"	F
pm2InstanceVar	nvim/plugged/coc.nvim/build/index.js	/^let pm2InstanceVar = "NODE_APP_INSTANCE";$/;"	V
po_output	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:po_output(buf, file)$/;"	f
pointer	nvim/plugged/coc.nvim/build/index.js	/^  var pointer = 0;$/;"	V
pointerend	nvim/plugged/coc.nvim/build/index.js	/^  var pointerend = 0;$/;"	V
pointermin	nvim/plugged/coc.nvim/build/index.js	/^  var pointermin = 0;$/;"	V
pointerstart	nvim/plugged/coc.nvim/build/index.js	/^  var pointerstart = 0;$/;"	V
pop	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.pop = function () {$/;"	M
populate_extra_markdown_vars	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:populate_extra_markdown_vars()$/;"	f
populate_global_variables	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:populate_global_variables()$/;"	f
populate_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:populate_hunk_preview_window(header, body)$/;"	f
populate_wikilocal_options	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:populate_wikilocal_options()$/;"	f
popup	nvim/plugged/coc.nvim/build/index.js	/^    let popup = new Popup(nvim);$/;"	V
popup	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private popup: Popup$/;"	m
popup	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private popup: Popup$/;"	m
port	nvim/plugged/coc.nvim/build/index.js	/^      port: port,$/;"	P
pos	nvim/plugged/coc.nvim/build/index.js	/^        let pos = 0;$/;"	V
pos	nvim/plugged/coc.nvim/build/index.js	/^      let pos = 0$/;"	V
pos	nvim/plugged/coc.nvim/build/index.js	/^      var pos = 0;$/;"	V
pos	nvim/plugged/coc.nvim/build/index.js	/^    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 \/* Unknown *\/, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 \/* None *\/;$/;"	V
pos	nvim/plugged/coc.nvim/build/index.js	/^  let pos = 0$/;"	V
pos	nvim/plugged/coc.nvim/build/index.js	/^  var pos;$/;"	V
pos	nvim/plugged/coc.nvim/build/index.js	/^const pos = (buf) => {$/;"	F
pos	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public pos: number$/;"	m
pos	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:pos(mark)$/;"	f
pos	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let pos = match(a:line, '^\\s*'.vimwiki#vars#get_syntaxlocal('rxBold'))$/;"	v
position	nvim/plugged/coc.nvim/build/index.js	/^        let position = 'bottom';$/;"	V
position	nvim/plugged/coc.nvim/build/index.js	/^        let position = { line: cursor[0], character: cursor[1] };$/;"	O
position	nvim/plugged/coc.nvim/build/index.js	/^        this.position = {$/;"	P
position	nvim/plugged/coc.nvim/build/index.js	/^    let position = 0$/;"	V
position	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^    private position: Position,$/;"	m
position	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	position: function() {$/;"	M
positionAt	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.positionAt = function (offset) {$/;"	M
positionInRange	nvim/plugged/coc.nvim/build/index.js	/^function positionInRange(position, range) {$/;"	F
positionInRange	nvim/plugged/coc.nvim/src/util/position.ts	/^export function positionInRange(position: Position, range: Range): number {$/;"	f
positionToOffset	nvim/plugged/coc.nvim/build/index.js	/^function positionToOffset(lines, line, character) {$/;"	F
positionToOffset	nvim/plugged/coc.nvim/src/util/position.ts	/^export function positionToOffset(lines: string[], line: number, character: number): number {$/;"	f
positions	nvim/plugged/coc.nvim/build/index.js	/^            let positions = [];$/;"	A
positions	nvim/plugged/coc.nvim/build/index.js	/^        let positions = [];$/;"	A
positions	nvim/plugged/coc.nvim/build/index.js	/^    let positions = new Array(n);$/;"	V
positions	nvim/plugged/coc.nvim/build/index.js	/^function positions(needle, haystack) {$/;"	F
positions	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  private positions: [number, number, number?][] = []$/;"	m
positions	nvim/plugged/coc.nvim/src/util/fzy.ts	/^export function positions(needle: string, haystack: string): number[] {$/;"	f
posix	nvim/plugged/coc.nvim/build/index.js	/^function posix(path) {$/;"	F
post	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	post: function( url, data, callback, type ) {$/;"	M
poviderById	nvim/plugged/coc.nvim/build/index.js	/^    poviderById(id) {$/;"	M
poviderById	nvim/plugged/coc.nvim/src/provider/manager.ts	/^  protected poviderById(id): T {$/;"	m
pre	nvim/plugged/coc.nvim/build/index.js	/^    let pre = newLines.length == 1 && start.line != end.line ? start.character : 0;$/;"	V
preCount	nvim/plugged/coc.nvim/build/index.js	/^            let preCount = 0;$/;"	V
preCount	nvim/plugged/coc.nvim/build/index.js	/^        let preCount = 0;$/;"	V
preCount	nvim/plugged/coc.nvim/src/cursors/range.ts	/^    public preCount: number) {$/;"	m
preProcessingListeners	nvim/plugged/coc.nvim/build/index.js	/^const preProcessingListeners = [];$/;"	A
precompute_bonus	nvim/plugged/coc.nvim/build/index.js	/^function precompute_bonus(haystack) {$/;"	F
precompute_bonus	nvim/plugged/coc.nvim/src/util/fzy.ts	/^function precompute_bonus(haystack): number[] {$/;"	f
preferComplete	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private preferComplete = false$/;"	m
preferTop	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^    private preferTop = false,$/;"	m
preferences	nvim/plugged/coc.nvim/build/index.js	/^        this.preferences = {$/;"	P
preferences	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private preferences: Preferences$/;"	m
prefix	nvim/plugged/coc.nvim/build/index.js	/^            let prefix = '+';$/;"	V
prefix	nvim/plugged/coc.nvim/build/index.js	/^    this.prefix = (opt.prefix || '').replace(\/(\\\\|\\\/)+$\/, '')$/;"	M
prefix	nvim/plugged/coc.nvim/build/index.js	/^    var prefix = "  ".concat(colorCode, ";1m").concat(name, " \\x1B[0m");$/;"	V
prefix	nvim/plugged/coc.nvim/build/index.js	/^    var prefix = ''$/;"	V
prefix	nvim/plugged/coc.nvim/build/index.js	/^  let prefix = ''$/;"	V
prefix	nvim/plugged/coc.nvim/build/index.js	/^const prefix = '[coc.nvim] ';$/;"	V
prefix_zero	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:prefix_zero(num)$/;"	f
prepare	nvim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
prepareProvider	nvim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^      prepareProvider: true$/;"	P
prepareRename	nvim/plugged/coc.nvim/build/index.js	/^        let prepareRename = (document, position, token) => {$/;"	F
prepareRename	nvim/plugged/coc.nvim/src/languages.ts	/^  public async prepareRename(document: TextDocument, position: Position): Promise<Range | { range: Range; placeholder: string } | false> {$/;"	m
prepareRename	nvim/plugged/coc.nvim/src/provider/renameManager.ts	/^  public async prepareRename($/;"	m
prepend	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prepend: function() {$/;"	M
prependTo	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prependTo: "prepend",$/;"	P
prepend_opts	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
prerelease	nvim/plugged/coc.nvim/build/index.js	/^function prerelease (version, options) {$/;"	F
preselect	nvim/plugged/coc.nvim/build/index.js	/^        let preselect = this.config.enablePreselect ? items.findIndex(o => o.preselect == true) : -1;$/;"	F
preselectSupport	nvim/plugged/coc.nvim/build/index.js	/^            preselectSupport: true$/;"	P
prev	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prev: function(elem){return jQuery.nth(elem,2,"previousSibling");},$/;"	M
prevAll	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prevAll: function(elem){return jQuery.dir(elem,"previousSibling");},$/;"	M
prevTime	nvim/plugged/coc.nvim/build/index.js	/^		let prevTime;$/;"	V
prevTime	nvim/plugged/coc.nvim/build/index.js	/^    var prevTime;$/;"	V
prev_default_command	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let prev_default_command = $FZF_DEFAULT_COMMAND$/;"	v
prev_ends_with	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:prev_ends_with(context, expr)$/;"	f
prev_starts_with	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:prev_starts_with(context, expr)$/;"	f
preventDefault	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					preventDefault: function(){},$/;"	M
preventDefault	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		event.preventDefault = function() {$/;"	M
preview	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public async preview(): Promise<void> {$/;"	m
preview	nvim/plugged/coc.nvim/src/list/basic.ts	/^  public async preview(options: PreiewOptions, context: ListContext): Promise<void> {$/;"	m
preview	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:preview(hunk_diff)$/;"	f
previewBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark)$/;"	f
previewHeight	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected get previewHeight(): number {$/;"	m
previewHover	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private async previewHover(hovers: Hover[]): Promise<void> {$/;"	m
previewLocation	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected async previewLocation(location: Location, context: ListContext): Promise<void> {$/;"	m
previewNodeCurrent	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node)$/;"	f
previewNodeHSplit	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node)$/;"	f
previewNodeVSplit	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node)$/;"	f
preview_commit	nvim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
previous	nvim/plugged/coc.nvim/build/index.js	/^    previous() {$/;"	M
previous	nvim/plugged/coc.nvim/build/index.js	/^  var previous;$/;"	V
previous	nvim/plugged/coc.nvim/src/list/history.ts	/^  public previous(): void {$/;"	m
previous	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async previous(): Promise<void> {$/;"	m
previousKey	nvim/plugged/coc.nvim/src/list/configuration.ts	/^  public get previousKey(): string {$/;"	m
previousNode	nvim/plugged/coc.nvim/build/index.js	/^        previousNode: previousNode,$/;"	P
previousNodeInst	nvim/plugged/coc.nvim/build/index.js	/^    var previousNodeInst = {$/;"	O
previousParents	nvim/plugged/coc.nvim/build/index.js	/^    var previousParents = [];$/;"	A
previousPlaceholder	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public async previousPlaceholder(): Promise<void> {$/;"	m
previousPlaceholder	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public async previousPlaceholder(): Promise<void> {$/;"	m
previous_token	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:previous_token()$/;"	f
prevnonblanknoncomment	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
primitives	nvim/plugged/coc.nvim/build/index.js	/^  function primitives(value) {$/;"	F
printParseErrorCode	nvim/plugged/coc.nvim/build/index.js	/^function printParseErrorCode(code) {$/;"	F
print_help	nvim/plugged/ale/test/script/custom-linting-rules	/^function print_help() {$/;"	f
print_wiki_list	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:print_wiki_list()$/;"	f
priority	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get priority(): number {$/;"	m
proc	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public proc: cp.ChildProcess$/;"	m
process	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.process = function(synchronous) {$/;"	M
process	nvim/plugged/coc.nvim/src/handler/search.ts	/^  private process: ChildProcess$/;"	m
processData	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		processData: true,$/;"	P
processGid	nvim/plugged/coc.nvim/build/index.js	/^    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ?$/;"	M
processId	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  public get processId(): Promise<number> {$/;"	m
processLater	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.processLater = function() {$/;"	M
processMessageQueue	nvim/plugged/coc.nvim/build/index.js	/^    function processMessageQueue() {$/;"	F
processUid	nvim/plugged/coc.nvim/build/index.js	/^    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ?$/;"	M
process_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_date	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_date(placeholders, default_date)$/;"	f
process_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_hunk(bufnr, hunk) abort$/;"	f
process_inline_tags	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_inline_tags(line, header_ids)$/;"	f
process_modified	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_removed(modifications, from_count, to_count, to_line) abort$/;"	f
process_options_file	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
process_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_removed(modifications, from_count, to_count, to_line) abort$/;"	f
process_tag_def_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_def_list(line, deflist)$/;"	f
process_tag_h	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_h(line, id)$/;"	f
process_tag_hr	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_hr(line)$/;"	f
process_tag_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_list(line, lists)$/;"	f
process_tag_math	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_math(line, math)$/;"	f
process_tag_para	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_para(line, para)$/;"	f
process_tag_pre	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_pre(line, pre)$/;"	f
process_tag_quote	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_quote(line, quote)$/;"	f
process_tag_table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_table(line, table, header_ids)$/;"	f
process_tags_links	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tags_links(line)$/;"	f
process_tags_remove_links	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tags_remove_links(line)$/;"	f
process_tags_typefaces	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tags_typefaces(line, header_ids)$/;"	f
process_title	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_title(placeholders, default_title)$/;"	f
process_user_input	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:process_user_input()$/;"	f
processed	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let processed = 1$/;"	v
processed	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let processed = 0$/;"	v
progress_bar	nvim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	nvim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
project	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def project do$/;"	f	class:example
project	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def project do$/;"	f	class:example.project.config.test.test.test
project	nvim/plugged/vim-elixir/spec/syntax/atom_spec.rb	/^    def project do$/;"	f
promise	nvim/plugged/coc.nvim/build/index.js	/^        let promise = new Promise(async (resolve, reject) => {$/;"	F
promise	nvim/plugged/coc.nvim/build/index.js	/^        let promise = new Promise(async (resolve, reject) => {$/;"	V
promise	nvim/plugged/coc.nvim/build/index.js	/^  const promise = new Promise((res, rej) => {$/;"	F
promise	nvim/plugged/coc.nvim/build/index.js	/^  const promise = new Promise((res, rej) => {$/;"	V
promise	nvim/plugged/coc.nvim/build/index.js	/^  const promise = new Promise((resolve, reject) => {$/;"	F
promise	nvim/plugged/coc.nvim/build/index.js	/^  const promise = new Promise((resolve, reject) => {$/;"	V
promise	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private promise = Promise.resolve(void 0)$/;"	m
promise	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^  private promise: Promise<boolean>$/;"	m
prompt	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public prompt: Prompt$/;"	m
promptToDelBuffer	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
prop	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prop: function( elem, value, type, i, name ) {$/;"	M
properties	nvim/plugged/coc.nvim/build/index.js	/^                        properties: {$/;"	P
properties	nvim/plugged/coc.nvim/build/index.js	/^        let properties = symbols.filter(s => s.kind == 'Property');$/;"	F
props	nvim/plugged/coc.nvim/build/index.js	/^                let props = {};$/;"	O
props	nvim/plugged/coc.nvim/build/index.js	/^            let props = {};$/;"	O
props	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = name == "width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ];$/;"	V
props	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var props = "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode metaKey newValue originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target timeStamp toElement type view wheelDelta which".split(" ");$/;"	V
props	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	props: {$/;"	P
props	nvim/plugged/vim-jsdoc/test/flow.js	/^  props: Bar$/;"	P
prototype	nvim/plugged/coc.nvim/build/index.js	/^Int64.prototype = {$/;"	P
prototype.add_raw	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_raw(text) dict$/;"	f
prototype.add_section	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section(group, contents) dict$/;"	f
prototype.add_section_spaced	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section_spaced(group, contents) dict$/;"	f
prototype.build	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.build() dict$/;"	f
prototype.build	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.build() dict$/;"	f
prototype.get_position	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.get_position() dict$/;"	f
prototype.insert_raw	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_raw(text, position) dict$/;"	f
prototype.insert_section	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_section(group, contents, position) dict$/;"	f
prototype.insert_titles	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.insert_titles(current, first, last) dict$/;"	f
prototype.split	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.split(...) dict$/;"	f
prototype.try_insert_title	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.try_insert_title(index, group, pos, sep_size, force) dict$/;"	f
provideCodeActions	nvim/plugged/coc.nvim/build/index.js	/^            provideCodeActions: (document, range, context, token) => {$/;"	M
provideCodeActions	nvim/plugged/coc.nvim/build/index.js	/^        let provideCodeActions = (document, range, context, token) => {$/;"	F
provideCodeActions	nvim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^  public async provideCodeActions($/;"	m
provideCodeLenses	nvim/plugged/coc.nvim/build/index.js	/^            provideCodeLenses: (document, token) => {$/;"	M
provideCodeLenses	nvim/plugged/coc.nvim/build/index.js	/^        let provideCodeLenses = (document, token) => {$/;"	F
provideCodeLenses	nvim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^  public async provideCodeLenses($/;"	m
provideColorPresentations	nvim/plugged/coc.nvim/build/index.js	/^            provideColorPresentations: (color, context, token) => {$/;"	M
provideColorPresentations	nvim/plugged/coc.nvim/build/index.js	/^        let provideColorPresentations = (color, context, token) => {$/;"	F
provideColorPresentations	nvim/plugged/coc.nvim/src/languages.ts	/^  public async provideColorPresentations(color: ColorInformation, document: TextDocument, ): Promise<ColorPresentation[]> {$/;"	m
provideColorPresentations	nvim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^  public async provideColorPresentations(colorInformation: ColorInformation, document: TextDocument, token: CancellationToken): Promise<ColorPresentation[]> {$/;"	m
provideCompletionItems	nvim/plugged/coc.nvim/build/index.js	/^            provideCompletionItems: (document, position, token, context) => {$/;"	M
provideCompletionItems	nvim/plugged/coc.nvim/build/index.js	/^        let provideCompletionItems = (document, position, context, token) => {$/;"	F
provideDeclaration	nvim/plugged/coc.nvim/build/index.js	/^            provideDeclaration: (document, position, token) => {$/;"	M
provideDeclaration	nvim/plugged/coc.nvim/build/index.js	/^        let provideDeclaration = (document, position, token) => {$/;"	F
provideDeclaration	nvim/plugged/coc.nvim/src/provider/declarationManager.ts	/^  public async provideDeclaration($/;"	m
provideDefinition	nvim/plugged/coc.nvim/build/index.js	/^            provideDefinition: (document, position, token) => {$/;"	M
provideDefinition	nvim/plugged/coc.nvim/build/index.js	/^        let provideDefinition = (document, position, token) => {$/;"	F
provideDefinition	nvim/plugged/coc.nvim/src/provider/definitionManager.ts	/^  public async provideDefinition($/;"	m
provideDocumentColors	nvim/plugged/coc.nvim/build/index.js	/^            provideDocumentColors: (document, token) => {$/;"	M
provideDocumentColors	nvim/plugged/coc.nvim/build/index.js	/^        let provideDocumentColors = (document, token) => {$/;"	F
provideDocumentColors	nvim/plugged/coc.nvim/src/languages.ts	/^  public async provideDocumentColors(document: TextDocument): Promise<ColorInformation[] | null> {$/;"	m
provideDocumentColors	nvim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^  public async provideDocumentColors(document: TextDocument, token: CancellationToken): Promise<ColorInformation[] | null> {$/;"	m
provideDocumentFormattingEdits	nvim/plugged/coc.nvim/build/index.js	/^            provideDocumentFormattingEdits: (document, options, token) => {$/;"	M
provideDocumentFormattingEdits	nvim/plugged/coc.nvim/build/index.js	/^        let provideDocumentFormattingEdits = (document, options, token) => {$/;"	F
provideDocumentFormattingEdits	nvim/plugged/coc.nvim/src/languages.ts	/^  public async provideDocumentFormattingEdits(document: TextDocument, options: FormattingOptions): Promise<TextEdit[]> {$/;"	m
provideDocumentFormattingEdits	nvim/plugged/coc.nvim/src/provider/formatManager.ts	/^  public async provideDocumentFormattingEdits($/;"	m
provideDocumentHighlights	nvim/plugged/coc.nvim/build/index.js	/^            provideDocumentHighlights: (document, position, token) => {$/;"	M
provideDocumentHighlights	nvim/plugged/coc.nvim/build/index.js	/^        let provideDocumentHighlights = (document, position, token) => {$/;"	F
provideDocumentHighlights	nvim/plugged/coc.nvim/src/provider/documentHighlightManager.ts	/^  public async provideDocumentHighlights($/;"	m
provideDocumentLinks	nvim/plugged/coc.nvim/build/index.js	/^            provideDocumentLinks: (document, token) => {$/;"	M
provideDocumentLinks	nvim/plugged/coc.nvim/build/index.js	/^        let provideDocumentLinks = (document, token) => {$/;"	F
provideDocumentLinks	nvim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  public async provideDocumentLinks(document: TextDocument, token: CancellationToken): Promise<DocumentLink[]> {$/;"	m
provideDocumentOnTypeEdits	nvim/plugged/coc.nvim/src/languages.ts	/^  public async provideDocumentOnTypeEdits(character: string, document: TextDocument, position: Position): Promise<TextEdit[] | null> {$/;"	m
provideDocumentRangeFormattingEdits	nvim/plugged/coc.nvim/build/index.js	/^            provideDocumentRangeFormattingEdits: (document, range, options, token) => {$/;"	M
provideDocumentRangeFormattingEdits	nvim/plugged/coc.nvim/build/index.js	/^        let provideDocumentRangeFormattingEdits = (document, range, options, token) => {$/;"	F
provideDocumentRangeFormattingEdits	nvim/plugged/coc.nvim/src/languages.ts	/^  public async provideDocumentRangeFormattingEdits(document: TextDocument, range: Range, options: FormattingOptions): Promise<TextEdit[]> {$/;"	m
provideDocumentRangeFormattingEdits	nvim/plugged/coc.nvim/src/provider/formatRangeManager.ts	/^  public async provideDocumentRangeFormattingEdits($/;"	m
provideDocumentSymbols	nvim/plugged/coc.nvim/build/index.js	/^            provideDocumentSymbols: (document, token) => {$/;"	M
provideDocumentSymbols	nvim/plugged/coc.nvim/build/index.js	/^        let provideDocumentSymbols = (document, token) => {$/;"	F
provideDocumentSymbols	nvim/plugged/coc.nvim/src/provider/documentSymbolManager.ts	/^  public async provideDocumentSymbols($/;"	m
provideFoldingRanges	nvim/plugged/coc.nvim/build/index.js	/^            provideFoldingRanges(document, context, token) {$/;"	M
provideFoldingRanges	nvim/plugged/coc.nvim/build/index.js	/^        let provideFoldingRanges = (document, _, token) => {$/;"	F
provideFoldingRanges	nvim/plugged/coc.nvim/src/languages.ts	/^  public async provideFoldingRanges(document: TextDocument, context: FoldingContext): Promise<FoldingRange[] | null> {$/;"	m
provideFoldingRanges	nvim/plugged/coc.nvim/src/provider/foldingRangeManager.ts	/^  public async provideFoldingRanges(document: TextDocument, context: FoldingContext, token: CancellationToken): Promise<FoldingRange[] | null> {$/;"	m
provideHover	nvim/plugged/coc.nvim/build/index.js	/^            provideHover: (document, position, token) => {$/;"	M
provideHover	nvim/plugged/coc.nvim/build/index.js	/^        let provideHover = (document, position, token) => {$/;"	F
provideHover	nvim/plugged/coc.nvim/src/provider/hoverManager.ts	/^  public async provideHover($/;"	m
provideImplementation	nvim/plugged/coc.nvim/build/index.js	/^            provideImplementation: (document, position, token) => {$/;"	M
provideImplementation	nvim/plugged/coc.nvim/build/index.js	/^        let provideImplementation = (document, position, token) => {$/;"	F
provideOnTypeFormattingEdits	nvim/plugged/coc.nvim/build/index.js	/^            provideOnTypeFormattingEdits: (document, position, ch, options, token) => {$/;"	M
provideOnTypeFormattingEdits	nvim/plugged/coc.nvim/build/index.js	/^        let provideOnTypeFormattingEdits = (document, position, ch, options, token) => {$/;"	F
provideReferences	nvim/plugged/coc.nvim/build/index.js	/^            provideReferences: (document, position, options, token) => {$/;"	M
provideReferences	nvim/plugged/coc.nvim/src/provider/implementationManager.ts	/^  public async provideReferences($/;"	m
provideReferences	nvim/plugged/coc.nvim/src/provider/referenceManager.ts	/^  public async provideReferences($/;"	m
provideRenameEdits	nvim/plugged/coc.nvim/build/index.js	/^            provideRenameEdits: (document, position, newName, token) => {$/;"	M
provideRenameEdits	nvim/plugged/coc.nvim/build/index.js	/^        let provideRenameEdits = (document, position, newName, token) => {$/;"	F
provideRenameEdits	nvim/plugged/coc.nvim/src/languages.ts	/^  public async provideRenameEdits(document: TextDocument, position: Position, newName: string): Promise<WorkspaceEdit> {$/;"	m
provideRenameEdits	nvim/plugged/coc.nvim/src/provider/renameManager.ts	/^  public async provideRenameEdits($/;"	m
provideSelectionRanges	nvim/plugged/coc.nvim/src/provider/rangeManager.ts	/^  public async provideSelectionRanges($/;"	m
provideSignatureHelp	nvim/plugged/coc.nvim/build/index.js	/^            provideSignatureHelp: (document, position, token) => {$/;"	M
provideSignatureHelp	nvim/plugged/coc.nvim/src/provider/signatureManager.ts	/^  public async provideSignatureHelp($/;"	m
provideTypeDefinition	nvim/plugged/coc.nvim/build/index.js	/^            provideTypeDefinition: (document, position, token) => {$/;"	M
provideTypeDefinition	nvim/plugged/coc.nvim/build/index.js	/^        let provideTypeDefinition = (document, position, token) => {$/;"	F
provideTypeDefinition	nvim/plugged/coc.nvim/src/provider/typeDefinitionManager.ts	/^  public async provideTypeDefinition($/;"	m
provideWorkspaceSymbols	nvim/plugged/coc.nvim/build/index.js	/^            provideWorkspaceSymbols: (query, token) => {$/;"	M
provideWorkspaceSymbols	nvim/plugged/coc.nvim/build/index.js	/^        let provideWorkspaceSymbols = (query, token) => {$/;"	F
provideWorkspaceSymbols	nvim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^  public async provideWorkspaceSymbols($/;"	m
provider	nvim/plugged/coc.nvim/build/index.js	/^        let provider = {$/;"	O
providerItem	nvim/plugged/coc.nvim/build/index.js	/^        let providerItem;$/;"	V
providerReferences	nvim/plugged/coc.nvim/build/index.js	/^        let providerReferences = (document, position, options, token) => {$/;"	F
providerSignatureHelp	nvim/plugged/coc.nvim/build/index.js	/^        let providerSignatureHelp = (document, position, token) => {$/;"	F
providers	nvim/plugged/coc.nvim/src/provider/manager.ts	/^  protected providers: Set<ProviderItem<T>> = new Set()$/;"	m
providers	nvim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  private providers: Set<ProviderItem> = new Set()$/;"	m
proxy	nvim/plugged/coc.nvim/build/index.js	/^                proxy: {$/;"	P
proxy	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	proxy: function( fn, proxy ){$/;"	M
proxyAuth	nvim/plugged/coc.nvim/build/index.js	/^                    proxyAuth: auth$/;"	P
pull	nvim/plugged/coc.nvim/build/index.js	/^    pull: pull,$/;"	P
pull	nvim/plugged/coc.nvim/build/index.js	/^  function pull() {$/;"	F
pull	nvim/plugged/coc.nvim/build/index.js	/^function pull() {$/;"	F
pumAlignTop	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private pumAlignTop = false$/;"	m
pumvisible	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async pumvisible(): Promise<boolean> {$/;"	m
push	nvim/plugged/coc.nvim/build/index.js	/^    push(key, data) {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^    push: push,$/;"	P
push	nvim/plugged/coc.nvim/build/index.js	/^  decoder.push = function(chunk) {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^  encoder.push = function(chunk) {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^Decoder.prototype.push = function(chunk) {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.push = function () {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^function push (self, item) {$/;"	F
push	nvim/plugged/coc.nvim/build/index.js	/^function push(chunk) {$/;"	F
push	nvim/plugged/coc.nvim/src/model/db.ts	/^  public push(key: string, data: number | null | boolean | string | { [index: string]: any }): void {$/;"	m
pushNode	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.pushNode = function (node) {$/;"	M
pushStack	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	pushStack: function( elems ) {$/;"	M
q	nvim/plugged/ale/ftplugin/ale-fix-suggest.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	nvim/plugged/ale/ftplugin/ale-preview.vim	/^noremap <buffer> q :q!<CR>$/;"	m
qmark	nvim/plugged/coc.nvim/build/index.js	/^var qmark = '[^\/]'$/;"	V
query_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:query_path(root) abort$/;"	f
queue	nvim/plugged/coc.nvim/build/index.js	/^  var queue = []$/;"	A
queue	nvim/plugged/coc.nvim/build/index.js	/^var queue = []$/;"	A
queue	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	queue: function(type, fn){$/;"	M
queue	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var queue = function( elem, type, array ) {$/;"	F
quickExpr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var quickExpr = \/^[^<]*(<(.|\\s)+>)[^>]*$|^#(\\w+)$\/,$/;"	V
quickfixItems	nvim/plugged/coc.nvim/build/index.js	/^                let quickfixItems = await Promise.all(items.map(item => {$/;"	F
quit	nvim/plugged/coc.nvim/build/index.js	/^    quit() {$/;"	M
r	nvim/plugged/coc.nvim/build/index.js	/^	let r;$/;"	V
r	nvim/plugged/coc.nvim/build/index.js	/^    r: startTime,$/;"	P
r	nvim/plugged/coc.nvim/build/index.js	/^  var r;$/;"	V
r	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var r = [];$/;"	A
r	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var r = [];$/;"	A
radio	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			radio: function(a){return "radio"==a.type;},$/;"	M
raise	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.raise = function(reason) {$/;"	M
rand	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:rand(max) abort$/;"	f
random_theme	nvim/plugged/vim-airline/plugin/airline.vim	/^function! s:random_theme() abort$/;"	f
range	nvim/plugged/coc.nvim/build/index.js	/^                    range: { start, end },$/;"	P
range	nvim/plugged/coc.nvim/build/index.js	/^            let range = item ? item.ranges.find(o => o.lnum == lnum) : null;$/;"	F
range	nvim/plugged/coc.nvim/build/index.js	/^            range: range,$/;"	P
range	nvim/plugged/coc.nvim/build/index.js	/^        let range = {$/;"	O
range	nvim/plugged/coc.nvim/build/index.js	/^        let range;$/;"	V
range	nvim/plugged/coc.nvim/build/index.js	/^function range(a, b, str) {$/;"	F
range	nvim/plugged/coc.nvim/src/cursors/range.ts	/^  public get range(): Range {$/;"	m
range	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public get range(): Range {$/;"	m
rangeCount	nvim/plugged/coc.nvim/src/__tests__/modules/cursors.test.ts	/^function rangeCount(): number {$/;"	f
rangeEnd	nvim/plugged/coc.nvim/build/index.js	/^    var rangeEnd;$/;"	V
rangeInRange	nvim/plugged/coc.nvim/build/index.js	/^function rangeInRange(r, range) {$/;"	F
rangeInRange	nvim/plugged/coc.nvim/src/util/position.ts	/^export function rangeInRange(r: Range, range: Range): boolean {$/;"	f
rangeIntersect	nvim/plugged/coc.nvim/build/index.js	/^function rangeIntersect(r, range) {$/;"	F
rangeIntersect	nvim/plugged/coc.nvim/src/util/position.ts	/^export function rangeIntersect(r: Range, range: Range): boolean {$/;"	f
rangeObj	nvim/plugged/coc.nvim/build/index.js	/^    var rangeObj = new Range(range, options)$/;"	V
rangeOverlap	nvim/plugged/coc.nvim/build/index.js	/^function rangeOverlap(r, range) {$/;"	F
rangeOverlap	nvim/plugged/coc.nvim/src/util/position.ts	/^export function rangeOverlap(r: Range, range: Range): boolean {$/;"	f
rangeStart	nvim/plugged/coc.nvim/build/index.js	/^    var rangeStart;$/;"	V
ranges	nvim/plugged/coc.nvim/build/index.js	/^                    ranges: [range]$/;"	P
ranges	nvim/plugged/coc.nvim/build/index.js	/^                let ranges = [];$/;"	A
ranges	nvim/plugged/coc.nvim/build/index.js	/^            let ranges = [];$/;"	A
ranges	nvim/plugged/coc.nvim/build/index.js	/^            let ranges = diagnostics.map(o => o.range);$/;"	F
ranges	nvim/plugged/coc.nvim/build/index.js	/^            let ranges = this.ranges.map(o => o.currRange);$/;"	F
ranges	nvim/plugged/coc.nvim/build/index.js	/^        let ranges = [];$/;"	A
ranges	nvim/plugged/coc.nvim/build/index.js	/^    let ranges = [];$/;"	A
ranges	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private ranges: TextRange[] = []$/;"	m
ranges	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public ranges: Range[] = []$/;"	m
rate_to_state	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:rate_to_state(rate)$/;"	f
raw	nvim/plugged/coc.nvim/build/index.js	/^  function raw(encoder, value) {$/;"	F
raw	nvim/plugged/coc.nvim/build/index.js	/^const raw = [$/;"	A
raw_head_size	nvim/plugged/coc.nvim/build/index.js	/^  function raw_head_size(length) {$/;"	F
rcompare	nvim/plugged/coc.nvim/build/index.js	/^function rcompare (a, b, loose) {$/;"	F
rcompareIdentifiers	nvim/plugged/coc.nvim/build/index.js	/^function rcompareIdentifiers (a, b) {$/;"	F
rdfa_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let rdfa_attributes = {'about': [], 'content': [], 'datatype': [], 'prefix': [], 'profile': [], 'property': [], 'resource': [], 'rel': relrev, 'rev': relrev, 'typeof': [], 'vocab': []}$/;"	v
rdfa_attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let rdfa_attributes_value = {$/;"	v
re	nvim/plugged/coc.nvim/build/index.js	/^  var re = ''$/;"	V
re	nvim/plugged/coc.nvim/build/index.js	/^  var re = \/^\\[([^\\]]*)\\]$|^([^=]+)(=(.*))?$\/i$/;"	V
read	nvim/plugged/coc.nvim/build/index.js	/^    function read (fd, buffer, offset, length, position, callback_) {$/;"	F
read	nvim/plugged/coc.nvim/build/index.js	/^    read: read,$/;"	P
read	nvim/plugged/coc.nvim/build/index.js	/^  fs.read = (function (fs$read) { return function (fd, buffer, offset, length, position, callback_) {$/;"	M
read	nvim/plugged/coc.nvim/build/index.js	/^  fs.read = (function (fs$read) {$/;"	M
read	nvim/plugged/coc.nvim/build/index.js	/^exports.read = function (buffer, offset, isLE, mLen, nBytes) {$/;"	M
read	nvim/plugged/coc.nvim/build/index.js	/^exports.read = function (fd, buffer, offset, length, position, callback) {$/;"	M
read	nvim/plugged/coc.nvim/build/index.js	/^function read() {$/;"	F
read	nvim/plugged/coc.nvim/build/index.js	/^function read(len, method) {$/;"	F
readAdvance	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readAdvance = function(size) {$/;"	M
readAvail	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readAvail = function() {$/;"	M
readDouble	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readDouble = function() {$/;"	M
readDoubleBE	nvim/plugged/coc.nvim/build/index.js	/^function readDoubleBE(start) {$/;"	F
readErrorHandler	nvim/plugged/coc.nvim/build/index.js	/^    function readErrorHandler(error) {$/;"	F
readFile	nvim/plugged/coc.nvim/build/index.js	/^  function readFile (path, options, cb) {$/;"	F
readFile	nvim/plugged/coc.nvim/build/index.js	/^  readFile: readFile,$/;"	P
readFile	nvim/plugged/coc.nvim/build/index.js	/^function readFile (file, options, callback) {$/;"	F
readFile	nvim/plugged/coc.nvim/build/index.js	/^function readFile(fullpath, encoding) {$/;"	F
readFile	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function readFile(fullpath: string, encoding: string): Promise<string> {$/;"	f
readFile	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async readFile(uri: string): Promise<string> {$/;"	m
readFileLine	nvim/plugged/coc.nvim/build/index.js	/^function readFileLine(fullpath, count) {$/;"	F
readFileLine	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function readFileLine(fullpath: string, count: number): Promise<string> {$/;"	f
readFileLines	nvim/plugged/coc.nvim/build/index.js	/^function readFileLines(fullpath, start, end) {$/;"	F
readFileLines	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function readFileLines(fullpath: string, start: number, end: number): Promise<string[]> {$/;"	f
readFileSync	nvim/plugged/coc.nvim/build/index.js	/^  readFileSync: readFileSync,$/;"	P
readFileSync	nvim/plugged/coc.nvim/build/index.js	/^function readFileSync (file, options) {$/;"	F
readFloatBE	nvim/plugged/coc.nvim/build/index.js	/^function readFloatBE(start) {$/;"	F
readFormat	nvim/plugged/coc.nvim/build/index.js	/^  var readFormat = {$/;"	O
readInt	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readInt = function(bytes) {$/;"	M
readInt32	nvim/plugged/coc.nvim/build/index.js	/^    function readInt32(buffer, offset) {$/;"	F
readInt64BE	nvim/plugged/coc.nvim/build/index.js	/^function readInt64BE(start) {$/;"	F
readInt64BE_int64	nvim/plugged/coc.nvim/build/index.js	/^function readInt64BE_int64(start) {$/;"	F
readSize	nvim/plugged/coc.nvim/build/index.js	/^          readSize: readSize,$/;"	P
readSize	nvim/plugged/coc.nvim/build/index.js	/^    readSize: readSize,$/;"	P
readString	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readString = function(size) {$/;"	M
readSync	nvim/plugged/coc.nvim/build/index.js	/^  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {$/;"	M
readUInt64BE	nvim/plugged/coc.nvim/build/index.js	/^function readUInt64BE(start) {$/;"	F
readUInt64BE_int64	nvim/plugged/coc.nvim/build/index.js	/^function readUInt64BE_int64(start) {$/;"	F
read_captions	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:read_captions(files)$/;"	f
read_global_settings_from_user	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:read_global_settings_from_user()$/;"	f
readdir	nvim/plugged/coc.nvim/build/index.js	/^  function readdir (path, options, cb) {$/;"	F
readdir	nvim/plugged/coc.nvim/build/index.js	/^  readdir = (path, options, cb) => fs.readdir(path, cb)$/;"	M
readdir	nvim/plugged/coc.nvim/build/index.js	/^let readdir = (path, options, cb) => fs.readdir(path, options, cb)$/;"	F
readdirAsync	nvim/plugged/coc.nvim/src/util/fs.ts	/^export const readdirAsync = util.promisify(fs.readdir)$/;"	v
readdirCb	nvim/plugged/coc.nvim/build/index.js	/^function readdirCb (self, abs, cb) {$/;"	F
readdirSync	nvim/plugged/coc.nvim/build/index.js	/^let readdirSync = (path, options) => fs.readdirSync(path, options)$/;"	F
reader	nvim/plugged/coc.nvim/build/index.js	/^                        reader: client,$/;"	P
reader	nvim/plugged/coc.nvim/build/index.js	/^    let reader;$/;"	V
readonly	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		readonly: "readOnly",$/;"	P
ready	nvim/plugged/coc.nvim/build/index.js	/^    ready() {$/;"	M
ready	nvim/plugged/coc.nvim/src/extensions.ts	/^  public ready = true$/;"	m
ready	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public get ready(): Promise<void> {$/;"	m
ready	nvim/plugged/coc.nvim/src/plugin.ts	/^  public get ready(): Promise<void> {$/;"	m
ready	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^  public ready(): Promise<any> {$/;"	m
ready	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get ready(): Promise<void> {$/;"	m
ready	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		ready: {$/;"	P
ready	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ready: function() {$/;"	M
ready	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ready: function(fn) {$/;"	M
readyList	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	readyList: [],$/;"	P
realpath	nvim/plugged/coc.nvim/build/index.js	/^exports.realpath = function realpath(p, cache, cb) {$/;"	M
realpath	nvim/plugged/coc.nvim/build/index.js	/^function realpath (p, cache, cb) {$/;"	F
realpathAsync	nvim/plugged/coc.nvim/src/util/fs.ts	/^export const realpathAsync = util.promisify(fs.realpath)$/;"	v
realpathSync	nvim/plugged/coc.nvim/build/index.js	/^exports.realpathSync = function realpathSync(p, cache) {$/;"	M
realpathSync	nvim/plugged/coc.nvim/build/index.js	/^function realpathSync (p, cache) {$/;"	F
reap	nvim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
receiver	nvim/plugged/coc.nvim/build/index.js	/^const receiver = (worker, message) => {$/;"	F
recentFiles	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private recentFiles: string[] = []$/;"	m
recentScores	nvim/plugged/coc.nvim/build/index.js	/^        this.recentScores = {};$/;"	P
recentScores	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public readonly recentScores: RecentScore$/;"	m
recentScores	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private recentScores: RecentScore = {}$/;"	m
record_diagnostics	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:record_diagnostics(state)$/;"	f
record_file	nvim/plugged/html5.vim/Makefile	/^record_file = \\$/;"	m
recursive	nvim/plugged/coc.nvim/build/index.js	/^            recursive: false,$/;"	P
red	nvim/plugged/coc.nvim/build/index.js	/^            red: (res[0] \/ 65535),$/;"	M
red	nvim/plugged/coc.nvim/build/index.js	/^            red: red,$/;"	P
red	nvim/plugged/coc.nvim/build/index.js	/^  red: [91, 39],$/;"	P
redraw	nvim/plugged/coc.nvim/build/index.js	/^    redraw(force = false) {$/;"	M
reduce	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.reduce = function (fn, initial) {$/;"	M
reduceReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.reduceReverse = function (fn, initial) {$/;"	M
reduce_line	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
refactor	nvim/plugged/coc.nvim/build/index.js	/^        let refactor = new Refactor();$/;"	V
refactor	nvim/plugged/coc.nvim/build/index.js	/^        let refactor = new refactor_1.default();$/;"	V
refactorId	nvim/plugged/coc.nvim/build/index.js	/^let refactorId = 0;$/;"	V
refactorMap	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private refactorMap: Map<number, Refactor> = new Map()$/;"	m
referenceManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private referenceManager = new ReferenceManager()$/;"	m
referrerpolicy	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let referrerpolicy = ['no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url']$/;"	v
refresh	nvim/plugged/coc.nvim/build/index.js	/^        this.refresh = (diagnostics) => {$/;"	M
refresh	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public readonly refresh: (diagnosticItems: ReadonlyArray<Diagnostic>) => void$/;"	m
refresh	nvim/plugged/coc.nvim/src/model/source-vim.ts	/^  public async refresh(): Promise<void> {$/;"	m
refresh	nvim/plugged/coc.nvim/src/model/source.ts	/^  public async refresh(): Promise<void> {$/;"	m
refresh	nvim/plugged/coc.nvim/src/sources.ts	/^  public async refresh(name?: string): Promise<void> {$/;"	m
refreshBuffer	nvim/plugged/coc.nvim/build/index.js	/^    refreshBuffer(uri) {$/;"	M
refreshBuffer	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private refreshBuffer(uri: string): boolean {$/;"	m
refreshCurrent	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node)$/;"	f
refreshRoot	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot()$/;"	f
refreshTrace	nvim/plugged/coc.nvim/build/index.js	/^    refreshTrace(connection, sendNotification = false) {$/;"	M
refreshTrace	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private refreshTrace($/;"	m
refs	nvim/plugged/coc.nvim/build/index.js	/^  var refs = []$/;"	A
refsNew	nvim/plugged/coc.nvim/build/index.js	/^  var refsNew = []$/;"	A
regExp	nvim/plugged/coc.nvim/build/index.js	/^    var regExp = new RegExp('^' + re + '$', flags)$/;"	V
regExpEscape	nvim/plugged/coc.nvim/build/index.js	/^function regExpEscape (s) {$/;"	F
regName	nvim/plugged/coc.nvim/build/index.js	/^    var regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';$/;"	V
regex	nvim/plugged/coc.nvim/build/index.js	/^                        let regex = new RegExp(c, flags);$/;"	V
regex	nvim/plugged/coc.nvim/build/index.js	/^    const regex = new RegExp(filters.join('|'), 'i');$/;"	V
regex	nvim/plugged/coc.nvim/build/index.js	/^  const regex = \/%(-?[0-9]+)?(\\.?[0-9]+)?([[\\]cdhmnprzxXyflos%])(\\{([^}]+)\\})?|([^%]+)\/;$/;"	V
regexOptions	nvim/plugged/coc.nvim/build/index.js	/^        let regexOptions = '';$/;"	V
regexValue	nvim/plugged/coc.nvim/build/index.js	/^        let regexValue = '';$/;"	V
regexes	nvim/plugged/coc.nvim/build/index.js	/^                let regexes = inputs.reduce((p, c) => {$/;"	F
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "[+-]\\\\d{3,4}|Z",$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d\\\\d",$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d\\\\d\\\\d",$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d{1,2}",$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d{1,4}",$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^    const regexp = \/\\$\\{(.*?)\\}\/g;$/;"	V
regexp	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public regexp: RegExp$/;"	m
regexp_of_marker	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:regexp_of_marker(item)$/;"	f
regexpsAsStrings	nvim/plugged/coc.nvim/build/index.js	/^    const regexpsAsStrings = nolog.map(reg => (reg.source ? reg.source : reg));$/;"	F
region	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:region(start_mark, end_mark)$/;"	f
regist	nvim/plugged/coc.nvim/build/index.js	/^    regist(service) {$/;"	M
regist	nvim/plugged/coc.nvim/build/index.js	/^function regist(sourceMap) {$/;"	F
regist	nvim/plugged/coc.nvim/src/services.ts	/^  public regist(service: IServiceProvider): Disposable {$/;"	m
regist	nvim/plugged/coc.nvim/src/source/around.ts	/^export function regist(sourceMap: Map<string, ISource>): Disposable {$/;"	f
regist	nvim/plugged/coc.nvim/src/source/buffer.ts	/^export function regist(sourceMap: Map<string, ISource>): Disposable {$/;"	f
regist	nvim/plugged/coc.nvim/src/source/file.ts	/^export function regist(sourceMap: Map<string, ISource>): Disposable {$/;"	f
registLanguageClient	nvim/plugged/coc.nvim/build/index.js	/^    registLanguageClient(client) {$/;"	M
registLanguageClient	nvim/plugged/coc.nvim/src/services.ts	/^  public registLanguageClient(client: LanguageClient): Disposable {$/;"	m
registNotification	nvim/plugged/coc.nvim/src/services.ts	/^  public async registNotification(id: string, method: string): Promise<void> {$/;"	m
register	nvim/plugged/coc.nvim/build/index.js	/^    register(_message, data) {$/;"	M
register	nvim/plugged/coc.nvim/build/index.js	/^    register(_method, data) {$/;"	M
register	nvim/plugged/coc.nvim/build/index.js	/^    register(command, internal = false, description) {$/;"	M
register	nvim/plugged/coc.nvim/build/index.js	/^    register(message, data) {$/;"	M
register	nvim/plugged/coc.nvim/build/index.js	/^    register(method, data) {$/;"	M
register	nvim/plugged/coc.nvim/build/index.js	/^    register(selector, provider) {$/;"	M
register	nvim/plugged/coc.nvim/build/index.js	/^    register(selector, provider, clientId, codeActionKinds) {$/;"	M
register	nvim/plugged/coc.nvim/build/index.js	/^    register(selector, provider, priority = 0) {$/;"	M
register	nvim/plugged/coc.nvim/build/index.js	/^    register(selector, provider, triggerCharacters) {$/;"	M
register	nvim/plugged/coc.nvim/src/commands.ts	/^  public register<T extends Command>(command: T, internal = false, description?: string): T {$/;"	m
register	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public register($/;"	m
register	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public register(message: RPCMessageType, data: RegistrationData<T>): void {$/;"	m
register	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  public register(_message: RPCMessageType, data: RegistrationData<undefined>): void {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^  public register(selector: DocumentSelector, provider: CodeActionProvider, clientId: string, codeActionKinds?: CodeActionKind[]): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^  public register(selector: DocumentSelector, provider: CodeLensProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/declarationManager.ts	/^  public register(selector: DocumentSelector, provider: DeclarationProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/definitionManager.ts	/^  public register(selector: DocumentSelector, provider: DefinitionProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^  public register(selector: DocumentSelector, provider: DocumentColorProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/documentHighlightManager.ts	/^  public register(selector: DocumentSelector, provider: DocumentHighlightProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  public register(selector: DocumentSelector, provider: DocumentLinkProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/documentSymbolManager.ts	/^  public register(selector: DocumentSelector, provider: DocumentSymbolProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/foldingRangeManager.ts	/^  public register(selector: DocumentSelector, provider: FoldingRangeProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/formatManager.ts	/^  public register(selector: DocumentSelector,$/;"	m
register	nvim/plugged/coc.nvim/src/provider/formatRangeManager.ts	/^  public register(selector: DocumentSelector,$/;"	m
register	nvim/plugged/coc.nvim/src/provider/hoverManager.ts	/^  public register(selector: DocumentSelector, provider: HoverProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/implementationManager.ts	/^  public register(selector: DocumentSelector, provider: ImplementationProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  public register(selector: DocumentSelector, provider: OnTypeFormattingEditProvider, triggerCharacters: string[]): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/rangeManager.ts	/^  public register(selector: DocumentSelector, provider: SelectionRangeProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/referenceManager.ts	/^  public register(selector: DocumentSelector, provider: ReferenceProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/renameManager.ts	/^  public register(selector: DocumentSelector, provider: RenameProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/signatureManager.ts	/^  public register(selector: DocumentSelector, provider: SignatureHelpProvider, triggerCharacters?: string[]): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/typeDefinitionManager.ts	/^  public register(selector: DocumentSelector, provider: TypeDefinitionProvider): Disposable {$/;"	m
register	nvim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^  public register(selector: DocumentSelector, provider: WorkspaceSymbolProvider): Disposable {$/;"	m
registerAutocmd	nvim/plugged/coc.nvim/build/index.js	/^    registerAutocmd(autocmd) {$/;"	M
registerAutocmd	nvim/plugged/coc.nvim/src/workspace.ts	/^  public registerAutocmd(autocmd: Autocmd): Disposable {$/;"	m
registerBuiltinFeatures	nvim/plugged/coc.nvim/build/index.js	/^    registerBuiltinFeatures() {$/;"	M
registerBuiltinFeatures	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerBuiltinFeatures() {$/;"	m
registerBuiltinFeatures	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  protected registerBuiltinFeatures(): void {$/;"	m
registerCodeActionProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerCodeActionProvider(selector, provider, clientId, codeActionKinds) {$/;"	M
registerCodeActionProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerCodeActionProvider(selector: DocumentSelector, provider: CodeActionProvider, clientId: string, codeActionKinds?: CodeActionKind[]): Disposable {$/;"	m
registerCodeLensProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerCodeLensProvider(selector, provider) {$/;"	M
registerCodeLensProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerCodeLensProvider(selector: DocumentSelector, provider: CodeLensProvider): Disposable {$/;"	m
registerCommand	nvim/plugged/coc.nvim/build/index.js	/^    registerCommand(id, impl, thisArg, internal = false) {$/;"	M
registerCommand	nvim/plugged/coc.nvim/src/commands.ts	/^  public registerCommand(id: string, impl: (...args: any[]) => void, thisArg?: any, internal = false): Disposable {$/;"	m
registerCompletionItemProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerCompletionItemProvider(name, shortcut, languageIds, provider, triggerCharacters = [], priority) {$/;"	M
registerCompletionItemProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerCompletionItemProvider($/;"	m
registerDeclarationProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDeclarationProvider(selector, provider) {$/;"	M
registerDeclarationProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerDeclarationProvider(selector: DocumentSelector, provider: DeclarationProvider): Disposable {$/;"	m
registerDefinitionProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDefinitionProvider(selector, provider) {$/;"	M
registerDefinitionProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerDefinitionProvider(selector: DocumentSelector, provider: DefinitionProvider): Disposable {$/;"	m
registerDocumentColorProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentColorProvider(selector, provider) {$/;"	M
registerDocumentColorProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerDocumentColorProvider(selector: DocumentSelector, provider: DocumentColorProvider): Disposable {$/;"	m
registerDocumentFormatProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentFormatProvider(selector, provider, priority = 0) {$/;"	M
registerDocumentFormatProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerDocumentFormatProvider(selector: DocumentSelector, provider: DocumentFormattingEditProvider, priority = 0): Disposable {$/;"	m
registerDocumentHighlightProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentHighlightProvider(selector, provider) {$/;"	M
registerDocumentHighlightProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerDocumentHighlightProvider(selector: DocumentSelector, provider: any): Disposable {$/;"	m
registerDocumentLinkProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentLinkProvider(selector, provider) {$/;"	M
registerDocumentLinkProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerDocumentLinkProvider(selector: DocumentSelector, provider: DocumentLinkProvider): Disposable {$/;"	m
registerDocumentRangeFormatProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentRangeFormatProvider(selector, provider, priority = 0) {$/;"	M
registerDocumentRangeFormatProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerDocumentRangeFormatProvider(selector: DocumentSelector, provider: DocumentRangeFormattingEditProvider, priority = 0): Disposable {$/;"	m
registerDocumentSymbolProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentSymbolProvider(selector, provider) {$/;"	M
registerDocumentSymbolProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerDocumentSymbolProvider(selector: DocumentSelector, provider: DocumentSymbolProvider): Disposable {$/;"	m
registerExprKeymap	nvim/plugged/coc.nvim/build/index.js	/^    registerExprKeymap(mode, key, fn, buffer = false) {$/;"	M
registerExprKeymap	nvim/plugged/coc.nvim/src/workspace.ts	/^  public registerExprKeymap(mode: 'i' | 'n' | 'v' | 's' | 'x', key: string, fn: Function, buffer = false): Disposable {$/;"	m
registerExtension	nvim/plugged/coc.nvim/build/index.js	/^    registerExtension(extension, deactivate) {$/;"	M
registerExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public registerExtension(extension: Extension<API>, deactivate?: () => void): void {$/;"	m
registerFeature	nvim/plugged/coc.nvim/build/index.js	/^    registerFeature(feature) {$/;"	M
registerFeature	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public registerFeature(feature: StaticFeature | DynamicFeature<any>): void {$/;"	m
registerFeatures	nvim/plugged/coc.nvim/build/index.js	/^    registerFeatures(features) {$/;"	M
registerFeatures	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public registerFeatures($/;"	m
registerFoldingRangeProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerFoldingRangeProvider(selector, provider) {$/;"	M
registerFoldingRangeProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerFoldingRangeProvider(selector: DocumentSelector, provider: FoldingRangeProvider): Disposable {$/;"	m
registerHoverProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerHoverProvider(selector, provider) {$/;"	M
registerHoverProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerHoverProvider(selector: DocumentSelector, provider: HoverProvider): Disposable {$/;"	m
registerImplementationProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerImplementationProvider(selector, provider) {$/;"	M
registerImplementationProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerImplementationProvider(selector: DocumentSelector, provider: ImplementationProvider): Disposable {$/;"	m
registerKeymap	nvim/plugged/coc.nvim/build/index.js	/^    registerKeymap(modes, key, fn, opts = {}) {$/;"	M
registerKeymap	nvim/plugged/coc.nvim/src/workspace.ts	/^  public registerKeymap(modes: MapMode[], key: string, fn: Function, opts: Partial<KeymapOption> = {}): Disposable {$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerLanguageProvider(options) {$/;"	M
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected abstract registerLanguageProvider(languageIds: T): Disposable$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected abstract registerLanguageProvider(options: T): Disposable$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider(options: DocumentOnTypeFormattingRegistrationOptions): Disposable {$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider(options: RenameRegistrationOptions): Disposable {$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  protected registerLanguageProvider($/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/declaration.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^  protected registerLanguageProvider($/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/implementation.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m
registerLanguageProvider	nvim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m
registerList	nvim/plugged/coc.nvim/build/index.js	/^    registerList(list) {$/;"	M
registerList	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public registerList(list: IList): Disposable {$/;"	m
registerLocalKeymap	nvim/plugged/coc.nvim/build/index.js	/^    registerLocalKeymap(mode, key, fn, notify = false) {$/;"	M
registerLocalKeymap	nvim/plugged/coc.nvim/src/workspace.ts	/^  public registerLocalKeymap(mode: 'n' | 'v' | 's' | 'x', key: string, fn: Function, notify = false): Disposable {$/;"	m
registerOnTypeFormattingEditProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerOnTypeFormattingEditProvider(selector, provider, triggerCharacters) {$/;"	M
registerOnTypeFormattingEditProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerOnTypeFormattingEditProvider($/;"	m
registerOptions	nvim/plugged/coc.nvim/build/index.js	/^                    registerOptions: options$/;"	P
registerOptions	nvim/plugged/coc.nvim/build/index.js	/^                registerOptions: undefined$/;"	P
registerOptions	nvim/plugged/coc.nvim/build/index.js	/^                registerOptions: { documentSelector: documentSelector }$/;"	P
registerOptions	nvim/plugged/coc.nvim/build/index.js	/^                registerOptions: {$/;"	P
registerOptions	nvim/plugged/coc.nvim/src/__tests__/client/server/testFileWatcher.js	/^      registerOptions: {$/;"	P
registerProposedFeatures	nvim/plugged/coc.nvim/build/index.js	/^    registerProposedFeatures() {$/;"	M
registerProposedFeatures	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  public registerProposedFeatures(): void {$/;"	m
registerRaw	nvim/plugged/coc.nvim/build/index.js	/^    registerRaw(id, fileSystemWatchers) {$/;"	M
registerRaw	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public registerRaw(id: string, fileSystemWatchers: FileWatcher[]) {$/;"	m
registerReferencesProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerReferencesProvider(selector, provider) {$/;"	M
registerReferencesProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerReferencesProvider(selector: DocumentSelector, provider: ReferenceProvider): Disposable {$/;"	m
registerRenameProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerRenameProvider(selector, provider) {$/;"	M
registerRenameProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerRenameProvider(selector: DocumentSelector, provider: RenameProvider): Disposable {$/;"	m
registerSelectionRangeProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerSelectionRangeProvider(selector, provider) {$/;"	M
registerSelectionRangeProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerSelectionRangeProvider(selector: DocumentSelector, provider: SelectionRangeProvider): Disposable {$/;"	m
registerSignatureHelpProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerSignatureHelpProvider(selector, provider, triggerCharacters) {$/;"	M
registerSignatureHelpProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerSignatureHelpProvider($/;"	m
registerTextDocumentContentProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerTextDocumentContentProvider(scheme, provider) {$/;"	M
registerTextDocumentContentProvider	nvim/plugged/coc.nvim/src/workspace.ts	/^  public registerTextDocumentContentProvider(scheme: string, provider: TextDocumentContentProvider): Disposable {$/;"	m
registerTypeDefinitionProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerTypeDefinitionProvider(selector, provider) {$/;"	M
registerTypeDefinitionProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerTypeDefinitionProvider(selector: DocumentSelector, provider: TypeDefinitionProvider): Disposable {$/;"	m
registerWorkspaceSymbolProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerWorkspaceSymbolProvider(selector, provider) {$/;"	M
registerWorkspaceSymbolProvider	nvim/plugged/coc.nvim/src/languages.ts	/^  public registerWorkspaceSymbolProvider(selector: DocumentSelector, provider: WorkspaceSymbolProvider): Disposable {$/;"	m
registered	nvim/plugged/coc.nvim/src/services.ts	/^  private readonly registered: Map<string, IServiceProvider> = new Map()$/;"	m
registrations	nvim/plugged/coc.nvim/src/__tests__/client/server/testFileWatcher.js	/^    registrations: [{$/;"	P
registryUrl	nvim/plugged/coc.nvim/build/index.js	/^function registryUrl(scope = '') {$/;"	F
registryUrl	nvim/plugged/coc.nvim/src/model/extension.ts	/^function registryUrl(scope = ''): string {$/;"	f
regress_bar	nvim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reindent	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def reindent(content)$/;"	f	class:Buffer
reject	nvim/plugged/coc.nvim/build/index.js	/^    function reject(value) { resume("throw", value); }$/;"	F
reject	nvim/plugged/coc.nvim/build/index.js	/^    reject(error) {$/;"	M
reject	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public reject(error: any): void {$/;"	m
rejected	nvim/plugged/coc.nvim/build/index.js	/^        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }$/;"	F
relationship_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let relationship_attributes = {$/;"	v
relative_path	nvim/plugged/coc.nvim/src/watchman.ts	/^  private relative_path: string | undefined$/;"	m
reload	nvim/plugged/emmet-vim/unittest.vim	/^function! s:reload(d)$/;"	f
reloadBash	reload.sh	/^reloadBash () {$/;"	f
reloadExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async reloadExtension(id: string): Promise<void> {$/;"	m
reloadI3	reload.sh	/^reloadI3 () {$/;"	f
reloadNvim	reload.sh	/^reloadNvim () {$/;"	f
reload_plugins	nvim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
relrev	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let relrev = ['chapter', 'contents', 'copyright', 'first', 'glossary', 'help', 'icon', 'index', 'last', 'license', 'meta', 'next', 'p3pv1', 'prev', 'role', 'section', 'stylesheet', 'subsection', 'start', 'top', 'up']$/;"	v
remains	nvim/plugged/coc.nvim/build/index.js	/^        let remains = results.filter(res => res.isIncomplete != true);$/;"	F
remote	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var remote = \/^(?:\\w+:)?\\\/\\\/([^\\\/?#]+)\/;$/;"	V
remoteSourcePaths	nvim/plugged/coc.nvim/src/sources.ts	/^  private remoteSourcePaths: string[] = []$/;"	m
remove	nvim/plugged/coc.nvim/build/index.js	/^    remove(callback, context = null) {$/;"	M
remove	nvim/plugged/coc.nvim/build/index.js	/^    remove(start, end, strictIndexing = false) {$/;"	M
remove	nvim/plugged/coc.nvim/src/model/mru.ts	/^  public async remove(item: string): Promise<void> {$/;"	m
remove	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		remove: function( elem, classNames ) {$/;"	M
remove	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	remove: function( selector ) {$/;"	M
remove	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	remove: function(elem, types, handler) {$/;"	M
removeAhead	nvim/plugged/coc.nvim/build/index.js	/^    removeAhead() {$/;"	M
removeAhead	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public removeAhead(): void {$/;"	m
removeAttr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeAttr: function( name ) {$/;"	M
removeChild	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
removeClass	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeClass: function( classNames ) {$/;"	M
removeContext	nvim/plugged/coc.nvim/build/index.js	/^  removeContext(key) {$/;"	M
removeData	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeData: function( elem, name ) {$/;"	M
removeData	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeData: function( key ){$/;"	M
removeFolder	nvim/plugged/coc.nvim/src/model/extension.ts	/^  private async removeFolder(folder: string): Promise<void> {$/;"	m
removeFromValueTree	nvim/plugged/coc.nvim/build/index.js	/^function removeFromValueTree(valueTree, key) {$/;"	F
removeFromValueTree	nvim/plugged/coc.nvim/src/configuration/util.ts	/^export function removeFromValueTree(valueTree: any, key: string): void {$/;"	f
removeHeader	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.removeHeader = function (name) {$/;"	M
removeItem	nvim/plugged/coc.nvim/build/index.js	/^    removeItem(item) {$/;"	M
removeList	nvim/plugged/coc.nvim/build/index.js	/^        let removeList = [];$/;"	A
removeNext	nvim/plugged/coc.nvim/build/index.js	/^    removeNext() {$/;"	M
removeNext	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public removeNext(): void {$/;"	m
removeNode	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.removeNode = function (node) {$/;"	M
removeNullOrEmptyRegexp	nvim/plugged/coc.nvim/build/index.js	/^function removeNullOrEmptyRegexp(regexp) {$/;"	F
removeProperty	nvim/plugged/coc.nvim/build/index.js	/^function removeProperty(text, path, formattingOptions) {$/;"	F
removeSocket	nvim/plugged/coc.nvim/build/index.js	/^TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {$/;"	M
removeSource	nvim/plugged/coc.nvim/build/index.js	/^    removeSource(source) {$/;"	M
removeSource	nvim/plugged/coc.nvim/src/sources.ts	/^  public removeSource(source: ISource | string): void {$/;"	m
removeTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
removeTail	nvim/plugged/coc.nvim/build/index.js	/^    removeTail() {$/;"	M
removeTail	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public removeTail(): void {$/;"	m
removeValue	nvim/plugged/coc.nvim/build/index.js	/^    removeValue(key) {$/;"	M
removeValue	nvim/plugged/coc.nvim/src/configuration/model.ts	/^  public removeValue(key: string): void {$/;"	m
removeWord	nvim/plugged/coc.nvim/build/index.js	/^    removeWord() {$/;"	M
removeWord	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public removeWord(): void {$/;"	m
removeWorkspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^    removeWorkspaceFolder(fsPath) {$/;"	M
removeWorkspaceFolder	nvim/plugged/coc.nvim/src/workspace.ts	/^  public removeWorkspaceFolder(fsPath: string): void {$/;"	m
remove_blank_lines	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:remove_blank_lines(lines)$/;"	f
remove_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:remove_cb(item)$/;"	f
remove_comment_lines	nvim/plugged/ale/test/script/block-padding-checker	/^def remove_comment_lines(line_iter):$/;"	f
remove_empty_tuples	nvim/plugged/coc.nvim/build/index.js	/^function remove_empty_tuples(tuples) {$/;"	F
remove_layout	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
remove_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:remove_mrkr(item)$/;"	f
remove_page_from_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:remove_page_from_tags(metadata, page_name)$/;"	f
remove_rtp	nvim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:remove_signs(bufnr, sign_ids, all_signs) abort$/;"	f
remove_triggers	nvim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
removed	nvim/plugged/coc.nvim/build/index.js	/^                    removed: []$/;"	P
removed	nvim/plugged/coc.nvim/build/index.js	/^                removed: [folder],$/;"	P
removed	nvim/plugged/coc.nvim/build/index.js	/^            let removed = [];$/;"	A
removed	nvim/plugged/coc.nvim/build/index.js	/^            removed: [removed],$/;"	P
removed	nvim/plugged/coc.nvim/build/index.js	/^    const removed = fromKeys.filter(key => toKeys.indexOf(key) === -1);$/;"	F
removedGlobalStub	nvim/plugged/coc.nvim/build/index.js	/^function removedGlobalStub(name) {$/;"	F
removedGlobalStub	nvim/plugged/coc.nvim/src/util/factory.ts	/^function removedGlobalStub(name: string): Function {$/;"	f
rename	nvim/plugged/coc.nvim/build/index.js	/^    fs.rename = (function (fs$rename) { return function (from, to, cb) {$/;"	M
rename	nvim/plugged/coc.nvim/build/index.js	/^function rename (src, dest, overwrite) {$/;"	F
rename	nvim/plugged/coc.nvim/build/index.js	/^function rename (src, dest, overwrite, cb) {$/;"	F
rename	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async rename(newName?: string): Promise<boolean> {$/;"	m
renameAsync	nvim/plugged/coc.nvim/build/index.js	/^function renameAsync(oldPath, newPath) {$/;"	F
renameAsync	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function renameAsync(oldPath: string, newPath: string): Promise<void> {$/;"	f
renameBuffer	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
renameCurrent	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async renameCurrent(): Promise<void> {$/;"	m
renameFile	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {$/;"	M
renameFile	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async renameFile(oldPath: string, newPath: string, opts: RenameFileOptions = {}): Promise<void> {$/;"	m
renameManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private renameManager = new RenameManager()$/;"	m
renameProvider	nvim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^    renameProvider: {$/;"	P
renameWorkspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^    renameWorkspaceFolder(oldPath, newPath) {$/;"	M
renameWorkspaceFolder	nvim/plugged/coc.nvim/src/workspace.ts	/^  public renameWorkspaceFolder(oldPath: string, newPath: string): void {$/;"	m
render	nvim/plugged/coc.nvim/build/index.js	/^    render(buffer, start = 0, end = -1) {$/;"	M
render	nvim/plugged/coc.nvim/src/model/highligher.ts	/^  public render(buffer: Buffer, start = 0, end = -1): void {$/;"	m
render	nvim/plugged/vim-css-color/tests/example.jsx	/^	render: function() {$/;"	M
reopen	nvim/plugged/coc.nvim/build/index.js	/^  app.reopen = function () {$/;"	M
reorg_rtp	nvim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
repeat	nvim/plugged/coc.nvim/build/index.js	/^function repeat(s, count) {$/;"	F
repeatCommand	nvim/plugged/coc.nvim/src/commands.ts	/^  public async repeatCommand(): Promise<void> {$/;"	m
replace	nvim/plugged/coc.nvim/build/index.js	/^        replace = function (key, value) {$/;"	M
replace	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.replace = function (range, newText) {$/;"	M
replace	nvim/plugged/coc.nvim/build/index.js	/^    function replace(range, newText) {$/;"	F
replace	nvim/plugged/coc.nvim/build/index.js	/^    replace(_lines, start) {$/;"	M
replace	nvim/plugged/coc.nvim/build/index.js	/^    replace(begin, end, add = '') {$/;"	M
replace	nvim/plugged/coc.nvim/build/index.js	/^    replace(child, others) {$/;"	M
replace	nvim/plugged/coc.nvim/build/index.js	/^const replace = (opt, files, cb) => {$/;"	F
replace	nvim/plugged/coc.nvim/src/cursors/range.ts	/^  public replace(begin: number, end: number, add = ''): void {$/;"	m
replace	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public replace(child: Marker, others: Marker[]): void {$/;"	m
replaceAll	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	replaceAll: "replaceWith"$/;"	P
replaceCaret	nvim/plugged/coc.nvim/build/index.js	/^function replaceCaret (comp, options) {$/;"	F
replaceCarets	nvim/plugged/coc.nvim/build/index.js	/^function replaceCarets (comp, options) {$/;"	F
replaceContent	nvim/plugged/coc.nvim/build/index.js	/^        var replaceContent = '';$/;"	V
replaceRange	nvim/plugged/coc.nvim/build/index.js	/^    replaceRange: {$/;"	P
replaceStars	nvim/plugged/coc.nvim/build/index.js	/^function replaceStars (comp, options) {$/;"	F
replaceSync	nvim/plugged/coc.nvim/build/index.js	/^const replaceSync = (opt, files) => {$/;"	F
replaceTermcodes	nvim/plugged/coc.nvim/build/index.js	/^    replaceTermcodes(str, fromPart, doIt, special) {$/;"	M
replaceTilde	nvim/plugged/coc.nvim/build/index.js	/^function replaceTilde (comp, options) {$/;"	F
replaceTildes	nvim/plugged/coc.nvim/build/index.js	/^function replaceTildes (comp, options) {$/;"	F
replaceToken	nvim/plugged/coc.nvim/build/index.js	/^  function replaceToken(conversionCharacter, loggingEvent, specifier) {$/;"	F
replaceWith	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	replaceWith: function( value ) {$/;"	M
replaceXRange	nvim/plugged/coc.nvim/build/index.js	/^function replaceXRange (comp, options) {$/;"	F
replaceXRanges	nvim/plugged/coc.nvim/build/index.js	/^function replaceXRanges (comp, options) {$/;"	F
replacement	nvim/plugged/coc.nvim/build/index.js	/^    replacement(_, field) {$/;"	M
replacers	nvim/plugged/coc.nvim/build/index.js	/^  const replacers = {$/;"	O
reply	nvim/plugged/coc.nvim/build/index.js	/^        function reply(resultOrError, method, startTime) {$/;"	F
replyError	nvim/plugged/coc.nvim/build/index.js	/^        function replyError(error, method, startTime) {$/;"	F
replySuccess	nvim/plugged/coc.nvim/build/index.js	/^        function replySuccess(result, method, startTime) {$/;"	F
repo_bare	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_config	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
repo_dir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_find	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
repo_git_chomp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
repo_homepage	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:repo_homepage() abort$/;"	f
repo_list	nvim/plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^function! s:repo_list() abort$/;"	f
repo_prepare	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_prepare(...) dict abort$/;"	f
repo_rev_parse	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
repo_tree	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
repo_user	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
req	nvim/plugged/coc.nvim/build/index.js	/^            const req = mod.request(opts, res => {$/;"	F
req	nvim/plugged/coc.nvim/build/index.js	/^        const req = mod.request(opts, (res) => {$/;"	F
req	nvim/plugged/coc.nvim/build/index.js	/^        let req = new request_1.default(this.connection, cb, this.nextRequestId);$/;"	V
req	nvim/plugged/coc.nvim/build/index.js	/^    const req = (p) => {$/;"	F
req	nvim/plugged/coc.nvim/build/index.js	/^  const req = new FSReqWrap()$/;"	V
request	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request(method, args) dict$/;"	f
request	nvim/plugged/coc.nvim/build/index.js	/^    request(method, args = []) {$/;"	M
request	nvim/plugged/coc.nvim/build/index.js	/^    request(method, args, cb) {$/;"	M
request	nvim/plugged/coc.nvim/build/index.js	/^    request(name, args = []) {$/;"	M
request	nvim/plugged/coc.nvim/build/index.js	/^    wrappedProtocol.request = function (input, options, callback) {$/;"	M
requestApi	nvim/plugged/coc.nvim/build/index.js	/^    requestApi() {$/;"	M
requestHandler	nvim/plugged/coc.nvim/build/index.js	/^        let requestHandler;$/;"	V
requestInput	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  private requestInput = false$/;"	m
requestInput	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async requestInput(title: string, defaultValue?: string): Promise<string> {$/;"	m
requestMessage	nvim/plugged/coc.nvim/build/index.js	/^                let requestMessage = {$/;"	O
requestParams	nvim/plugged/coc.nvim/build/index.js	/^            const requestParams = {$/;"	O
request_async	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request_async(method, args, cb) dict$/;"	f
require	nvim/plugged/coc.nvim/build/index.js	/^    sandbox.require = function sandboxRequire(p) {$/;"	M
required	nvim/plugged/coc.nvim/build/index.js	/^                required: requiredCapabilities$/;"	P
required	nvim/plugged/coc.nvim/build/index.js	/^      required: required$/;"	P
requiredCapabilities	nvim/plugged/coc.nvim/build/index.js	/^const requiredCapabilities = ['relative_root', 'cmd-watch-project', 'wildmatch'];$/;"	A
res	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^    let res = term_start(cmd, {$/;"	v
res	nvim/plugged/coc.nvim/build/index.js	/^                let res = result.items.find(o => o.abbr == item.abbr && o.info == item.info);$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^            let res = [];$/;"	A
res	nvim/plugged/coc.nvim/build/index.js	/^            let res = await workspace_1.default.showQuickpick(commands.map(c => c.title));$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^            let res = {$/;"	O
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = await Promise.all(Object.keys(json.dependencies).map(key => {$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = await Promise.all(paths.map(root => {$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = await workspace_1.default.showQuickpick(presentations.map(o => o.label), 'choose a color presentation:');$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = new Map();$/;"	V
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = new Set();$/;"	V
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = util_2.parseContentFromFile(filepath, errors => {$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = { items };$/;"	O
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = {};$/;"	O
res	nvim/plugged/coc.nvim/build/index.js	/^        let res;$/;"	V
res	nvim/plugged/coc.nvim/build/index.js	/^        var res = {$/;"	O
res	nvim/plugged/coc.nvim/build/index.js	/^    const res = [];$/;"	A
res	nvim/plugged/coc.nvim/build/index.js	/^    let res = [];$/;"	A
res	nvim/plugged/coc.nvim/build/index.js	/^    let res = documentSelector.map(filter => {$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^    var res = '';$/;"	V
res	nvim/plugged/coc.nvim/build/index.js	/^    var res = [];$/;"	A
res	nvim/plugged/coc.nvim/build/index.js	/^  var res = new Yallist()$/;"	V
res	nvim/plugged/coc.nvim/build/index.js	/^  var res = {};$/;"	O
resend_confirmation	nvim/plugged/vim-elixir/spec/indent/with_spec.rb	/^  def resend_confirmation(username) when is_binary(username) do$/;"	f
reserve	nvim/plugged/coc.nvim/build/index.js	/^    reserve: reserve,$/;"	P
reserve	nvim/plugged/coc.nvim/build/index.js	/^  function reserve(length) {$/;"	F
reserve	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.reserve = function(size) {$/;"	M
reset	nvim/plugged/coc.nvim/build/index.js	/^    reset() {$/;"	M
reset	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async reset(): Promise<void> {$/;"	m
reset	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public reset(): void {$/;"	m
reset	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public reset(): void {$/;"	m
reset	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public reset(): void {$/;"	m
reset	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			reset: function(a){return "reset"==a.type;},$/;"	M
reset	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
reset_summary	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:reset_summary(bufnr) abort$/;"	f
reset_tick	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:reset_tick(bufnr) abort$/;"	f
reset_untracked_cache	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:reset_untracked_cache(shellcmdpost)$/;"	f
resolve	nvim/plugged/coc.nvim/build/index.js	/^    req.resolve = (request) => Module._resolveFilename(request, this);$/;"	M
resolve	nvim/plugged/coc.nvim/build/index.js	/^    resolve() {$/;"	M
resolve	nvim/plugged/coc.nvim/build/index.js	/^    resolve(resolver) {$/;"	M
resolve	nvim/plugged/coc.nvim/build/index.js	/^    resolve(value) {$/;"	M
resolve	nvim/plugged/coc.nvim/build/index.js	/^    resolve(variable) {$/;"	M
resolve	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public resolve(): void {$/;"	m
resolve	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public resolve(resolver: VariableResolver): boolean {$/;"	m
resolve	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public resolve(value: string): string {$/;"	m
resolve	nvim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^  public resolve(variable: Variable): string {$/;"	m
resolveCodeLens	nvim/plugged/coc.nvim/build/index.js	/^        let resolveCodeLens = (codeLens, token) => {$/;"	F
resolveCodeLens	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private resolveCodeLens: Function & { clear(): void }$/;"	m
resolveCodeLens	nvim/plugged/coc.nvim/src/languages.ts	/^  public async resolveCodeLens(codeLens: CodeLens): Promise<CodeLens> {$/;"	m
resolveCodeLens	nvim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^  public async resolveCodeLens($/;"	m
resolveCompletionItem	nvim/plugged/coc.nvim/build/index.js	/^        let resolveCompletionItem = (item, token) => {$/;"	F
resolveCompletionItem	nvim/plugged/coc.nvim/build/index.js	/^    resolveCompletionItem(item) {$/;"	M
resolveCompletionItem	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public resolveCompletionItem(item: VimCompleteItem): VimCompleteItem | null {$/;"	m
resolveConnection	nvim/plugged/coc.nvim/build/index.js	/^    resolveConnection() {$/;"	M
resolveConnection	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private resolveConnection(): Thenable<IConnection> {$/;"	m
resolveDocumentLink	nvim/plugged/coc.nvim/build/index.js	/^        let resolveDocumentLink = (link, token) => {$/;"	F
resolveDocumentLink	nvim/plugged/coc.nvim/src/languages.ts	/^  public async resolveDocumentLink(link: DocumentLink): Promise<DocumentLink> {$/;"	m
resolveDocumentLink	nvim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  public async resolveDocumentLink(link: DocumentLink, token: CancellationToken): Promise<DocumentLink> {$/;"	m
resolveItem	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private async resolveItem(): Promise<void> {$/;"	m
resolveItem	nvim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public async resolveItem(item: ListItem): Promise<ListItem> {$/;"	m
resolveModule	nvim/plugged/coc.nvim/src/model/resolver.ts	/^  public async resolveModule(mod: string): Promise<string> {$/;"	m
resolveModule	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async resolveModule(name: string): Promise<string> {$/;"	m
resolveRoot	nvim/plugged/coc.nvim/build/index.js	/^    resolveRoot(document) {$/;"	M
resolveRoot	nvim/plugged/coc.nvim/build/index.js	/^function resolveRoot(dir, subs, cwd) {$/;"	F
resolveRoot	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function resolveRoot(dir: string, subs: string[], cwd?: string): string | null {$/;"	f
resolveRoot	nvim/plugged/coc.nvim/src/workspace.ts	/^  private resolveRoot(document: Document): string {$/;"	m
resolveRootFolder	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async resolveRootFolder(uri: URI, patterns: string[]): Promise<string> {$/;"	m
resolveRootPath	nvim/plugged/coc.nvim/build/index.js	/^    resolveRootPath() {$/;"	M
resolveRootPath	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private resolveRootPath(): string | null {$/;"	m
resolveSnippet	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public async resolveSnippet(body: string): Promise<Snippets.TextmateSnippet> {$/;"	m
resolveTokenSource	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private resolveTokenSource: CancellationTokenSource$/;"	m
resolveVariables	nvim/plugged/coc.nvim/build/index.js	/^    resolveVariables(resolver) {$/;"	M
resolveVariables	nvim/plugged/coc.nvim/build/index.js	/^function resolveVariables(str, variables) {$/;"	F
resolveVariables	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public resolveVariables(resolver: VariableResolver): this {$/;"	m
resolveVariables	nvim/plugged/coc.nvim/src/util/string.ts	/^export function resolveVariables(str: string, variables: { [key: string]: string }): string {$/;"	f
resolveWorkspaceSymbol	nvim/plugged/coc.nvim/src/languages.ts	/^  public async resolveWorkspaceSymbol(symbol: SymbolInformation): Promise<SymbolInformation> {$/;"	m
resolveWorkspaceSymbol	nvim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^  public async resolveWorkspaceSymbol($/;"	m
resolved	nvim/plugged/coc.nvim/build/index.js	/^        let resolved;$/;"	V
resolvedIndexes	nvim/plugged/coc.nvim/build/index.js	/^        let resolvedIndexes = new Set();$/;"	V
resolvedLink	nvim/plugged/coc.nvim/build/index.js	/^    var resolvedLink;$/;"	V
resolvedTextDocumentSync	nvim/plugged/coc.nvim/build/index.js	/^                resolvedTextDocumentSync: textDocumentSyncOptions$/;"	P
resolver	nvim/plugged/coc.nvim/build/index.js	/^        const resolver = new variableResolve_1.SnippetVariableResolver();$/;"	V
resolver	nvim/plugged/coc.nvim/src/workspace.ts	/^  private resolver: Resolver = new Resolver()$/;"	m
response	nvim/plugged/coc.nvim/build/index.js	/^            let response = new AsyncResponse(id, (err, res) => {$/;"	F
response	nvim/plugged/coc.nvim/build/index.js	/^            let response = new AsyncResponse(id, (err, res) => {$/;"	V
response	nvim/plugged/coc.nvim/build/index.js	/^    response(requestId, data) {$/;"	M
responsePromise	nvim/plugged/coc.nvim/build/index.js	/^                let responsePromise = { method: method, timerStart: Date.now(), resolve, reject };$/;"	O
restart	nvim/plugged/coc.nvim/build/index.js	/^    restart() {$/;"	M
restart	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public restart(): void {$/;"	m
restarts	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private restarts: number[]$/;"	m
restoreWindow	nvim/plugged/coc.nvim/build/index.js	/^    restoreWindow() {$/;"	M
restoreWindow	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public restoreWindow(): void {$/;"	m
restore_fold_state	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:restore_fold_state()$/;"	f
restore_shell	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:restore_shell() abort$/;"	f
result	nvim/plugged/coc.nvim/build/index.js	/^                    let result = { value: current.key, done: false };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^                    let result = { value: current.value, done: false };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^                let result = [];$/;"	A
result	nvim/plugged/coc.nvim/build/index.js	/^                let result = results.find(res => res.source == source);$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^                let result;$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^                result: result$/;"	P
result	nvim/plugged/coc.nvim/build/index.js	/^            let result = new Promise((resolve, reject) => {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^            let result = new Promise((resolve, reject) => {$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^            var result = new _URI(data);$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^        const result = {$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        let result = [];$/;"	A
result	nvim/plugged/coc.nvim/build/index.js	/^        let result = {};$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        let result;$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = '', start = pos;$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { diagnostics: diagnostics };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { label: label };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { range: range };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { range: range, message: message };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { title: title };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { title: title, command: command };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = {$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^        var result;$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^    let result = [];$/;"	A
result	nvim/plugged/coc.nvim/build/index.js	/^    let result = { filename, index: 0, isCompressed: false };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^    let result = {$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^    let result;$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^    var result = '';$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^    var result = {};$/;"	O
results	nvim/plugged/coc.nvim/build/index.js	/^            let results;$/;"	V
results	nvim/plugged/coc.nvim/build/index.js	/^        let results = [];$/;"	A
results	nvim/plugged/coc.nvim/build/index.js	/^    let results = [];$/;"	A
results	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public results: CompleteResult[] = []$/;"	m
resume	nvim/plugged/coc.nvim/build/index.js	/^    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }$/;"	F
resume	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.resume = function () {$/;"	M
resume	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async resume(): Promise<void> {$/;"	m
resume	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async resume(name: string, listOptions: ListOptions): Promise<void> {$/;"	m
resumeCompletion	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async resumeCompletion(pre: string, search: string | null, force = false): Promise<void> {$/;"	m
resumeNotification	nvim/plugged/coc.nvim/build/index.js	/^    resumeNotification(cancel, notify) {$/;"	M
resumeNotification	nvim/plugged/coc.nvim/build/index.js	/^    resumeNotification(isNotify = false) {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^	var ret = '';$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        const ret = new Variable(this.name);$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = '';$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = 0;$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = [];$/;"	A
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new Choice();$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new Placeholder(this.index);$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new TextmateSnippet();$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new Transform();$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = value.replace(this.regexp, (...args) => {$/;"	F
ret	nvim/plugged/coc.nvim/build/index.js	/^        var ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);$/;"	A
ret	nvim/plugged/coc.nvim/build/index.js	/^  var ret = [];$/;"	A
ret	nvim/plugged/coc.nvim/build/index.js	/^  var ret = new Yallist()$/;"	V
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	V
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = "";$/;"	V
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [], done = {};$/;"	A
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [];$/;"	A
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [context], done = [], last, nodeName;$/;"	A
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret, style = elem.style;$/;"	V
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	V
rethrow	nvim/plugged/coc.nvim/build/index.js	/^function rethrow() {$/;"	F
retry	nvim/autoload/plug.vim	/^function! s:retry()$/;"	f
retry	nvim/plugged/coc.nvim/build/index.js	/^function retry () {$/;"	F
reuseWin	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
reverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.reverse = function () {$/;"	M
revert	nvim/autoload/plug.vim	/^function! s:revert()$/;"	f
revert_highlight_fix	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_highlight_fix()$/;"	f
revert_mode	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_mode(from, to)$/;"	f
revive	nvim/plugged/coc.nvim/build/index.js	/^    URI.revive = function (data) {$/;"	M
revive	nvim/plugged/coc.nvim/build/index.js	/^  function revive(input, parsed, output, $) {$/;"	F
rfc3986	nvim/plugged/coc.nvim/build/index.js	/^    rfc3986: {}$/;"	P
rfdc	nvim/plugged/coc.nvim/build/index.js	/^function rfdc (opts) {$/;"	F
rfdcCircles	nvim/plugged/coc.nvim/build/index.js	/^function rfdcCircles (opts) {$/;"	F
rgb	nvim/plugged/coc.nvim/build/index.js	/^    let rgb = [color.red, color.green, color.blue];$/;"	A
rgb2color	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:rgb2color(r,g,b)$/;"	f
rgb2xterm	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! s:rgb2xterm(color)$/;"	f
rhubarb	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^augroup rhubarb$/;"	a
rhubarb#Complete	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#Complete(findstart, base) abort$/;"	f
rhubarb#FugitiveUrl	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#FugitiveUrl(...) abort$/;"	f
rhubarb#HomepageForUrl	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#HomepageForUrl(url) abort$/;"	f
rhubarb#JsonDecode	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#JsonDecode(string) abort$/;"	f
rhubarb#JsonEncode	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#JsonEncode(object) abort$/;"	f
rhubarb#RepoRequest	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#RepoRequest(...) abort$/;"	f
rhubarb#RepoSearch	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#RepoSearch(type, q) abort$/;"	f
rhubarb#Request	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#Request(path, ...) abort$/;"	f
rhubarb#fugitive_url	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#fugitive_url(...) abort$/;"	f
rhubarb#homepage_for_url	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#homepage_for_url(url) abort$/;"	f
rhubarb#omnifunc	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#omnifunc(findstart, base) abort$/;"	f
rhubarb#repo_request	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#repo_request(...) abort$/;"	f
rhubarb#repo_search	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#repo_search(...) abort$/;"	f
rhubarb#request	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#request(...) abort$/;"	f
right	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:right(s)$/;"	f
rightIdx	nvim/plugged/coc.nvim/build/index.js	/^        var rightIdx = 0;$/;"	V
rimraf	nvim/plugged/coc.nvim/build/index.js	/^      rimraf(path.join(p, f), options, function (er) {$/;"	M
rimraf	nvim/plugged/coc.nvim/build/index.js	/^    rimraf(dest, { disableGlob: true }, function(err) {$/;"	M
rimraf	nvim/plugged/coc.nvim/build/index.js	/^const rimraf = (p, options, cb) => {$/;"	F
rimraf	nvim/plugged/coc.nvim/build/index.js	/^function rimraf (p, options, cb) {$/;"	F
rimrafSync	nvim/plugged/coc.nvim/build/index.js	/^const rimrafSync = (p, options) => {$/;"	F
rimrafSync	nvim/plugged/coc.nvim/build/index.js	/^function rimrafSync (p, options) {$/;"	F
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^      rimraf_(p, options, function CB (er) {$/;"	M
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^  rimraf_(p, options, function CB (er) {$/;"	M
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^const rimraf_ = (p, options, cb) => {$/;"	F
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^function rimraf_ (p, options, cb) {$/;"	F
rmFile	nvim/plugged/coc.nvim/build/index.js	/^        rmFile(target, function () {$/;"	M
rmFile	nvim/plugged/coc.nvim/build/index.js	/^  function rmFile(file, done) {$/;"	F
rm_rf	nvim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
rmdir	nvim/plugged/coc.nvim/build/index.js	/^const rmdir = (p, options, originalEr, cb) => {$/;"	F
rmdir	nvim/plugged/coc.nvim/build/index.js	/^function rmdir (p, options, originalEr, cb) {$/;"	F
rmdirSync	nvim/plugged/coc.nvim/build/index.js	/^const rmdirSync = (p, options, originalEr) => {$/;"	F
rmdirSync	nvim/plugged/coc.nvim/build/index.js	/^function rmdirSync (p, options, originalEr) {$/;"	F
rmkids	nvim/plugged/coc.nvim/build/index.js	/^const rmkids = (p, options, cb) => {$/;"	F
rmkids	nvim/plugged/coc.nvim/build/index.js	/^function rmkids (p, options, cb) {$/;"	F
rmkids	nvim/plugged/coc.nvim/build/index.js	/^function rmkids(p, options, cb) {$/;"	F
rmkidsSync	nvim/plugged/coc.nvim/build/index.js	/^const rmkidsSync = (p, options) => {$/;"	F
rmkidsSync	nvim/plugged/coc.nvim/build/index.js	/^function rmkidsSync (p, options) {$/;"	F
role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, dpub_role)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, graphic_role)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, landmark_role)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(widget_role, document_structure)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(role, dpub_role)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(role, landmark_role)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(widget_role, document_structure)$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes = {}$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['alert'] = role_attributes['region']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['alertdialog'] = role_attributes['alert'] + role_attributes['dialog']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['application'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['article'] = role_attributes['document'] + role_attributes['region'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['banner'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['button'] = role_attributes['region'] + role_attributes['menuitemcheckbox']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['cell'] = abstract_role['section'] + ['aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['checkbox'] = abstract_role['input'] + ['aria-checked'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['columnheader'] = role_attributes['gridcell'] + abstract_role['sectionhead'] + ['aria-sort']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['combobox'] = abstract_role['select'] + ['aria-expanded', 'aria-required'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['complementary'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['contentinfo'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['default'] = abstract_role['roletype']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['definition'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['dialog'] = abstract_role['window']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['directory'] = role_attributes['list'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['document'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['feed'] = role_attributes['list']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['figure'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['form'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['grid'] = abstract_role['composite'] + role_attributes['region'] + ['aria-level', 'aria-multiselectable', 'aria-readonly']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['gridcell'] = abstract_role['section'] + abstract_role['widget']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['group'] = abstract_role['section']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['heading'] = abstract_role['sectionhead'] + ['aria-level'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['img'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['link'] = abstract_role['widget'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['list'] = role_attributes['region'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['listbox'] = role_attributes['list'] + abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['listitem'] = abstract_role['section']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['log'] = role_attributes['region'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['main'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['marquee'] = role_attributes['region'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['math'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menu'] =  role_attributes['list'] + abstract_role['select'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menubar'] = role_attributes['menu'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitem'] = abstract_role['input'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitemcheckbox'] = role_attributes['menuitem'] + role_attributes['checkbox']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitemradio'] = role_attributes['menuitemcheckbox'] + role_attributes['radio']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['navigation'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['none'] = role_attributes['presentation']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['note'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['option'] = abstract_role['input'] + ['aria-checked', 'aria-posinset', 'aria-selected', 'aria-setsize']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['presentation'] = abstract_role['structure']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['progressbar'] = abstract_role['widget'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['radio'] = role_attributes['checkbox'] + role_attributes['option']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['radiogroup'] = abstract_role['select'] + ['aria-required']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['region'] = abstract_role['section']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['row'] = role_attributes['group'] + ['aria-level', 'aria-selected']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['rowheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['scrollbar'] = abstract_role['range'] + ['aria-controls', 'aria-orientation', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['search'] = abstract_role['landmark']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['searchbox'] = role_attributes['textbox']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['separator'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['slider'] = abstract_role['range'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['spinbutton'] = abstract_role['composite'] + abstract_role['range'] + ['aria-required'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['status'] = abstract_role['composite'] + role_attributes['region']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['switch'] = role_attributes['checkbox']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tab'] = abstract_role['sectionhead'] + abstract_role['widget'] + ['aria-selected']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['table'] = abstract_role['section'] + ['aria-colcount', 'aria-rowcount']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tablist'] = abstract_role['composite'] + role_attributes['directory']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tabpanel'] = role_attributes['region']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['term'] = abstract_role['section']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['textbox'] = abstract_role['input'] + ['aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['timer'] = role_attributes['status'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['toolbar'] = role_attributes['group'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tooltip'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tree'] = abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['treegrid'] = role_attributes['grid'] + role_attributes['tree']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['treeitem'] = role_attributes['listitem'] + role_attributes['option']$/;"	v
root	nvim/plugged/coc.nvim/build/index.js	/^        let root;$/;"	V
root	nvim/plugged/coc.nvim/src/extensions.ts	/^  private root: string$/;"	m
root	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get root(): string {$/;"	m
rootPath	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get rootPath(): string {$/;"	m
rootPatterns	nvim/plugged/coc.nvim/src/workspace.ts	/^  private rootPatterns: Map<string, string[]> = new Map()$/;"	m
root_path	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:root_path(subdir)$/;"	f
rsort	nvim/plugged/coc.nvim/build/index.js	/^function rsort (list, loose) {$/;"	F
rtp	nvim/autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
ruby_minlines	nvim/plugged/vim-ruby/syntax/ruby.vim	/^    let ruby_minlines = 500$/;"	v
rubycomplete#Complete	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
run	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> run <C-R>=DockerfileReplaceInstruction("run", "RUN")<CR>$/;"	m
run	nvim/plugged/coc.nvim/build/index.js	/^    run(args, cwd, refactor) {$/;"	M
run	nvim/plugged/coc.nvim/src/handler/search.ts	/^  public run(args: string[], cwd: string, refactor: Refactor): Promise<void> {$/;"	m
run	nvim/plugged/vim-elixir/spec/indent/comment_spec.rb	/^    def run do$/;"	f
run	nvim/plugged/vim-elixir/spec/indent/comment_spec.rb	/^    def run(task) when task in [:t1, :t2] do$/;"	f
runCommand	nvim/plugged/coc.nvim/build/index.js	/^function runCommand(cmd, opts = {}, timeout) {$/;"	F
runCommand	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async runCommand(id?: string, ...args: any[]): Promise<any> {$/;"	m
runCommand	nvim/plugged/coc.nvim/src/util/index.ts	/^export function runCommand(cmd: string, opts: ExecOptions = {}, timeout?: number): Promise<string> {$/;"	f
runCommand	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async runCommand(cmd: string, cwd?: string, timeout?: number): Promise<string> {$/;"	m
runTerminalCommand	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async runTerminalCommand(cmd: string, cwd = this.cwd, keepfocus = false): Promise<TerminalResult> {$/;"	m
run_syntax_fold	nvim/plugged/vim-ruby/syntax/ruby.vim	/^function! s:run_syntax_fold(args) abort$/;"	f
running	nvim/plugged/coc.nvim/src/model/task.ts	/^  public get running(): Promise<boolean> {$/;"	m
rxSep	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:rxSep()$/;"	f
s	nvim/plugged/coc.nvim/build/index.js	/^    const s = ' ' +$/;"	V
s	nvim/plugged/coc.nvim/build/index.js	/^    s: callStack$/;"	P
s	nvim/plugged/coc.nvim/build/index.js	/^var s = 1000;$/;"	V
s	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var s = [];$/;"	A
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['asdf', 'func'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['conditional'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['hi'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['paste'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['text', 'raw', 'func'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['whitespace'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'aaaa', 'raw'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'raw'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['text', 'text'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['%t', 'asdf', '%{getcwd()}'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['ffenc','%{strftime("%H:%M")}'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['raw', '%f'])$/;"	v
s	nvim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['text', 'text'])$/;"	v
s:Bookmark	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:CFG_TO_LSP_SEVERITY	nvim/plugged/ale/autoload/ale/lsp_window.vim	/^let s:CFG_TO_LSP_SEVERITY = {$/;"	v
s:COMPLETION_TRIGGER_CHARACTER	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^let s:COMPLETION_TRIGGER_CHARACTER = 2$/;"	v
s:COMPLETION_TRIGGER_INVOKED	nvim/plugged/ale/autoload/ale/lsp/message.vim	/^let s:COMPLETION_TRIGGER_INVOKED = 1$/;"	v
s:Creator	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Cursor	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:Cursor = {}$/;"	v
s:CursorManager	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:CursorManager = {}$/;"	v
s:Event	nvim/plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:FlagSet	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:Go	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = ""$/;"	v
s:Go	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = "\\<C-G>U"$/;"	v
s:INTERNAL_ERROR	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:INTERNAL_ERROR = -32603$/;"	v
s:INVALID_PARAMS	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:INVALID_PARAMS = -32602$/;"	v
s:INVALID_REQUEST	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:INVALID_REQUEST = -32600$/;"	v
s:KeyMap	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:LSP_INSERT_TEXT_FORMAT_PLAIN	nvim/plugged/ale/autoload/ale/completion.vim	/^let s:LSP_INSERT_TEXT_FORMAT_PLAIN = 1$/;"	v
s:LSP_INSERT_TEXT_FORMAT_SNIPPET	nvim/plugged/ale/autoload/ale/completion.vim	/^let s:LSP_INSERT_TEXT_FORMAT_SNIPPET = 2$/;"	v
s:LSP_MESSAGE_TYPE_DISABLED	nvim/plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_DISABLED = 0$/;"	v
s:LSP_MESSAGE_TYPE_ERROR	nvim/plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_ERROR = 1$/;"	v
s:LSP_MESSAGE_TYPE_INFORMATION	nvim/plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_INFORMATION = 3$/;"	v
s:LSP_MESSAGE_TYPE_LOG	nvim/plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_LOG = 4$/;"	v
s:LSP_MESSAGE_TYPE_WARNING	nvim/plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_WARNING = 2$/;"	v
s:Left	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^let s:Left = s:Go."\\<LEFT>"$/;"	v
s:MAX_COL_SIZE	nvim/plugged/ale/autoload/ale/highlight.vim	/^let s:MAX_COL_SIZE = 1073741824 " pow(2, 30)$/;"	v
s:MAX_POS_VALUES	nvim/plugged/ale/autoload/ale/highlight.vim	/^let s:MAX_POS_VALUES = 8$/;"	v
s:METHOD_NOT_FOUND	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:METHOD_NOT_FOUND = -32601$/;"	v
s:MenuController	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:NERDTree	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:Notifier	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Opener	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:PARSE_ERROR	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:PARSE_ERROR = -32700$/;"	v
s:Path	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:REQUEST_CANCELLED	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:REQUEST_CANCELLED = -32800$/;"	v
s:Right	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^let s:Right = s:Go."\\<RIGHT>"$/;"	v
s:SERVER_ERROR_END	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_ERROR_END = -32000$/;"	v
s:SERVER_ERROR_START	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_ERROR_START = -32099$/;"	v
s:SERVER_NOT_INITIALIZED	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_NOT_INITIALIZED = -32002$/;"	v
s:SEVERITY_ERROR	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_ERROR = 1$/;"	v
s:SEVERITY_HINT	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_HINT = 4$/;"	v
s:SEVERITY_INFORMATION	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_INFORMATION = 3$/;"	v
s:SEVERITY_WARNING	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_WARNING = 2$/;"	v
s:State	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:TAGS_METADATA_FILE_NAME	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^let s:TAGS_METADATA_FILE_NAME = '.tags'$/;"	v
s:TYPE	nvim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': type([])}$/;"	v
s:TreeDirNode	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeFileNode	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:UI	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UNKNOWN_ERROR_CODE	nvim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:UNKNOWN_ERROR_CODE = -32001$/;"	v
s:__ale_julia_project_filenames	nvim/plugged/ale/autoload/ale/julia.vim	/^let s:__ale_julia_project_filenames = ['REQUIRE', 'Manifest.toml', 'Project.toml']$/;"	v
s:_csscolor	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_csscolor   = s:_hexcolor . '\\|' . s:_funcexpr$/;"	v
s:_funcexpr	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_funcexpr   = s:_funcname . '[(]' . s:_numval . s:_listsep . s:_numval . s:_listsep . s:_numval . s:_ws_ . s:_otherargs_ . '[)]'$/;"	v
s:_funcname	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_funcname   = '\\(rgb\\|hsl\\)a\\?' " submatch 2$/;"	v
s:_hexcolor	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_hexcolor   = '#\\(\\x\\{3}\\|\\x\\{6}\\)\\>' " submatch 1$/;"	v
s:_listsep	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_listsep    = s:_ws_ . ','$/;"	v
s:_numval	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_numval     = s:_ws_ . '\\(\\d\\{1,3}%\\?\\)' " submatch 3,4,5$/;"	v
s:_otherargs_	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_otherargs_ = '\\%(,[^)]*\\)\\?'$/;"	v
s:_ws_	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_ws_        = '\\s*'$/;"	v
s:accents	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:accents = {}$/;"	v
s:access_modifier_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:activate	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:activate = 'activate'$/;"	v
s:activate	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:activate = ""$/;"	v
s:activated	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:activated = 0$/;"	v
s:active_winnr	nvim/plugged/vim-airline/plugin/airline.vim	/^let s:active_winnr = -1$/;"	v
s:added_db_files	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') ? '-addr=other' : ''$/;"	v
s:addr_tabs	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:airline_a_commandline	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_commandline = [ '#0000ff' , '#0cff00' , 17  , 40 ]$/;"	v
s:airline_a_inactive	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_inactive = [ '#4e4e4e' , '#1c1c1c' , 239 , 234 , '' ]$/;"	v
s:airline_a_insert	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_insert = [ '#00005f' , '#00dfff' , 17  , 45  ]$/;"	v
s:airline_a_normal	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_normal   = [ '#00005f' , '#dfff00' , 17  , 190 ]$/;"	v
s:airline_a_visual	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_visual = [ '#000000' , '#ffaf00' , 232 , 214 ]$/;"	v
s:airline_b_commandline	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_commandline = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_inactive	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_inactive = [ '#4e4e4e' , '#262626' , 239 , 235 , '' ]$/;"	v
s:airline_b_insert	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_insert = [ '#ffffff' , '#005fff' , 255 , 27  ]$/;"	v
s:airline_b_normal	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_normal   = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_visual	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_visual = [ '#000000' , '#ff5f00' , 232 , 202 ]$/;"	v
s:airline_c_commandline	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_commandline = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_inactive	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_inactive = [ '#4e4e4e' , '#303030' , 239 , 236 , '' ]$/;"	v
s:airline_c_insert	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_insert = [ '#ffffff' , '#000080' , 15  , 17  ]$/;"	v
s:airline_c_normal	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_normal   = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_visual	nvim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_visual = [ '#ffffff' , '#5f0000' , 15  , 52  ]$/;"	v
s:airline_initialized	nvim/plugged/vim-airline/plugin/airline.vim	/^let s:airline_initialized = 0$/;"	v
s:airline_tagbar_last_lookup_time	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_time = 0$/;"	v
s:airline_tagbar_last_lookup_val	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_val = ''$/;"	v
s:aliases	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:aliases = {}$/;"	v
s:ansi	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cyan': 36}$/;"	v
s:app	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "MacVim"$/;"	v
s:app	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "System Events"$/;"	v
s:app	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "Terminal"$/;"	v
s:app	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "iTerm2"$/;"	v
s:aqua	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:aqua   = s:getGruvColor('GruvboxAqua')$/;"	v
s:aqua	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua   = s:gb.bright_aqua$/;"	v
s:aqua	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua   = s:gb.faded_aqua$/;"	v
s:aqua	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua[1]   = 14$/;"	v
s:attr_pattern	nvim/plugged/vim-vue/syntax/vue.vim	/^  let s:attr_pattern = has_key(s:language, 'attr_pattern') ? s:language.attr_pattern : s:attr('lang', s:language.name)$/;"	v
s:attributes	nvim/plugged/vim-pug/indent/pug.vim	/^let s:attributes = '\\%((.\\{-\\})\\)'$/;"	v
s:autocommands_done	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:available	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:available = has('nvim') || ($/;"	v
s:backslash_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:backslash_continuation_regex = '%\\@<!\\\\\\s*$'$/;"	v
s:bad_input	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:bad_input = 0$/;"	v
s:base_spec	nvim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:basic16	nvim/plugged/vim-airline/autoload/airline/msdos.vim	/^let s:basic16 = [$/;"	v
s:before_function_called	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:before_function_called = 0$/;"	v
s:begin_failed_skip_pattern	nvim/plugged/ale/ale_linters/perl/perl.vim	/^let s:begin_failed_skip_pattern = '\\v' . join([$/;"	v
s:bg0	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg0  = s:getGruvColor('GruvboxBg0')$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_hard$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_soft$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_hard$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_soft$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0  = s:gb.dark0$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0  = s:gb.light0$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0[1]    = 0$/;"	v
s:bg1	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg1  = s:getGruvColor('GruvboxBg1')$/;"	v
s:bg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg1  = s:gb.dark1$/;"	v
s:bg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg1  = s:gb.light1$/;"	v
s:bg2	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg2  = s:getGruvColor('GruvboxBg2')$/;"	v
s:bg2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg2  = s:gb.dark2$/;"	v
s:bg2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg2  = s:gb.light2$/;"	v
s:bg3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg3  = s:gb.dark3$/;"	v
s:bg3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg3  = s:gb.light3$/;"	v
s:bg4	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg4  = s:getGruvColor('GruvboxBg4')$/;"	v
s:bg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg4  = s:gb.dark4$/;"	v
s:bg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg4  = s:gb.light4$/;"	v
s:bin	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  let s:bin.preview = 'bash '.escape(s:bin.preview, '\\')$/;"	v
s:bin	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	nvim/plugged/ale/autoload/ale/python.vim	/^let s:bin_dir = has('unix') ? 'bin' : 'Scripts'$/;"	v
s:bin_dir	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:h:h:h').'\/bin\/'$/;"	v
s:blobdirs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:block_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:block_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:blue	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:blue   = s:getGruvColor('GruvboxBlue')$/;"	v
s:blue	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue   = s:gb.bright_blue$/;"	v
s:blue	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue   = s:gb.faded_blue$/;"	v
s:blue	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue[1]   = 12$/;"	v
s:bold	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bold = ''$/;"	v
s:bold	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:bold = 'bold,'$/;"	v
s:bracket_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_switch_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:browsefilter	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:buf_min_count	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:buf_min_count = get(g:, 'airline#extensions#tabline#buffer_min_count', 0)$/;"	v
s:buf_modified_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_modified_symbol = g:airline_symbols.modified$/;"	v
s:buf_nr_format	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_nr_format = get(g:, 'airline#extensions#tabline#buffer_nr_format', '%s: ')$/;"	v
s:buf_nr_show	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_nr_show = get(g:, 'airline#extensions#tabline#buffer_nr_show', 0)$/;"	v
s:buffer_data	nvim/plugged/ale/autoload/ale/command.vim	/^    let s:buffer_data = {}$/;"	v
s:buffer_prototype	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_seqno	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:bufnr	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:bufnr       = bufnr('')$/;"	v
s:builder	nvim/plugged/vim-airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 0})$/;"	v
s:builder	nvim/plugged/vim-airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
s:builder	nvim/plugged/vim-airline/t/extensions_default.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
s:bvars	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:bvars = {$/;"	v
s:bx	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^let s:bx = '{\\%("[^"]*"\\|''[^'']*''\\|\\$#\\|\\${\\w\\+}\\|\\$\\+\\|{[^{]\\+\\|[^{}]\\)\\{-}}'$/;"	v
s:c_flag	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:c_flag = s:git_supports_command_line_config_override()$/;"	v
s:cached_map	nvim/plugged/ale/autoload/ale/filetypes.vim	/^let s:cached_map = {}$/;"	v
s:callbacks	nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:callbacks = {}$/;"	v
s:candidate_type	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let s:candidate_type = ''$/;"	v
s:cfilemap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:cfilemap = {}$/;"	v
s:cfilemap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:cfilemap.rhs = "substitute(&l:inex =~# '\\\\<v:fname\\\\>' && len(expand('<cfile>')) ? eval(substitute(&l:inex, '\\\\<v:fname\\\\>', '\\\\=string(expand(\\"<cfile>\\"))', 'g')) : '', '^$', \\"\\\\022\\\\006\\",'')"$/;"	v
s:cfilemap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:cfilemap = v:version >= 704 ? maparg('<Plug><cfile>', 'c', 0, 1) : {}$/;"	v
s:channel_log	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:channel_log = s:plugin_dir.'channel.log'$/;"	v
s:channel_map	nvim/plugged/ale/autoload/ale/socket.vim	/^let s:channel_map = get(s:, 'channel_map', {})$/;"	v
s:channel_map	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^    let s:channel_map[bufnr] = job_getchannel(job)$/;"	v
s:channel_map	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^    let s:channel_map[bufnr] = job_id$/;"	v
s:channel_map	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:channel_map = {}$/;"	v
s:char	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:char = ''$/;"	v
s:checked_ctags	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:classpath_sep	nvim/plugged/ale/ale_linters/java/javac.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:classpath_sep	nvim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:clean_jobs	nvim/plugged/vim-airline/autoload/airline/async.vim	/^let s:clean_jobs     = {}$/;"	v
s:client	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:client = v:null$/;"	v
s:clients	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:clients = {}$/;"	v
s:cm	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:cm = s:CursorManager.new()$/;"	v
s:cmd	nvim/plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^let s:cmd = join(['mix', 'run', '--no-start', '--no-compile', shellescape(s:path.'\/get_repos.exs')])$/;"	v
s:col_end_patterns	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^let s:col_end_patterns = [$/;"	v
s:color_bright	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:color_bright  = {}$/;"	v
s:color_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:color_column = get(s:gb, g:gruvbox_color_column)$/;"	v
s:color_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:color_column = s:bg1$/;"	v
s:color_idx	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:color_idx = {}$/;"	v
s:color_template	nvim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^let s:color_template = get(g:, 'airline#extensions#ctrlp#color_template', 'insert')$/;"	v
s:color_template	nvim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:color_template = get(g:, 'airline#extensions#promptline#color_template', 'normal')$/;"	v
s:color_template	nvim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:color_template = get(g:, 'airline#extensions#tmuxline#color_template', 'normal')$/;"	v
s:column_display	nvim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^let s:column_display = get(g:, 'airline#extensions#csv#column_display', 'Number')$/;"	v
s:column_width	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:column_width = &columns$/;"	v
s:column_width	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:column_width = &columns$/;"	v
s:command_output	nvim/plugged/ale/autoload/ale/assert.vim	/^let s:command_output = []$/;"	v
s:common_efm	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:common_efm = ''$/;"	v
s:commondirs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:compare_typeinfo	nvim/plugged/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:compile_commands_cache	nvim/plugged/ale/autoload/ale/c.vim	/^    let s:compile_commands_cache = {}$/;"	v
s:conceal	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:conceal = exists("+conceallevel") ? ' conceal' : ''$/;"	v
s:config	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:connections	nvim/plugged/ale/autoload/ale/lsp.vim	/^let s:connections = get(s:, 'connections', {})$/;"	v
s:contexts	nvim/plugged/vim-airline/autoload/airline.vim	/^let s:contexts = {}$/;"	v
s:continuable_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:continuable_regex =$/;"	v
s:continuation	nvim/plugged/typescript-vim/indent/typescript.vim	/^let s:continuation = get(g:,'typescript_continuation',$/;"	v
s:continuation	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
s:continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:continuation_regex =$/;"	v
s:core_funcrefs	nvim/plugged/vim-airline/autoload/airline.vim	/^let s:core_funcrefs = [$/;"	v
s:counter	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:counter = 0$/;"	v
s:countonly	nvim/plugged/html5.vim/indent/html.vim	/^let s:countonly = 0$/;"	v
s:cpo_sav	nvim/plugged/vim-ruby/indent/eruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_save	nvim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/html5.vim/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/typescript-vim/compiler/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/typescript-vim/ftplugin/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/typescript-vim/indent/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-elixir/compiler/exunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-elixir/indent/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-elixir/syntax/elixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/compiler/rake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/compiler/rspec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:ctagmap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:ctagmap = {}$/;"	v
s:ctagmap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:ctagmap = v:version >= 704 ? maparg('<Plug><ctag>', 'c', 0, 1) : {}$/;"	v
s:ctags_is_uctags	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:ctrlspace	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:ctrlspace = get(g:, 'CtrlSpaceLoaded', 0)$/;"	v
s:cubergb	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:cubergb = [ 0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF ]$/;"	v
s:current_ale_version	nvim/plugged/ale/autoload/ale.vim	/^let s:current_ale_version = [2, 6, 0]$/;"	v
s:current_bufnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_bufnr = cur$/;"	v
s:current_bufnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_bufnr = curbuf$/;"	v
s:current_bufnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_bufnr = -1$/;"	v
s:current_dir	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:current_dir = expand('%:p:h')$/;"	v
s:current_modified	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_modified = 0$/;"	v
s:current_syntax	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:current_syntax = vimwiki#vars#get_wikilocal('syntax')$/;"	v
s:current_tabcnt	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:current_tabcnt = -1$/;"	v
s:current_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_tabline = b.build()$/;"	v
s:current_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_tabline = b.build()$/;"	v
s:current_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_tabnr = curtab$/;"	v
s:current_tabnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabnr = -1$/;"	v
s:current_visible_buffers	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_visible_buffers = copy(b.buffers)$/;"	v
s:current_visible_buffers	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_visible_buffers = []$/;"	v
s:cursor_timer	nvim/plugged/ale/autoload/ale/cursor.vim	/^let s:cursor_timer = -1$/;"	v
s:cursor_timer	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^let s:cursor_timer = -1$/;"	v
s:custom_handlers_map	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^let s:custom_handlers_map = get(s:, 'custom_handlers_map', {})$/;"	v
s:debug	nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^let s:debug = 0$/;"	v
s:debug_enabled	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:decimal_group	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ''$/;"	v
s:decimal_group	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = '.'$/;"	v
s:default_action	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_ale_linter_aliases	nvim/plugged/ale/autoload/ale/linter.vim	/^let s:default_ale_linter_aliases = {$/;"	v
s:default_ale_linters	nvim/plugged/ale/autoload/ale/linter.vim	/^let s:default_ale_linters = {$/;"	v
s:default_checks	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:default_checks = ['indent', 'trailing', 'mixed-indent-file', 'conflicts']$/;"	v
s:default_normal_maps	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_normal_maps = {'!':1, '@':1, '=':1, 'q':1, 'r':1, 't':1, 'T':1, 'y':1, '[':1, ']':1, '\\':1, 'd':1, 'f':1, 'F':1, 'g':1, '"':1, 'z':1, 'c':1, 'm':1, '<':1, '>':1}$/;"	v
s:default_registry	nvim/plugged/ale/autoload/ale/fix/registry.vim	/^let s:default_registry = {$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax = g:vimwiki_syntax_variables['default']$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.bold_match = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<=\\*__Text__\\*'.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.bold_search = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<=\\*\\zs\\%([^*`[:space:]][^*`]*'.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.bullet_types = ['-', '*', '#']$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_bold = '*'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_bolditalic = '\\*_'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_code = '`'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_deltext = '\\~\\~'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_eqin = '\\$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_italic = '_'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_italicbold = '_\\*'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_subscript = ',,'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_superscript = '^'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.header_match = '^\\s*\\(=\\{1,6}\\)=\\@!\\s*__Header__\\s*\\1=\\@!\\s*$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.header_search = '^\\s*\\(=\\{1,6}\\)\\([^=].*[^=]\\)\\1\\s*$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.list_markers = ['-', '1.', '*', 'I)', 'a)']$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.number_types = ['1)', '1.', 'i)', 'I)', 'a)', 'A)']$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.recurring_bullets = 0$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxBold = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxBoldItalic = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxCode = '`[^`]\\+`'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxComment = '^\\s*%%.*$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxDelText = '\\~\\~[^~`]\\+\\~\\~'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxEqIn = '\\$[^$`]\\+\\$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxH = '='$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxHR = '^-----*$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxItalic = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxItalicBold = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxListDefine = '::\\(\\s\\|$\\)'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxMathEnd = '}}\\$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxMathStart = '{{\\$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxPreEnd = '}}}'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxPreStart = '{{{'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxSubScript = ',,[^,`]\\+,,'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxSuperScript = '\\^[^^`]\\+\\^'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxTableSep = '|'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxTags = '\\%(^\\|\\s\\)\\@<=:\\%([^:''[:space:]]\\+:\\)\\+\\%(\\s\\|$\\)\\@='$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.symH = 1$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.tag_match =  '\\(^\\|\\s\\):\\([^:''[:space:]]\\+:\\)*__Tag__:'.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.tag_search = '\\(^\\|\\s\\)\\zs:\\([^:''[:space:]]\\+:\\)\\+\\ze\\(\\s\\|$\\)'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.wikilink = '\\[\\[\\zs[^\\\\\\]|]\\+\\ze\\%(|[^\\\\\\]]\\+\\)\\?\\]\\]'$/;"	v
s:default_visual_maps	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_visual_maps = {'i':1, 'a':1, 'f':1, 'F':1, 't':1, 'T':1}$/;"	v
s:delayed_update_files	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:delimiter	nvim/plugged/vim-ruby/syntax/ruby.vim	/^    let s:delimiter = '\\' . s:delimiter$/;"	v
s:denite_ver	nvim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^let s:denite_ver = (exists('*denite#get_status_mode') ? 2 : 3)$/;"	v
s:diagnostics	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:diagnostics = {}$/;"	v
s:did_check_exe	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:dirArrows	nvim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpandable, '~]\\-')$/;"	v
s:dir_for_worktree	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:done	nvim/plugged/vim-gitgutter/test/runner.vim	/^  let s:done += 1$/;"	v
s:done	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:done = 0$/;"	v
s:dot_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:dot_continuation_regex = '%\\@<!\\.\\s*\\%(#.*\\)\\=$'$/;"	v
s:ell_len	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let s:ell_len = strlen(s:ellipsis)$/;"	v
s:ellipsis	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let s:ellipsis = (&enc ==? 'utf-8') ? "\\u2026" : "..."$/;"	v
s:emmet_settings	nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:emmet_settings = {$/;"	v
s:enable_neovim	nvim/plugged/ale/ale_linters/vim/vint.vim	/^let s:enable_neovim = has('nvim') ? ' --enable-neovim' : ''$/;"	v
s:enabled	nvim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:enabled = get(g:, 'airline#extensions#localsearch#enabled', 1)$/;"	v
s:enabled	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:enabled = get(g:, 'airline#extensions#whitespace#enabled', 1)$/;"	v
s:end_col_pattern_map	nvim/plugged/ale/ale_linters/python/flake8.vim	/^let s:end_col_pattern_map = {$/;"	v
s:end_col_patterns	nvim/plugged/ale/ale_linters/nim/nimcheck.vim	/^let s:end_col_patterns = [$/;"	v
s:end_end_regex	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_end_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_middle_regex	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_middle_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_skip_expr	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_start_regex =$/;"	v
s:end_start_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_start_regex =$/;"	v
s:endtags	nvim/plugged/html5.vim/indent/html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
s:error_sign	nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:error_sign = get(g:, 'coc_status_error_sign', has('mac') ? '❌ ' : 'E')$/;"	v
s:error_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:error_symbol = get(g:, 'airline#extensions#coc#error_symbol', 'E:')$/;"	v
s:error_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:error_symbol = get(g:, 'airline#extensions#languageclient#error_symbol', 'E:')$/;"	v
s:error_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:error_symbol = get(g:, 'airline#extensions#neomake#error_symbol', 'E:')$/;"	v
s:error_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:error_symbol = get(g:, 'airline#extensions#syntastic#error_symbol', 'E:')$/;"	v
s:error_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:error_symbol = get(g:, 'airline#extensions#ycm#error_symbol', 'E:')$/;"	v
s:errored	nvim/plugged/vim-gitgutter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:errored	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:errored = 0$/;"	v
s:errors	nvim/plugged/vim-gitgutter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errors	nvim/plugged/vim-gitgutter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:errors	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:errors = 0$/;"	v
s:exec_paths	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executable_cache_map	nvim/plugged/ale/autoload/ale/engine.vim	/^    let s:executable_cache_map = {}$/;"	v
s:executables	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:exists	nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^let s:exists = {}$/;"	v
s:expand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:expand_bufnr	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:ext	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext = {}$/;"	v
s:ext	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext._theme_funcrefs = []$/;"	v
s:fail	nvim/plugged/vim-gitgutter/test/runner.vim	/^      let s:fail += 1$/;"	v
s:fail	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:fail = 0$/;"	v
s:fg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg0 = s:gb.dark0$/;"	v
s:fg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg0 = s:gb.light0$/;"	v
s:fg1	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:fg1  = s:getGruvColor('GruvboxFg1')$/;"	v
s:fg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1 = s:gb.dark1$/;"	v
s:fg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1 = s:gb.light1$/;"	v
s:fg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1[1]    = 15$/;"	v
s:fg2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg2 = s:gb.dark2$/;"	v
s:fg2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg2 = s:gb.light2$/;"	v
s:fg3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg3 = s:gb.dark3$/;"	v
s:fg3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg3 = s:gb.light3$/;"	v
s:fg4	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:fg4  = s:getGruvColor('GruvboxFg4')$/;"	v
s:fg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4 = s:gb.dark4$/;"	v
s:fg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4 = s:gb.light4$/;"	v
s:fg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4[1]    = 7$/;"	v
s:fg4_256	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.dark4_256$/;"	v
s:fg4_256	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.light4_256$/;"	v
s:file_commit_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:filetype_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['diff'] = ['gina', '%{gina#component#repo#preset()}' ]$/;"	v
s:filetype_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['gina-branch'] = ['gina', '%{gina#component#repo#branch()}' ]$/;"	v
s:filetype_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['gina-log'] = ['gina', '%{gina#component#repo#preset()}' ]$/;"	v
s:filetype_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['gina-status'] = ['gina', '%{gina#component#repo#preset()}' ]$/;"	v
s:filetype_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['gina-tag'] = ['gina', '%{gina#component#repo#preset()}' ]$/;"	v
s:filetype_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = [ get(g:, 'NERDTreeStatusline', 'NERD'), '' ]$/;"	v
s:filetype_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = ['NERDTree', '']$/;"	v
s:filetype_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_overrides = {$/;"	v
s:filetype_regex_overrides	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_regex_overrides = {}$/;"	v
s:filtermx	nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:filtermx = '|\\(\\%(bem\\|html\\|blade\\|haml\\|slim\\|e\\|c\\|s\\|fc\\|xsl\\|t\\|\\\/[^ ]\\+\\)\\s*,\\{0,1}\\s*\\)*$'$/;"	v
s:first_rtp	nvim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:first_sign_id	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:first_sign_id = 3000$/;"	v
s:flag	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:flags	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:flags = get(g:, 'airline#extensions#tagbar#flags', '')$/;"	v
s:fmt_excmd	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fnamecollapse	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)$/;"	v
s:fnamecollapse	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^let s:fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)$/;"	v
s:fnameescape	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:fnametruncate	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:fnametruncate = get(g:, 'airline#extensions#tabline#fnametruncate', 0)$/;"	v
s:focus_was_lost	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let s:focus_was_lost = 0$/;"	v
s:fold_arg	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:fold_arg	    = s:foldable('string')		? ' fold'   : ''$/;"	v
s:foldable_groups	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:foldable_groups = split($/;"	v
s:format	nvim/plugged/ale/ale_linters/vim/vint.vim	/^let s:format = '-f "{file_path}:{line_number}:{column_number}: {severity}: {description} (see {reference})"'$/;"	v
s:formatter	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      let s:formatter = 'default'$/;"	v
s:formatter	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:formatter = get(g:, 'airline#extensions#wordcount#formatter', 'default')$/;"	v
s:from_mode	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:from_mode = ''$/;"	v
s:funcs	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:funcs = {}$/;"	v
s:gap_between_regions	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^let s:gap_between_regions = 5$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb = {}$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.aqua   = s:aqua$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg0 = s:bg0$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg1 = s:bg1$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg2 = s:bg2$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg3 = s:bg3$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg4 = s:bg4$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.blue   = s:blue$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_aqua    = ['#8ec07c', 108]     " 142-192-124$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_blue    = ['#83a598', 109]     " 131-165-152$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_green   = ['#b8bb26', 142]     " 184-187-38$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_orange  = ['#fe8019', 208]     " 254-128-25$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_purple  = ['#d3869b', 175]     " 211-134-155$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_red     = ['#fb4934', 167]     " 251-73-52$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_yellow  = ['#fabd2f', 214]     " 250-189-47$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0       = ['#282828', 235]     " 40-40-40$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0_hard  = ['#1d2021', 234]     " 29-32-33$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0_soft  = ['#32302f', 236]     " 50-48-47$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark1       = ['#3c3836', 237]     " 60-56-54$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark2       = ['#504945', 239]     " 80-73-69$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark3       = ['#665c54', 241]     " 102-92-84$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark4       = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark4_256   = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_aqua     = ['#427b58', 66]      " 66-123-88$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_blue     = ['#076678', 24]      " 7-102-120$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_green    = ['#79740e', 100]     " 121-116-14$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_orange   = ['#af3a03', 130]     " 175-58-3$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_purple   = ['#8f3f71', 96]      " 143-63-113$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_red      = ['#9d0006', 88]      " 157-0-6$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_yellow   = ['#b57614', 136]     " 181-118-20$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg0 = s:fg0$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg1 = s:fg1$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg2 = s:fg2$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg3 = s:fg3$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg4 = s:fg4$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg4_256 = s:fg4_256$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray = s:gray$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray_244    = ['#928374', 244]     " 146-131-116$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray_245    = ['#928374', 245]     " 146-131-116$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.green  = s:green$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0      = ['#fbf1c7', 229]     " 253-244-193$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0_hard = ['#f9f5d7', 230]     " 249-245-215$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0_soft = ['#f2e5bc', 228]     " 242-229-188$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light1      = ['#ebdbb2', 223]     " 235-219-178$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light2      = ['#d5c4a1', 250]     " 213-196-161$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light3      = ['#bdae93', 248]     " 189-174-147$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light4      = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light4_256  = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_aqua   = ['#689d6a', 72]      " 104-157-106$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_blue   = ['#458588', 66]      " 69-133-136$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_green  = ['#98971a', 106]     " 152-151-26$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_orange = ['#d65d0e', 166]     " 214-93-14$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_purple = ['#b16286', 132]     " 177-98-134$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_red    = ['#cc241d', 124]     " 204-36-29$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_yellow = ['#d79921', 172]     " 215-153-33$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.orange = s:orange$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.purple = s:purple$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.red    = s:red$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.yellow = s:yellow$/;"	v
s:getcmdwintype_exists	nvim/plugged/ale/autoload/ale.vim	/^let s:getcmdwintype_exists = exists('*getcmdwintype')$/;"	v
s:git_versions	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:global_variable_list	nvim/plugged/ale/autoload/ale/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:globsubs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:go_to_definition_map	nvim/plugged/ale/autoload/ale/definition.vim	/^let s:go_to_definition_map = {}$/;"	v
s:gray	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_244$/;"	v
s:gray	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_245$/;"	v
s:gray	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray[1]   = 8$/;"	v
s:green	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:green = s:getGruvColor('GruvboxGreen')$/;"	v
s:green	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green  = s:gb.bright_green$/;"	v
s:green	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green  = s:gb.faded_green$/;"	v
s:green	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green[1]  = 10$/;"	v
s:group	nvim/plugged/vim-ruby/syntax/ruby.vim	/^  let s:group = 'ruby' . s:names[s:delimiter] . 'Escape'$/;"	v
s:gui	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:gui = has('gui_running') || has('nvim')$/;"	v
s:has_features	nvim/plugged/ale/plugin/ale.vim	/^    let s:has_features = has('timers') && exists('*job_start') && exists('*ch_close_in')$/;"	v
s:has_features	nvim/plugged/ale/plugin/ale.vim	/^    let s:has_features = has('timers') && has('nvim-0.2.0')$/;"	v
s:has_nvim_highlight	nvim/plugged/ale/autoload/ale/highlight.vim	/^let s:has_nvim_highlight = exists('*nvim_buf_add_highlight') && exists('*nvim_buf_clear_namespace')$/;"	v
s:has_strcharpart	nvim/plugged/vim-airline/autoload/airline/util.vim	/^let s:has_strcharpart = exists('*strcharpart')$/;"	v
s:has_strchars	nvim/plugged/vim-airline/autoload/airline/util.vim	/^let s:has_strchars = exists('*strchars')$/;"	v
s:hash_colors	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:head_cache	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:head_format	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:head_format = get(g:, 'airline#extensions#branch#format', 0)$/;"	v
s:hex	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:hex[ printf( '%02x', i ) ] = i$/;"	v
s:hex	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:hex={}$/;"	v
s:hi_group_cursor	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_cursor = 'multiple_cursors_cursor'$/;"	v
s:hi_group_visual	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_visual = 'multiple_cursors_visual'$/;"	v
s:highlight_groups	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:highlight_groups	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:hl_groups	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:hl_groups = {}$/;"	v
s:hls_cursor	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:hls_cursor = get(s:gb, g:gruvbox_hls_cursor)$/;"	v
s:hls_cursor	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:hls_cursor = s:orange$/;"	v
s:hover_map	nvim/plugged/ale/autoload/ale/hover.vim	/^let s:hover_map = {}$/;"	v
s:html_indent	nvim/plugged/vim-vue/indent/vue.vim	/^let s:html_indent = s:get_indentexpr('html')$/;"	v
s:html_tags	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^  let s:html_tags = join(split(vimwiki#vars#get_global('valid_html_tags'), '\\s*,\\s*'), '\\|')$/;"	v
s:hunk_re	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:hunk_re = '^@@ -\\(\\d\\+\\),\\?\\(\\d*\\) +\\(\\d\\+\\),\\?\\(\\d*\\) @@'$/;"	v
s:hunk_symbols	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:hunk_symbols = get(g:, 'airline#extensions#hunks#hunk_symbols', ['+', '~', '-'])$/;"	v
s:iTerm_escape_template	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:iTerm_escape_template = '\\033]Pl%s\\033\\\\'$/;"	v
s:ics	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:in_comm	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:inactive_funcrefs	nvim/plugged/vim-airline/autoload/airline.vim	/^let s:inactive_funcrefs = []$/;"	v
s:include	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:include = &l:include$/;"	v
s:indent	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:indent = ''$/;"	v
s:indent	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:indent = max(map(copy(s:tests), {_, val -> len(FriendlyName(val))}))$/;"	v
s:indent_access_modifier_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:indent_access_modifier_regex = '\\C^\\s*\\%(protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:indent_tags	nvim/plugged/html5.vim/indent/html.vim	/^let s:indent_tags = {}$/;"	v
s:indexes	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:init	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:init=0$/;"	v
s:init_done	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:init_path	nvim/plugged/ale/autoload/ale/gradle.vim	/^let s:init_path = has('win32')$/;"	v
s:inline_pattern	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:inline_pattern = '\\v inlined from .* at \\<stdin\\>:(\\d+):(\\d+):$'$/;"	v
s:inverse	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:inverse = ''$/;"	v
s:inverse	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:inverse = 'inverse,'$/;"	v
s:invert_selection	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_selection = ''$/;"	v
s:invert_selection	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_selection = s:inverse$/;"	v
s:invert_signs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_signs = s:inverse$/;"	v
s:invert_signs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_signs = ''$/;"	v
s:invert_tabline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_tabline = s:inverse$/;"	v
s:invert_tabline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_tabline = ''$/;"	v
s:is_AppleTerminal	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_AppleTerminal = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'Apple_Terminal'$/;"	v
s:is_dark	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:is_dark=(&background == 'dark')$/;"	v
s:is_good	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_good = !has('gui_running') && !s:is_win && !s:is_AppleTerminal$/;"	v
s:is_gvim	nvim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_gvim = get(v:, 'progname', '') ==# 'gvim'$/;"	v
s:is_iTerm	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_iTerm = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'iTerm.app'$/;"	v
s:is_maximized	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_vim	nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	nvim/plugged/coc.nvim/autoload/coc/task.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	nvim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_win	nvim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	nvim/plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	nvim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	nvim/plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win32term	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:is_win32term = (has('win32') || has('win64')) &&$/;"	v
s:italic	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:italic = ''$/;"	v
s:italic	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italic = 'italic,'$/;"	v
s:italicize_comments	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:italicize_comments = ''$/;"	v
s:italicize_comments	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italicize_comments = s:italic$/;"	v
s:italicize_strings	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:italicize_strings = s:italic$/;"	v
s:italicize_strings	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italicize_strings = ''$/;"	v
s:italics	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^let s:italics = (((&t_ZH != '' && &t_ZH != '[7m') || has('gui_running')) && !has('iOS')) || has('nvim')$/;"	v
s:italics	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^let s:italics = s:italics && get(g:, 'gruvbox_italics', 1)$/;"	v
s:italics	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^let s:italics = (((&t_ZH != '' && &t_ZH != '[7m') || has('gui_running')) && !has('iOS')) || has('nvim')$/;"	v
s:italics	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^let s:italics = s:italics && get(g:, 'gruvbox_italics', 1)$/;"	v
s:italics	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^let s:italics = (((&t_ZH != '' && &t_ZH != '[7m') || has('gui_running')) && !has('iOS')) || has('nvim')$/;"	v
s:italics	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^let s:italics = s:italics && get(g:, 'gruvbox_italics', 1)$/;"	v
s:item_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:job_kill_timers	nvim/plugged/ale/autoload/ale/job.vim	/^    let s:job_kill_timers = {}$/;"	v
s:job_map	nvim/plugged/ale/autoload/ale/job.vim	/^    let s:job_map = {}$/;"	v
s:jsdoc_default_tags	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let s:jsdoc_default_tags = {$/;"	v
s:keepcpo	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^let s:keepcpo= &cpoptions$/;"	v
s:keyMaps	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:known_extensions	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:known_extensions = s:vimwiki_get_known_extensions()$/;"	v
s:known_files	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:l_O	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  let s:l_O = matchstr(&langmap, '\\C,\\zs.\\zeO,')$/;"	v
s:l_o	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  let s:l_o = matchstr(&langmap, '\\C,\\zs.\\zeo,')$/;"	v
s:language	nvim/plugged/vim-vue/indent/vue.vim	/^    let s:language.indentexpr = s:get_indentexpr(s:language.name)$/;"	v
s:languages	nvim/plugged/vim-vue/indent/vue.vim	/^let s:languages = [$/;"	v
s:languages	nvim/plugged/vim-vue/syntax/vue.vim	/^let s:languages = [$/;"	v
s:last_alt_bufnr	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_done_pos	nvim/plugged/ale/autoload/ale/completion.vim	/^let s:last_done_pos = []$/;"	v
s:last_highlight_tline	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_mode	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:last_mode = ''$/;"	v
s:last_pattern_options	nvim/plugged/ale/autoload/ale/pattern_options.vim	/^let s:last_pattern_options = {}$/;"	v
s:last_pos	nvim/plugged/ale/autoload/ale/cursor.vim	/^let s:last_pos = [0, 0, 0]$/;"	v
s:last_pos	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^let s:last_pos = [0, 0, 0]$/;"	v
s:last_rtp	nvim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:last_time	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:latency_debug_file	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:latency_debug_file = ''$/;"	v
s:layout	nvim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:layout = get(g:, 'airline#extensions#default#layout', [$/;"	v
s:layout_keys	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:leading_operator_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:leading_operator_regex = '^\\s*\\%(&\\=\\.\\)'$/;"	v
s:lines	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:lines = join(getline(1, 5) + [getline('$')], "\\n")$/;"	v
s:lines	nvim/plugged/vim-elixir/syntax/eelixir.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lint_timer	nvim/plugged/ale/autoload/ale.vim	/^let s:lint_timer = -1$/;"	v
s:linters	nvim/plugged/ale/autoload/ale/linter.vim	/^let s:linters = {}$/;"	v
s:lisp_regex	nvim/plugged/ale/autoload/ale/completion.vim	/^let s:lisp_regex = '\\v[a-zA-Z_\\-][a-zA-Z_\\-0-9]*$'$/;"	v
s:loaded	nvim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	nvim/plugged/vim-airline/autoload/airline/init.vim	/^let s:loaded = 0$/;"	v
s:loaded_ext	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:loaded_ext = []$/;"	v
s:log_file	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:log_file    = s:plugin_dir.'gitgutter.log'$/;"	v
s:logfile	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:logfile = tempname()$/;"	v
s:logging	nvim/plugged/emmet-vim/unittest.vim	/^let s:logging = 0$/;"	v
s:lsp_linter_map	nvim/plugged/ale/autoload/ale/lsp_linter.vim	/^    let s:lsp_linter_map = {}$/;"	v
s:mac_gui	nvim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:map_next	nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:map_next = 1$/;"	v
s:map_prefix	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:map_prefix = vimwiki#vars#get_global('map_prefix')$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax = g:vimwiki_syntax_variables['markdown']$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.bold_match = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<=\\*__Text__\\*'.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.bold_search = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<=\\*\\zs'.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.bullet_types = ['-', '*', '+']$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_bold = '*'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_bolditalic = '\\*_'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_code = '`'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_deltext = '\\~\\~'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_eqin = '\\$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_italic = '_'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_italicbold = '_\\*'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_subscript = ',,'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_superscript = '^'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.header_match = '^\\s*\\(#\\{1,6}\\)#\\@!\\s*__Header__\\s*$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.header_search = '^\\s*\\(#\\{1,6}\\)\\([^#].*\\)$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.list_markers = ['-', '*', '+', '1.']$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.number_types = ['1.']$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.recurring_bullets = 0$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxBold = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxBoldItalic = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxCode = '`[^`]\\+`'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxComment = '^\\s*%%.*$\\|<!--[^>]*-->'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxDelText = '\\~\\~[^~`]\\+\\~\\~'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxEqIn = '\\$[^$`]\\+\\$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxH = '#'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxHR = '^-----*$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxItalic = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxItalicBold = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxListDefine = '::\\%(\\s\\|$\\)'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxMathEnd = '\\$\\$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxMathStart = '\\$\\$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxPreEnd = '```'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxPreStart = '```'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxSubScript = ',,[^,`]\\+,,'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxSuperScript = '\\^[^^`]\\+\\^'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxTableSep = '|'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxTags = '\\%(^\\|\\s\\)\\@<=:\\%([^:[:space:]]\\+:\\)\\+\\%(\\s\\|$\\)\\@='$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.symH = 0$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.tag_match = '\\(^\\|\\s\\):\\([^:''[:space:]]\\+:\\)*__Tag__:'.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.tag_search = '\\(^\\|\\s\\)\\zs:\\([^:''[:space:]]\\+:\\)\\+\\ze\\(\\s\\|$\\)'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.wikilink = '\\[\\[\\zs[^\\\\\\]|]\\+\\ze\\%(|[^\\\\\\]]\\+\\)\\?\\]\\]'$/;"	v
s:match_words	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^let s:match_words = ""$/;"	v
s:match_words	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let s:match_words = ""$/;"	v
s:match_words	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
s:me	nvim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax = g:vimwiki_syntax_variables['media']$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.bold_match = '''''''__Text__'''''''$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.bold_search = "'''\\\\zs[^']\\\\+\\\\ze'''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.bullet_types = ['*', '#']$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_bold = "'''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_bolditalic = "'''''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_code = '`'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_deltext = '\\~\\~'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_eqin = '\\$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_italic = "''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_italicbold = s:media_syntax.char_bolditalic$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_subscript = ',,'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_superscript = '^'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.header_match = '^\\s*\\(=\\{1,6}\\)=\\@!\\s*__Header__\\s*\\1=\\@!\\s*$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.header_search = '^\\s*\\(=\\{1,6}\\)\\([^=].*[^=]\\)\\1\\s*$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.list_markers = ['*', '#']$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.number_types = []$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.recurring_bullets = 1$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxBold = "'''[^']\\\\+'''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxBoldItalic = "'''''[^']\\\\+'''''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxCode = '`[^`]\\+`'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxComment = '^\\s*%%.*$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxDelText = '\\~\\~[^~]\\+\\~\\~'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxEqIn = '\\$[^$`]\\+\\$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxH = '='$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxHR = '^-----*$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxItalic = "''[^']\\\\+''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxItalicBold = s:media_syntax.rxBoldItalic$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxListDefine = '^\\%(;\\|:\\)\\s'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxMathEnd = '}}\\$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxMathStart = '{{\\$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxPreEnd = '<\\\/pre>'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxPreStart = '<pre>'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxSubScript = ',,[^,]\\+,,'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxSuperScript = '\\^[^^]\\+\\^'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxTableSep = '|'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxTags = '\\%(^\\|\\s\\)\\@<=:\\%([^:[:space:]]\\+:\\)\\+\\%(\\s\\|$\\)\\@='$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.symH = 1$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.tag_match = '\\(^\\|\\s\\):\\([^:''[:space:]]\\+:\\)*__Tag__:'.$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.tag_search = '\\(^\\|\\s\\)\\zs:\\([^:''[:space:]]\\+:\\)\\+\\ze\\(\\s\\|$\\)'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.wikilink = '\\[\\[\\zs[^\\\\\\]|]\\+\\ze\\%(|[^\\\\\\]]\\+\\)\\?\\]\\]'$/;"	v
s:merge_heads	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:messages	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:messages = []$/;"	v
s:mq_jobs	nvim/plugged/vim-airline/autoload/airline/async.vim	/^let s:mq_jobs        = {}$/;"	v
s:mx	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^let s:mx = '\\([+>]\\|[<^]\\+\\)\\{-}'$/;"	v
s:name	nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:name = 'coc'$/;"	v
s:names	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:names = {'0': 'index', '1': 'orig', '2':'fetch', '3':'merge'}$/;"	v
s:names	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:names = { '~': 'Tilde', '`': 'BackQuote', '!': 'Bang', '@': 'At', '#': 'Hash', '$': 'Dollar', '%': 'Percent', '^': 'Caret',$/;"	v
s:namespace_cache	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_cache = {}$/;"	v
s:namespace_id	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_id = 1$/;"	v
s:nbs	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:nearby_disabled	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:needs_cppstructure_match	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^	let s:needs_cppstructure_match += 1$/;"	v
s:needs_cppstructure_match	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^	let s:needs_cppstructure_match += 2$/;"	v
s:needs_cppstructure_match	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^let s:needs_cppstructure_match = 0$/;"	v
s:nested	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^  let s:nested = extend(s:nested, vimwiki#base#detect_nested_syntax(), "keep")$/;"	v
s:nested	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:nested = vimwiki#vars#get_wikilocal('nested_syntaxes')$/;"	v
s:new_log_session	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:new_log_session = 1$/;"	v
s:new_window	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:newline	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let s:newline = (&enc ==? 'utf-8') ? "\\u21b2 " : "  "$/;"	v
s:next_sign_id	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:next_sign_id  = s:first_sign_id$/;"	v
s:nomodeline	nvim/plugged/vim-airline/autoload/airline/util.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has("patch438"))) ? '<nomodeline>' : ''$/;"	v
s:nomodeline	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:non_bracket_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:non_bracket_continuation_regex =$/;"	v
s:non_zero_only	nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:non_zero_only = get(g:, 'airline#extensions#hunks#non_zero_only', 0)$/;"	v
s:none	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:none = ['NONE', 'NONE']$/;"	v
s:nowait	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nowait	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:ns_id	nvim/plugged/ale/autoload/ale/highlight.vim	/^    let s:ns_id = nvim_create_namespace('ale_highlight')$/;"	v
s:ns_id	nvim/plugged/ale/autoload/ale/virtualtext.vim	/^    let s:ns_id = nvim_create_namespace('ale')$/;"	v
s:number_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:number_column = get(s:gb, g:gruvbox_number_column)$/;"	v
s:number_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:number_column = s:none$/;"	v
s:number_map	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = &encoding == 'utf-8'$/;"	v
s:number_map	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = {$/;"	v
s:nvim	nvim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:old_cpo	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:old_cpo	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:old_cpo = &cpo$/;"	v
s:omni_start_map	nvim/plugged/ale/autoload/ale/completion.vim	/^let s:omni_start_map = {$/;"	v
s:opfirst	nvim/plugged/typescript-vim/indent/typescript.vim	/^let s:opfirst = '^' . get(g:,'typescript_opfirst',$/;"	v
s:opfirst	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:options	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^  let s:options .= s:conceal$/;"	v
s:options	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:options = ' contained transparent contains=NONE'$/;"	v
s:options	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^let s:options = ' contained transparent contains=NONE'$/;"	v
s:orange	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:orange = s:getGruvColor('GruvboxOrange')$/;"	v
s:orange	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:orange = s:gb.bright_orange$/;"	v
s:orange	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:orange = s:gb.faded_orange$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p = {'normal':{}, 'inactive':{}, 'insert':{}, 'replace':{}, 'visual':{}, 'tabline':{}, 'terminal':{}}$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.left =  [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.middle = [ [ s:bg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.right = [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.left = [ [ s:bg0, s:blue, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.right = [ [ s:bg0, s:blue ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.error = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.left = [ [ s:bg0, s:fg4, 'bold' ], [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.right = [ [ s:bg0, s:fg4 ], [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.warning = [ [ s:bg2, s:yellow ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.left = [ [ s:bg0, s:aqua, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.right = [ [ s:bg0, s:aqua ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.left = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.middle = [ [ s:bg0, s:bg0 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.right = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.tabsel = [ [ s:bg0, s:fg4 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.left = [ [ s:bg0, s:green, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.right = [ [ s:bg0, s:green ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.left = [ [ s:bg0, s:orange, 'bold' ], [ s:bg0, s:bg4 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.right = [ [ s:bg0, s:orange ], [ s:bg0, s:bg4 ] ]$/;"	v
s:partial_timers	nvim/plugged/ale/autoload/ale/util.vim	/^    let s:partial_timers = {}$/;"	v
s:parts	nvim/plugged/vim-airline/autoload/airline/parts.vim	/^let s:parts = {}$/;"	v
s:paste_buffer_temporary_text	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_text = ''$/;"	v
s:paste_buffer_temporary_type	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_type = ''$/;"	v
s:pat_for_type	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:pat_for_type = [ '^$', s:_hexcolor, s:_csscolor, '^$' ]$/;"	v
s:path	nvim/plugged/vim-elixir/autoload/db/adapter/ecto.vim	/^let s:path = expand('<sfile>:h')$/;"	v
s:path	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:path = &l:path$/;"	v
s:pattern	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:pattern = '\\v^([a-zA-Z]?:?[^:]+):(\\d+):(\\d+)?:? ([^:]+): (.+)$'$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? :\\)\\@='$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:pattern_color	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:pattern_color = {}$/;"	v
s:paused	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:plug_buf	nvim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	nvim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	nvim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plugin_dir	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:plugin_dir  = expand('<sfile>:p:h:h:h').'\/'$/;"	v
s:plugin_dir	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:plugin_dir = expand('<sfile>:p:h:h')$/;"	v
s:plugin_vers	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:plugin_vers = "2.4.1"$/;"	v
s:po_jobs	nvim/plugged/vim-airline/autoload/airline/async.vim	/^let s:po_jobs        = {}$/;"	v
s:pragma_error	nvim/plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:pragma_error = '#pragma once in main file'$/;"	v
s:prepare_env	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:prompt_snapshot_file	nvim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:prompt_snapshot_file = get(g:, 'airline#extensions#promptline#snapshot_file', '')$/;"	v
s:prop_id	nvim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:prop_id = 1000$/;"	v
s:prototype	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype.overflow_group = 'airline_tab'$/;"	v
s:purple	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple = s:gb.bright_purple$/;"	v
s:purple	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple = s:gb.faded_purple$/;"	v
s:purple	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple[1] = 13$/;"	v
s:pwin_by_tagbar	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:quit	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:quit = "quit"$/;"	v
s:quit	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:quit = ""$/;"	v
s:rebase_abbrevs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:red	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red    = s:gb.bright_red$/;"	v
s:red	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red    = s:gb.faded_red$/;"	v
s:red	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red[1]    = 9$/;"	v
s:redirects	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:redirects = {}$/;"	v
s:reference	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^let s:reference = '\\<\\%(\\c\\%(clos\\|resolv\\|referenc\\)e[sd]\\=\\|\\cfix\\%(e[sd]\\)\\=\\)\\>'$/;"	v
s:reference	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^let s:reference = '\\<\\%(\\c\\%(clos\\|resolv\\|referenc\\)e[sd]\\=\\|\\cfix\\%(e[sd]\\)\\=\\)\\>'$/;"	v
s:references_map	nvim/plugged/ale/autoload/ale/references.vim	/^let s:references_map = {}$/;"	v
s:regexs	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let s:regexs = {$/;"	v
s:rel	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:rel = has('reltime')$/;"	v
s:rename_map	nvim/plugged/ale/autoload/ale/rename.vim	/^let s:rename_map = {}$/;"	v
s:repo_prototype	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repos = {}$/;"	v
s:retry_keys	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:retry_keys = ""$/;"	v
s:root	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	nvim/plugged/coc.nvim/autoload/health/coc.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	nvim/plugged/coc.nvim/plugin/coc.vim	/^let s:root = expand('<sfile>:h:h')$/;"	v
s:rootNERDTreePath	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand("<sfile>:p:h:h"))$/;"	v
s:ruby_deindent_keywords	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:ruby_indent_keywords =$/;"	v
s:ruby_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
s:ruby_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path$/;"	v
s:ruby_paths	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_default_path$/;"	v
s:ruby_paths	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]$/;"	v
s:rubycomplete_debug	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rubycomplete_rails_loaded	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:runner_exe	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = gutentags#get_plat_file('update_tags')$/;"	v
s:running_task	nvim/plugged/coc.nvim/autoload/coc/task.vim	/^let s:running_task = {}$/;"	v
s:runtime_loaded_map	nvim/plugged/ale/autoload/ale/linter.vim	/^let s:runtime_loaded_map = {}$/;"	v
s:rxSchemes	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:rxSchemes = '\\%('.$/;"	v
s:rxSchemes	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^let s:rxSchemes = '\\%('.$/;"	v
s:save_cpo	nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	nvim/plugged/emmet-vim/plugin/emmet.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	nvim/plugged/vim-jsdoc/ftplugin/javascript/jsdoc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	nvim/plugged/vim-jsdoc/ftplugin/typescript/jsdoc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^let s:save_cpo = &cpo$/;"	v
s:saved_char	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_char = ''$/;"	v
s:saved_cursor	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:saved_cursor = &guicursor$/;"	v
s:saved_keys	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_keys = ""$/;"	v
s:saved_line	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_line = 0$/;"	v
s:saved_linecount	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_linecount = -1$/;"	v
s:saved_ve	nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:saved_ve = &t_ve$/;"	v
s:script_path	nvim/plugged/ale/autoload/ale/gradle.vim	/^let s:script_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:script_path	nvim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:script_path = tolower(resolve(expand('<sfile>:p:h')))$/;"	v
s:section_a	nvim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^let s:section_a = airline#section#create_left(['terminal', 'tmode'])$/;"	v
s:section_commit_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:section_truncate_width	nvim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_truncate_width = get(g:, 'airline#extensions#default#section_truncate_width', {$/;"	v
s:section_use_groups	nvim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_use_groups     = get(g:, 'airline#extensions#default#section_use_groupitems', 1)$/;"	v
s:sections	nvim/plugged/vim-airline/autoload/airline.vim	/^let s:sections = ['a','b','c','gutter','x','y','z', 'error', 'warning']$/;"	v
s:sections	nvim/plugged/vim-airline/t/init.vim	/^let s:sections = ['a', 'b', 'c', 'gutter', 'x', 'y', 'z', 'warning']$/;"	v
s:seed	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^let s:seed = localtime()$/;"	v
s:select_api	nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:select_api = exists('*nvim_select_popupmenu_item')$/;"	v
s:sep	nvim/plugged/ale/autoload/ale/c.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	nvim/plugged/ale/autoload/ale/handlers/eslint.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	nvim/plugged/ale/autoload/ale/python.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:separators	nvim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:separators = {}$/;"	v
s:set_path_handler	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:set_path_handler = {}$/;"	v
s:settings	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings = {$/;"	v
s:settings_if_default	nvim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings_if_default = {$/;"	v
s:severity_error	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_error = 1$/;"	v
s:severity_hint	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_hint = 4$/;"	v
s:severity_info	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_info = 3$/;"	v
s:severity_warning	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_warning = 2$/;"	v
s:sfile	nvim/plugged/emmet-vim/unittest.vim	/^let s:sfile = expand('<sfile>')$/;"	v
s:sha1size	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:sha1size = get(g:, 'airline#extensions#branch#sha1_len', 7)$/;"	v
s:short_help	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:should_complete_map	nvim/plugged/ale/autoload/ale/completion.vim	/^let s:should_complete_map = {$/;"	v
s:show_buffers	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:show_line_numbers	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:show_line_numbers = get(g:, 'airline#extensions#languageclient#show_line_numbers', 1)$/;"	v
s:show_message	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:show_message = get(g:, 'airline#extensions#whitespace#show_message', 1)$/;"	v
s:sign_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:sign_column = get(s:gb, g:gruvbox_sign_column)$/;"	v
s:sign_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:sign_column = s:number_column$/;"	v
s:sign_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:sign_column = s:bg1$/;"	v
s:skip_check_ft	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:skip_check_ft = {'make': ['indent', 'mixed-indent-file']}$/;"	v
s:skip_expr	nvim/plugged/typescript-vim/indent/typescript.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),0),'name') =~? '".s:syng_strcom."'"$/;"	v
s:skip_expr	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:skip_expr	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:skip_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^let s:skip_symbol = '…'$/;"	v
s:sorted_items	nvim/plugged/ale/autoload/ale/pattern_options.vim	/^let s:sorted_items = []$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/section.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	nvim/plugged/vim-airline/autoload/airline/util.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:special_keys	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:special_keys = {$/;"	v
s:spell_cluster	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:spell_cluster = exists('ruby_spellcheck_strings') ? ',@Spell' : ''$/;"	v
s:splat_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:start_pattern	nvim/plugged/vim-vue/syntax/vue.vim	/^  let s:start_pattern = '<' . s:language.tag . '\\>\\_[^>]*' . s:attr_pattern . '\\_[^>]*>'$/;"	v
s:statusline_in_use	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:suffixesadd	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
s:supports_sign_groups	nvim/plugged/ale/autoload/ale/sign.vim	/^let s:supports_sign_groups = has('nvim-0.4.2') || (v:version >= 801 && has('patch614'))$/;"	v
s:supports_star	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:supports_star = v:version > 703 || (v:version == 703 && has("patch596"))$/;"	v
s:symbol	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:symbol = get(g:, 'airline#extensions#whitespace#symbol', g:airline_symbols.whitespace)$/;"	v
s:symbol_map	nvim/plugged/ale/autoload/ale/symbol.vim	/^let s:symbol_map = {}$/;"	v
s:syng_com	nvim/plugged/typescript-vim/indent/typescript.vim	/^let s:syng_com = 'comment\\|doc'$/;"	v
s:syng_str	nvim/plugged/typescript-vim/indent/typescript.vim	/^let s:syng_str = 'string\\|template\\|special'$/;"	v
s:syng_strcom	nvim/plugged/typescript-vim/indent/typescript.vim	/^let s:syng_strcom = 'string\\|comment\\|regex\\|special\\|doc\\|template\\%(braces\\)\\@!'$/;"	v
s:syng_strcom	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_strcom = s:syng_stringdoc + [$/;"	v
s:syng_string	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_stringdoc = s:syng_string + ['Documentation']$/;"	v
s:t_Co	nvim/plugged/vim-gruvbox8/colors/gruvbox8.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_Co	nvim/plugged/vim-gruvbox8/colors/gruvbox8_hard.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_Co	nvim/plugged/vim-gruvbox8/colors/gruvbox8_soft.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_string	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^let s:t_string = type('')$/;"	v
s:tab_min_count	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:tab_min_count = get(g:, 'airline#extensions#tabline#tab_min_count', 0)$/;"	v
s:taboo	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:taboo = get(g:, 'airline#extensions#taboo#enabled', 1) && get(g:, 'loaded_taboo', 0)$/;"	v
s:tabws	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:tabws = get(g:, 'tabws_loaded', 0)$/;"	v
s:tag	nvim/plugged/vim-pug/indent/pug.vim	/^let s:tag = '\\([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:target	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:target = vimwiki#base#apply_template($/;"	v
s:target	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^let s:target = vimwiki#base#apply_template($/;"	v
s:temp_buffer	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_buffer = tempname()$/;"	v
s:temp_dir	nvim/plugged/ale/autoload/ale/handlers/haskell.vim	/^let s:temp_dir = fnamemodify(ale#util#Tempname(), ':h')$/;"	v
s:temp_dir	nvim/plugged/ale/autoload/ale/path.vim	/^let s:temp_dir = ale#path#Simplify(fnamemodify(ale#util#Tempname(), ':h'))$/;"	v
s:temp_files	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_from	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_from = tempname()$/;"	v
s:temp_regex_prefix	nvim/plugged/ale/autoload/ale/handlers/haskell.vim	/^let s:temp_regex_prefix =$/;"	v
s:test_repo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:test_repo   = s:current_dir.'\/test-repo'$/;"	v
s:tests	nvim/plugged/vim-gitgutter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:tests	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:textwidth	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^let s:textwidth = &tw$/;"	v
s:timer_args	nvim/plugged/ale/autoload/ale/list.vim	/^    let s:timer_args = {}$/;"	v
s:timer_id	nvim/plugged/ale/autoload/ale/completion.vim	/^let s:timer_id = -1$/;"	v
s:tmuxline_snapshot_file	nvim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:tmuxline_snapshot_file = get(g:, 'airline#extensions#tmuxline#snapshot_file', '')$/;"	v
s:to_mode	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:to_mode = ''$/;"	v
s:tolerance	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let s:tolerance = 5$/;"	v
s:tree_up_dir_line	nvim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:trees	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:trigger_character_map	nvim/plugged/ale/autoload/ale/completion.vim	/^let s:trigger_character_map = {$/;"	v
s:triggers	nvim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:type	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:type         = [ 'none', 'hex', 'css', 'none' ] " with wraparound for index() == -1$/;"	v
s:type_init_done	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:undercurl	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:undercurl = ''$/;"	v
s:undercurl	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:undercurl = 'undercurl,'$/;"	v
s:underline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:underline = ''$/;"	v
s:underline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:underline = 'underline,'$/;"	v
s:undo_ftplugin	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	nvim/plugged/vim-elixir/ftplugin/eelixir.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:unix_redir	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:untracked_jobs	nvim/plugged/vim-airline/autoload/airline/async.vim	/^let s:untracked_jobs = {}$/;"	v
s:update_in_progress	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:use_word_boundary	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:use_word_boundary = 1$/;"	v
s:var	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:var = '\\%(%\\|#<\\=\\d\\+\\|##\\=\\)'$/;"	v
s:vcs_config	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:vcs_config = {$/;"	v
s:version_cache	nvim/plugged/ale/ale_linters/java/eclipselsp.vim	/^let s:version_cache = {}$/;"	v
s:version_cache	nvim/plugged/ale/autoload/ale/semver.vim	/^let s:version_cache = {}$/;"	v
s:version_file	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:version_file = findfile('.ruby-version', '.;')$/;"	v
s:vert_split	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:vert_split = get(s:gb, g:gruvbox_vert_split)$/;"	v
s:vert_split	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vert_split = s:bg0$/;"	v
s:vim8	nvim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_bg	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vim_bg = ['bg', 'bg']$/;"	v
s:vim_fg	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vim_fg = ['fg', 'fg']$/;"	v
s:vim_quitting	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:vimwiki_autowriteall_saved	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  let s:vimwiki_autowriteall_saved = 1$/;"	v
s:vimwiki_autowriteall_saved	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  let s:vimwiki_autowriteall_saved = g:vimwiki_autowriteall$/;"	v
s:vimwiki_max_scan_for_caption	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^let s:vimwiki_max_scan_for_caption = 5$/;"	v
s:visibility_symbols	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:warning_sign	nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:warning_sign = get(g:, 'coc_status_warning_sign', has('mac') ? '⚠️ ' : 'W')$/;"	v
s:warning_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#coc#warning_symbol', 'W:')$/;"	v
s:warning_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#languageclient#warning_symbol', 'W:')$/;"	v
s:warning_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#neomake#warning_symbol', 'W:')$/;"	v
s:warning_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#syntastic#warning_symbol', 'W:')$/;"	v
s:warning_symbol	nvim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#ycm#warning_symbol', 'W:')$/;"	v
s:warnings	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:watched_keys	nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:watched_keys = []$/;"	v
s:wide	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:wildignores_options_path	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:window_expanded	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:winid	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:winid = 0$/;"	v
s:winrestcmd	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:word_regex_list	nvim/plugged/ale/ale_linters/vim/vint.vim	/^let s:word_regex_list = [$/;"	v
s:wordcount_cache	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:wordcount_cache = 0  " cache wordcount for performance when force_update=0$/;"	v
s:worktree_for_dir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:xterm_escape_template	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:xterm_escape_template = '\\033]12;%s\\007'$/;"	v
s:xtermcolor	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xtermcolor += map(range(24),'repeat([10*v:val+8],3) + [v:val+232]')$/;"	v
s:xtermcolor	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xtermcolor = [$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant = repeat([0],48)$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[2]] = 2$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[3]] = 3$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[4]] = 4$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[5]] = 5$/;"	v
s:yellow	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:yellow = s:getGruvColor('GruvboxYellow')$/;"	v
s:yellow	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow = s:gb.bright_yellow$/;"	v
s:yellow	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow = s:gb.faded_yellow$/;"	v
s:yellow	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow[1] = 11$/;"	v
s:z	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
safari	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	safari: \/webkit\/.test( userAgent ),$/;"	P
safe	nvim/plugged/coc.nvim/build/index.js	/^function safe (val) {$/;"	F
safeGetProperty	nvim/plugged/coc.nvim/build/index.js	/^function safeGetProperty(object, property) {$/;"	F
safe_html_line	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:safe_html_line(line)$/;"	f
safe_html_preformatted	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:safe_html_preformatted(line)$/;"	f
safesubstitute	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:safesubstitute(text, search, replace, mode)$/;"	f
safesubstitute	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! s:safesubstitute(text, search, replace, mode)$/;"	f
satisfies	nvim/plugged/coc.nvim/build/index.js	/^function satisfies (version, range, options) {$/;"	F
save	nvim/plugged/coc.nvim/build/index.js	/^                        save: undefined$/;"	P
save	nvim/plugged/coc.nvim/build/index.js	/^                        save: {$/;"	P
save	nvim/plugged/coc.nvim/build/index.js	/^function save(namespaces) {$/;"	F
saveRefactor	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async saveRefactor(bufnr: number): Promise<void> {$/;"	m
saveRefactor	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public async saveRefactor(): Promise<boolean> {$/;"	m
save_fold_state	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:save_fold_state()$/;"	f
save_last_seen_change	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:save_last_seen_change(bufnr) abort$/;"	f
save_pos	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:save_pos(f,...)$/;"	f
savedHeight	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private savedHeight: number$/;"	m
scanHexDigits	nvim/plugged/coc.nvim/build/index.js	/^    function scanHexDigits(count, exact) {$/;"	F
scanNext	nvim/plugged/coc.nvim/build/index.js	/^    function scanNext() {$/;"	F
scanNextNonTrivia	nvim/plugged/coc.nvim/build/index.js	/^    function scanNextNonTrivia() {$/;"	F
scanNumber	nvim/plugged/coc.nvim/build/index.js	/^    function scanNumber() {$/;"	F
scanString	nvim/plugged/coc.nvim/build/index.js	/^    function scanString() {$/;"	F
scan_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:scan_tags(lines, page_name)$/;"	f
sched	nvim/plugged/coc.nvim/build/index.js	/^    sched() {$/;"	M
schema	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get schema(): string {$/;"	m
scheme	nvim/plugged/coc.nvim/build/index.js	/^            var scheme = '(?:' + (customScheme || rfc3986.scheme) + ')';$/;"	V
schemeProviderMap	nvim/plugged/coc.nvim/src/workspace.ts	/^  private schemeProviderMap: Map<string, TextDocumentContentProvider> = new Map()$/;"	m
schemes	nvim/plugged/coc.nvim/build/index.js	/^        let schemes = ['file', 'untitled'].concat(config.additionalSchemes || []);$/;"	A
schemes	nvim/plugged/coc.nvim/src/extensions.ts	/^  public get schemes(): { [key: string]: PropertyScheme } {$/;"	m
score	nvim/plugged/coc.nvim/build/index.js	/^                        score: matchScore,$/;"	P
score	nvim/plugged/coc.nvim/build/index.js	/^                    score = (j * SCORE_GAP_LEADING) + match_bonus[j];$/;"	M
score	nvim/plugged/coc.nvim/build/index.js	/^    let score = 0;$/;"	V
score	nvim/plugged/coc.nvim/build/index.js	/^function score(list, key) {$/;"	F
score	nvim/plugged/coc.nvim/build/index.js	/^function score(needle, haystack) {$/;"	F
score	nvim/plugged/coc.nvim/build/index.js	/^function score(selector, uri, languageId) {$/;"	F
score	nvim/plugged/coc.nvim/src/__tests__/completion/match.test.ts	/^function score(word: string, input: string): number {$/;"	f
score	nvim/plugged/coc.nvim/src/list/source/commands.ts	/^function score(list: string[], key: string): number {$/;"	f
score	nvim/plugged/coc.nvim/src/list/source/lists.ts	/^function score(list: string[], key: string): number {$/;"	f
score	nvim/plugged/coc.nvim/src/util/fzy.ts	/^export function score(needle, haystack): number {$/;"	f
score	nvim/plugged/coc.nvim/src/util/match.ts	/^export function score(selector: DocumentSelector | DocumentFilter | string, uri: string, languageId: string): number {$/;"	f
scores	nvim/plugged/coc.nvim/build/index.js	/^    let scores = [];$/;"	A
screenLine	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async screenLine(line: number): Promise<string> {$/;"	m
script	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			script: "text\/javascript, application\/javascript",$/;"	P
scrollLeft	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		scrollLeft: function(fx){$/;"	M
scrollTop	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		scrollTop: function(fx){$/;"	M
search	nvim/plugged/coc.nvim/build/index.js	/^        let search = new search_1.default(this.nvim);$/;"	V
search	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async search(args: string[]): Promise<void> {$/;"	m
searchRanges	nvim/plugged/coc.nvim/build/index.js	/^        let searchRanges = this.ranges.map(o => o.currRange);$/;"	F
search_history_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
searchsyn	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:searchsyn(pattern, syn, flags, mode) abort$/;"	f
section	nvim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
section	nvim/plugged/coc.nvim/build/index.js	/^                    section: section$/;"	P
section	nvim/plugged/coc.nvim/build/index.js	/^      section: opt,$/;"	P
section	nvim/plugged/coc.nvim/build/index.js	/^      section: section,$/;"	P
section_is_empty	nvim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:section_is_empty(self, content)$/;"	f
sections	nvim/plugged/coc.nvim/build/index.js	/^        let sections;$/;"	V
segments	nvim/plugged/coc.nvim/build/index.js	/^    var segments = []; \/\/ strings or numbers$/;"	A
select	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  public async select(bufnr: number, kind: string, mode: string): Promise<void> {$/;"	m
select	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private async select(range: Range, text: string, triggerAutocmd = true): Promise<void> {$/;"	m
selectAll	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async selectAll(): Promise<void> {$/;"	m
selectColor	nvim/plugged/coc.nvim/build/index.js	/^	function selectColor(namespace) {$/;"	F
selectColor	nvim/plugged/coc.nvim/build/index.js	/^  function selectColor(namespace) {$/;"	F
selectCompleteItem	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async selectCompleteItem(idx: number): Promise<void> {$/;"	m
selectCurrentPlaceholder	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public async selectCurrentPlaceholder(triggerAutocmd = true): Promise<void> {$/;"	m
selectCurrentPlaceholder	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public async selectCurrentPlaceholder(triggerAutocmd = true): Promise<void> {$/;"	m
selectFunction	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async selectFunction(inner: boolean, visualmode: string): Promise<void> {$/;"	m
selectLines	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async selectLines(start: number, end: number): Promise<void> {$/;"	m
selectPlaceholder	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public async selectPlaceholder(placeholder: CocSnippetPlaceholder, triggerAutocmd = true): Promise<void> {$/;"	m
selectRange	nvim/plugged/coc.nvim/build/index.js	/^        let selectRange;$/;"	V
selectRange	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async selectRange(visualmode: string, forward: boolean): Promise<void> {$/;"	m
selectRange	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async selectRange(range: Range): Promise<void> {$/;"	m
select_in_visual_mode	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:select_in_visual_mode(region)$/;"	f
select_tab	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:select_tab(buf_index)$/;"	f
selected	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private selected: Set<number> = new Set()$/;"	m
selected	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					this.selected = (jQuery.inArray( this.value, values ) >= 0 ||$/;"	M
selected	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			selected: function(a){return a.selected||jQuery.attr(a,"selected");},$/;"	M
selectedItems	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public get selectedItems(): ListItem[] {$/;"	m
selectionRange	nvim/plugged/coc.nvim/build/index.js	/^            selectionRange: selectionRange$/;"	P
selectionRange	nvim/plugged/coc.nvim/build/index.js	/^        let selectionRange;$/;"	V
selectionRange	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private selectionRange: SelectionRange = null$/;"	m
selectionRangeManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private selectionRangeManager = new SelectionRangeManager()$/;"	m
send	nvim/plugged/coc.nvim/build/index.js	/^                    send: (resp, isError) => {$/;"	M
send	nvim/plugged/coc.nvim/build/index.js	/^            send: (resp, isError) => {$/;"	M
send	nvim/plugged/coc.nvim/build/index.js	/^    send(arr) {$/;"	M
send	nvim/plugged/coc.nvim/build/index.js	/^    send: send,$/;"	P
send	nvim/plugged/coc.nvim/build/index.js	/^  function send(buffer) {$/;"	F
sendAsyncRequest	nvim/plugged/coc.nvim/build/index.js	/^    sendAsyncRequest(method, args) {$/;"	M
sendData	nvim/plugged/coc.nvim/build/index.js	/^    sendData() {$/;"	M
sendLogEventToAppender	nvim/plugged/coc.nvim/build/index.js	/^function sendLogEventToAppender(logEvent) {$/;"	F
sendNextCommand	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.sendNextCommand = function() {$/;"	M
sendNotification	nvim/plugged/coc.nvim/build/index.js	/^                    sendNotification: false,$/;"	P
sendNotification	nvim/plugged/coc.nvim/build/index.js	/^                sendNotification: false,$/;"	P
sendNotification	nvim/plugged/coc.nvim/build/index.js	/^        sendNotification: (type, ...params) => {$/;"	M
sendNotification	nvim/plugged/coc.nvim/build/index.js	/^        sendNotification: (type, params) => connection.sendNotification(Is.string(type) ? type : type.method, params),$/;"	M
sendNotification	nvim/plugged/coc.nvim/build/index.js	/^    sendNotification(type, params) {$/;"	M
sendNotification	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendNotification(method: string): void$/;"	m
sendNotification	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendNotification(method: string, params: any): void$/;"	m
sendNotification	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendNotification<P, RO>($/;"	m
sendNotification	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendNotification<P>(type: string | RPCMessageType, params?: P): void {$/;"	m
sendNotification	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendNotification<RO>(type: NotificationType0<RO>): void$/;"	m
sendRequest	nvim/plugged/coc.nvim/build/index.js	/^        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),$/;"	M
sendRequest	nvim/plugged/coc.nvim/build/index.js	/^        sendRequest: (type, ...params) => {$/;"	M
sendRequest	nvim/plugged/coc.nvim/build/index.js	/^    sendRequest(type, ...params) {$/;"	M
sendRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendRequest<P, R, E, RO>($/;"	m
sendRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendRequest<R, E, RO>($/;"	m
sendRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendRequest<R>($/;"	m
sendRequest	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendRequest<R>(method: string, token?: CancellationToken): Thenable<R>$/;"	m
sendRequest	nvim/plugged/coc.nvim/src/services.ts	/^  public async sendRequest(id: string, method: string, params?: any): Promise<any> {$/;"	m
sendResponse	nvim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^function sendResponse(data: any): void {$/;"	f
sendSubscription	nvim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^function sendSubscription(uid: string, root: string, files: FileChangeItem[]): void {$/;"	f
sendText	nvim/plugged/coc.nvim/build/index.js	/^    sendText(text, addNewLine = true) {$/;"	M
sendText	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  public sendText(text: string, addNewLine = true): void {$/;"	m
sendToListeners	nvim/plugged/coc.nvim/build/index.js	/^const sendToListeners = logEvent => {$/;"	F
sep_splitter	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:sep_splitter()$/;"	f
separator	nvim/plugged/coc.nvim/build/index.js	/^const separator = '\\u3000';$/;"	V
separator	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private separator: string$/;"	m
separator	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:separator()$/;"	f
sequence	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private sequence: CallSequence = null$/;"	m
sequenceNumber	nvim/plugged/coc.nvim/build/index.js	/^    let sequenceNumber = 0;$/;"	V
serialise	nvim/plugged/coc.nvim/build/index.js	/^  serialise() {$/;"	M
serialize	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	serialize: function() {$/;"	M
serializeArray	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	serializeArray: function() {$/;"	M
server	nvim/plugged/coc.nvim/build/index.js	/^        let server = net_1.createServer((socket) => {$/;"	F
serverOptions	nvim/plugged/coc.nvim/build/index.js	/^        let serverOptions;$/;"	V
serverOptions	nvim/plugged/coc.nvim/build/index.js	/^        serverOptions = () => {$/;"	M
serverOptions	nvim/plugged/coc.nvim/build/index.js	/^    let serverOptions;$/;"	V
service	nvim/plugged/coc.nvim/build/index.js	/^        let service = {$/;"	O
serviceState	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  public get serviceState(): ServiceStat {$/;"	m
session	nvim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    async function session(input: string): Promise<void> {$/;"	f
session	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  public get session(): SnippetSession {$/;"	m
sessionMap	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  private sessionMap: Map<number, SnippetSession> = new Map()$/;"	m
set	nvim/plugged/coc.nvim/build/index.js	/^    set(entries, diagnostics) {$/;"	M
set	nvim/plugged/coc.nvim/build/index.js	/^    set(key, value, touch = Touch.None) {$/;"	M
set	nvim/plugged/coc.nvim/build/index.js	/^    set: function (val) {$/;"	M
set	nvim/plugged/coc.nvim/build/index.js	/^  function set(known, input, value) {$/;"	F
set	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public set(entries: [string, Diagnostic[] | null][] | string, diagnostics?: Diagnostic[]): void {$/;"	m
set	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public set(entries: [string, Diagnostic[] | null][]): void$/;"	m
set	nvim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  public set(uri: string, diagnostics: Diagnostic[] | null): void$/;"	m
set	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:set(var, default) abort$/;"	f
setArg	nvim/plugged/coc.nvim/build/index.js	/^    function setArg (key, val, arg) {$/;"	F
setArray	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	setArray: function( elems ) {$/;"	M
setBuffer	nvim/plugged/coc.nvim/build/index.js	/^    setBuffer(buffer) {$/;"	M
setClientInfo	nvim/plugged/coc.nvim/build/index.js	/^    setClientInfo(name, version, type, methods, attributes) {$/;"	M
setConfig	nvim/plugged/coc.nvim/build/index.js	/^    setConfig(options, isNotify) {$/;"	M
setConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    setConfiguration() {$/;"	M
setConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    setConfiguration(event) {$/;"	M
setConfiguration	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private setConfiguration(event?: ConfigurationChangeEvent): void {$/;"	m
setConfiguration	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private setConfiguration(): void {$/;"	m
setConfigurationErrors	nvim/plugged/coc.nvim/build/index.js	/^    setConfigurationErrors(init) {$/;"	M
setConfigurationErrors	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public setConfigurationErrors(init?: boolean): void {$/;"	m
setCursor	nvim/plugged/coc.nvim/build/index.js	/^    setCursor(lnum, col) {$/;"	M
setCursor	nvim/plugged/coc.nvim/build/index.js	/^    setCursor(pos, isNotify = false) {$/;"	M
setCursor	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public setCursor(lnum: number, col: number): void {$/;"	m
setDestModeAndTimestamps	nvim/plugged/coc.nvim/build/index.js	/^function setDestModeAndTimestamps (srcStat, dest, opts, cb) {$/;"	F
setDiagnosticInfo	nvim/plugged/coc.nvim/build/index.js	/^    setDiagnosticInfo(bufnr, diagnostics) {$/;"	M
setDiagnosticInfo	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public setDiagnosticInfo(bufnr: number, diagnostics: ReadonlyArray<Diagnostic>): void {$/;"	m
setDiagnostics	nvim/plugged/coc.nvim/build/index.js	/^    setDiagnostics(uri, diagnostics) {$/;"	M
setDiagnostics	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private setDiagnostics(uri: string, diagnostics: Diagnostic[] | undefined) {$/;"	m
setDirectory	nvim/plugged/coc.nvim/build/index.js	/^    setDirectory(dir) {$/;"	M
setDocuments	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  public async setDocuments(docs: Documentation[], maxWidth: number): Promise<void> {$/;"	m
setEnableCallStackForCategory	nvim/plugged/coc.nvim/build/index.js	/^const setEnableCallStackForCategory = (category, useCallStack) => {$/;"	F
setExtPackers	nvim/plugged/coc.nvim/build/index.js	/^function setExtPackers(codec) {$/;"	F
setExtUnpackers	nvim/plugged/coc.nvim/build/index.js	/^function setExtUnpackers(codec) {$/;"	F
setFiletype	nvim/plugged/coc.nvim/build/index.js	/^    setFiletype(filetype) {$/;"	M
setFiletype	nvim/plugged/coc.nvim/src/model/document.ts	/^  public setFiletype(filetype: string): void {$/;"	m
setFiletype	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public setFiletype(filetype: string): void {$/;"	m
setFolded	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
setFolderConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    setFolderConfiguration(uri) {$/;"	M
setFolderConfiguration	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public setFolderConfiguration(uri: string): void {$/;"	m
setHeader	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.setHeader = function (name, value) {$/;"	M
setHeight	nvim/plugged/coc.nvim/build/index.js	/^    setHeight(height, isNotify = false) {$/;"	M
setIskeyword	nvim/plugged/coc.nvim/build/index.js	/^    setIskeyword(iskeyword) {$/;"	M
setIskeyword	nvim/plugged/coc.nvim/src/model/document.ts	/^  public setIskeyword(iskeyword: string): void {$/;"	m
setKey	nvim/plugged/coc.nvim/build/index.js	/^    function setKey (obj, keys, value) {$/;"	F
setKeywordOption	nvim/plugged/coc.nvim/build/index.js	/^    setKeywordOption(keywordOption) {$/;"	M
setKeywordOption	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public setKeywordOption(keywordOption: string): void {$/;"	m
setLevelForCategory	nvim/plugged/coc.nvim/build/index.js	/^const setLevelForCategory = (category, level) => {$/;"	F
setLine	nvim/plugged/coc.nvim/build/index.js	/^    setLine(line) {$/;"	M
setLines	nvim/plugged/coc.nvim/build/index.js	/^    setLines() {$/;"	M
setLines	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private async setLines(lines: string[], append = false, index: number): Promise<void> {$/;"	m
setLines	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  public setLines(): void {$/;"	m
setLocationlist	nvim/plugged/coc.nvim/build/index.js	/^    setLocationlist(diagnostics, winid) {$/;"	M
setLocationlist	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public setLocationlist(diagnostics: ReadonlyArray<Diagnostic>, winid: number): void {$/;"	m
setMessageLevel	nvim/plugged/coc.nvim/build/index.js	/^    setMessageLevel() {$/;"	M
setMessageLevel	nvim/plugged/coc.nvim/src/workspace.ts	/^  private setMessageLevel(): void {$/;"	m
setMouseEvent	nvim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    async function setMouseEvent(line: number): Promise<void> {$/;"	f
setName	nvim/plugged/coc.nvim/build/index.js	/^    setName(value) {$/;"	M
setOnlyChild	nvim/plugged/coc.nvim/build/index.js	/^    setOnlyChild(child) {$/;"	M
setOnlyChild	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public setOnlyChild(child: Marker): void {$/;"	m
setOption	nvim/plugged/coc.nvim/build/index.js	/^    setOption() {$/;"	M
setOption	nvim/plugged/coc.nvim/build/index.js	/^    setOption(name, value, isNotify) {$/;"	M
setParseCallStackFunction	nvim/plugged/coc.nvim/build/index.js	/^  setParseCallStackFunction(parseFunction) {$/;"	M
setPartialMessageTimer	nvim/plugged/coc.nvim/build/index.js	/^    setPartialMessageTimer() {$/;"	M
setPosition	nvim/plugged/coc.nvim/build/index.js	/^        setPosition: setPosition,$/;"	P
setPosition	nvim/plugged/coc.nvim/build/index.js	/^    function setPosition(newPosition) {$/;"	F
setPreviousNode	nvim/plugged/coc.nvim/build/index.js	/^    function setPreviousNode(value, offset, length, type) {$/;"	F
setProperty	nvim/plugged/coc.nvim/build/index.js	/^function setProperty(text, originalPath, value, formattingOptions, getInsertionIndex) {$/;"	F
setStatusText	nvim/plugged/coc.nvim/src/model/status.ts	/^  private async setStatusText(): Promise<void> {$/;"	m
setTabpage	nvim/plugged/coc.nvim/build/index.js	/^    setTabpage(tabpage) {$/;"	M
setTimeout	nvim/plugged/coc.nvim/build/index.js	/^          setTimeout(function() {$/;"	M
setTimeout	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.setTimeout = function (msecs, callback) {$/;"	M
setTimeout	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				setTimeout(function(){$/;"	M
setTransport	nvim/plugged/coc.nvim/build/index.js	/^    setTransport(transport) {$/;"	M
setUp	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def setUp(self):$/;"	m	class:DeopleteSourceTest
setUriThrowOnMissingScheme	nvim/plugged/coc.nvim/build/index.js	/^function setUriThrowOnMissingScheme(value) {$/;"	F
setValue	nvim/plugged/coc.nvim/build/index.js	/^    setValue(key, value) {$/;"	M
setValue	nvim/plugged/coc.nvim/build/index.js	/^  setValue: function(hi, lo) {$/;"	M
setValue	nvim/plugged/coc.nvim/src/configuration/model.ts	/^  public setValue(key: string, value: any): void {$/;"	m
setVar	nvim/plugged/coc.nvim/build/index.js	/^    setVar(name, value, isNotify = false) {$/;"	M
setVirtualText	nvim/plugged/coc.nvim/build/index.js	/^    setVirtualText(src_id, line, chunks, opts = {}) {$/;"	M
setVirtualText	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private async setVirtualText(buffer: Buffer, codeLenes: CodeLens[]): Promise<void> {$/;"	m
setWidth	nvim/plugged/coc.nvim/build/index.js	/^    setWidth(width, isNotify = false) {$/;"	M
setWindow	nvim/plugged/coc.nvim/build/index.js	/^    setWindow(win) {$/;"	M
set_clean_jobs_variable	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_jobs_variable(vcs, file, id)$/;"	f
set_clean_variables	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_variables(file, vcs, val)$/;"	f
set_cursor_color_for	nvim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:set_cursor_color_for(mode)$/;"	f
set_file_content	nvim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def set_file_content(string)$/;"	f
set_file_content	nvim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def set_file_content(string)$/;"	f
set_fold_levels	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:set_fold_levels()$/;"	f
set_global_options	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:set_global_options()$/;"	f
set_indent	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_indent(lnum, new_indent)$/;"	f
set_new_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_new_mrkr(item, new_mrkr)$/;"	f
set_path_handler.err	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.err(buffer) abort$/;"	f
set_path_handler.out	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.out(buffer, path) abort$/;"	f
set_state	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_state(item, new_rate)$/;"	f
set_state_plus_children	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_state_plus_children(item, new_rate, ...)$/;"	f
set_state_recursively	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_state_recursively(item, new_rate)$/;"	f
set_variables	nvim/plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! s:set_variables() abort$/;"	f
set_windowlocal_options	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:set_windowlocal_options()$/;"	f
setf	nvim/plugged/vim-ruby/ftdetect/ruby.vim	/^function! s:setf(filetype) abort$/;"	f
setf	nvim/plugged/vim-ruby/ftdetect/ruby_extra.vim	/^function! s:setf(filetype) abort$/;"	f
setopts	nvim/plugged/coc.nvim/build/index.js	/^function setopts (self, pattern, options) {$/;"	F
settings	nvim/plugged/coc.nvim/build/index.js	/^                    settings: null$/;"	P
settle	nvim/plugged/coc.nvim/build/index.js	/^    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }$/;"	F
settle	nvim/plugged/coc.nvim/build/index.js	/^    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }$/;"	F
setup	nvim/plugged/coc.nvim/build/index.js	/^const setup = (config) => {$/;"	F
setup	nvim/plugged/coc.nvim/build/index.js	/^function setup(env) {$/;"	F
setup	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public setup(): Promise<void> {$/;"	m
setup	nvim/plugged/coc.nvim/src/__tests__/modules/cursors.test.ts	/^  async function setup(): Promise<Document> {$/;"	f
setup	nvim/plugged/coc.nvim/src/__tests__/modules/cursors.test.ts	/^  async function setup(): Promise<void> {$/;"	f
setup	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			setup: function() {$/;"	M
setupActiveEvents	nvim/plugged/coc.nvim/build/index.js	/^    setupActiveEvents(id, packageJSON) {$/;"	M
setupActiveEvents	nvim/plugged/coc.nvim/src/extensions.ts	/^  private setupActiveEvents(id: string, packageJSON: any): void {$/;"	m
setupCodec	nvim/plugged/coc.nvim/build/index.js	/^    setupCodec() {$/;"	M
setupDynamicAutocmd	nvim/plugged/coc.nvim/src/workspace.ts	/^  private setupDynamicAutocmd: Function & { clear(): void; }$/;"	m
setupIgnores	nvim/plugged/coc.nvim/build/index.js	/^function setupIgnores (self, options) {$/;"	F
setupTransport	nvim/plugged/coc.nvim/build/index.js	/^    setupTransport(requestApi = true) {$/;"	M
setup_buffer_enter	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:setup_buffer_enter()$/;"	f
setup_buffer_leave	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:setup_buffer_leave()$/;"	f
setup_cleared_syntax	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:setup_cleared_syntax()$/;"	f
setup_keymaps	nvim/plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
setup_new_wiki_buffer	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:setup_new_wiki_buffer()$/;"	f
setup_options	nvim/plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
setup_path	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:setup_path(bufnr, continuation)$/;"	f
severityLevel	nvim/plugged/coc.nvim/build/index.js	/^function severityLevel(level) {$/;"	F
severityLevel	nvim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function severityLevel(level: string): number {$/;"	f
severityNames	nvim/plugged/coc.nvim/build/index.js	/^const severityNames = ['CocError', 'CocWarning', 'CocInfo', 'CocHint'];$/;"	A
shell	nvim/plugged/coc.nvim/build/index.js	/^            shell: false,$/;"	P
shellesc	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellesc	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:shellesc(arg) abort$/;"	f
shellesc_cmd	nvim/autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	nvim/autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shift	nvim/plugged/coc.nvim/build/index.js	/^    shift() {$/;"	M
shift	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.shift = function () {$/;"	M
shortcut	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get shortcut(): string {$/;"	m
shortcuts	nvim/plugged/coc.nvim/build/index.js	/^        let shortcuts = new Set();$/;"	V
shorten_text	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! s:shorten_text(text, len)$/;"	f
shorten_text_simple	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! s:shorten_text_simple(text, len)$/;"	f
shortpath	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
shouldAttach	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get shouldAttach(): boolean {$/;"	m
shouldCommit	nvim/plugged/coc.nvim/build/index.js	/^            shouldCommit: (item, character) => {$/;"	M
shouldCommit	nvim/plugged/coc.nvim/build/index.js	/^    shouldCommit(item, commitCharacter) {$/;"	M
shouldCommit	nvim/plugged/coc.nvim/src/sources.ts	/^  public shouldCommit(item: VimCompleteItem, commitCharacter: string): boolean {$/;"	m
shouldComplete	nvim/plugged/coc.nvim/src/model/source-vim.ts	/^  public async shouldComplete(opt: CompleteOption): Promise<boolean> {$/;"	m
shouldComplete	nvim/plugged/coc.nvim/src/model/source.ts	/^  public async shouldComplete(opt: CompleteOption): Promise<boolean> {$/;"	m
shouldStart	nvim/plugged/coc.nvim/build/index.js	/^    shouldStart(service) {$/;"	M
shouldStart	nvim/plugged/coc.nvim/src/services.ts	/^  private shouldStart(service: IServiceProvider): boolean {$/;"	m
shouldTrigger	nvim/plugged/coc.nvim/build/index.js	/^    shouldTrigger(document, triggerCharacter) {$/;"	M
shouldTrigger	nvim/plugged/coc.nvim/build/index.js	/^    shouldTrigger(pre, languageId) {$/;"	M
shouldTrigger	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public async shouldTrigger(document: Document, pre: string): Promise<boolean> {$/;"	m
shouldTrigger	nvim/plugged/coc.nvim/src/provider/signatureManager.ts	/^  public shouldTrigger(document: TextDocument, triggerCharacter: string): boolean {$/;"	m
shouldTrigger	nvim/plugged/coc.nvim/src/sources.ts	/^  public shouldTrigger(pre: string, languageId: string): boolean {$/;"	m
shouldTriggerSignatureHelp	nvim/plugged/coc.nvim/build/index.js	/^    shouldTriggerSignatureHelp(document, triggerCharacter) {$/;"	M
shouldTriggerSignatureHelp	nvim/plugged/coc.nvim/src/languages.ts	/^  public shouldTriggerSignatureHelp(document: TextDocument, triggerCharacter: string): boolean {$/;"	m
shouldValidate	nvim/plugged/coc.nvim/build/index.js	/^    shouldValidate(doc) {$/;"	M
shouldValidate	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private shouldValidate(doc: Document | null): boolean {$/;"	m
should_register	nvim/plugged/vim-vue/syntax/vue.vim	/^function! s:should_register(language, start_pattern)$/;"	f
show	nvim/plugged/coc.nvim/build/index.js	/^            show: () => {$/;"	M
show	nvim/plugged/coc.nvim/build/index.js	/^    show() {$/;"	M
show	nvim/plugged/coc.nvim/build/index.js	/^    show(preserveFocus) {$/;"	M
show	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  public async show(docs: Documentation[], bounding: PumBounding, token: CancellationToken): Promise<void> {$/;"	m
show	nvim/plugged/coc.nvim/src/model/outputChannel.ts	/^  public show(preserveFocus?: boolean): void {$/;"	m
show	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public show(): void {$/;"	m
show	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  public async show(preserveFocus?: boolean): Promise<boolean> {$/;"	m
show	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	show: function(){$/;"	M
show	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	show: function(speed,callback){$/;"	M
showCompletion	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async showCompletion(col: number, items: VimCompleteItem[]): Promise<void> {$/;"	m
showDocumentationFloating	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private async showDocumentationFloating(docs: Documentation[], bounding: PumBounding, token: CancellationToken): Promise<void> {$/;"	m
showDocumentationVim	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private async showDocumentationVim(docs: Documentation[], bounding: PumBounding, token: CancellationToken): Promise<void> {$/;"	m
showHelp	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async showHelp(): Promise<void> {$/;"	m
showInfo	nvim/plugged/coc.nvim/src/plugin.ts	/^  public async showInfo(): Promise<void> {$/;"	m
showLocations	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async showLocations(locations: Location[]): Promise<void> {$/;"	m
showMenu	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node)$/;"	f
showMessage	nvim/plugged/coc.nvim/build/index.js	/^    showMessage(msg, identify = 'more') {$/;"	M
showMessage	nvim/plugged/coc.nvim/src/workspace.ts	/^  public showMessage(msg: string, identify: MsgTypes = 'more'): void {$/;"	m
showOutputChannel	nvim/plugged/coc.nvim/build/index.js	/^    showOutputChannel(name, preserveFocus) {$/;"	M
showOutputChannel	nvim/plugged/coc.nvim/src/workspace.ts	/^  public showOutputChannel(name: string, preserveFocus?: boolean): void {$/;"	m
showPrompt	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async showPrompt(title: string): Promise<boolean> {$/;"	m
showQuickpick	nvim/plugged/coc.nvim/src/workspace.ts	/^  public async showQuickpick(items: string[], placeholder = 'Choose by number'): Promise<number> {$/;"	m
showSignatureHelp	nvim/plugged/coc.nvim/src/handler/index.ts	/^  public async showSignatureHelp(): Promise<boolean> {$/;"	m
show_category	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_category(category)$/;"	f
show_documentation	nvim/init.vim	/^function! s:show_documentation()$/;"	f
show_done	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_done()$/;"	f
show_ng	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_ng(no, expect, got)$/;"	f
show_ok	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_ok()$/;"	f
show_pass	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_pass(pass)$/;"	f
show_skip	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_skip(no, title)$/;"	f
show_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! s:show_tabline(min_count, total_count)$/;"	f
show_title	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_title(no, title)$/;"	f
show_type	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_type(type)$/;"	f
shown	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public get shown(): boolean {$/;"	m
shown	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  public shown = false$/;"	m
shownIds	nvim/plugged/coc.nvim/src/model/status.ts	/^  private shownIds: Set<string> = new Set()$/;"	m
shutdown	nvim/plugged/coc.nvim/build/index.js	/^        shutdown: () => connection.sendRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, undefined),$/;"	M
shutdown	nvim/plugged/coc.nvim/build/index.js	/^  app.shutdown = function (complete) {$/;"	M
shutdown	nvim/plugged/coc.nvim/build/index.js	/^function shutdown(cb) {$/;"	F
shutdown	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async shutdown(): Promise<void> {$/;"	m
sibling	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	sibling: function( n, elem ) {$/;"	M
siblings	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	siblings: function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},$/;"	M
sighupHandler	nvim/plugged/coc.nvim/build/index.js	/^  app.sighupHandler = function () {$/;"	M
signIds	nvim/plugged/coc.nvim/build/index.js	/^            let signIds = [];$/;"	A
signIds	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private readonly signIds: Set<number> = new Set()$/;"	m
signOffset	nvim/plugged/coc.nvim/src/list/ui.ts	/^  private signOffset: number$/;"	m
sign_in	nvim/plugged/vim-elixir/spec/syntax/variable_spec.rb	/^    def sign_in(conn, %{$/;"	f
signatureFactory	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private signatureFactory: FloatFactory$/;"	m
signatureInformation	nvim/plugged/coc.nvim/build/index.js	/^        config.signatureInformation = {$/;"	P
signatureList	nvim/plugged/coc.nvim/build/index.js	/^            let signatureList = [];$/;"	A
signatureManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private signatureManager = new SignatureManager()$/;"	m
signaturePosition	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private signaturePosition: Position$/;"	m
signatureTokenSource	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private signatureTokenSource: CancellationTokenSource$/;"	m
silent	nvim/plugged/coc.nvim/build/index.js	/^  silent: true$/;"	P
since	nvim/plugged/coc.nvim/build/index.js	/^            since: clock,$/;"	P
singleComment	nvim/plugged/coc.nvim/build/index.js	/^var singleComment = 1;$/;"	V
size	nvim/plugged/coc.nvim/build/index.js	/^      size: bodyLen,$/;"	P
size	nvim/plugged/coc.nvim/build/index.js	/^  var size = 0;$/;"	V
size	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	size: function() {$/;"	M
skip_func	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:skip_func()$/;"	f
skip_latency_measure	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:skip_latency_measure()$/;"	f
slashSplit	nvim/plugged/coc.nvim/build/index.js	/^var slashSplit = \/\\\/+\/$/;"	V
slice	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.slice = function (from, to) {$/;"	M
slice	nvim/plugged/coc.nvim/build/index.js	/^function slice (args) {$/;"	F
slice	nvim/plugged/coc.nvim/build/index.js	/^function slice(start, end) {$/;"	F
slice	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slice: function() {$/;"	M
sliceReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.sliceReverse = function (from, to) {$/;"	M
slideDown	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideDown: function(speed,callback){$/;"	M
slideToggle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideToggle: function(speed, callback){$/;"	M
slideUp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideUp: function(speed,callback){$/;"	M
slow	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		slow: 600,$/;"	P
smooth_scroll	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! s:smooth_scroll(dir, dist, duration, speed)$/;"	f
smooth_scroll#down	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! smooth_scroll#down(dist, duration, speed)$/;"	f
smooth_scroll#up	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! smooth_scroll#up(dist, duration, speed)$/;"	f
smth	nvim/plugged/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def smth do$/;"	f
snapshot	nvim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
snippet	nvim/plugged/coc.nvim/build/index.js	/^                snippet: this$/;"	P
snippet	nvim/plugged/coc.nvim/build/index.js	/^        const snippet = new TextmateSnippet();$/;"	V
snippet	nvim/plugged/coc.nvim/build/index.js	/^        const snippet = new snippet_1.CocSnippet(inserted, position, resolver);$/;"	V
snippet	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get snippet(): TextmateSnippet | undefined {$/;"	m
snippet	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public get snippet(): CocSnippet {$/;"	m
snippetCheck	nvim/plugged/coc.nvim/src/plugin.ts	/^  public async snippetCheck(checkExpand: boolean, checkJump: boolean): Promise<boolean> {$/;"	m
snippetEdit	nvim/plugged/coc.nvim/build/index.js	/^        let snippetEdit = {$/;"	O
snippetSupport	nvim/plugged/coc.nvim/build/index.js	/^            snippetSupport: true,$/;"	P
socket	nvim/plugged/coc.nvim/build/index.js	/^      socket: socket,$/;"	P
some_fun	nvim/plugged/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f
some_func	nvim/plugged/vim-elixir/spec/folding/basic_spec.rb	/^    def some_func do # fold$/;"	f
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func
some_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
some_other_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func
some_other_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func
some_other_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func
some_other_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func
some_other_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func
some_other_func	nvim/plugged/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func
sort	nvim/plugged/coc.nvim/build/index.js	/^function sort (list, loose) {$/;"	F
sort	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:sort(lst)$/;"	f
sortByLength	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:sortByLength(i1, i2)$/;"	f
sortDocumentSymbols	nvim/plugged/coc.nvim/build/index.js	/^function sortDocumentSymbols(a, b) {$/;"	F
sortDocumentSymbols	nvim/plugged/coc.nvim/src/handler/index.ts	/^function sortDocumentSymbols(a: DocumentSymbol, b: DocumentSymbol): number {$/;"	f
sortSymbolInformations	nvim/plugged/coc.nvim/build/index.js	/^function sortSymbolInformations(a, b) {$/;"	F
sortSymbolInformations	nvim/plugged/coc.nvim/src/handler/index.ts	/^function sortSymbolInformations(a: SymbolInformation, b: SymbolInformation): number {$/;"	f
sortSymbols	nvim/plugged/coc.nvim/build/index.js	/^function sortSymbols(a, b) {$/;"	F
sortSymbols	nvim/plugged/coc.nvim/src/list/source/outline.ts	/^function sortSymbols(a: DocumentSymbol, b: DocumentSymbol): number {$/;"	f
sortTags	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
sort_buffers	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
sortedObj	nvim/plugged/coc.nvim/build/index.js	/^            const sortedObj = { dependencies: {} };$/;"	O
sortedObj	nvim/plugged/coc.nvim/build/index.js	/^        const sortedObj = { dependencies: {} };$/;"	O
source	nvim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
source	nvim/plugged/coc.nvim/build/index.js	/^            let source = new source_vim_1.default({$/;"	V
source	nvim/plugged/coc.nvim/build/index.js	/^        let source = new source_1.default(Object.assign({ sourceType: types_1.SourceType.Service }, config));$/;"	V
source	nvim/plugged/coc.nvim/build/index.js	/^        let source = new vscode_languageserver_protocol_1.CancellationTokenSource();$/;"	V
source	nvim/plugged/coc.nvim/build/index.js	/^        let source = {$/;"	O
sourceMap	nvim/plugged/coc.nvim/src/sources.ts	/^  private sourceMap: Map<string, ISource> = new Map()$/;"	m
sourceStats	nvim/plugged/coc.nvim/build/index.js	/^    sourceStats() {$/;"	M
sourceStats	nvim/plugged/coc.nvim/src/sources.ts	/^  public sourceStats(): SourceStat[] {$/;"	m
sourceType	nvim/plugged/coc.nvim/src/model/source.ts	/^  public readonly sourceType: SourceType$/;"	m
sources	nvim/plugged/coc.nvim/build/index.js	/^        let sources = this.sources.filter(s => names.indexOf(s.name) !== -1);$/;"	F
sources	nvim/plugged/coc.nvim/src/completion/complete.ts	/^    private sources: ISource[],$/;"	m
sources	nvim/plugged/coc.nvim/src/sources.ts	/^  public get sources(): ISource[] {$/;"	m
span	nvim/plugged/coc.nvim/build/index.js	/^            let span = [len, len + string_1.byteLength(item.text)];$/;"	A
spans	nvim/plugged/coc.nvim/build/index.js	/^                    let spans = [];$/;"	A
spans	nvim/plugged/coc.nvim/build/index.js	/^        let spans = [];$/;"	A
spawn	nvim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
spawnError	nvim/plugged/coc.nvim/build/index.js	/^  function spawnError(error) {$/;"	F
special	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var special = \/href|src|style\/.test( name );$/;"	V
special	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	special: {$/;"	P
speed	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	speed: function(speed, easing, fn) {$/;"	M
speeds	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	speeds:{$/;"	P
split	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:split(str, delimiter)$/;"	f
splitDeviceRe	nvim/plugged/coc.nvim/build/index.js	/^	var splitDeviceRe = \/^([a-zA-Z]:|[\\\\\\\/]{2}[^\\\\\\\/]+[\\\\\\\/]+[^\\\\\\\/]+)?([\\\\\\\/])?([\\s\\S]*?)$\/;$/;"	V
splitFragment	nvim/plugged/coc.nvim/build/index.js	/^    splitFragment(fragment, defaultFileType) {$/;"	M
splitFragment	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  public splitFragment(fragment: Fragment, defaultFileType: string): Fragment[] {$/;"	m
splitOpen	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public async splitOpen(): Promise<void> {$/;"	m
splitPrefix	nvim/plugged/coc.nvim/build/index.js	/^const splitPrefix = (p, prefixSize) => {$/;"	F
splitRange	nvim/plugged/coc.nvim/build/index.js	/^function splitRange(doc, range) {$/;"	F
splitRange	nvim/plugged/coc.nvim/src/cursors/index.ts	/^function splitRange(doc: Document, range: Range): Range[] {$/;"	f
splitRight	nvim/plugged/coc.nvim/src/list/basic.ts	/^  protected get splitRight(): boolean {$/;"	m
splitRootRe	nvim/plugged/coc.nvim/build/index.js	/^  var splitRootRe = \/^(?:[a-zA-Z]:|[\\\\\\\/]{2}[^\\\\\\\/]+[\\\\\\\/][^\\\\\\\/]+)?[\\\\\\\/]*\/;$/;"	V
splitRootRe	nvim/plugged/coc.nvim/build/index.js	/^  var splitRootRe = \/^[\\\/]*\/;$/;"	V
split_rtp	nvim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
splited	nvim/plugged/coc.nvim/build/index.js	/^        let splited = ranges.reduce((p, c) => {$/;"	F
splited	nvim/plugged/coc.nvim/build/index.js	/^    let splited = [];$/;"	A
src	nvim/plugged/coc.nvim/build/index.js	/^	var val, src, clone;$/;"	V
srcArr	nvim/plugged/coc.nvim/build/index.js	/^  const srcArr = path.resolve(src).split(path.sep).filter(i => i)$/;"	F
srcId	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private srcId: number$/;"	m
srcId	nvim/plugged/coc.nvim/src/handler/colors.ts	/^  private srcId = 1090$/;"	m
srcId	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private srcId: number$/;"	m
srcStat	nvim/plugged/coc.nvim/build/index.js	/^  let srcStat, destStat$/;"	V
srdId	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private readonly srdId: number$/;"	m
stack	nvim/plugged/coc.nvim/build/index.js	/^    const stack = [...marker];$/;"	A
stack	nvim/plugged/coc.nvim/build/index.js	/^    const stack = [obj];$/;"	A
stackReg	nvim/plugged/coc.nvim/build/index.js	/^const stackReg = \/at (?:(.+)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?\/;$/;"	V
stage	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:stage(hunk_diff)$/;"	f
start	nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:start() dict$/;"	f
start	nvim/plugged/coc.nvim/build/index.js	/^                            let start;$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^                        start: 0,$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^                start: 0,$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^                start: currLine,$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^                start: { line: lnum - 1, character: 0 },$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^            const start = {$/;"	O
start	nvim/plugged/coc.nvim/build/index.js	/^            start: () => {$/;"	M
start	nvim/plugged/coc.nvim/build/index.js	/^            start: 0,$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^            start: position$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^            start: { line: start.line, col },$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^        let start = 0;$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^        let start;$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^      const start = new Date();$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^    let start = 0;$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^    start() {$/;"	M
start	nvim/plugged/coc.nvim/build/index.js	/^    start(cmd, args, cwd) {$/;"	M
start	nvim/plugged/coc.nvim/build/index.js	/^    start(complete) {$/;"	M
start	nvim/plugged/coc.nvim/build/index.js	/^    start(document) {$/;"	M
start	nvim/plugged/coc.nvim/build/index.js	/^    start(opts) {$/;"	M
start	nvim/plugged/coc.nvim/build/index.js	/^    start: 0$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^    start: position$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^  function start() {$/;"	F
start	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public start(complete: Complete): void {$/;"	m
start	nvim/plugged/coc.nvim/src/cursors/range.ts	/^    public readonly start: number,$/;"	m
start	nvim/plugged/coc.nvim/src/handler/search.ts	/^  public start(cmd: string, args: string[], cwd: string): void {$/;"	m
start	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public start(): Disposable {$/;"	m
start	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  public start(): Disposable {$/;"	m
start	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async start(args: string[]): Promise<void> {$/;"	m
start	nvim/plugged/coc.nvim/src/list/prompt.ts	/^  public start(opts?: ListOptions): void {$/;"	m
start	nvim/plugged/coc.nvim/src/model/chars.ts	/^  public start: number$/;"	m
start	nvim/plugged/coc.nvim/src/model/task.ts	/^  public async start(opts: TaskOptions): Promise<boolean> {$/;"	m
start	nvim/plugged/coc.nvim/src/model/terminal.ts	/^  public async start(cwd?: string, env?: { [key: string]: string | null }): Promise<void> {$/;"	m
start	nvim/plugged/coc.nvim/src/services.ts	/^  private start(document: TextDocument): void {$/;"	m
start	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public async start(snippetString: string, select = true, range?: Range): Promise<boolean> {$/;"	m
start	nvim/plugged/coc.nvim/src/util/callSequence.ts	/^  public start(): Promise<boolean> {$/;"	m
start	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^							start = ((end || 1) \/ e.cur(true)) * start;$/;"	M
start	nvim/plugged/vim-gitgutter/unplace.vim	/^let start = reltime()$/;"	v
startColour	nvim/plugged/coc.nvim/build/index.js	/^  function startColour(loggingEvent) {$/;"	F
startCompletion	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public async startCompletion(option: CompleteOption): Promise<void> {$/;"	m
startCopy	nvim/plugged/coc.nvim/build/index.js	/^  function startCopy(source) {$/;"	F
startCopy	nvim/plugged/coc.nvim/build/index.js	/^function startCopy (destStat, src, dest, opts) {$/;"	F
startCopy	nvim/plugged/coc.nvim/build/index.js	/^function startCopy (destStat, src, dest, opts, cb) {$/;"	F
startLine	nvim/plugged/coc.nvim/build/index.js	/^            startLine: startLine,$/;"	P
startNcp	nvim/plugged/coc.nvim/build/index.js	/^  function startNcp() {$/;"	F
startTime	nvim/plugged/coc.nvim/build/index.js	/^  function startTime(loggingEvent) {$/;"	F
startTimer	nvim/plugged/coc.nvim/build/index.js	/^function startTimer(request, msecs) {$/;"	F
start_latency_measure	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:start_latency_measure()$/;"	f
start_link	nvim/plugged/vim-elixir/large_file.ex	/^        def start_link() do$/;"	f
start_link	nvim/plugged/vim-elixir/large_file.ex	/^        def start_link(number) do$/;"	f
startcol	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  public get startcol(): number {$/;"	m
started	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public get started(): boolean {$/;"	m
startedInDebugMode	nvim/plugged/coc.nvim/build/index.js	/^        function startedInDebugMode() {$/;"	F
startedInDebugMode	nvim/plugged/coc.nvim/src/language-client/index.ts	/^    function startedInDebugMode(): boolean {$/;"	f
starts_with	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:starts_with(context, expr)$/;"	f
starts_with_pair_end	nvim/plugged/coc.nvim/build/index.js	/^function starts_with_pair_end(str) {$/;"	F
stat	nvim/plugged/coc.nvim/build/index.js	/^                let stat = stats.find(s => s.id == name);$/;"	F
stat	nvim/plugged/coc.nvim/build/index.js	/^                var stat;$/;"	V
stat	nvim/plugged/coc.nvim/build/index.js	/^        stat(target, function(err, stats) {$/;"	M
stat	nvim/plugged/coc.nvim/build/index.js	/^    stat(source, function (err, stats) {$/;"	M
statAsync	nvim/plugged/coc.nvim/build/index.js	/^async function statAsync(filepath) {$/;"	F
statAsync	nvim/plugged/coc.nvim/src/util/fs.ts	/^export async function statAsync(filepath: string): Promise<fs.Stats | null> {$/;"	f
statFix	nvim/plugged/coc.nvim/build/index.js	/^  function statFix (orig) {$/;"	F
statFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function statFixSync (orig) {$/;"	F
state	nvim/plugged/coc.nvim/build/index.js	/^    let state = {};$/;"	O
state	nvim/plugged/coc.nvim/build/index.js	/^    this.state = {$/;"	P
state	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private get state(): ClientState {$/;"	m
state	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  private set state(value: ClientState) {$/;"	m
stateName	nvim/plugged/coc.nvim/build/index.js	/^    static stateName(state) {$/;"	M
stateName	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  public static stateName(state: ClientState): string {$/;"	m
stateString	nvim/plugged/coc.nvim/build/index.js	/^function stateString(state) {$/;"	F
stateString	nvim/plugged/coc.nvim/src/services.ts	/^function stateString(state: State): string {$/;"	f
status	nvim/autoload/plug.vim	/^function! s:status()$/;"	f
status	nvim/plugged/coc.nvim/build/index.js	/^        let status = {$/;"	O
statusCode	nvim/plugged/coc.nvim/build/index.js	/^      statusCode: statusCode,$/;"	P
statusItem	nvim/plugged/coc.nvim/src/snippets/manager.ts	/^  private statusItem: types.StatusBarItem$/;"	m
statusLine	nvim/plugged/coc.nvim/src/workspace.ts	/^  private statusLine: StatusLine$/;"	m
status_load	nvim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	nvim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
stderr	nvim/plugged/coc.nvim/build/index.js	/^  var stderr = [];$/;"	A
stderrAppender	nvim/plugged/coc.nvim/build/index.js	/^function stderrAppender(layout, timezoneOffset) {$/;"	F
stdio	nvim/plugged/coc.nvim/build/index.js	/^                    stdio: [null, null, null, 'ipc'],$/;"	P
stdio	nvim/plugged/coc.nvim/build/index.js	/^                stdio: ['pipe', 'pipe', 'ignore']$/;"	P
stdio	nvim/plugged/coc.nvim/build/index.js	/^      stdio: ['ignore', 'pipe', 'pipe']$/;"	P
stdout	nvim/plugged/coc.nvim/build/index.js	/^        let stdout = [];$/;"	A
stdout	nvim/plugged/coc.nvim/build/index.js	/^  var stdout = [];$/;"	A
stdoutAppender	nvim/plugged/coc.nvim/build/index.js	/^function stdoutAppender(layout, timezoneOffset) {$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^    function step(op) {$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }$/;"	F
step	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	step: function(gotoEnd){$/;"	M
step	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	step: {$/;"	P
stl	nvim/plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	nvim/plugged/vim-airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
stop	nvim/plugged/coc.nvim/build/index.js	/^    stop() {$/;"	M
stop	nvim/plugged/coc.nvim/build/index.js	/^    stop(id) {$/;"	M
stop	nvim/plugged/coc.nvim/src/completion/index.ts	/^  public stop(): void {$/;"	m
stop	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public stop(): Thenable<void> {$/;"	m
stop	nvim/plugged/coc.nvim/src/language-client/index.ts	/^  public stop(): Thenable<void> {$/;"	m
stop	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public stop(): void {$/;"	m
stop	nvim/plugged/coc.nvim/src/list/worker.ts	/^  public stop(): void {$/;"	m
stop	nvim/plugged/coc.nvim/src/model/task.ts	/^  public async stop(): Promise<void> {$/;"	m
stop	nvim/plugged/coc.nvim/src/services.ts	/^  public stop(id: string): Promise<void> {$/;"	m
stop	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	stop: function(clearQueue, gotoEnd){$/;"	M
stopAll	nvim/plugged/coc.nvim/src/services.ts	/^  public async stopAll(): Promise<void> {$/;"	m
stopOnErr	nvim/plugged/coc.nvim/build/index.js	/^    stopOnErr: true,$/;"	P
stopPropagation	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					stopPropagation: function(){},$/;"	M
stopPropagation	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		event.stopPropagation = function() {$/;"	M
stopsignal	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> stopsignal <C-R>=DockerfileReplaceInstruction("stopsignal", "STOPSIGNAL")<CR>$/;"	m
storage	nvim/plugged/coc.nvim/build/index.js	/^  var storage; \/\/ Array;$/;"	V
str	nvim/plugged/coc.nvim/build/index.js	/^        let str = '';$/;"	V
str	nvim/plugged/coc.nvim/build/index.js	/^        str = (mod % radix).toString(radix) + str;$/;"	M
str	nvim/plugged/coc.nvim/build/index.js	/^      var str = "";$/;"	V
str	nvim/plugged/coc.nvim/build/index.js	/^    let str = '';$/;"	V
str	nvim/plugged/coc.nvim/build/index.js	/^    str: str,$/;"	P
str	nvim/plugged/coc.nvim/build/index.js	/^  var str = ''$/;"	V
str	nvim/plugged/coc.nvim/build/index.js	/^function str(decoder, len) {$/;"	F
str	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
strWidth	nvim/plugged/coc.nvim/build/index.js	/^    strWidth(str) {$/;"	M
str_head_size	nvim/plugged/coc.nvim/build/index.js	/^  function str_head_size(length) {$/;"	F
strategies	nvim/plugged/coc.nvim/build/index.js	/^const strategies = new Set([$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^          const stream = new fsm.WriteStream(opt.file, {$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^        const stream = new fsm.ReadStream(file, {$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^    const stream = new fsm.WriteStream(entry.absolute, {$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new fsm.ReadStreamSync(file, {$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new fsm.WriteStream(opt.file, {$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new fsm.WriteStreamSync(opt.file, {$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new streams.RollingFileStream($/;"	V
streamSync	nvim/plugged/coc.nvim/build/index.js	/^const streamSync = (opt, p, position, fd, files) => {$/;"	F
strfmt	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
strfmt	nvim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^                        strictIndexing: false$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^                strictIndexing: false$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^            strictIndexing: false$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^            strictIndexing: false,$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^            strictIndexing: true,$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^        strictIndexing: true,$/;"	P
string	nvim/plugged/coc.nvim/build/index.js	/^    function string(encoder, value) {$/;"	F
string	nvim/plugged/coc.nvim/build/index.js	/^    function string(value) {$/;"	F
string	nvim/plugged/coc.nvim/build/index.js	/^  var string = '';$/;"	V
string	nvim/plugged/coc.nvim/build/index.js	/^function string(value) {$/;"	F
string	nvim/plugged/coc.nvim/src/util/is.ts	/^export function string(value: any): value is string {$/;"	f
stringArray	nvim/plugged/coc.nvim/build/index.js	/^function stringArray(value) {$/;"	F
string_length	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^  function! s:string_length(str)$/;"	f
stringify	nvim/plugged/coc.nvim/build/index.js	/^function stringify (obj, options) {$/;"	F
strip	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
stripBom	nvim/plugged/coc.nvim/build/index.js	/^function stripBom (content) {$/;"	F
stripComments	nvim/plugged/coc.nvim/build/index.js	/^function stripComments(text, replaceCh) {$/;"	F
stripWithWhitespace	nvim/plugged/coc.nvim/build/index.js	/^function stripWithWhitespace(str, start, end) {$/;"	F
stripWithoutWhitespace	nvim/plugged/coc.nvim/build/index.js	/^function stripWithoutWhitespace() {$/;"	F
strip_doc_blocks	nvim/plugged/vim-elixir/bin/test_indent	/^def strip_doc_blocks(body)$/;"	f
strip_trailing_new_line	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:strip_trailing_new_line(line) abort$/;"	f
strip_white_space	nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
strpart	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:strpart(s, i, l)$/;"	f
style	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret, style = elem.style;$/;"	V
style	nvim/plugged/vim-css-color/tests/example.jsx	/^		var style = {$/;"	O
styleFloat	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		styleFloat: styleFloat,$/;"	P
styles	nvim/plugged/coc.nvim/build/index.js	/^const styles = {$/;"	O
sub	nvim/plugged/coc.nvim/build/index.js	/^        let sub = {$/;"	O
sub	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
subDelims	nvim/plugged/coc.nvim/build/index.js	/^    var subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=';$/;"	V
submit	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			submit: function(a){return "submit"==a.type;},$/;"	M
subscribe	nvim/plugged/coc.nvim/build/index.js	/^    subscribe(event) {$/;"	M
subscribe	nvim/plugged/coc.nvim/src/watchman.ts	/^  public async subscribe(globPattern: string, cb: ChangeCallback): Promise<Disposable> {$/;"	m
subscriptions	nvim/plugged/coc.nvim/build/index.js	/^        let subscriptions = [];$/;"	A
subst_func	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:subst_func(line, regexp, func, ...)$/;"	f
substitute_rx_in_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:substitute_rx_in_line(lnum, pattern, new_string)$/;"	f
substitute_string_in_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:substitute_string_in_line(lnum, old_string, new_string)$/;"	f
success	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			success: callback,$/;"	P
success	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function success(){$/;"	F
sum	nvim/plugged/coc.nvim/build/index.js	/^    let sum = 8 * 0x20$/;"	V
sum	nvim/plugged/coc.nvim/build/index.js	/^  var sum = 0$/;"	V
sum_colspan	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  function! s:sum_colspan(table)$/;"	f
summary	nvim/plugged/vim-gitgutter/test/runner.vim	/^let summary = [$/;"	v
supportsColor	nvim/plugged/coc.nvim/build/index.js	/^	supportsColor: getSupportLevel,$/;"	P
supportsColor	nvim/plugged/coc.nvim/build/index.js	/^function supportsColor(stream) {$/;"	F
surroundings	nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
sw	nvim/plugged/typescript-vim/indent/typescript.vim	/^  function s:sw()$/;"	f
sw	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:sw()$/;"	f
sw	nvim/plugged/vim-javascript/indent/javascript.vim	/^  function s:sw()$/;"	f
swap	nvim/plugged/coc.nvim/build/index.js	/^  var swap = new Buffer(buf.length);$/;"	V
swap	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var swap = [], stack = [], a = elem, i = 0;$/;"	A
swap	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	swap: function( elem, options, callback ) {$/;"	M
swing	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		swing: function( p, n, firstNum, diff ) {$/;"	M
switchMatcher	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async switchMatcher(): Promise<void> {$/;"	m
switch_in	nvim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	nvim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
symbolKind	nvim/plugged/coc.nvim/build/index.js	/^        symbolCapabilities.symbolKind = {$/;"	P
symbols	nvim/plugged/coc.nvim/build/index.js	/^        let symbols;$/;"	V
symlinkPaths	nvim/plugged/coc.nvim/build/index.js	/^function symlinkPaths (srcpath, dstpath, callback) {$/;"	F
symlinkPathsSync	nvim/plugged/coc.nvim/build/index.js	/^function symlinkPathsSync (srcpath, dstpath) {$/;"	F
symlinkType	nvim/plugged/coc.nvim/build/index.js	/^function symlinkType (srcpath, type, callback) {$/;"	F
symlinkTypeSync	nvim/plugged/coc.nvim/build/index.js	/^function symlinkTypeSync (srcpath, type) {$/;"	F
syn_at	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:syn_at(l,c)$/;"	f
sync	nvim/plugged/coc.nvim/build/index.js	/^        sync: true,$/;"	P
sync	nvim/plugged/coc.nvim/build/index.js	/^function sync (path, options) {$/;"	F
sync	nvim/plugged/coc.nvim/build/index.js	/^mkdirP.sync = function sync (p, opts, made) {$/;"	M
sync_notify	nvim/plugged/vim-elixir/large_file.ex	/^        def sync_notify(event, timeout \\\\ 5000) do$/;"	f
synchronize	nvim/plugged/coc.nvim/build/index.js	/^        synchronize: {$/;"	P
synchronizeUpdatedPlaceholders	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  public async synchronizeUpdatedPlaceholders(change: TextDocumentContentChangeEvent): Promise<void> {$/;"	m
synid	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:synid() abort$/;"	f
syntax	nvim/autoload/plug.vim	/^function! s:syntax()$/;"	f
syntax	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def syntax(content, pattern)$/;"	f	class:Buffer
syntax_name	nvim/plugged/vim-elixir/autoload/elixir/indent.vim	/^function! s:syntax_name(line, col)$/;"	f
syntax_supported	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:syntax_supported()$/;"	f
system	nvim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:system(cmd)$/;"	f
system_chomp	nvim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
t	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> t :call ale#preview#OpenSelectionInTab()<CR>$/;"	m
t	nvim/plugged/coc.nvim/build/index.js	/^    var t = {};$/;"	O
t	nvim/plugged/coc.nvim/build/index.js	/^  var t = {}$/;"	O
t	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function t(gotoEnd){$/;"	F
table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let table = []$/;"	v
table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let table = s:close_tag_table(table, lines, a:header_ids)$/;"	v
table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let table = a:table$/;"	v
table_add_row	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  function! s:table_add_row(table, line)$/;"	f
tabline_evaluated_length	nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:tabline_evaluated_length(tabline)$/;"	f
tabstop	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  private tabstop = 2$/;"	m
tag_code	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_code(value)$/;"	f
tag_em	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_em(value)$/;"	f
tag_eqin	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_eqin(value)$/;"	f
tag_remove_external_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_remove_external_link(value)$/;"	f
tag_remove_internal_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_remove_internal_link(value)$/;"	f
tag_strike	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_strike(value)$/;"	f
tag_strong	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_strong(value, header_ids)$/;"	f
tag_sub	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_sub(value)$/;"	f
tag_super	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_super(value)$/;"	f
tag_tags	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_tags(value, header_ids)$/;"	f
tag_todo	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_todo(value)$/;"	f
tag_weblink	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_weblink(value)$/;"	f
tag_wikiincl	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_wikiincl(value)$/;"	f
tag_wikilink	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_wikilink(value)$/;"	f
tagbar#CloseWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#OpenWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#StopAutoUpdate	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#StopAutoUpdate() abort$/;"	f
tagbar#ToggleWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#autoopen	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#debug#enabled	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#prototypes#basetag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	nvim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	nvim/plugged/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	nvim/plugged/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
tags_entry_cmp	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:tags_entry_cmp(i1, i2)$/;"	f
tags_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
tail	nvim/plugged/coc.nvim/build/index.js	/^function tail(array, n = 0) {$/;"	F
tail	nvim/plugged/coc.nvim/src/util/array.ts	/^export function tail<T>(array: T[], n = 0): T {$/;"	f
tail_name	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:tail_name(fname)$/;"	f
target	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					target: elem,$/;"	P
targetBufnr	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private targetBufnr: number$/;"	m
task	nvim/plugged/coc.nvim/build/index.js	/^            var task = () => {$/;"	F
task	nvim/plugged/coc.nvim/src/handler/search.ts	/^  private task: Task$/;"	m
task	nvim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private task: Task<T | Thenable<T>> | null$/;"	m
teardown	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			teardown: function() { return; }$/;"	M
teardown	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			teardown: function() {$/;"	M
template_full_name	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:template_full_name(name)$/;"	f
terminal	nvim/plugged/coc.nvim/build/index.js	/^        let terminal = new terminal_1.default(cmd, args || [], this.nvim, opts.name);$/;"	V
terminal	nvim/plugged/coc.nvim/build/index.js	/^        terminal: false$/;"	P
terminals	nvim/plugged/coc.nvim/src/workspace.ts	/^  private terminals: Map<number, Terminal> = new Map()$/;"	m
terminate	nvim/plugged/coc.nvim/build/index.js	/^function terminate(process, cwd) {$/;"	F
terminate	nvim/plugged/coc.nvim/src/util/processes.ts	/^export function terminate(process: ChildProcess, cwd?: string): boolean {$/;"	f
terminateTree	nvim/plugged/coc.nvim/bin/terminateProcess.sh	/^terminateTree() {$/;"	f
termname	nvim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:termname()$/;"	f
tern_col	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:tern_col(p)$/;"	f
tern_skip	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:tern_skip(p)$/;"	f
test	nvim/plugged/coc.nvim/build/index.js	/^Comparator.prototype.test = function (version) {$/;"	M
test	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.test = function (version) {$/;"	M
test	nvim/plugged/emmet-vim/unittest.vim	/^function! s:test(...)$/;"	f
test	nvim/plugged/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^  def test do$/;"	f
test	nvim/plugged/vim-elixir/spec/indent/blocks_spec.rb	/^    def test do$/;"	f	class:name.name.f.f
test	nvim/plugged/vim-elixir/spec/indent/if_spec.rb	/^  def test do$/;"	f
test	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^    def test do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
test	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	class:example.project.config
test	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	class:example.project.config.test
test	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	class:example.project.config.test.test
test	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	class:example.project.config.test.test.test.project
test	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f
test	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f	class:test
test	nvim/plugged/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f	class:test.test
testLanguageServer	nvim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^async function testLanguageServer(serverOptions: lsclient.ServerOptions): Promise<void> {$/;"	f
testSet	nvim/plugged/coc.nvim/build/index.js	/^function testSet (set, version, options) {$/;"	F
test_another_feature	nvim/plugged/vim-elixir/spec/indent/lists_spec.rb	/^  def test_another_feature do$/;"	f	class:example.project.config.test.test.test.project.test.create.double.double.double
test_attributes	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def test_attributes(self):$/;"	m	class:DeopleteSourceTest
test_complete_position	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def test_complete_position(self):$/;"	m	class:DeopleteSourceTest
test_poll_empty_result_ready	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def test_poll_empty_result_ready(self):$/;"	m	class:DeopleteSourceTest
test_poll_no_result	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def test_poll_no_result(self):$/;"	m	class:DeopleteSourceTest
test_poll_non_empty_result_ready	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def test_poll_non_empty_result_ready(self):$/;"	m	class:DeopleteSourceTest
test_refresh_completion_results	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def test_refresh_completion_results(self):$/;"	m	class:DeopleteSourceTest
test_request_completion_results	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def test_request_completion_results(self):$/;"	m	class:DeopleteSourceTest
test_request_completion_results_from_buffer_without_providers	nvim/plugged/ale/test/python/test_deoplete_source.py	/^    def test_request_completion_results_from_buffer_without_providers(self):$/;"	m	class:DeopleteSourceTest
tests	nvim/plugged/ale/run-tests.bat	/^if not "%1"=="" set tests=%1$/;"	v
tests	nvim/plugged/ale/run-tests.bat	/^set tests=test\/*.vader test\/*\/*.vader test\/*\/*\/*.vader test\/*\/*\/*\/*.vader$/;"	v
text	nvim/plugged/coc.nvim/build/index.js	/^                            text: after,$/;"	P
text	nvim/plugged/coc.nvim/build/index.js	/^                    text: name,$/;"	P
text	nvim/plugged/coc.nvim/build/index.js	/^        let text = '';$/;"	V
text	nvim/plugged/coc.nvim/build/index.js	/^        let text;$/;"	V
text	nvim/plugged/coc.nvim/build/index.js	/^        text: name,$/;"	P
text	nvim/plugged/coc.nvim/build/index.js	/^    text(value) {$/;"	M
text	nvim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public text = 'test'$/;"	m
text	nvim/plugged/coc.nvim/src/cursors/range.ts	/^    public text: string,$/;"	m
text	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public text(value: string): string {$/;"	m
text	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public text(value: string): void {$/;"	m
text	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			text: "text\/plain",$/;"	P
text	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			text: function(a){return "text"==a.type;},$/;"	M
text	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	text: function( text ) {$/;"	M
text1_a	nvim/plugged/coc.nvim/build/index.js	/^  var text1_a, text1_b, text2_a, text2_b;$/;"	V
text1_b	nvim/plugged/coc.nvim/build/index.js	/^  var text1_a, text1_b, text2_a, text2_b;$/;"	V
text2_a	nvim/plugged/coc.nvim/build/index.js	/^  var text1_a, text1_b, text2_a, text2_b;$/;"	V
textDocument	nvim/plugged/coc.nvim/build/index.js	/^                    textDocument: textDocument,$/;"	P
textDocument	nvim/plugged/coc.nvim/build/index.js	/^                textDocument: { version, uri },$/;"	P
textDocument	nvim/plugged/coc.nvim/build/index.js	/^                textDocument: {$/;"	P
textDocument	nvim/plugged/coc.nvim/build/index.js	/^            textDocument: { uri: document.uri },$/;"	P
textDocument	nvim/plugged/coc.nvim/build/index.js	/^        textDocument: {$/;"	P
textDocument	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private textDocument: TextDocument$/;"	m
textDocument	nvim/plugged/coc.nvim/src/model/document.ts	/^  public textDocument: TextDocument$/;"	m
textDocumentEdit	nvim/plugged/coc.nvim/build/index.js	/^                var textDocumentEdit = {$/;"	O
textDocumentFilter	nvim/plugged/coc.nvim/build/index.js	/^    static textDocumentFilter(selectors, textDocument) {$/;"	M
textDocumentFilter	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public static textDocumentFilter($/;"	m
textDocuments	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get textDocuments(): TextDocument[] {$/;"	m
textEdit	nvim/plugged/coc.nvim/build/index.js	/^                    item.textEdit = {$/;"	P
textEdit	nvim/plugged/coc.nvim/build/index.js	/^            textEdit: textEdit,$/;"	P
textEdit	nvim/plugged/coc.nvim/src/cursors/range.ts	/^  public get textEdit(): TextEdit {$/;"	m
textEditChange	nvim/plugged/coc.nvim/build/index.js	/^                        var textEditChange = new TextEditChangeImpl(change.edits);$/;"	V
textEditChange	nvim/plugged/coc.nvim/build/index.js	/^                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);$/;"	V
textRange	nvim/plugged/coc.nvim/build/index.js	/^            let textRange = new range_1.default(line, range.start.character, range.end.character, textDocument.getText(range), 0);$/;"	V
text_begin	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:text_begin(lnum)$/;"	f
text_delete	nvim/plugged/coc.nvim/build/index.js	/^  var text_delete = '';$/;"	V
text_insert	nvim/plugged/coc.nvim/build/index.js	/^  var text_insert = '';$/;"	V
textobject	nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
then	nvim/plugged/coc.nvim/build/index.js	/^    const then = er => {$/;"	F
thenable	nvim/plugged/coc.nvim/build/index.js	/^function thenable(value) {$/;"	F
thisArg	nvim/plugged/coc.nvim/src/commands.ts	/^    private thisArg: any,$/;"	m
throttle	nvim/plugged/coc.nvim/src/util/throttle.ts	/^export default function throttle(func: Function, wait: number): Function & { clear(): void; } {$/;"	f
throw	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! s:throw(string) abort$/;"	f
throw	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
throw	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:throw(string) abort$/;"	f
throwExceptionIf	nvim/plugged/coc.nvim/build/index.js	/^const throwExceptionIf = (config, checks, message) => {$/;"	F
throwIfClosedOrDisposed	nvim/plugged/coc.nvim/build/index.js	/^    function throwIfClosedOrDisposed() {$/;"	F
throwIfListening	nvim/plugged/coc.nvim/build/index.js	/^    function throwIfListening() {$/;"	F
throwIfNotListening	nvim/plugged/coc.nvim/build/index.js	/^    function throwIfNotListening() {$/;"	F
tick	nvim/autoload/plug.vim	/^function! s:tick()$/;"	f
tildeTrimReplace	nvim/plugged/coc.nvim/build/index.js	/^var tildeTrimReplace = '$1~'$/;"	V
timeRemoveMillis	nvim/plugged/coc.nvim/build/index.js	/^function timeRemoveMillis (timestamp) {$/;"	F
timeout	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let timeout = s:is_vim ? 10 : 0$/;"	v
timeout	nvim/plugged/coc.nvim/build/index.js	/^  var timeout, args, context, timestamp, result;$/;"	V
timeout	nvim/plugged/coc.nvim/build/index.js	/^let timeout = 0$/;"	V
timeout	nvim/plugged/coc.nvim/build/index.js	/^var timeout = 0$/;"	V
timeout	nvim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public timeout = 3000$/;"	m
timeout	nvim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public timeout = 3000$/;"	m
timeout	nvim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private timeout: any$/;"	m
timeout	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		timeout: 0,$/;"	P
timer	nvim/plugged/coc.nvim/build/index.js	/^                    let timer = setTimeout(() => {$/;"	F
timer	nvim/plugged/coc.nvim/build/index.js	/^                let timer = setTimeout(() => {$/;"	F
timer	nvim/plugged/coc.nvim/build/index.js	/^            let timer = setTimeout(() => {$/;"	F
timer	nvim/plugged/coc.nvim/build/index.js	/^            let timer;$/;"	V
timer	nvim/plugged/coc.nvim/build/index.js	/^        let timer = setTimeout(() => {$/;"	F
timer	nvim/plugged/coc.nvim/build/index.js	/^        let timer = setTimeout(async () => {$/;"	F
timer	nvim/plugged/coc.nvim/build/index.js	/^        let timer;$/;"	V
timer	nvim/plugged/coc.nvim/build/index.js	/^    let timer;$/;"	V
timer	nvim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  private timer: NodeJS.Timer$/;"	m
timer	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private timer: NodeJS.Timer$/;"	m
timerId	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	timerId: null,$/;"	P
timers	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	timers: [],$/;"	P
timestampLevelAndCategory	nvim/plugged/coc.nvim/build/index.js	/^function timestampLevelAndCategory(loggingEvent, colour) {$/;"	F
titles	nvim/plugged/coc.nvim/src/commands.ts	/^  public titles = new Map<string, string>()$/;"	m
tmSnippet	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  private tmSnippet: Snippets.TextmateSnippet$/;"	m
tmp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^							var tmp = [];$/;"	A
tmp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var tmp = [], type = m[3];$/;"	A
tmp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var tmp = [];$/;"	A
toArray	nvim/plugged/coc.nvim/build/index.js	/^  function toArray(raw) {$/;"	F
toArray	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.toArray = function () {$/;"	M
toArrayBuffer	nvim/plugged/coc.nvim/build/index.js	/^  function toArrayBuffer(raw) {$/;"	F
toArrayReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.toArrayReverse = function () {$/;"	M
toBuffer	nvim/plugged/coc.nvim/build/index.js	/^  function toBuffer(raw) {$/;"	F
toBuffer	nvim/plugged/coc.nvim/build/index.js	/^  toBuffer: function(rawBuffer) {$/;"	M
toComparators	nvim/plugged/coc.nvim/build/index.js	/^function toComparators (range, options) {$/;"	F
toData	nvim/plugged/coc.nvim/build/index.js	/^    toData() {$/;"	M
toData	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^  public toData(): IConfigurationData {$/;"	m
toHexColor	nvim/plugged/coc.nvim/build/index.js	/^function toHexColor(color) {$/;"	F
toHexColor	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^function toHexColor(color: Color): { red: number, green: number, blue: number } {$/;"	f
toHexString	nvim/plugged/coc.nvim/build/index.js	/^function toHexString(color) {$/;"	F
toHexString	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^export function toHexString(color: Color): string {$/;"	f
toJSON	nvim/plugged/coc.nvim/build/index.js	/^    URI.prototype.toJSON = function () {$/;"	M
toJSON	nvim/plugged/coc.nvim/build/index.js	/^    _URI.prototype.toJSON = function () {$/;"	M
toJson	nvim/plugged/coc.nvim/build/index.js	/^    toJson() {$/;"	M
toNamespace	nvim/plugged/coc.nvim/build/index.js	/^	function toNamespace(regexp) {$/;"	F
toNoArgVisit	nvim/plugged/coc.nvim/build/index.js	/^    function toNoArgVisit(visitFunction) {$/;"	F
toNumber	nvim/plugged/coc.nvim/build/index.js	/^    function toNumber() {$/;"	F
toNumber	nvim/plugged/coc.nvim/build/index.js	/^  toNumber: function(allowImprecise) {$/;"	M
toObject	nvim/plugged/coc.nvim/build/index.js	/^function toObject(arg) {$/;"	F
toOctetString	nvim/plugged/coc.nvim/build/index.js	/^  toOctetString: function(sep) {$/;"	M
toOneArgVisit	nvim/plugged/coc.nvim/build/index.js	/^    function toOneArgVisit(visitFunction) {$/;"	F
toOptions	nvim/plugged/coc.nvim/build/index.js	/^function toOptions(host, port, localAddress) {$/;"	F
toRaw	nvim/plugged/coc.nvim/build/index.js	/^const toRaw = new Map(win.map((char, i) => [char, raw[i]]))$/;"	F
toRaw	nvim/plugged/coc.nvim/build/index.js	/^const toRaw = new Map(win.map((char, i) => [char, raw[i]]))$/;"	V
toString	nvim/plugged/coc.nvim/build/index.js	/^    URI.prototype.toString = function (skipEncoding) {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^    _URI.prototype.toString = function (skipEncoding) {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^    function toString(radix) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^    function toString(value) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^    toString() {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^  toString() {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^  toString: function(radix) {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^Comparator.prototype.toString = function () {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.toString = function () {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.toString = function () {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^function toString(arg) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^function toString(encoding, start, end) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^var toString = {}.toString;$/;"	O
toString	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toString(): string {$/;"	m
toString	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public toString(): string {$/;"	m
toTextmateString	nvim/plugged/coc.nvim/build/index.js	/^    toTextmateString() {$/;"	M
toTextmateString	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public abstract toTextmateString(): string$/;"	m
toTextmateString	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toTextmateString(): string {$/;"	m
toWin	nvim/plugged/coc.nvim/build/index.js	/^const toWin = new Map(raw.map((char, i) => [char, win[i]]))$/;"	F
toWin	nvim/plugged/coc.nvim/build/index.js	/^const toWin = new Map(raw.map((char, i) => [char, win[i]]))$/;"	V
to_a	nvim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	nvim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
toggle	nvim/plugged/coc.nvim/build/index.js	/^    toggle() {$/;"	M
toggle	nvim/plugged/coc.nvim/src/model/source.ts	/^  public toggle(): void {$/;"	m
toggle	nvim/plugged/coc.nvim/src/services.ts	/^  public async toggle(id: string): Promise<void> {$/;"	m
toggle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggle: function( fn ) {$/;"	M
toggle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggle: function( fn, fn2 ){$/;"	M
toggleClass	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggleClass: function( classNames ) {$/;"	M
toggleExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async toggleExtension(id: string): Promise<void> {$/;"	m
toggleFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
toggleIgnoreFilter	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleLock	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async toggleLock(id: string): Promise<void> {$/;"	m
toggleMode	nvim/plugged/coc.nvim/build/index.js	/^    toggleMode() {$/;"	M
toggleMode	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public toggleMode(): void {$/;"	m
togglePreview	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public async togglePreview(): Promise<void> {$/;"	m
toggleSelection	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async toggleSelection(): Promise<void> {$/;"	m
toggleShowBookmarks	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden()$/;"	f
toggleSource	nvim/plugged/coc.nvim/build/index.js	/^    toggleSource(name) {$/;"	M
toggleSource	nvim/plugged/coc.nvim/src/sources.ts	/^  public toggleSource(name: string): void {$/;"	m
toggleZoom	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom()$/;"	f
toggle_create_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:toggle_create_cb(from_line, to_line, state1, state2, start_rate)$/;"	f
toggle_off	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:toggle_off()$/;"	f
toggle_on	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:toggle_on()$/;"	f
tok	nvim/plugged/coc.nvim/build/index.js	/^function tok (n) {$/;"	F
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":content-length",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":http-version",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":referrer",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":remote-addr",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":response-time",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":status",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":user-agent",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: \/:req\\[([^\\]]+)]\/g,$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: \/:res\\[([^\\]]+)]\/g,$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^  var token = new Array(256);$/;"	V
token	nvim/plugged/coc.nvim/src/languages.ts	/^  private get token(): CancellationToken {$/;"	m
token	nvim/plugged/typescript-vim/indent/typescript.vim	/^function s:token()$/;"	f
tokenSource	nvim/plugged/coc.nvim/build/index.js	/^                    let tokenSource = new vscode_languageserver_protocol_1.CancellationTokenSource();$/;"	V
tokenSource	nvim/plugged/coc.nvim/build/index.js	/^            let tokenSource = new vscode_languageserver_protocol_1.CancellationTokenSource();$/;"	V
tokenSource	nvim/plugged/coc.nvim/build/index.js	/^        let tokenSource = new vscode_languageserver_protocol_1.CancellationTokenSource();$/;"	V
tokenSource	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private tokenSource: CancellationTokenSource$/;"	m
tokenSource	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private tokenSource: CancellationTokenSource$/;"	m
tokenSources	nvim/plugged/coc.nvim/src/completion/complete.ts	/^  private tokenSources: Map<string, CancellationTokenSource> = new Map()$/;"	m
tokenText	nvim/plugged/coc.nvim/build/index.js	/^    tokenText(token) {$/;"	M
tokenText	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public tokenText(token: Token): string {$/;"	m
total	nvim/plugged/coc.nvim/build/index.js	/^                    let total = arr.reduce((p, c) => p + c.delta, 0);$/;"	F
total	nvim/plugged/coc.nvim/build/index.js	/^        let total = 0;$/;"	V
totalItems	nvim/plugged/coc.nvim/src/list/worker.ts	/^  private totalItems: ListItem[] = []$/;"	m
touch	nvim/plugged/coc.nvim/build/index.js	/^    touch(item, touch) {$/;"	M
trace	nvim/plugged/coc.nvim/build/index.js	/^        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {$/;"	M
trace	nvim/plugged/coc.nvim/build/index.js	/^        trace: (value, tracer, sendNotificationOrTraceOptions) => {$/;"	M
trace	nvim/plugged/coc.nvim/build/index.js	/^    trace(data, ...meta) {$/;"	M
trace	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public set trace(value: Trace) {$/;"	m
traceReceivedNotification	nvim/plugged/coc.nvim/build/index.js	/^    function traceReceivedNotification(message) {$/;"	F
traceReceivedRequest	nvim/plugged/coc.nvim/build/index.js	/^    function traceReceivedRequest(message) {$/;"	F
traceReceivedResponse	nvim/plugged/coc.nvim/build/index.js	/^    function traceReceivedResponse(message, responsePromise) {$/;"	F
traceSendingNotification	nvim/plugged/coc.nvim/build/index.js	/^    function traceSendingNotification(message) {$/;"	F
traceSendingRequest	nvim/plugged/coc.nvim/build/index.js	/^    function traceSendingRequest(message) {$/;"	F
traceSendingResponse	nvim/plugged/coc.nvim/build/index.js	/^    function traceSendingResponse(message, method, startTime) {$/;"	F
tracer	nvim/plugged/coc.nvim/build/index.js	/^    let tracer;$/;"	V
trail	nvim/plugged/coc.nvim/build/index.js	/^    var trail = \/[\\\/\\\\]$\/.test(prefix)$/;"	V
transform	nvim/plugged/coc.nvim/build/index.js	/^        let transform = new Transform();$/;"	V
transform	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public transform: Transform$/;"	m
transformString	nvim/plugged/coc.nvim/build/index.js	/^        let transformString = '';$/;"	V
translateLevel	nvim/plugged/coc.nvim/build/index.js	/^function translateLevel(level) {$/;"	F
transport	nvim/plugged/coc.nvim/build/index.js	/^                transport: this,$/;"	P
tries	nvim/plugged/ale/run-tests.bat	/^set tries=0$/;"	v
trigger	nvim/plugged/coc.nvim/build/index.js	/^    trigger(task, delay = this.defaultDelay) {$/;"	M
trigger	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	trigger: function( type, data, fn ) {$/;"	M
trigger	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	trigger: function(type, data, elem, donative, extra) {$/;"	M
triggerCharacter	nvim/plugged/coc.nvim/build/index.js	/^            triggerCharacter: null,$/;"	P
triggerCharacters	nvim/plugged/coc.nvim/build/index.js	/^            triggerCharacters: characters$/;"	P
triggerCharacters	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get triggerCharacters(): string[] {$/;"	m
triggerCompletion	nvim/plugged/coc.nvim/src/completion/index.ts	/^  private async triggerCompletion(document: Document, pre: string, checkTrigger = true): Promise<void> {$/;"	m
triggerForInComplete	nvim/plugged/coc.nvim/build/index.js	/^            triggerForInComplete: true$/;"	P
triggerHandler	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	triggerHandler: function( type, data, fn ) {$/;"	M
triggerMessageQueue	nvim/plugged/coc.nvim/build/index.js	/^    function triggerMessageQueue() {$/;"	F
triggerOnly	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get triggerOnly(): boolean {$/;"	m
triggerPatterns	nvim/plugged/coc.nvim/src/model/source.ts	/^  public get triggerPatterns(): RegExp[] | null {$/;"	m
triggerSignatureHelp	nvim/plugged/coc.nvim/src/handler/index.ts	/^  private async triggerSignatureHelp(document: Document, position: Position): Promise<boolean> {$/;"	m
trigger_gitgutter	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:trigger_gitgutter()$/;"	f
trim	nvim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
trim	nvim/plugged/coc.nvim/autoload/coc.vim	/^function! s:trim(str)$/;"	f
trim	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	trim: function( text ) {$/;"	M
trim	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:trim(value)$/;"	f
trimSameExts	nvim/plugged/coc.nvim/src/source/file.ts	/^  public get trimSameExts(): string[] {$/;"	m
truncate	nvim/plugged/coc.nvim/build/index.js	/^  function truncate(truncation, toTruncate) {$/;"	F
truncateAndPad	nvim/plugged/coc.nvim/build/index.js	/^  function truncateAndPad(toTruncAndPad, truncation, padding) {$/;"	F
tryLoading	nvim/plugged/coc.nvim/build/index.js	/^const tryLoading = (modulePath, config) => {$/;"	F
tryReadContent	nvim/plugged/coc.nvim/build/index.js	/^    tryReadContent(length) {$/;"	M
tryReadHeaders	nvim/plugged/coc.nvim/build/index.js	/^    tryReadHeaders() {$/;"	M
twoStarDot	nvim/plugged/coc.nvim/build/index.js	/^var twoStarDot = '(?:(?!(?:\\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\\/)).)*?'$/;"	V
twoStarNoDot	nvim/plugged/coc.nvim/build/index.js	/^var twoStarNoDot = '(?:(?!(?:\\\\\\\/|^)\\\\.).)*?'$/;"	V
twos	nvim/plugged/coc.nvim/build/index.js	/^const twos = (buf) => {$/;"	F
twosComp	nvim/plugged/coc.nvim/build/index.js	/^const twosComp = byte => ((0xff ^ byte) + 1) & 0xff$/;"	F
type	nvim/plugged/coc.nvim/build/index.js	/^          type: stateChar,$/;"	P
type	nvim/plugged/coc.nvim/build/index.js	/^        let type;$/;"	V
type	nvim/plugged/coc.nvim/build/index.js	/^      type = (-0x80 <= ivalue) ? 0xd0 : (-0x8000 <= ivalue) ? 0xd1 : 0xd2;$/;"	M
type	nvim/plugged/coc.nvim/build/index.js	/^      type = (ivalue <= 0xFF) ? 0xcc : (ivalue <= 0xFFFF) ? 0xcd : 0xce;$/;"	M
type	nvim/plugged/coc.nvim/build/index.js	/^    type = (stats && stats.isDirectory()) ? 'dir' : 'file'$/;"	M
type	nvim/plugged/coc.nvim/build/index.js	/^    var type = 0xc0;$/;"	V
type	nvim/plugged/coc.nvim/build/index.js	/^    var type = 0xcf;$/;"	V
type	nvim/plugged/coc.nvim/build/index.js	/^    var type = 0xd3;$/;"	V
type	nvim/plugged/coc.nvim/build/index.js	/^    var type;$/;"	V
type	nvim/plugged/coc.nvim/build/index.js	/^  type = (typeof type === 'function') ? false : type$/;"	M
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					type: type,$/;"	P
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			type: "GET",$/;"	P
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			type: "POST",$/;"	P
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			type: type,$/;"	P
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		type: "GET",$/;"	P
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var type = "GET";$/;"	V
type	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def type(content)$/;"	f	class:Buffer
type	nvim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def type(string)$/;"	f
type	nvim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def type(string)$/;"	f
typeDefinitionManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private typeDefinitionManager = new TypeDefinitionManager()$/;"	m
typedArray	nvim/plugged/coc.nvim/build/index.js	/^    function typedArray(value, check) {$/;"	F
typedArray	nvim/plugged/coc.nvim/build/index.js	/^function typedArray(value, check) {$/;"	F
typedArray	nvim/plugged/coc.nvim/src/util/is.ts	/^export function typedArray<T>($/;"	f
types	nvim/plugged/coc.nvim/build/index.js	/^        let types = [types_1.PatternType.Buffer, types_1.PatternType.LanguageServer, types_1.PatternType.Global];$/;"	A
u	nvim/plugged/coc.nvim/build/index.js	/^  const u = new Unpack(opt)$/;"	V
u	nvim/plugged/coc.nvim/build/index.js	/^  const u = new Unpack.Sync(opt)$/;"	V
ui	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public ui: UI$/;"	m
uiAttach	nvim/plugged/coc.nvim/build/index.js	/^    uiAttach(width, height, options) {$/;"	M
uiDetach	nvim/plugged/coc.nvim/build/index.js	/^    uiDetach() {$/;"	M
uiSetOption	nvim/plugged/coc.nvim/build/index.js	/^    uiSetOption(name, value) {$/;"	M
uiTryResize	nvim/plugged/coc.nvim/build/index.js	/^    uiTryResize(width, height) {$/;"	M
uint16	nvim/plugged/coc.nvim/build/index.js	/^    uint16: uint16,$/;"	P
uint16	nvim/plugged/coc.nvim/build/index.js	/^function uint16(decoder) {$/;"	F
uint32	nvim/plugged/coc.nvim/build/index.js	/^    uint32: uint32,$/;"	P
uint32	nvim/plugged/coc.nvim/build/index.js	/^const uint32 = (a, b, c) =>$/;"	F
uint32	nvim/plugged/coc.nvim/build/index.js	/^function uint32(decoder) {$/;"	F
uint64	nvim/plugged/coc.nvim/build/index.js	/^  function uint64(encoder, value) {$/;"	F
uint8	nvim/plugged/coc.nvim/build/index.js	/^    uint8: uint8,$/;"	P
uint8	nvim/plugged/coc.nvim/build/index.js	/^function uint8(decoder) {$/;"	F
ulen	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:ulen(s)$/;"	f
umask	nvim/plugged/coc.nvim/build/index.js	/^    sandbox.process.umask = (mask) => {$/;"	M
unbind	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	unbind: function( type, fn ) {$/;"	M
unc_path	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:unc_path(bufnr)$/;"	f
undefined	nvim/plugged/coc.nvim/build/index.js	/^    function undefined(value) {$/;"	F
undefinedToNull	nvim/plugged/coc.nvim/build/index.js	/^    function undefinedToNull(param) {$/;"	F
underline	nvim/plugged/coc.nvim/build/index.js	/^  underline: [4, 24],$/;"	P
undo	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:undo(hunk_diff)$/;"	f
unesc	nvim/plugged/coc.nvim/build/index.js	/^    var unesc = ''$/;"	V
unescapeBraces	nvim/plugged/coc.nvim/build/index.js	/^function unescapeBraces(str) {$/;"	F
unhandledNotificationEmitter	nvim/plugged/coc.nvim/build/index.js	/^    let unhandledNotificationEmitter = new events_1.Emitter();$/;"	V
unilateralTags	nvim/plugged/coc.nvim/build/index.js	/^var unilateralTags = ['subscription', 'log'];$/;"	A
uninstallExtension	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async uninstallExtension(ids: string[]): Promise<void> {$/;"	m
union	nvim/plugged/vim-jsdoc/test/test.ts	/^function union(): number | string {$/;"	f
unique	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	unique: function( array ) {$/;"	M
uniqueItems	nvim/plugged/coc.nvim/build/index.js	/^            uniqueItems: true,$/;"	P
units	nvim/plugged/coc.nvim/build/index.js	/^  const units = {$/;"	O
unknownResponseSquenceNumber	nvim/plugged/coc.nvim/build/index.js	/^    let unknownResponseSquenceNumber = 0;$/;"	V
unlinkAsync	nvim/plugged/coc.nvim/build/index.js	/^async function unlinkAsync(filepath) {$/;"	F
unlinkAsync	nvim/plugged/coc.nvim/src/util/fs.ts	/^export async function unlinkAsync(filepath: string): Promise<void> {$/;"	f
unlinkFile	nvim/plugged/coc.nvim/build/index.js	/^const unlinkFile = (path, cb) => {$/;"	F
unlinkFileSync	nvim/plugged/coc.nvim/build/index.js	/^const unlinkFileSync = path => {$/;"	F
unlink_file	nvim/plugged/html5.vim/Makefile	/^unlink_file = \\$/;"	m
unlisten	nvim/plugged/coc.nvim/build/index.js	/^    unlisten(eventName, cb) {$/;"	M
unmap	nvim/plugged/coc.nvim/build/index.js	/^    unmap(key) {$/;"	M
unmap	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private unmap(key: string): void {$/;"	m
unmonkeypatch	nvim/plugged/coc.nvim/build/index.js	/^function unmonkeypatch () {$/;"	F
unpackArrayBuffer	nvim/plugged/coc.nvim/build/index.js	/^function unpackArrayBuffer(value) {$/;"	F
unpackClass	nvim/plugged/coc.nvim/build/index.js	/^function unpackClass(Class) {$/;"	F
unpackError	nvim/plugged/coc.nvim/build/index.js	/^function unpackError(Class) {$/;"	F
unpackRegExp	nvim/plugged/coc.nvim/build/index.js	/^function unpackRegExp(value) {$/;"	F
unregister	nvim/plugged/coc.nvim/build/index.js	/^    unregister(id) {$/;"	M
unregister	nvim/plugged/coc.nvim/src/commands.ts	/^  public unregister(id: string): void {$/;"	m
unregister	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public unregister(id: string): void {$/;"	m
unregister	nvim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  public unregister(id: string): void {$/;"	m
unsafe	nvim/plugged/coc.nvim/build/index.js	/^function unsafe (val, doUnesc) {$/;"	F
unshift	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.unshift = function () {$/;"	M
unshift	nvim/plugged/coc.nvim/build/index.js	/^function unshift (self, item) {$/;"	F
unshiftNode	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.unshiftNode = function (node) {$/;"	M
unsubscribe	nvim/plugged/coc.nvim/build/index.js	/^    unsubscribe(event) {$/;"	M
unsubscribe	nvim/plugged/coc.nvim/build/index.js	/^    unsubscribe(subscription) {$/;"	M
unsubscribe	nvim/plugged/coc.nvim/src/watchman.ts	/^  public unsubscribe(subscription: string): Promise<any> {$/;"	m
untracked_output	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:untracked_output(dict, buf)$/;"	f
upDirCurrentRootClosed	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
upDirCurrentRootOpen	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
update	nvim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update	nvim/plugged/coc.nvim/build/index.js	/^            update: (key, value, isUser = false) => {$/;"	M
update	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.update = function (event, version) {$/;"	M
update	nvim/plugged/coc.nvim/build/index.js	/^    update() {$/;"	M
update	nvim/plugged/coc.nvim/src/model/extension.ts	/^  public async update(npm: string, name: string, uri?: string): Promise<boolean> {$/;"	m
update	nvim/plugged/coc.nvim/src/model/memos.ts	/^  private async update(id: string, key: string, value: any): Promise<void> {$/;"	m
update	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  private update(): void {$/;"	m
update	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	update: function(){$/;"	M
updateConfiguration	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public updateConfiguration(key: string, value: any): void {$/;"	m
updateExtensions	nvim/plugged/coc.nvim/src/extensions.ts	/^  public async updateExtensions(): Promise<Disposable | null> {$/;"	m
updateItem	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public async updateItem(item: ListItem, index: number): Promise<void> {$/;"	m
updatePlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    updatePlaceholder(id, val) {$/;"	M
updatePlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    updatePlaceholder(placeholder, edit) {$/;"	M
updatePlaceholder	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public updatePlaceholder(id: number, val: string): void {$/;"	m
updatePlaceholder	nvim/plugged/coc.nvim/src/snippets/snippet.ts	/^  public updatePlaceholder(placeholder: CocSnippetPlaceholder, edit: TextEdit): { edits: TextEdit[], delta: number } {$/;"	m
updateStatus	nvim/plugged/coc.nvim/build/index.js	/^    updateStatus() {$/;"	M
updateStatus	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public updateStatus(): void {$/;"	m
updateUserConfig	nvim/plugged/coc.nvim/build/index.js	/^    updateUserConfig(props) {$/;"	M
updateUserConfig	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public updateUserConfig(props: { [key: string]: any }): void {$/;"	m
update_branch	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_branch()$/;"	f
update_finish	nvim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_git_branch	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_git_branch()$/;"	f
update_hg_branch	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_hg_branch()$/;"	f
update_impl	nvim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	nvim/autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	nvim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_state	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:update_state(item)$/;"	f
update_tabline	nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:update_tabline()$/;"	f
update_tags	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
update_untracked	nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_untracked()$/;"	f
update_vim	nvim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
update_visual_markers	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:update_visual_markers(region)$/;"	f
update_wiki_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:update_wiki_link(fname, old, new)$/;"	f
update_wiki_links	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:update_wiki_links(wiki_nr, old_fname, new_fname,old_fname_relpath)$/;"	f
update_wiki_links_dir	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:update_wiki_links_dir(wiki_nr, dir, old_fname, new_fname)$/;"	f
update_wordcount	nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:update_wordcount(force_update)$/;"	f
upgrade	nvim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	nvim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
upperCase	nvim/plugged/coc.nvim/build/index.js	/^function upperCase(code) {$/;"	F
upperCase	nvim/plugged/coc.nvim/src/completion/match.ts	/^function upperCase(code: number): boolean {$/;"	f
upperFirst	nvim/plugged/coc.nvim/build/index.js	/^function upperFirst(str) {$/;"	F
upperFirst	nvim/plugged/coc.nvim/src/util/string.ts	/^export function upperFirst(str: string): string {$/;"	f
upsert_new_gitgutter_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:upsert_new_gitgutter_signs(bufnr, modified_lines) abort$/;"	f
uri	nvim/plugged/coc.nvim/build/index.js	/^            uri: uri$/;"	P
uri	nvim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  public get uri(): string | null {$/;"	m
uri	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get uri(): string {$/;"	m
uri	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get uri(): string {$/;"	m
url	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			url: url,$/;"	P
urlToOptions	nvim/plugged/coc.nvim/build/index.js	/^function urlToOptions(urlObject) {$/;"	F
url_encode	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:url_encode(str) abort$/;"	f
usage	nvim/plugged/fzf.vim/bin/preview.rb	/^def usage$/;"	f
use	nvim/plugged/coc.nvim/build/index.js	/^    use(f) {$/;"	M
useColors	nvim/plugged/coc.nvim/build/index.js	/^function useColors() {$/;"	F
use_custom_wiki2html	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:use_custom_wiki2html()$/;"	f
use_known_shell	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:use_known_shell() abort$/;"	f
use_raw_list	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
usedColors	nvim/plugged/coc.nvim/build/index.js	/^const usedColors = new Set();$/;"	V
user	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> user <C-R>=DockerfileReplaceInstruction("user", "USER")<CR>$/;"	m
user	nvim/plugged/coc.nvim/build/index.js	/^            user: {$/;"	P
user	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^  public get user(): ConfigurationModel {$/;"	m
user	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public get user(): ConfigurationModel {$/;"	m
userConfigFile	nvim/plugged/coc.nvim/src/configuration/index.ts	/^    private userConfigFile?: string | null,$/;"	m
userConfiguration	nvim/plugged/coc.nvim/build/index.js	/^        const userConfiguration = new model_1.ConfigurationModel(data.user.contents);$/;"	V
userDefined	nvim/plugged/coc.nvim/build/index.js	/^  function userDefined(loggingEvent, specifier) {$/;"	F
userInsertMappings	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private userInsertMappings: Map<string, string> = new Map()$/;"	m
userNormalMappings	nvim/plugged/coc.nvim/src/list/mappings.ts	/^  private userNormalMappings: Map<string, string> = new Map()$/;"	m
user_data	nvim/plugged/coc.nvim/build/index.js	/^                    let user_data = { cid, source };$/;"	O
userinfo	nvim/plugged/coc.nvim/build/index.js	/^    var userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';$/;"	V
username	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		username: null,$/;"	P
utimesMillis	nvim/plugged/coc.nvim/build/index.js	/^function utimesMillis (path, atime, mtime, callback) {$/;"	F
utimesMillisSync	nvim/plugged/coc.nvim/build/index.js	/^function utimesMillisSync (path, atime, mtime) {$/;"	F
v	nvim/plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> v <NOP>$/;"	m
v	nvim/plugged/coc.nvim/build/index.js	/^        v = (v ^ 0xff) + carry;$/;"	M
v	nvim/plugged/coc.nvim/build/index.js	/^  var v = new Array(len);$/;"	V
v1	nvim/plugged/coc.nvim/build/index.js	/^  var v1 = new Array(v_length);$/;"	V
v1	nvim/plugged/coc.nvim/build/index.js	/^function v1(options, buf, offset) {$/;"	F
v2	nvim/plugged/coc.nvim/build/index.js	/^  var v2 = new Array(v_length);$/;"	V
v4	nvim/plugged/coc.nvim/build/index.js	/^function v4(options, buf, offset) {$/;"	F
v_length	nvim/plugged/coc.nvim/build/index.js	/^  var v_length = 2 * max_d;$/;"	V
val	nvim/plugged/coc.nvim/build/index.js	/^	var val, src, clone;$/;"	V
val	nvim/plugged/coc.nvim/build/index.js	/^  val = (val || '').trim()$/;"	M
val	nvim/plugged/coc.nvim/src/util/lazy.ts	/^  private val: T$/;"	m
val	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = name == "width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ];$/;"	V
val	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	V
val	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	V
val	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	val: function( value ) {$/;"	M
valid	nvim/plugged/coc.nvim/build/index.js	/^function valid (version, options) {$/;"	F
valid	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  public async valid(): Promise<boolean> {$/;"	m
valid	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  public get valid(): Promise<boolean> {$/;"	m
valid	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public async valid(): Promise<boolean> {$/;"	m
validColours	nvim/plugged/coc.nvim/build/index.js	/^const validColours = [$/;"	A
validDocument	nvim/plugged/coc.nvim/build/index.js	/^    validDocument(doc) {$/;"	M
validDocument	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private validDocument(doc: Document): boolean {$/;"	m
validFlushFlags	nvim/plugged/coc.nvim/build/index.js	/^const validFlushFlags = new Set([$/;"	V
validIdentifier	nvim/plugged/coc.nvim/build/index.js	/^const validIdentifier = thing => \/^[A-Za-z][A-Za-z0-9_]*$\/g.test(thing);$/;"	F
validKeys	nvim/plugged/coc.nvim/src/list/configuration.ts	/^export const validKeys = [$/;"	v
validRange	nvim/plugged/coc.nvim/build/index.js	/^function validRange (range, options) {$/;"	F
validSocket	nvim/plugged/coc.nvim/build/index.js	/^function validSocket(path) {$/;"	F
validSocket	nvim/plugged/coc.nvim/src/util/fs.ts	/^export function validSocket(path: string): Promise<boolean> {$/;"	f
valid_dir	nvim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:valid_dir(dir)$/;"	f
validteDocumentChanges	nvim/plugged/coc.nvim/build/index.js	/^    validteDocumentChanges(documentChanges) {$/;"	M
validteDocumentChanges	nvim/plugged/coc.nvim/src/workspace.ts	/^  private validteDocumentChanges(documentChanges: any[] | null): boolean {$/;"	m
value	nvim/plugged/coc.nvim/bin/server.js	/^  value: function () {$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^                value = (_a = {}, _a[lastSegment] = value, _a);$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^                var value = 0;$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^            let value;$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^            value: this$/;"	P
value	nvim/plugged/coc.nvim/build/index.js	/^        let value = '${';$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^        let value;$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^        value: ctor,$/;"	P
value	nvim/plugged/coc.nvim/build/index.js	/^        value: {},$/;"	P
value	nvim/plugged/coc.nvim/build/index.js	/^        var value = 0;$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^      value: fs$close$/;"	P
value	nvim/plugged/coc.nvim/build/index.js	/^      value: fs$closeSync$/;"	P
value	nvim/plugged/coc.nvim/build/index.js	/^      var value;$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^    descriptor.value = function (...args) {$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^    value: function () {$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^    var value;$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^  value: function () {$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^  var value = new Array(len);$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^  var value = new Map();$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^  var value = {};$/;"	O
value	nvim/plugged/coc.nvim/build/index.js	/^  var value;$/;"	V
value	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public value: string$/;"	m
value	nvim/plugged/coc.nvim/src/util/lazy.ts	/^  public value(): T {$/;"	m
valueOf	nvim/plugged/coc.nvim/build/index.js	/^  valueOf: function() {$/;"	M
valueSet	nvim/plugged/coc.nvim/build/index.js	/^                valueSet: [$/;"	P
valueSet	nvim/plugged/coc.nvim/build/index.js	/^            valueSet: SupporedSymbolKinds$/;"	P
values	nvim/plugged/coc.nvim/build/index.js	/^        const values = [];$/;"	A
values	nvim/plugged/coc.nvim/build/index.js	/^    values() {$/;"	M
values	nvim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^    function values(item: { [key: string]: number[] }): number[] {$/;"	f
variable	nvim/plugged/coc.nvim/build/index.js	/^        const variable = new Variable(name);$/;"	V
variables	nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:variables(bufnr) abort$/;"	f
variables	nvim/plugged/coc.nvim/src/model/document.ts	/^  private variables: { [key: string]: any }$/;"	m
verb	nvim/plugged/coc.nvim/build/index.js	/^    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }$/;"	F
verb	nvim/plugged/coc.nvim/build/index.js	/^    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }$/;"	F
verb	nvim/plugged/coc.nvim/build/index.js	/^    function verb(n) { return function (v) { return step([n, v]); }; }$/;"	F
verb	nvim/plugged/coc.nvim/build/index.js	/^    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }$/;"	F
vers_compare	nvim/plugged/coc.nvim/build/index.js	/^function vers_compare(a, b) {$/;"	F
version	nvim/plugged/coc.nvim/build/index.js	/^        let version;$/;"	V
version	nvim/plugged/coc.nvim/build/index.js	/^    const version = '2.0';$/;"	V
version	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private version = -1$/;"	m
version	nvim/plugged/coc.nvim/src/handler/codelens.ts	/^  private get version(): number {$/;"	m
version	nvim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public get version(): number {$/;"	m
version	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private version: number$/;"	m
version	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get version(): number {$/;"	m
version	nvim/plugged/coc.nvim/src/plugin.ts	/^  public get version(): string {$/;"	m
version	nvim/plugged/coc.nvim/src/snippets/session.ts	/^  private version = 0$/;"	m
version	nvim/plugged/coc.nvim/src/workspace.ts	/^  public readonly version: string$/;"	m
version	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	version: (userAgent.match( \/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/ ) || [])[1],$/;"	M
versionA	nvim/plugged/coc.nvim/build/index.js	/^  var versionA = new SemVer(a, loose)$/;"	V
versionB	nvim/plugged/coc.nvim/build/index.js	/^  var versionB = new SemVer(b, loose)$/;"	V
version_requirement	nvim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
vimItems	nvim/plugged/coc.nvim/build/index.js	/^        let vimItems = items.map(item => {$/;"	F
vim_version	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:vim_version()$/;"	f
vimwiki	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  augroup vimwiki$/;"	a
vimwiki	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^augroup vimwiki$/;"	a
vimwiki#base#AddHeaderLevel	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#AddHeaderLevel()$/;"	f
vimwiki#base#RemoveHeaderLevel	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#RemoveHeaderLevel()$/;"	f
vimwiki#base#TO_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#TO_header(inner, including_subheaders, count)$/;"	f
vimwiki#base#TO_table_cell	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#TO_table_cell(inner, visual)$/;"	f
vimwiki#base#TO_table_col	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#TO_table_col(inner, visual)$/;"	f
vimwiki#base#apply_template	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#apply_template(template, rxUrl, rxDesc, rxStyle)$/;"	f
vimwiki#base#backlinks	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#backlinks()$/;"	f
vimwiki#base#check_links	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#check_links()$/;"	f
vimwiki#base#complete_links_escaped	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#complete_links_escaped(ArgLead, CmdLine, CursorPos) abort$/;"	f
vimwiki#base#current_subdir	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#current_subdir()$/;"	f
vimwiki#base#delete_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#delete_link()$/;"	f
vimwiki#base#detect_nested_syntax	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#detect_nested_syntax()$/;"	f
vimwiki#base#edit_file	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#edit_file(command, filename, anchor, ...)$/;"	f
vimwiki#base#file_pattern	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#file_pattern(files)$/;"	f
vimwiki#base#find_files	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#find_files(wiki_nr, directories_only)$/;"	f
vimwiki#base#find_next_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#find_next_link()$/;"	f
vimwiki#base#find_prev_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#find_prev_link()$/;"	f
vimwiki#base#find_wiki	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#find_wiki(path)$/;"	f
vimwiki#base#follow_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#follow_link(split, ...)$/;"	f
vimwiki#base#generate_links	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#generate_links()$/;"	f
vimwiki#base#get_anchors	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#get_anchors(filename, syntax)$/;"	f
vimwiki#base#get_globlinks_escaped	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#get_globlinks_escaped() abort$/;"	f
vimwiki#base#get_wiki_directories	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#get_wiki_directories(wiki_nr)$/;"	f
vimwiki#base#get_wikilinks	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#get_wikilinks(wiki_nr, also_absolute_links)$/;"	f
vimwiki#base#go_back_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#go_back_link()$/;"	f
vimwiki#base#goto	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto(...)$/;"	f
vimwiki#base#goto_index	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_index(wnum, ...)$/;"	f
vimwiki#base#goto_next_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_next_header()$/;"	f
vimwiki#base#goto_parent_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_parent_header()$/;"	f
vimwiki#base#goto_prev_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_prev_header()$/;"	f
vimwiki#base#goto_sibling	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_sibling(direction)$/;"	f
vimwiki#base#invsubdir	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#invsubdir(subdir)$/;"	f
vimwiki#base#matchstr_at_cursor	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#matchstr_at_cursor(wikiRX)$/;"	f
vimwiki#base#nested_syntax	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#nested_syntax(filetype, start, end, textSnipHl) abort$/;"	f
vimwiki#base#normalize_imagelink_helper	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#normalize_imagelink_helper(str, rxUrl, rxDesc, rxStyle, template)$/;"	f
vimwiki#base#normalize_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#normalize_link(is_visual_mode)$/;"	f
vimwiki#base#normalize_link_helper	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#normalize_link_helper(str, rxUrl, rxDesc, template)$/;"	f
vimwiki#base#open_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#open_link(cmd, link, ...)$/;"	f
vimwiki#base#rename_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#rename_link()$/;"	f
vimwiki#base#replacestr_at_cursor	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#replacestr_at_cursor(wikiRX, sub)$/;"	f
vimwiki#base#resolve_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#resolve_link(link_text, ...)$/;"	f
vimwiki#base#search_word	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#search_word(wikiRx, cmd)$/;"	f
vimwiki#base#subdir	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#subdir(path, filename)$/;"	f
vimwiki#base#system_open_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#system_open_link(url)$/;"	f
vimwiki#base#table_of_contents	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#table_of_contents(create)$/;"	f
vimwiki#base#ui_select	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#ui_select()$/;"	f
vimwiki#base#update_listing_in_buffer	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#update_listing_in_buffer(strings, start_header,$/;"	f
vimwiki#diary#calendar_action	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#calendar_action(day, month, year, week, dir)$/;"	f
vimwiki#diary#calendar_sign	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function vimwiki#diary#calendar_sign(day, month, year)$/;"	f
vimwiki#diary#diary_date_link	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#diary_date_link(...)$/;"	f
vimwiki#diary#generate_diary_section	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#generate_diary_section()$/;"	f
vimwiki#diary#goto_diary_index	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#goto_diary_index(wnum)$/;"	f
vimwiki#diary#goto_next_day	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#goto_next_day()$/;"	f
vimwiki#diary#goto_prev_day	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#goto_prev_day()$/;"	f
vimwiki#diary#make_note	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#make_note(wnum, ...)$/;"	f
vimwiki#html#CatUrl	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#CatUrl(wikifile)$/;"	f
vimwiki#html#CustomWiki2HTML	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#CustomWiki2HTML(path, wikifile, force)$/;"	f
vimwiki#html#PasteUrl	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#PasteUrl(wikifile)$/;"	f
vimwiki#html#Wiki2HTML	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#Wiki2HTML(path_html, wikifile)$/;"	f
vimwiki#html#WikiAll2HTML	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#WikiAll2HTML(path_html)$/;"	f
vimwiki#lst#TO_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#TO_list_item(inner, visual)$/;"	f
vimwiki#lst#adjust_numbered_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#adjust_numbered_list()$/;"	f
vimwiki#lst#adjust_whole_buffer	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#adjust_whole_buffer()$/;"	f
vimwiki#lst#change_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#change_level(from_line, to_line, direction, plus_children)$/;"	f
vimwiki#lst#change_marker	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#change_marker(from_line, to_line, new_mrkr, mode)$/;"	f
vimwiki#lst#change_marker_in_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#change_marker_in_list(new_mrkr)$/;"	f
vimwiki#lst#decrement_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#decrement_cb(from_line, to_line)$/;"	f
vimwiki#lst#default_symbol	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#default_symbol()$/;"	f
vimwiki#lst#fold_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#fold_level(lnum)$/;"	f
vimwiki#lst#get_list_margin	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#get_list_margin()$/;"	f
vimwiki#lst#increment_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#increment_cb(from_line, to_line)$/;"	f
vimwiki#lst#kbd_O	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#kbd_O()$/;"	f
vimwiki#lst#kbd_cr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#kbd_cr(normal, just_mrkr)$/;"	f
vimwiki#lst#kbd_o	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#kbd_o()$/;"	f
vimwiki#lst#remove_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#remove_cb(first_line, last_line)$/;"	f
vimwiki#lst#remove_cb_in_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#remove_cb_in_list()$/;"	f
vimwiki#lst#toggle_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#toggle_cb(from_line, to_line)$/;"	f
vimwiki#lst#toggle_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#toggle_list_item()$/;"	f
vimwiki#lst#toggle_rejected_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#toggle_rejected_cb(from_line, to_line)$/;"	f
vimwiki#markdown_base#normalize_link	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! vimwiki#markdown_base#normalize_link(is_visual_mode)$/;"	f
vimwiki#markdown_base#open_reflink	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! vimwiki#markdown_base#open_reflink(link)$/;"	f
vimwiki#markdown_base#scan_reflinks	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! vimwiki#markdown_base#scan_reflinks()$/;"	f
vimwiki#path#abs_path_of_link	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#abs_path_of_link(link)$/;"	f
vimwiki#path#chomp_slash	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#chomp_slash(str)$/;"	f
vimwiki#path#current_wiki_file	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#current_wiki_file()$/;"	f
vimwiki#path#is_absolute	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#is_absolute(path)$/;"	f
vimwiki#path#is_equal	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^  function! vimwiki#path#is_equal(p1, p2)$/;"	f
vimwiki#path#is_link_to_dir	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#is_link_to_dir(link)$/;"	f
vimwiki#path#join_path	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^  function! vimwiki#path#join_path(directory, file)$/;"	f
vimwiki#path#mkdir	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#mkdir(path, ...)$/;"	f
vimwiki#path#normalize	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#normalize(path)$/;"	f
vimwiki#path#path_common_pfx	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#path_common_pfx(path1, path2)$/;"	f
vimwiki#path#path_norm	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#path_norm(path)$/;"	f
vimwiki#path#relpath	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#relpath(dir, file)$/;"	f
vimwiki#path#wikify_path	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#wikify_path(path)$/;"	f
vimwiki#tags#complete_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#complete_tags(ArgLead, CmdLine, CursorPos) abort$/;"	f
vimwiki#tags#generate_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#generate_tags(...) abort$/;"	f
vimwiki#tags#get_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#get_tags()$/;"	f
vimwiki#tags#metadata_file_path	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#metadata_file_path() abort$/;"	f
vimwiki#tags#update_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#update_tags(full_rebuild, all_files)$/;"	f
vimwiki#tbl#align_or_cmd	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#align_or_cmd(cmd)$/;"	f
vimwiki#tbl#cell_splitter	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#cell_splitter()$/;"	f
vimwiki#tbl#create	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#create(...)$/;"	f
vimwiki#tbl#format	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#format(lnum, ...)$/;"	f
vimwiki#tbl#get_cells	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#get_cells(line)$/;"	f
vimwiki#tbl#get_rows	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#get_rows(lnum)$/;"	f
vimwiki#tbl#goto_next_col	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#goto_next_col()$/;"	f
vimwiki#tbl#goto_prev_col	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#goto_prev_col()$/;"	f
vimwiki#tbl#is_separator	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#is_separator(line)$/;"	f
vimwiki#tbl#is_table	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#is_table(line)$/;"	f
vimwiki#tbl#kbd_cr	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#kbd_cr()$/;"	f
vimwiki#tbl#kbd_shift_tab	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#kbd_shift_tab()$/;"	f
vimwiki#tbl#kbd_tab	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#kbd_tab()$/;"	f
vimwiki#tbl#move_column_left	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#move_column_left()$/;"	f
vimwiki#tbl#move_column_right	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#move_column_right()$/;"	f
vimwiki#tbl#reset_tw	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#reset_tw(lnum)$/;"	f
vimwiki#tbl#sep_splitter	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#sep_splitter()$/;"	f
vimwiki#u#count_first_sym	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#count_first_sym(line)$/;"	f
vimwiki#u#cursor	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#cursor(lnum, cnum)$/;"	f
vimwiki#u#escape	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#escape(string)$/;"	f
vimwiki#u#is_macos	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#is_macos()$/;"	f
vimwiki#u#is_windows	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#is_windows()$/;"	f
vimwiki#u#reload_regexes	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function vimwiki#u#reload_regexes()$/;"	f
vimwiki#u#reload_regexes_custom	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function vimwiki#u#reload_regexes_custom()$/;"	f
vimwiki#u#sw	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^  func vimwiki#u#sw()$/;"	f
vimwiki#u#trim	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#trim(string, ...)$/;"	f
vimwiki#vars#add_temporary_wiki	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#add_temporary_wiki(settings)$/;"	f
vimwiki#vars#get_bufferlocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_bufferlocal(key, ...)$/;"	f
vimwiki#vars#get_global	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_global(key)$/;"	f
vimwiki#vars#get_syntaxlocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_syntaxlocal(key, ...)$/;"	f
vimwiki#vars#get_wikilocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_wikilocal(key, ...)$/;"	f
vimwiki#vars#get_wikilocal_default	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_wikilocal_default(key)$/;"	f
vimwiki#vars#init	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#init()$/;"	f
vimwiki#vars#number_of_wikis	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#number_of_wikis()$/;"	f
vimwiki#vars#populate_syntax_vars	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#populate_syntax_vars(syntax)$/;"	f
vimwiki#vars#set_bufferlocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#set_bufferlocal(key, value, ...)$/;"	f
vimwiki#vars#set_wikilocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#set_wikilocal(key, value, wiki_nr)$/;"	f
vimwiki_get_known_extensions	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:vimwiki_get_known_extensions()$/;"	f
vimwiki_get_known_syntaxes	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:vimwiki_get_known_syntaxes()$/;"	f
visible	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async visible(word: string, source?: string): Promise<boolean> {$/;"	m
visible	nvim/plugged/coc.nvim/src/model/popup.ts	/^  public async visible(): Promise<boolean> {$/;"	m
visible	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			visible: function(a){return "hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"visibility")!="hidden";},$/;"	M
visit	nvim/plugged/coc.nvim/build/index.js	/^function visit(text, visitor, options) {$/;"	F
visitor	nvim/plugged/coc.nvim/build/index.js	/^    var visitor = {$/;"	O
volume	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> volume <C-R>=DockerfileReplaceInstruction("volume", "VOLUME")<CR>$/;"	m
wait	nvim/plugged/coc.nvim/build/index.js	/^function wait(ms) {$/;"	F
wait	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public wait(ms = 30): Promise<void> {$/;"	m
wait	nvim/plugged/coc.nvim/src/__tests__/modules/attach.test.ts	/^function wait(ms: number): Promise<void> {$/;"	f
wait	nvim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^function wait(ms: number): Promise<any> {$/;"	f
wait	nvim/plugged/coc.nvim/src/util/index.ts	/^export function wait(ms: number): Promise<any> {$/;"	f
waitClient	nvim/plugged/coc.nvim/build/index.js	/^    waitClient(id) {$/;"	M
waitClient	nvim/plugged/coc.nvim/src/services.ts	/^  private waitClient(id: string): Promise<void> {$/;"	m
waitFloat	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async waitFloat(): Promise<number> {$/;"	m
waitPopup	nvim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async waitPopup(): Promise<void> {$/;"	m
waitUntil	nvim/plugged/coc.nvim/build/index.js	/^                ev.waitUntil = (thenable) => {$/;"	M
wait_for_user_input	nvim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:wait_for_user_input(mode)$/;"	f
walk	nvim/plugged/coc.nvim/build/index.js	/^    walk(visitor) {$/;"	M
walk	nvim/plugged/coc.nvim/build/index.js	/^function walk(marker, visitor) {$/;"	F
walk	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^  public walk(visitor: (marker: Marker) => boolean): void {$/;"	m
walk	nvim/plugged/coc.nvim/src/snippets/parser.ts	/^function walk(marker: Marker[], visitor: (marker: Marker) => boolean): void {$/;"	f
warn	nvim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
warn	nvim/plugged/coc.nvim/build/index.js	/^            warn: (...args) => {$/;"	M
warn	nvim/plugged/coc.nvim/build/index.js	/^    warn(message) {$/;"	M
warn	nvim/plugged/coc.nvim/build/index.js	/^    warn(message, data) {$/;"	M
warn	nvim/plugged/coc.nvim/build/index.js	/^    warn: () => { },$/;"	M
warn	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public warn(message: string): void {$/;"	m
warn	nvim/plugged/coc.nvim/src/language-client/client.ts	/^  public warn(message: string, data?: any): void {$/;"	m
warn	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
warning	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
watch	nvim/plugged/coc.nvim/src/watchman.ts	/^  private watch: string | undefined$/;"	m
watchChange	nvim/plugged/coc.nvim/build/index.js	/^                watchChange = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Change) != 0;$/;"	M
watchCreate	nvim/plugged/coc.nvim/build/index.js	/^                watchCreate = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Create) !== 0;$/;"	M
watchDelete	nvim/plugged/coc.nvim/build/index.js	/^                watchDelete = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Delete) != 0;$/;"	M
watchFile	nvim/plugged/coc.nvim/build/index.js	/^    watchFile(filepath, target) {$/;"	M
watchFile	nvim/plugged/coc.nvim/build/index.js	/^function watchFile(filepath, onChange) {$/;"	F
watchFile	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private watchFile(filepath: string, target: ConfigurationTarget): void {$/;"	m
watchFile	nvim/plugged/coc.nvim/src/util/index.ts	/^export function watchFile(filepath: string, onChange: () => void): Disposable {$/;"	f
watchGlobal	nvim/plugged/coc.nvim/build/index.js	/^    watchGlobal(key, callback, disposables) {$/;"	M
watchGlobal	nvim/plugged/coc.nvim/src/workspace.ts	/^  public watchGlobal(key: string, callback?: (oldValue: any, newValue: any) => Thenable<void> | void, disposables?: Disposable[]): void {$/;"	m
watchOption	nvim/plugged/coc.nvim/build/index.js	/^    watchOption(key, callback, disposables) {$/;"	M
watchOption	nvim/plugged/coc.nvim/src/workspace.ts	/^  public watchOption(key: string, callback: (oldValue: any, newValue: any) => Thenable<void> | void, disposables?: Disposable[]): void {$/;"	m
watchProject	nvim/plugged/coc.nvim/src/watchman.ts	/^  public async watchProject(root: string): Promise<boolean> {$/;"	m
watchedOptions	nvim/plugged/coc.nvim/src/workspace.ts	/^  private watchedOptions: Set<string> = new Set()$/;"	m
watcher	nvim/plugged/coc.nvim/build/index.js	/^        let watcher = new fileSystemWatcher_1.default(promise, globPattern, !!ignoreCreate, !!ignoreChange, !!ignoreDelete);$/;"	V
watchers	nvim/plugged/coc.nvim/build/index.js	/^        let watchers;$/;"	V
watchers	nvim/plugged/coc.nvim/src/__tests__/client/server/testFileWatcher.js	/^        watchers: [{ globPattern: "**" }]$/;"	P
watchman	nvim/plugged/coc.nvim/build/index.js	/^                let watchman = new Watchman(binaryPath, channel);$/;"	V
watchmanBinaryPath	nvim/plugged/coc.nvim/build/index.js	/^            watchmanBinaryPath: binaryPath$/;"	P
webpackEmptyContext	nvim/plugged/coc.nvim/build/index.js	/^function webpackEmptyContext(req) {$/;"	F
which	nvim/plugged/coc.nvim/build/index.js	/^function which (cmd, opt, cb) {$/;"	F
which	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			event.which = (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) ));$/;"	M
whichSync	nvim/plugged/coc.nvim/build/index.js	/^function whichSync (cmd, opt) {$/;"	F
white	nvim/plugged/coc.nvim/build/index.js	/^  white: [37, 39],$/;"	P
whitespace	nvim/plugged/coc.nvim/build/index.js	/^      whitespace: false$/;"	P
wide_len	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:wide_len(str)$/;"	f
widget_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let widget_attributes = {$/;"	v
widget_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let widget_role = [$/;"	v
widget_role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let widget_role = ['alert', 'alertdialog', 'button', 'checkbox', 'combobox', 'dialog', 'gridcell', 'link', 'log', 'marquee', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'searchbox', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'tabpanel', 'textbox', 'timer', 'tooltip', 'treeitem', 'combobox', 'grid', 'listbox', 'menu', 'menubar', 'radiogroup', 'tablist', 'tree', 'treegrid']$/;"	v
width	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  public width = 0$/;"	m
willSaveUntilHandler	nvim/plugged/coc.nvim/src/workspace.ts	/^  private willSaveUntilHandler: WillSaveUntilHandler$/;"	m
willSaveWaitUntil	nvim/plugged/coc.nvim/build/index.js	/^                let willSaveWaitUntil = async () => {$/;"	F
willSaveWaitUntil	nvim/plugged/coc.nvim/build/index.js	/^            let willSaveWaitUntil = (event) => {$/;"	F
win	nvim/plugged/coc.nvim/build/index.js	/^const win = raw.map(char =>$/;"	F
win32	nvim/plugged/coc.nvim/build/index.js	/^function win32(path) {$/;"	F
window	nvim/plugged/coc.nvim/src/completion/floating.ts	/^  private window: Window$/;"	m
window	nvim/plugged/coc.nvim/src/list/manager.ts	/^  private window: Window$/;"	m
window	nvim/plugged/coc.nvim/src/list/ui.ts	/^  public window: Window$/;"	m
window	nvim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    private window?: Window$/;"	m
window	nvim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private window: Window$/;"	m
windows_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
winid	nvim/plugged/coc.nvim/build/index.js	/^        let winid;$/;"	V
winid	nvim/plugged/coc.nvim/src/cursors/index.ts	/^  private winid: number$/;"	m
winid	nvim/plugged/coc.nvim/src/handler/refactor.ts	/^  private winid: number$/;"	m
winshell	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
winshell	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:winshell()$/;"	f
with	nvim/plugged/coc.nvim/build/index.js	/^    URI.prototype.with = function (change) {$/;"	M
withFormatting	nvim/plugged/coc.nvim/build/index.js	/^function withFormatting(text, edit, formattingOptions) {$/;"	F
with_cd	nvim/autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
with_file	nvim/plugged/vim-elixir/spec/spec_helper.rb	/^  def with_file(content = nil)$/;"	f	class:Buffer
withinElement	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var withinElement = function(event, elem) {$/;"	F
word	nvim/plugged/coc.nvim/build/index.js	/^    let word;$/;"	V
wordChar	nvim/plugged/coc.nvim/build/index.js	/^function wordChar(ch) {$/;"	F
wordChar	nvim/plugged/coc.nvim/src/util/fuzzy.ts	/^export function wordChar(ch: number): boolean {$/;"	f
words	nvim/plugged/coc.nvim/build/index.js	/^        let words = [];$/;"	A
words	nvim/plugged/coc.nvim/build/index.js	/^        let words = new Set();$/;"	V
words	nvim/plugged/coc.nvim/src/model/document.ts	/^  public get words(): string[] {$/;"	m
workdir	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> workdir <C-R>=DockerfileReplaceInstruction("workdir", "WORKDIR")<CR>$/;"	m
worker	nvim/plugged/coc.nvim/src/list/manager.ts	/^  public worker: Worker$/;"	m
workspace	nvim/plugged/coc.nvim/build/index.js	/^            workspace: { contents: {} }$/;"	P
workspace	nvim/plugged/coc.nvim/build/index.js	/^            workspace: {$/;"	P
workspace	nvim/plugged/coc.nvim/src/configuration/configuration.ts	/^  public get workspace(): ConfigurationModel {$/;"	m
workspace	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  public get workspace(): ConfigurationModel {$/;"	m
workspaceConfigFile	nvim/plugged/coc.nvim/src/configuration/index.ts	/^  private workspaceConfigFile: string$/;"	m
workspaceConfigFile	nvim/plugged/coc.nvim/src/configuration/shape.ts	/^  public get workspaceConfigFile(): string {$/;"	m
workspaceConfiguration	nvim/plugged/coc.nvim/build/index.js	/^        const workspaceConfiguration = new model_1.ConfigurationModel(data.workspace.contents);$/;"	V
workspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^        let workspaceFolder = { uri, name: path_1.default.basename(rootPath) };$/;"	O
workspaceFolder	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get workspaceFolder(): WorkspaceFolder {$/;"	m
workspaceFolders	nvim/plugged/coc.nvim/build/index.js	/^            let workspaceFolders = () => {$/;"	F
workspaceFolders	nvim/plugged/coc.nvim/src/workspace.ts	/^  public get workspaceFolders(): WorkspaceFolder[] {$/;"	m
workspaceSymbolsManager	nvim/plugged/coc.nvim/src/languages.ts	/^  private workspaceSymbolsManager = new WorkspaceSymbolManager()$/;"	m
world	nvim/plugged/vim-elixir/spec/indent/def_spec.rb	/^  def world do$/;"	f	class:handle_call.hello
wrap	nvim/plugged/coc.nvim/build/index.js	/^    function wrap() {$/;"	F
wrap	nvim/plugged/coc.nvim/build/index.js	/^  function wrap() {$/;"	F
wrap	nvim/plugged/coc.nvim/build/index.js	/^function wrap(protocols) {$/;"	F
wrap	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	wrap: function( html ) {$/;"	M
wrap	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
wrapAll	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	wrapAll: function( html ) {$/;"	M
wrapInner	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	wrapInner: function( html ) {$/;"	M
wrap_a	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:wrap_a(back,forward) abort$/;"	f
wrap_accent	nvim/plugged/vim-airline/autoload/airline/section.vim	/^function! s:wrap_accent(part, value)$/;"	f
wrap_cmds	nvim/autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
wrap_i	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:wrap_i(back,forward) abort$/;"	f
wrap_wikilink1_rx	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:wrap_wikilink1_rx(target)$/;"	f
wrapped	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  let wrapped['sink*'] = remove(wrapped, 'newsink')$/;"	v
wrapper	nvim/plugged/coc.nvim/build/index.js	/^  function wrapper() {$/;"	F
wrappy	nvim/plugged/coc.nvim/build/index.js	/^function wrappy (fn, cb) {$/;"	F
writable	nvim/plugged/coc.nvim/build/index.js	/^        writable: true,$/;"	P
write	nvim/plugged/coc.nvim/build/index.js	/^    write(msg) {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^    write: write,$/;"	P
write	nvim/plugged/coc.nvim/build/index.js	/^  function write(chunk) {$/;"	F
write	nvim/plugged/coc.nvim/build/index.js	/^EncodeBuffer.prototype.write = function(input) {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.write = function (data, encoding, callback) {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^exports.write = function (fd, buffer, ...args) {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^function write() {$/;"	F
write	nvim/plugged/coc.nvim/build/index.js	/^function write(string, offset) {$/;"	F
write0	nvim/plugged/coc.nvim/build/index.js	/^function write0(type) {$/;"	F
write1	nvim/plugged/coc.nvim/build/index.js	/^function write1(type) {$/;"	F
write2	nvim/plugged/coc.nvim/build/index.js	/^function write2(type) {$/;"	F
write4	nvim/plugged/coc.nvim/build/index.js	/^function write4(type) {$/;"	F
writeAvail	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.writeAvail = function() {$/;"	M
writeByte	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.writeByte = function(value) {$/;"	M
writeDouble	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.writeDouble = function(value) {$/;"	M
writeDoubleBE	nvim/plugged/coc.nvim/build/index.js	/^function writeDoubleBE(value, offset) {$/;"	F
writeErrorHandler	nvim/plugged/coc.nvim/build/index.js	/^    function writeErrorHandler(data) {$/;"	F
writeFile	nvim/plugged/coc.nvim/build/index.js	/^  function writeFile (path, data, options, cb) {$/;"	F
writeFile	nvim/plugged/coc.nvim/build/index.js	/^  writeFile: writeFile,$/;"	P
writeFile	nvim/plugged/coc.nvim/build/index.js	/^async function writeFile(fullpath, content) {$/;"	F
writeFile	nvim/plugged/coc.nvim/build/index.js	/^function writeFile (file, obj, options, callback) {$/;"	F
writeFile	nvim/plugged/coc.nvim/src/util/fs.ts	/^export async function writeFile(fullpath: string, content: string): Promise<void> {$/;"	f
writeFileSync	nvim/plugged/coc.nvim/build/index.js	/^  writeFileSync: writeFileSync$/;"	P
writeFileSync	nvim/plugged/coc.nvim/build/index.js	/^function writeFileSync (file, obj, options) {$/;"	F
writeFloatBE	nvim/plugged/coc.nvim/build/index.js	/^function writeFloatBE(value, offset) {$/;"	F
writeHead	nvim/plugged/coc.nvim/build/index.js	/^      res.writeHead = (code, headers) => {$/;"	M
writeInt	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.writeInt = function(value, size) {$/;"	M
writeInt32	nvim/plugged/coc.nvim/build/index.js	/^    function writeInt32(buffer, offset, value) {$/;"	F
writeInt64BE	nvim/plugged/coc.nvim/build/index.js	/^function writeInt64BE(value, offset) {$/;"	F
writeN	nvim/plugged/coc.nvim/build/index.js	/^function writeN(type, len, method, noAssert) {$/;"	F
writeNext	nvim/plugged/coc.nvim/build/index.js	/^    (function writeNext(error) {$/;"	F
writeType	nvim/plugged/coc.nvim/build/index.js	/^  var writeType = {$/;"	O
writeUInt64BE	nvim/plugged/coc.nvim/build/index.js	/^function writeUInt64BE(value, offset) {$/;"	F
write_buffer	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:write_buffer(bufnr, file)$/;"	f
write_tags_metadata	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:write_tags_metadata(metadata)$/;"	f
write_triggered_update_tags	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
writer	nvim/plugged/coc.nvim/build/index.js	/^                        writer: client$/;"	P
writer	nvim/plugged/coc.nvim/build/index.js	/^    let writer;$/;"	V
writev	nvim/plugged/coc.nvim/build/index.js	/^const writev = (fd, iovec, pos, cb) => {$/;"	F
ws_refresh	nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:ws_refresh()$/;"	f
x	nvim/plugged/coc.nvim/build/index.js	/^    x: userDefined,$/;"	P
x0	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x0 = function (e) { }; \/\/ anonymous method$/;"	M
x1	nvim/plugged/coc.nvim/build/index.js	/^      var x1;$/;"	V
x1	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x1 = (e) => { }; \/\/ anonymous method shorthand$/;"	M
x2	nvim/plugged/coc.nvim/build/index.js	/^      var x2;$/;"	V
x2	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x2 = function* (e) { }; \/\/ anonymous method generator$/;"	M
x3	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x3 = function testing(e) { }; \/\/ named method$/;"	M
x4	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x4 = function* testgen(description) { }; \/\/ named method generator$/;"	M
xml	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			xml: "application\/xml, text\/xml",$/;"	P
xml_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let xml_attributes = {'xml:lang': lang_tag, 'xml:space': ['preserve'], 'xml:base': [], 'xmlns': ['http:\/\/www.w3.org\/1999\/xhtml', 'http:\/\/www.w3.org\/1998\/Math\/MathML', 'http:\/\/www.w3.org\/2000\/svg', 'http:\/\/www.w3.org\/1999\/xlink']}$/;"	v
xpto	nvim/plugged/vim-elixir/spec/indent/tuples_spec.rb	/^  def xpto do$/;"	f
y	nvim/plugged/coc.nvim/build/index.js	/^    y: clusterInfo,$/;"	P
yank_to_register	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
yarnFolder	nvim/plugged/coc.nvim/src/model/resolver.ts	/^  private get yarnFolder(): Promise<string> {$/;"	m
yellow	nvim/plugged/coc.nvim/build/index.js	/^  yellow: [33, 39]$/;"	P
youtube_video	nvim/plugged/vim-ruby/spec/syntax/strings/heredoc_spec.rb	/^        def youtube_video(token, width = 360, height = 215)$/;"	f
z	nvim/plugged/coc.nvim/build/index.js	/^            var z = new Array(need + 1).join('0');$/;"	V
z	nvim/plugged/coc.nvim/build/index.js	/^    z: pid,$/;"	P
zeroPad	nvim/plugged/coc.nvim/build/index.js	/^    var zeroPad = '0?';$/;"	V
zeroarg	nvim/plugged/coc.nvim/build/index.js	/^    function zeroarg(func) {$/;"	F
zip	nvim/plugged/coc.nvim/build/index.js	/^  const zip = (f, p) => {$/;"	F

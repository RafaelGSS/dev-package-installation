!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
mapleader	nvim/init.vim	/^let mapleader="\\<space>"$/;"	v
Vcfg	nvim/init.vim	/^command! -nargs=* Vcfg execute "vsplit $MYVIMRC"$/;"	c
W	nvim/init.vim	/^command! -nargs=* W execute "w"$/;"	c
<leader>l	nvim/init.vim	/^nnoremap <leader>l :bnext<CR>$/;"	m
<leader>h	nvim/init.vim	/^nnoremap <leader>h :bprev<CR>$/;"	m
<leader>b	nvim/init.vim	/^nnoremap <leader>b :Buffers<CR>$/;"	m
base16colorspace	nvim/init.vim	/^let base16colorspace=256  " Access colors present in 256 colorspace$/;"	v
<C-]>	nvim/init.vim	/^nnoremap <C-]> g<C-]>$/;"	m
<leader>gd	nvim/init.vim	/^nnoremap <leader>gd :Gdiff<CR>$/;"	m
<leader>gb	nvim/init.vim	/^nnoremap <leader>gb :Gblame<CR>$/;"	m
<leader>gs	nvim/init.vim	/^nnoremap <leader>gs :Gstatus<CR>$/;"	m
<leader>gl	nvim/init.vim	/^nnoremap <leader>gl :Glog<CR>$/;"	m
<leader>dg	nvim/init.vim	/^nnoremap <leader>dg :diffget<CR>$/;"	m
<leader>dp	nvim/init.vim	/^nnoremap <leader>dp :diffput<CR>$/;"	m
$FZF_DEFAULT_COMMAND	nvim/init.vim	/^let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'$/;"	v
<c-P>	nvim/init.vim	/^nnoremap <c-P> :Files<cr>$/;"	m
<c-F>	nvim/init.vim	/^nnoremap <c-F> :Ag<cr>$/;"	m
<leader>t	nvim/init.vim	/^nnoremap <leader>t :BTags<CR>$/;"	m
<leader>T	nvim/init.vim	/^nnoremap <leader>T :Tags<CR>$/;"	m
<C-e>	nvim/init.vim	/^nnoremap <C-e> :NERDTreeToggle<CR>$/;"	m
<leader>m	nvim/init.vim	/^nnoremap <leader>m :NERDTreeFind<cr>$/;"	m
NERDTreeShowHidden	nvim/init.vim	/^let NERDTreeShowHidden=1$/;"	v
NERDTreeMinimalUI	nvim/init.vim	/^let NERDTreeMinimalUI = 1$/;"	v
NERDTreeDirArrows	nvim/init.vim	/^let NERDTreeDirArrows = 1$/;"	v
NERDTreeWinSize	nvim/init.vim	/^let NERDTreeWinSize=30$/;"	v
g:NERDTreeMapOpenVSplit	nvim/init.vim	/^let g:NERDTreeMapOpenVSplit = "v"$/;"	v
g:vue_pre_processors	nvim/init.vim	/^let g:vue_pre_processors = 'detect_on_enter'$/;"	v
VimCSS3Syntax	nvim/init.vim	/^augroup VimCSS3Syntax$/;"	a
g:ale_sign_error	nvim/init.vim	/^let g:ale_sign_error = '❌'$/;"	v
g:ale_sign_warning	nvim/init.vim	/^let g:ale_sign_warning = '⚠️'$/;"	v
g:ale_linters_explicit	nvim/init.vim	/^let g:ale_linters_explicit = 1$/;"	v
g:ale_linter_aliases	nvim/init.vim	/^let g:ale_linter_aliases = {'javascript': ['vue', 'javascript']}$/;"	v
g:ale_linters	nvim/init.vim	/^let g:ale_linters = {'javascript': ['eslint'], 'ruby': ['rubocop']}$/;"	v
<TAB>	nvim/init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<S-TAB>	nvim/init.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
check_back_space	nvim/init.vim	/^function! s:check_back_space() abort$/;"	f
<c-space>	nvim/init.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	nvim/init.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
[g	nvim/init.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	nvim/init.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
gd	nvim/init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gy	nvim/init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
gi	nvim/init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	nvim/init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
K	nvim/init.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
show_documentation	nvim/init.vim	/^function! s:show_documentation()$/;"	f
<leader>rn	nvim/init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>f	nvim/init.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
mygroup	nvim/init.vim	/^augroup mygroup$/;"	a
<leader>qf	nvim/init.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
Format	nvim/init.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
<F3>	nvim/init.vim	/^noremap <F3> :Format<CR>$/;"	m
Fold	nvim/init.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
OR	nvim/init.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
g:coc_global_extensions	nvim/init.vim	/^let g:coc_global_extensions = ['coc-json', 'coc-tsserver', 'coc-eslint', 'coc-highlight', 'coc-html', 'coc-tslint', 'coc-vetur', 'coc-elixir']$/;"	v
g:airline#extensions#tabline#enabled	nvim/init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:AutoPairsFlyMode	nvim/init.vim	/^let g:AutoPairsFlyMode = 0$/;"	v
g:vimwiki_list	nvim/init.vim	/^let g:vimwiki_list = [{'path': '~\/vimwiki\/',$/;"	v
<c-u>	nvim/init.vim	/^noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>$/;"	m
<c-d>	nvim/init.vim	/^noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>$/;"	m
<leader>s	nvim/init.vim	/^nnoremap <leader>s :nohlsearch<cr>$/;"	m
<A-H>	nvim/init.vim	/^map <silent> <A-H> <C-w><$/;"	m
<A-K>	nvim/init.vim	/^map <silent> <A-K> <C-W>-$/;"	m
<A-J>	nvim/init.vim	/^map <silent> <A-J> <C-W>+$/;"	m
<A-L>	nvim/init.vim	/^map <silent> <A-L> <C-w>>$/;"	m
<leader>1	nvim/init.vim	/^noremap <leader>1 1gt$/;"	m
<leader>2	nvim/init.vim	/^noremap <leader>2 2gt$/;"	m
<leader>3	nvim/init.vim	/^noremap <leader>3 3gt$/;"	m
<leader>4	nvim/init.vim	/^noremap <leader>4 4gt$/;"	m
<leader>5	nvim/init.vim	/^noremap <leader>5 5gt$/;"	m
<leader>6	nvim/init.vim	/^noremap <leader>6 6gt$/;"	m
<leader>7	nvim/init.vim	/^noremap <leader>7 7gt$/;"	m
<leader>8	nvim/init.vim	/^noremap <leader>8 8gt$/;"	m
<leader>9	nvim/init.vim	/^noremap <leader>9 9gt$/;"	m
<leader>0	nvim/init.vim	/^noremap <leader>0 :tablast<cr>$/;"	m
<Up>	nvim/init.vim	/^noremap <Up> <Nop>$/;"	m
<Down>	nvim/init.vim	/^noremap <Down> <Nop>$/;"	m
<Left>	nvim/init.vim	/^noremap <Left> <Nop>$/;"	m
<Right>	nvim/init.vim	/^noremap <Right> <Nop>$/;"	m
usage	nvim/plugged/fzf.vim/bin/preview.rb	/^def usage$/;"	f
s:cpo_save	nvim/plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:is_win	nvim/plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
defs	nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
history	nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, bang)$/;"	f
fzf#complete	nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf_restore_colors	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
fzf_vim_term	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
_fzf_statusline	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
g:fzf#vim#buffers	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
fzf_buffers	nvim/plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
<plug>(fzf-complete-word)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-complete-path)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-file)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-path)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -print \\| sed '1d;s:^..::'")$/;"	m
<plug>(fzf-complete-file)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print \\| sed 's:^..::'")$/;"	m
<plug>(fzf-complete-file-ag)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-buffer-line)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-maps-n)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-i)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	nvim/plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
s:cpo_save	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:is_win	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
extend	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
function	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
function	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
fzf#vim#complete#word	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
file_split_prefix	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
file_source	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
file_options	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
fname_prefix	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
fzf#vim#complete#path	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
reduce_line	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
fzf#vim#complete#line	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#buffer_line	nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
s:cpo_save	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:is_win	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:layout_keys	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:bin_dir	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:h:h:h').'\/bin\/'$/;"	v
s:bin	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:TYPE	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': type([])}$/;"	v
s:bin	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  let s:bin.preview = 'bash '.escape(s:bin.preview, '\\')$/;"	v
s:wide	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
extend_opts	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
merge_opts	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
prepend_opts	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
fzf#vim#with_preview	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
remove_layout	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
wrap	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
strip	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
chomp	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
escape	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
function	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
function	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
get_color	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:ansi	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cyan': 36}$/;"	v
csi	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
ansi	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
buflisted	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
fzf	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:default_action	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
action_for	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
open	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
align_lists	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
warn	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
fill_quickfix	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
fzf#vim#_uniq	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
shortpath	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
fzf#vim#files	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
line_handler	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
fzf#vim#_lines	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#lines	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
buffer_line_handler	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
buffer_lines	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
fzf#vim#buffer_lines	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#colors	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#locate	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
all_files	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:all_files()$/;"	f
history_source	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
<plug>(-fzf-vim-do)	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(-fzf-/)	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
history_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
cmd_history_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
fzf#vim#command_history	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
search_history_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
fzf#vim#search_history	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#history	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
get_git_root	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
fzf#vim#gitfiles	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
wrapped	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  let wrapped['sink*'] = remove(wrapped, 'newsink')$/;"	v
find_open_window	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
jump	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
bufopen	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
format_buffer	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_buffer(b)$/;"	f
sort_buffers	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
buflisted_sorted	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted_sorted()$/;"	f
fzf#vim#buffers	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
ag_to_qf	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, has_column)$/;"	f
ag_handler	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, has_column)$/;"	f
fzf#vim#ag	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#grep	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, has_column, ...)$/;"	f
opts	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  let opts['sink*'] = remove(opts, 'sink')$/;"	v
prev_default_command	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let prev_default_command = $FZF_DEFAULT_COMMAND$/;"	v
$FZF_DEFAULT_COMMAND	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let $FZF_DEFAULT_COMMAND = a:grep_command$/;"	v
$FZF_DEFAULT_COMMAND	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let $FZF_DEFAULT_COMMAND = prev_default_command$/;"	v
btags_source	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
btags_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
fzf#vim#buffer_tags	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
tags_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
fzf#vim#tags	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
inject_snippet	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
fzf#vim#snippets	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
s:nbs	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
format_cmd	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
command_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:fmt_excmd	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
format_excmd	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
excmds	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
fzf#vim#commands	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
format_mark	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
mark_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
fzf#vim#marks	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
helptag_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
fzf#vim#helptags	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#filetypes	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
format_win	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
windows_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
fzf#vim#windows	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
yank_to_register	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
commits_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
commits	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(buffer_local, args)$/;"	f
fzf#vim#commits	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...)$/;"	f
fzf#vim#buffer_commits	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...)$/;"	f
align_pairs	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
highlight_keys	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
key_sink	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
fzf#vim#maps	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
<Plug>(-fzf-complete-trigger)	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
pluck	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
complete_trigger	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
first_line	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
complete_insert	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
eval	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
fzf#vim#complete	nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
g:AutoPairsLoaded	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^let g:AutoPairsLoaded = 1$/;"	v
g:AutoPairs	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":"'''", "`":"`"}$/;"	v
AutoPairsDefaultPairs	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefaultPairs()$/;"	f
g:AutoPairsMapBS	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCh	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCh = 1$/;"	v
g:AutoPairsMapCR	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCR = 1$/;"	v
g:AutoPairsWildClosedPair	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsWildClosedPair = ''$/;"	v
g:AutoPairsMapSpace	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapSpace = 1$/;"	v
g:AutoPairsCenterLine	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsShortcutToggle	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsShortcutFastWrap	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsMoveCharacter	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMoveCharacter = "()[]{}\\"'"$/;"	v
g:AutoPairsShortcutJump	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsFlyMode	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsFlyMode = 0$/;"	v
g:AutoPairsMultilineClose	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMultilineClose = 1$/;"	v
g:AutoPairsShortcutBackInsert	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsSmartQuotes	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsSmartQuotes = 1$/;"	v
s:Go	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = "\\<C-G>U"$/;"	v
s:Go	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = ""$/;"	v
s:Left	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^let s:Left = s:Go."\\<LEFT>"$/;"	v
s:Right	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^let s:Right = s:Go."\\<RIGHT>"$/;"	v
ulen	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:ulen(s)$/;"	f
left	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:left(s)$/;"	f
right	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:right(s)$/;"	f
delete	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:delete(s)$/;"	f
backspace	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:backspace(s)$/;"	f
getline	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:getline()$/;"	f
matchend	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchend(text, open)$/;"	f
matchbegin	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchbegin(text, close)$/;"	f
AutoPairsDefine	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefine(pairs, ...)$/;"	f
AutoPairsInsert	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInsert(key)$/;"	f
AutoPairsDelete	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDelete()$/;"	f
AutoPairsFastWrap	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsFastWrap()$/;"	f
AutoPairsJump	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsJump()$/;"	f
AutoPairsMoveCharacter	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMoveCharacter(key)$/;"	f
AutoPairsBackInsert	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsBackInsert()$/;"	f
AutoPairsReturn	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsReturn()$/;"	f
AutoPairsSpace	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsSpace()$/;"	f
AutoPairsMap	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMap(key)$/;"	f
AutoPairsToggle	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsToggle()$/;"	f
sortByLength	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:sortByLength(i1, i2)$/;"	f
AutoPairsInit	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInit()$/;"	f
ExpandMap	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! s:ExpandMap(map)$/;"	f
AutoPairsTryInit	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsTryInit()$/;"	f
<SID>AutoPairsReturn	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^inoremap <silent> <SID>AutoPairsReturn <C-R>=AutoPairsReturn()<CR>$/;"	m
<Plug>AutoPairsReturn	nvim/plugged/auto-pairs/plugin/auto-pairs.vim	/^imap <script> <Plug>AutoPairsReturn <SID>AutoPairsReturn$/;"	m
s:debug	nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^let s:debug = 0$/;"	v
CursorHasGroup	nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^function! s:CursorHasGroup(group) abort$/;"	f
TestSyntax	nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^function! TestSyntax(pattern, group) abort$/;"	f
bar	nvim/plugged/vim-ruby/spec/indent/continuations_spec.rb	/^      def bar($/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/continuations_spec.rb	/^      def foo$/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      def foo$/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      def foo(job)$/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      def foo$/;"	f
X	nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      module X$/;"	m
OuterClass	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^      class OuterClass$/;"	c
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
InnerClass	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        class InnerClass$/;"	c	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
OuterClass	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^      class OuterClass$/;"	c
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
InnerClass	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        class InnerClass$/;"	c	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^            def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^            def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
OuterClass	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^      class OuterClass$/;"	c
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
InnerClass	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        class InnerClass$/;"	c	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
one	nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def one$/;"	f
one	nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def one$/;"	f
one	nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def one$/;"	f
foo	nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def foo$/;"	f
one	nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def one$/;"	f
Foo	nvim/plugged/vim-ruby/spec/indent/method_definitions_spec.rb	/^      class Foo$/;"	c
Foo	nvim/plugged/vim-ruby/spec/indent/method_definitions_spec.rb	/^      class Foo$/;"	c
one	nvim/plugged/vim-ruby/spec/indent/method_definitions_spec.rb	/^        def one(x)$/;"	f
assert_correct_indenting	nvim/plugged/vim-ruby/spec/spec_helper.rb	/^  def assert_correct_indenting(extension='rb', string)$/;"	f
assert_correct_highlighting	nvim/plugged/vim-ruby/spec/spec_helper.rb	/^  def assert_correct_highlighting(extension='rb', string, patterns, group)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar$/;"	f
end	nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def end end$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar=:baz$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar:; end$/;"	f
youtube_video	nvim/plugged/vim-ruby/spec/syntax/strings/heredoc_spec.rb	/^        def youtube_video(token, width = 360, height = 215)$/;"	f
hello	nvim/plugged/vim-ruby/spec/syntax/symbols_spec.rb	/^      def hello$/;"	f
get_regex	nvim/plugged/vim-ruby/spec/syntax/statement_modifiers_spec.rb	/^      def get_regex$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(**bar)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(bar,$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(**)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo **bar$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(*bar)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(bar,$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(*)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo *bar$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(&bar)$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(bar,$/;"	f
foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^          def foo &bar$/;"	f
Foo	nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        class Foo < Bar$/;"	c
b:html_indent_usestate	nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:html_indent_usestate = 0$/;"	v
b:eruby_subtype_indentexpr	nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:did_indent = 1$/;"	v
s:cpo_sav	nvim/plugged/vim-ruby/indent/eruby.vim	/^let s:cpo_sav = &cpo$/;"	v
GetErubyIndent	nvim/plugged/vim-ruby/indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
b:did_indent	nvim/plugged/vim-ruby/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
g:ruby_indent_access_modifier_style	nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_access_modifier_style = 'normal'$/;"	v
g:ruby_indent_assignment_style	nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_assignment_style = 'hanging'$/;"	v
g:ruby_indent_block_style	nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_block_style = 'expression'$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:syng_string	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_stringdoc = s:syng_string + ['Documentation']$/;"	v
s:syng_strcom	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_strcom = s:syng_stringdoc + [$/;"	v
s:skip_expr	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:ruby_indent_keywords	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:ruby_indent_keywords =$/;"	v
s:ruby_deindent_keywords	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:end_start_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_start_regex =$/;"	v
s:end_middle_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_end_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_skip_expr	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:non_bracket_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:non_bracket_continuation_regex =$/;"	v
s:continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:continuation_regex =$/;"	v
s:continuable_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:continuable_regex =$/;"	v
s:bracket_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:dot_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:dot_continuation_regex = '%\\@<!\\.\\s*\\%(#.*\\)\\=$'$/;"	v
s:backslash_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:backslash_continuation_regex = '%\\@<!\\\\\\s*$'$/;"	v
s:bracket_switch_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:splat_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:access_modifier_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:indent_access_modifier_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:indent_access_modifier_regex = '\\C^\\s*\\%(protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:block_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:block_continuation_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:leading_operator_regex	nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:leading_operator_regex = '^\\s*\\%(&\\=\\.\\)'$/;"	v
GetRubyIndent	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! GetRubyIndent(...) abort$/;"	f
AccessModifier	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AccessModifier(cline_info) abort$/;"	f
ClosingBracketOnEmptyLine	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
BlockComment	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:BlockComment(cline_info) abort$/;"	f
DeindentingKeyword	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:DeindentingKeyword(cline_info) abort$/;"	f
MultilineStringOrLineComment	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:MultilineStringOrLineComment(cline_info) abort$/;"	f
ClosingHeredocDelimiter	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ClosingHeredocDelimiter(cline_info) abort$/;"	f
LeadingOperator	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:LeadingOperator(cline_info) abort$/;"	f
EmptyInsideString	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:EmptyInsideString(pline_info) abort$/;"	f
StartOfFile	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:StartOfFile(pline_info) abort$/;"	f
AfterAccessModifier	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterAccessModifier(pline_info) abort$/;"	f
ContinuedLine	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ContinuedLine(pline_info) abort$/;"	f
AfterBlockOpening	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterBlockOpening(pline_info) abort$/;"	f
AfterLeadingOperator	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterLeadingOperator(pline_info) abort$/;"	f
AfterHangingSplat	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterHangingSplat(pline_info) abort$/;"	f
AfterUnbalancedBracket	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterUnbalancedBracket(pline_info) abort$/;"	f
AfterEndKeyword	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterEndKeyword(pline_info) abort$/;"	f
AfterIndentKeyword	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterIndentKeyword(pline_info) abort$/;"	f
PreviousNotMSL	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:PreviousNotMSL(msl_info) abort$/;"	f
IndentingKeywordInMSL	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IndentingKeywordInMSL(msl_info) abort$/;"	f
ContinuedHangingOperator	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ContinuedHangingOperator(msl_info) abort$/;"	f
IsInRubyGroup	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInRubyGroup(groups, lnum, col) abort$/;"	f
IsInStringOrComment	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringOrComment(lnum, col) abort$/;"	f
IsInString	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInString(lnum, col) abort$/;"	f
IsInStringOrDocumentation	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringOrDocumentation(lnum, col) abort$/;"	f
IsInStringDelimiter	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringDelimiter(lnum, col) abort$/;"	f
IsAssignment	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsAssignment(str, pos) abort$/;"	f
PrevNonBlankNonString	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:PrevNonBlankNonString(lnum) abort$/;"	f
GetMSL	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:GetMSL(lnum) abort$/;"	f
ExtraBrackets	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ExtraBrackets(lnum) abort$/;"	f
Match	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:Match(lnum, regex) abort$/;"	f
FindContainingClass	nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:FindContainingClass() abort$/;"	f
current_compiler	nvim/plugged/vim-ruby/compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
CompilerSet	nvim/plugged/vim-ruby/compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	nvim/plugged/vim-ruby/compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
CompilerSet	nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/rspec.vim	/^let current_compiler = "rspec"$/;"	v
CompilerSet	nvim/plugged/vim-ruby/compiler/rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	nvim/plugged/vim-ruby/compiler/rspec.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
CompilerSet	nvim/plugged/vim-ruby/compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	nvim/plugged/vim-ruby/compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	nvim/plugged/vim-ruby/compiler/rake.vim	/^let current_compiler = "rake"$/;"	v
CompilerSet	nvim/plugged/vim-ruby/compiler/rake.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	nvim/plugged/vim-ruby/compiler/rake.vim	/^let s:cpo_save = &cpo$/;"	v
setf	nvim/plugged/vim-ruby/ftdetect/ruby_extra.vim	/^function! s:setf(filetype) abort$/;"	f
setf	nvim/plugged/vim-ruby/ftdetect/ruby.vim	/^function! s:setf(filetype) abort$/;"	f
StarSetf	nvim/plugged/vim-ruby/ftdetect/ruby.vim	/^func! s:StarSetf(ft)$/;"	f
main_syntax	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
g:eruby_default_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^.\\{-\\}\\ze\\.eruby\\>')$/;"	v
s:lines	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_nest_level	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(&filetype,'\\C\\<eruby\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:current_syntax	nvim/plugged/vim-ruby/syntax/eruby.vim	/^let b:current_syntax = matchstr(&syntax, '^.*\\<eruby\\>')$/;"	v
s:cpo_sav	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:cpo_sav = &cpo$/;"	v
b:ruby_no_expensive	nvim/plugged/vim-ruby/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
s:foldable_groups	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:foldable_groups = split($/;"	v
foldable	nvim/plugged/vim-ruby/syntax/ruby.vim	/^function! s:foldable(...) abort$/;"	f
run_syntax_fold	nvim/plugged/vim-ruby/syntax/ruby.vim	/^function! s:run_syntax_fold(args) abort$/;"	f
SynFold	nvim/plugged/vim-ruby/syntax/ruby.vim	/^com! -nargs=* SynFold call s:run_syntax_fold(<q-args>)$/;"	c
s:spell_cluster	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:spell_cluster = exists('ruby_spellcheck_strings') ? ',@Spell' : ''$/;"	v
s:fold_arg	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:fold_arg	    = s:foldable('string')		? ' fold'   : ''$/;"	v
s:names	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:names = { '~': 'Tilde', '`': 'BackQuote', '!': 'Bang', '@': 'At', '#': 'Hash', '$': 'Dollar', '%': 'Percent', '^': 'Caret',$/;"	v
s:group	nvim/plugged/vim-ruby/syntax/ruby.vim	/^  let s:group = 'ruby' . s:names[s:delimiter] . 'Escape'$/;"	v
s:delimiter	nvim/plugged/vim-ruby/syntax/ruby.vim	/^    let s:delimiter = '\\' . s:delimiter$/;"	v
ruby_minlines	nvim/plugged/vim-ruby/syntax/ruby.vim	/^    let ruby_minlines = 500$/;"	v
b:current_syntax	nvim/plugged/vim-ruby/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
ErrMsg	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
g:rubycomplete_rails	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:rubycomplete_classes_in_global	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_buffer_loading	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_include_object	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
s:end_start_regex	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_start_regex =$/;"	v
s:end_middle_regex	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_end_regex	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:rubycomplete_debug	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
dprint	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
GetBufferRubyModule	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubyClass	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubySingletonMethods	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetBufferRubyEntity	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
IsInClassDef	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsPosInClassDef	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
IsInComment	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsInComment(pos)$/;"	f
GetRubyVarType	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
rubycomplete#Init	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
rubycomplete#Complete	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
DefRuby	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
s:rubycomplete_rails_loaded	nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:save_cpo	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:browsefilter	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:match_words	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
g:eruby_default_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
s:lines	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
s:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:browsefilter	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:match_words	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:cfilemap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:cfilemap = v:version >= 704 ? maparg('<Plug><cfile>', 'c', 0, 1) : {}$/;"	v
s:cfilemap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:cfilemap = {}$/;"	v
s:cfilemap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:cfilemap.rhs = "substitute(&l:inex =~# '\\\\<v:fname\\\\>' && len(expand('<cfile>')) ? eval(substitute(&l:inex, '\\\\<v:fname\\\\>', '\\\\=string(expand(\\"<cfile>\\"))', 'g')) : '', '^$', \\"\\\\022\\\\006\\",'')"$/;"	v
s:ctagmap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:ctagmap = v:version >= 704 ? maparg('<Plug><ctag>', 'c', 0, 1) : {}$/;"	v
s:ctagmap	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:ctagmap = {}$/;"	v
s:include	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:include = &l:include$/;"	v
s:path	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:path = &l:path$/;"	v
s:suffixesadd	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
b:did_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let b:did_ftplugin = 1$/;"	v
s:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:browsefilter	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:match_words	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
b:browsefilter	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:match_words	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
ErubyAtCursor	nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^function! ErubyAtCursor() abort$/;"	f
b:did_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
s:cpo_save	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
b:match_ignorecase	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:match_skip	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
g:ruby_version_paths	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let g:ruby_version_paths = {}$/;"	v
query_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:query_path(root) abort$/;"	f
build_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:build_path(path) abort$/;"	f
s:version_file	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:version_file = findfile('.ruby-version', '.;')$/;"	v
b:ruby_version	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    let b:ruby_version = get(readfile(s:version_file, '', 1), '')$/;"	v
g:ruby_version_paths	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))$/;"	v
s:ruby_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path$/;"	v
s:ruby_paths	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]$/;"	v
s:ruby_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
g:ruby_default_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_default_path = s:query_path($HOME)$/;"	v
g:ruby_default_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# "." ? "" : v:val')$/;"	v
s:ruby_paths	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_default_path$/;"	v
s:ruby_path	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
b:browsefilter	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl inc= sua= path= tags= fo< com< cms< kp="$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= ' | setl sw< sts< et<'$/;"	v
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= "| setl bexpr="$/;"	v
map	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:map(mode, flags, map) abort$/;"	f
<Plug><ctag>	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',"\\022\\027",'')$/;"	m
<Plug><cfile>	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',"\\022\\006",'')$/;"	m
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:undo_ftplugin .= "| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>"$/;"	v
<SID>:	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>:  :<C-U>$/;"	m
<SID>c:	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
[m	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR>$/;"	m
]m	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>$/;"	m
[M	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR>$/;"	m
]M	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>$/;"	m
[[	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
]]	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
[]	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
][	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
im	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
am	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
iM	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
aM	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
b:undo_ftplugin	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
<SID>tagzv	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''$/;"	m
g:did_ruby_ftplugin_functions	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
RubyBalloonexpr	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyBalloonexpr() abort$/;"	f
searchsyn	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:searchsyn(pattern, syn, flags, mode) abort$/;"	f
synid	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:synid() abort$/;"	f
wrap_i	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:wrap_i(back,forward) abort$/;"	f
wrap_a	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:wrap_a(back,forward) abort$/;"	f
RubyCursorIdentifier	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorIdentifier() abort$/;"	f
RubyCursorTag	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorTag() abort$/;"	f
RubyCursorFile	nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorFile() abort$/;"	f
s:save_cpo	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^let s:save_cpo = &cpo$/;"	v
smooth_scroll#up	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! smooth_scroll#up(dist, duration, speed)$/;"	f
smooth_scroll#down	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! smooth_scroll#down(dist, duration, speed)$/;"	f
smooth_scroll	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! s:smooth_scroll(dir, dist, duration, speed)$/;"	f
get_ms_since	nvim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! s:get_ms_since(time)$/;"	f
b:did_indent	nvim/plugged/vim-pug/indent/pug.vim	/^let b:did_indent = 1$/;"	v
s:attributes	nvim/plugged/vim-pug/indent/pug.vim	/^let s:attributes = '\\%((.\\{-\\})\\)'$/;"	v
s:tag	nvim/plugged/vim-pug/indent/pug.vim	/^let s:tag = '\\([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:pug_self_closing_tags	nvim/plugged/vim-pug/indent/pug.vim	/^  let g:pug_self_closing_tags = 'meta|link|img|hr|br|input'$/;"	v
GetPugIndent	nvim/plugged/vim-pug/indent/pug.vim	/^function! GetPugIndent()$/;"	f
main_syntax	nvim/plugged/vim-pug/syntax/pug.vim	/^  let main_syntax = 'pug'$/;"	v
b:current_syntax	nvim/plugged/vim-pug/syntax/pug.vim	/^let b:current_syntax = "pug"$/;"	v
s:save_cpo	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let s:save_cpo = &cpo$/;"	v
s:undo_ftplugin	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let s:undo_ftplugin = ""$/;"	v
s:browsefilter	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:match_words	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let s:match_words = ""$/;"	v
s:undo_ftplugin	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:browsefilter	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:match_words	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let s:match_words = b:match_words$/;"	v
b:browsefilter	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let b:browsefilter="Pug Files (*.pug)\\t*.pug\\n" . s:browsefilter$/;"	v
b:match_words	nvim/plugged/vim-pug/ftplugin/pug.vim	/^  let b:match_words = s:match_words$/;"	v
b:undo_ftplugin	nvim/plugged/vim-pug/ftplugin/pug.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
g:loaded_commentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
surroundings	nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
strip_white_space	nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
go	nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:go(...) abort$/;"	f
textobject	nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
Commentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^command! -range -bar Commentary call s:go(<line1>,<line2>)$/;"	c
<Plug>Commentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>CommentaryLine	nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'$/;"	m
<Plug>Commentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==# 'c')<CR>$/;"	m
<Plug>ChangeCommentary	nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>CommentaryUndo	nvim/plugged/vim-commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Commentary<Plug>Commentary"<CR>$/;"	m
gc	nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	nvim/plugged/vim-commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gcc	nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
cgc	nvim/plugged/vim-commentary/plugin/commentary.vim	/^    nmap cgc <Plug>ChangeCommentary$/;"	m
gcu	nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax = g:vimwiki_syntax_variables['media']$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxEqIn = '\\$[^$`]\\+\\$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_eqin = '\\$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxBold = "'''[^']\\\\+'''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_bold = "'''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxItalic = "''[^']\\\\+''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_italic = "''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxBoldItalic = "'''''[^']\\\\+'''''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxItalicBold = s:media_syntax.rxBoldItalic$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_bolditalic = "'''''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_italicbold = s:media_syntax.char_bolditalic$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxCode = '`[^`]\\+`'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_code = '`'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxDelText = '\\~\\~[^~]\\+\\~\\~'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_deltext = '\\~\\~'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxSuperScript = '\\^[^^]\\+\\^'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_superscript = '^'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxSubScript = ',,[^,]\\+,,'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.char_subscript = ',,'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxH = '='$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.symH = 1$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxHR = '^-----*$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxTableSep = '|'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.bullet_types = ['*', '#']$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.recurring_bullets = 1$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.number_types = []$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.list_markers = ['*', '#']$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxListDefine = '^\\%(;\\|:\\)\\s'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxPreStart = '<pre>'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxPreEnd = '<\\\/pre>'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxMathStart = '{{\\$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxMathEnd = '}}\\$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxComment = '^\\s*%%.*$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.rxTags = '\\%(^\\|\\s\\)\\@<=:\\%([^:[:space:]]\\+:\\)\\+\\%(\\s\\|$\\)\\@='$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.header_search = '^\\s*\\(=\\{1,6}\\)\\([^=].*[^=]\\)\\1\\s*$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.header_match = '^\\s*\\(=\\{1,6}\\)=\\@!\\s*__Header__\\s*\\1=\\@!\\s*$'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.bold_search = "'''\\\\zs[^']\\\\+\\\\ze'''"$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.bold_match = '''''''__Text__'''''''$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.wikilink = '\\[\\[\\zs[^\\\\\\]|]\\+\\ze\\%(|[^\\\\\\]]\\+\\)\\?\\]\\]'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.tag_search = '\\(^\\|\\s\\)\\zs:\\([^:''[:space:]]\\+:\\)\\+\\ze\\(\\s\\|$\\)'$/;"	v
s:media_syntax	nvim/plugged/vimwiki/syntax/vimwiki_media.vim	/^let s:media_syntax.tag_match = '\\(^\\|\\s\\):\\([^:''[:space:]]\\+:\\)*__Tag__:'.$/;"	v
add_target_syntax_ON	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:add_target_syntax_ON(target, type)$/;"	f
add_target_syntax_OFF	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:add_target_syntax_OFF(target, type)$/;"	f
wrap_wikilink1_rx	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:wrap_wikilink1_rx(target)$/;"	f
existing_mkd_refs	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:existing_mkd_refs()$/;"	f
highlight_existing_links	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^function! s:highlight_existing_links()$/;"	f
s:rxSchemes	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^let s:rxSchemes = '\\%('.$/;"	v
s:target	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^let s:target = vimwiki#base#apply_template($/;"	v
s:target	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^let s:target = vimwiki#base#apply_template($/;"	v
s:options	nvim/plugged/vimwiki/syntax/vimwiki_markdown_custom.vim	/^let s:options = ' contained transparent contains=NONE'$/;"	v
s:current_syntax	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:current_syntax = vimwiki#vars#get_wikilocal('syntax')$/;"	v
add_target_syntax_ON	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^function! s:add_target_syntax_ON(target, type)$/;"	f
add_target_syntax_OFF	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^function! s:add_target_syntax_OFF(target)$/;"	f
highlight_existing_links	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^function! s:highlight_existing_links()$/;"	f
s:rxSchemes	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:rxSchemes = '\\%('.$/;"	v
s:target	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:target = vimwiki#base#apply_template($/;"	v
s:target	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:target = vimwiki#base#apply_template($/;"	v
s:target	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:target = vimwiki#base#apply_template($/;"	v
s:target	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:target = vimwiki#base#apply_template($/;"	v
s:conceal	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:conceal = exists("+conceallevel") ? ' conceal' : ''$/;"	v
s:options	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:options = ' contained transparent contains=NONE'$/;"	v
s:options	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^  let s:options .= s:conceal$/;"	v
s:html_tags	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^  let s:html_tags = join(split(vimwiki#vars#get_global('valid_html_tags'), '\\s*,\\s*'), '\\|')$/;"	v
b:current_syntax	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let b:current_syntax="vimwiki"$/;"	v
s:nested	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^let s:nested = vimwiki#vars#get_wikilocal('nested_syntaxes')$/;"	v
s:nested	nvim/plugged/vimwiki/syntax/vimwiki.vim	/^  let s:nested = extend(s:nested, vimwiki#base#detect_nested_syntax(), "keep")$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax = g:vimwiki_syntax_variables['markdown']$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxEqIn = '\\$[^$`]\\+\\$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_eqin = '\\$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxBold = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_bold = '*'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxItalic = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_italic = '_'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxBoldItalic = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_bolditalic = '\\*_'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxItalicBold = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_italicbold = '_\\*'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxCode = '`[^`]\\+`'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_code = '`'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxDelText = '\\~\\~[^~`]\\+\\~\\~'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_deltext = '\\~\\~'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxSuperScript = '\\^[^^`]\\+\\^'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_superscript = '^'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxSubScript = ',,[^,`]\\+,,'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.char_subscript = ',,'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxH = '#'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.symH = 0$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxHR = '^-----*$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxTableSep = '|'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.bullet_types = ['-', '*', '+']$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.recurring_bullets = 0$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.number_types = ['1.']$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.list_markers = ['-', '*', '+', '1.']$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxListDefine = '::\\%(\\s\\|$\\)'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxPreStart = '```'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxPreEnd = '```'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxMathStart = '\\$\\$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxMathEnd = '\\$\\$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxComment = '^\\s*%%.*$\\|<!--[^>]*-->'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.rxTags = '\\%(^\\|\\s\\)\\@<=:\\%([^:[:space:]]\\+:\\)\\+\\%(\\s\\|$\\)\\@='$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.header_search = '^\\s*\\(#\\{1,6}\\)\\([^#].*\\)$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.header_match = '^\\s*\\(#\\{1,6}\\)#\\@!\\s*__Header__\\s*$'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.bold_search = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<=\\*\\zs'.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.bold_match = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<=\\*__Text__\\*'.$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.wikilink = '\\[\\[\\zs[^\\\\\\]|]\\+\\ze\\%(|[^\\\\\\]]\\+\\)\\?\\]\\]'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.tag_search = '\\(^\\|\\s\\)\\zs:\\([^:''[:space:]]\\+:\\)\\+\\ze\\(\\s\\|$\\)'$/;"	v
s:markdown_syntax	nvim/plugged/vimwiki/syntax/vimwiki_markdown.vim	/^let s:markdown_syntax.tag_match = '\\(^\\|\\s\\):\\([^:''[:space:]]\\+:\\)*__Tag__:'.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax = g:vimwiki_syntax_variables['default']$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxEqIn = '\\$[^$`]\\+\\$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_eqin = '\\$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxBold = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_bold = '*'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxItalic = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_italic = '_'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxBoldItalic = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_bolditalic = '\\*_'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxItalicBold = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<='.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_italicbold = '_\\*'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxCode = '`[^`]\\+`'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_code = '`'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxDelText = '\\~\\~[^~`]\\+\\~\\~'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_deltext = '\\~\\~'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxSuperScript = '\\^[^^`]\\+\\^'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_superscript = '^'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxSubScript = ',,[^,`]\\+,,'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.char_subscript = ',,'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxH = '='$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.symH = 1$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxHR = '^-----*$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxTableSep = '|'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.bullet_types = ['-', '*', '#']$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.recurring_bullets = 0$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.number_types = ['1)', '1.', 'i)', 'I)', 'a)', 'A)']$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.list_markers = ['-', '1.', '*', 'I)', 'a)']$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxListDefine = '::\\(\\s\\|$\\)'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxPreStart = '{{{'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxPreEnd = '}}}'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxMathStart = '{{\\$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxMathEnd = '}}\\$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxComment = '^\\s*%%.*$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.rxTags = '\\%(^\\|\\s\\)\\@<=:\\%([^:''[:space:]]\\+:\\)\\+\\%(\\s\\|$\\)\\@='$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.header_search = '^\\s*\\(=\\{1,6}\\)\\([^=].*[^=]\\)\\1\\s*$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.header_match = '^\\s*\\(=\\{1,6}\\)=\\@!\\s*__Header__\\s*\\1=\\@!\\s*$'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.bold_search = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<=\\*\\zs\\%([^*`[:space:]][^*`]*'.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.bold_match = '\\%(^\\|\\s\\|[[:punct:]]\\)\\@<=\\*__Text__\\*'.$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.wikilink = '\\[\\[\\zs[^\\\\\\]|]\\+\\ze\\%(|[^\\\\\\]]\\+\\)\\?\\]\\]'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.tag_search = '\\(^\\|\\s\\)\\zs:\\([^:''[:space:]]\\+:\\)\\+\\ze\\(\\s\\|$\\)'$/;"	v
s:default_syntax	nvim/plugged/vimwiki/syntax/vimwiki_default.vim	/^let s:default_syntax.tag_match =  '\\(^\\|\\s\\):\\([^:''[:space:]]\\+:\\)*__Tag__:'.$/;"	v
g:loaded_vimwiki	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let g:loaded_vimwiki = 1$/;"	v
s:plugin_vers	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:plugin_vers = "2.4.1"$/;"	v
s:plugin_dir	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:plugin_dir = expand('<sfile>:p:h:h')$/;"	v
s:old_cpo	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:old_cpo = &cpo$/;"	v
s:vimwiki_autowriteall_saved	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  let s:vimwiki_autowriteall_saved = g:vimwiki_autowriteall$/;"	v
s:vimwiki_autowriteall_saved	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  let s:vimwiki_autowriteall_saved = 1$/;"	v
setup_buffer_leave	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:setup_buffer_leave()$/;"	f
create_temporary_wiki	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:create_temporary_wiki()$/;"	f
setup_new_wiki_buffer	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:setup_new_wiki_buffer()$/;"	f
setup_buffer_enter	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:setup_buffer_enter()$/;"	f
setup_cleared_syntax	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:setup_cleared_syntax()$/;"	f
vimwiki_get_known_extensions	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:vimwiki_get_known_extensions()$/;"	f
set_global_options	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:set_global_options()$/;"	f
set_windowlocal_options	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:set_windowlocal_options()$/;"	f
get_version	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:get_version()$/;"	f
VimwikiLinkHandler	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  function VimwikiLinkHandler(url)$/;"	f
VimwikiLinkConverter	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  function VimwikiLinkConverter(url, source, target)$/;"	f
VimwikiWikiIncludeHandler	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  function! VimwikiWikiIncludeHandler(value)$/;"	f
s:known_extensions	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:known_extensions = s:vimwiki_get_known_extensions()$/;"	v
filetypedetect	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  augroup filetypedetect$/;"	a
vimwiki	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^augroup vimwiki$/;"	a
VimwikiUISelect	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! VimwikiUISelect call vimwiki#base#ui_select()$/;"	c
VimwikiIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiIndex$/;"	c
VimwikiTabIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiTabIndex$/;"	c
VimwikiDiaryIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiDiaryIndex$/;"	c
VimwikiMakeDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiMakeDiaryNote$/;"	c
VimwikiTabMakeDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiTabMakeDiaryNote$/;"	c
VimwikiMakeYesterdayDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiMakeYesterdayDiaryNote$/;"	c
VimwikiMakeTomorrowDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! -count=1 VimwikiMakeTomorrowDiaryNote$/;"	c
VimwikiDiaryGenerateLinks	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! VimwikiDiaryGenerateLinks$/;"	c
VimwikiShowVersion	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^command! VimwikiShowVersion call s:get_version()$/;"	c
s:map_prefix	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^let s:map_prefix = vimwiki#vars#get_global('map_prefix')$/;"	v
<Plug>VimwikiIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiIndex :VimwikiIndex<CR>$/;"	m
<Plug>VimwikiTabIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiTabIndex :VimwikiTabIndex<CR>$/;"	m
<Plug>VimwikiUISelect	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiUISelect :VimwikiUISelect<CR>$/;"	m
<Plug>VimwikiDiaryIndex	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiDiaryIndex :VimwikiDiaryIndex<CR>$/;"	m
<Plug>VimwikiDiaryGenerateLinks	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiDiaryGenerateLinks :VimwikiDiaryGenerateLinks<CR>$/;"	m
<Plug>VimwikiMakeDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiMakeDiaryNote :VimwikiMakeDiaryNote<CR>$/;"	m
<Plug>VimwikiTabMakeDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiTabMakeDiaryNote$/;"	m
<Plug>VimwikiMakeYesterdayDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiMakeYesterdayDiaryNote$/;"	m
<Plug>VimwikiMakeTomorrowDiaryNote	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^nnoremap <unique><script> <Plug>VimwikiMakeTomorrowDiaryNote$/;"	m
build_menu	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:build_menu(topmenu)$/;"	f
build_table_menu	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^function! s:build_table_menu(topmenu)$/;"	f
g:calendar_action	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  let g:calendar_action = 'vimwiki#diary#calendar_action'$/;"	v
g:calendar_sign	nvim/plugged/vimwiki/plugin/vimwiki.vim	/^  let g:calendar_sign = 'vimwiki#diary#calendar_sign'$/;"	v
vimwiki#u#trim	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#trim(string, ...)$/;"	f
vimwiki#u#cursor	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#cursor(lnum, cnum)$/;"	f
vimwiki#u#is_windows	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#is_windows()$/;"	f
vimwiki#u#is_macos	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#is_macos()$/;"	f
vimwiki#u#count_first_sym	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#count_first_sym(line)$/;"	f
vimwiki#u#escape	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function! vimwiki#u#escape(string)$/;"	f
vimwiki#u#reload_regexes	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function vimwiki#u#reload_regexes()$/;"	f
vimwiki#u#reload_regexes_custom	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^function vimwiki#u#reload_regexes_custom()$/;"	f
vimwiki#u#sw	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^  func vimwiki#u#sw()$/;"	f
vimwiki#u#sw	nvim/plugged/vimwiki/autoload/vimwiki/u.vim	/^  func vimwiki#u#sw()$/;"	f
populate_global_variables	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:populate_global_variables()$/;"	f
read_global_settings_from_user	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:read_global_settings_from_user()$/;"	f
normalize_global_settings	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:normalize_global_settings()$/;"	f
populate_wikilocal_options	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:populate_wikilocal_options()$/;"	f
check_users_value	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:check_users_value(key, users_value, value_infos, comes_from_global_variable)$/;"	f
normalize_wikilocal_settings	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:normalize_wikilocal_settings()$/;"	f
normalize_path	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:normalize_path(path)$/;"	f
vimwiki#vars#populate_syntax_vars	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#populate_syntax_vars(syntax)$/;"	f
populate_extra_markdown_vars	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! s:populate_extra_markdown_vars()$/;"	f
vimwiki#vars#init	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#init()$/;"	f
vimwiki#vars#get_syntaxlocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_syntaxlocal(key, ...)$/;"	f
vimwiki#vars#get_bufferlocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_bufferlocal(key, ...)$/;"	f
vimwiki#vars#set_bufferlocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#set_bufferlocal(key, value, ...)$/;"	f
vimwiki#vars#get_global	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_global(key)$/;"	f
vimwiki#vars#get_wikilocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_wikilocal(key, ...)$/;"	f
vimwiki#vars#get_wikilocal_default	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#get_wikilocal_default(key)$/;"	f
vimwiki#vars#set_wikilocal	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#set_wikilocal(key, value, wiki_nr)$/;"	f
vimwiki#vars#add_temporary_wiki	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#add_temporary_wiki(settings)$/;"	f
vimwiki#vars#number_of_wikis	nvim/plugged/vimwiki/autoload/vimwiki/vars.vim	/^function! vimwiki#vars#number_of_wikis()$/;"	f
g:loaded_vimwiki_diary_auto	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^let g:loaded_vimwiki_diary_auto = 1$/;"	v
s:vimwiki_max_scan_for_caption	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^let s:vimwiki_max_scan_for_caption = 5$/;"	v
prefix_zero	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:prefix_zero(num)$/;"	f
diary_path	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:diary_path(...)$/;"	f
diary_index	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:diary_index(...)$/;"	f
vimwiki#diary#diary_date_link	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#diary_date_link(...)$/;"	f
get_position_links	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:get_position_links(link)$/;"	f
get_month_name	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:get_month_name(month)$/;"	f
read_captions	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:read_captions(files)$/;"	f
get_diary_files	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:get_diary_files()$/;"	f
group_links	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:group_links(links)$/;"	f
sort	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:sort(lst)$/;"	f
format_diary	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! s:format_diary()$/;"	f
vimwiki#diary#make_note	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#make_note(wnum, ...)$/;"	f
vimwiki#diary#goto_diary_index	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#goto_diary_index(wnum)$/;"	f
vimwiki#diary#goto_next_day	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#goto_next_day()$/;"	f
vimwiki#diary#goto_prev_day	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#goto_prev_day()$/;"	f
vimwiki#diary#generate_diary_section	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#generate_diary_section()$/;"	f
vimwiki#diary#calendar_action	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function! vimwiki#diary#calendar_action(day, month, year, week, dir)$/;"	f
vimwiki#diary#calendar_sign	nvim/plugged/vimwiki/autoload/vimwiki/diary.vim	/^function vimwiki#diary#calendar_sign(day, month, year)$/;"	f
safesubstitute	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! s:safesubstitute(text, search, replace, mode)$/;"	f
vimwiki#markdown_base#scan_reflinks	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! vimwiki#markdown_base#scan_reflinks()$/;"	f
vimwiki#markdown_base#open_reflink	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! vimwiki#markdown_base#open_reflink(link)$/;"	f
normalize_link_syntax_n	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! s:normalize_link_syntax_n()$/;"	f
normalize_link_syntax_v	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! s:normalize_link_syntax_v()$/;"	f
vimwiki#markdown_base#normalize_link	nvim/plugged/vimwiki/autoload/vimwiki/markdown_base.vim	/^function! vimwiki#markdown_base#normalize_link(is_visual_mode)$/;"	f
g:loaded_vimwiki_html_auto	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^let g:loaded_vimwiki_html_auto = 1$/;"	v
root_path	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:root_path(subdir)$/;"	f
syntax_supported	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:syntax_supported()$/;"	f
remove_blank_lines	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:remove_blank_lines(lines)$/;"	f
is_web_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:is_web_link(lnk)$/;"	f
is_img_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:is_img_link(lnk)$/;"	f
has_abs_path	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:has_abs_path(fname)$/;"	f
find_autoload_file	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:find_autoload_file(name)$/;"	f
default_CSS_full_name	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:default_CSS_full_name(path)$/;"	f
create_default_CSS	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:create_default_CSS(path)$/;"	f
template_full_name	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:template_full_name(name)$/;"	f
get_html_template	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:get_html_template(template)$/;"	f
safe_html_preformatted	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:safe_html_preformatted(line)$/;"	f
escape_html_attribute	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:escape_html_attribute(string)$/;"	f
safe_html_line	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:safe_html_line(line)$/;"	f
delete_html_files	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:delete_html_files(path)$/;"	f
mid	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:mid(value, cnt)$/;"	f
subst_func	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:subst_func(line, regexp, func, ...)$/;"	f
process_date	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_date(placeholders, default_date)$/;"	f
process_title	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_title(placeholders, default_title)$/;"	f
is_html_uptodate	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:is_html_uptodate(wikifile)$/;"	f
html_insert_contents	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:html_insert_contents(html_lines, content)$/;"	f
tag_eqin	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_eqin(value)$/;"	f
tag_em	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_em(value)$/;"	f
tag_strong	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_strong(value, header_ids)$/;"	f
tag_tags	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_tags(value, header_ids)$/;"	f
tag_todo	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_todo(value)$/;"	f
tag_strike	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_strike(value)$/;"	f
tag_super	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_super(value)$/;"	f
tag_sub	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_sub(value)$/;"	f
tag_code	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_code(value)$/;"	f
incl_match_arg	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:incl_match_arg(nn_index)$/;"	f
linkify_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:linkify_link(src, descr)$/;"	f
linkify_image	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:linkify_image(src, descr, verbatim_str)$/;"	f
tag_weblink	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_weblink(value)$/;"	f
tag_wikiincl	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_wikiincl(value)$/;"	f
tag_wikilink	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_wikilink(value)$/;"	f
tag_remove_internal_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_remove_internal_link(value)$/;"	f
tag_remove_external_link	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:tag_remove_external_link(value)$/;"	f
make_tag	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:make_tag(line, regexp, func, ...)$/;"	f
process_tags_remove_links	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tags_remove_links(line)$/;"	f
process_tags_typefaces	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tags_typefaces(line, header_ids)$/;"	f
process_tags_links	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tags_links(line)$/;"	f
process_inline_tags	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_inline_tags(line, header_ids)$/;"	f
close_tag_pre	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_pre(pre, ldest)$/;"	f
close_tag_math	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_math(math, ldest)$/;"	f
close_tag_quote	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_quote(quote, ldest)$/;"	f
close_tag_para	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_para(para, ldest)$/;"	f
close_tag_table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_table(table, ldest, header_ids)$/;"	f
sum_colspan	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  function! s:sum_colspan(table)$/;"	f
close_tag_row	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  function! s:close_tag_row(row, header, ldest, header_ids)$/;"	f
table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let table = a:table$/;"	v
ldest	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let ldest = a:ldest$/;"	v
head	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let head = 0$/;"	v
head	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^        let head = idx$/;"	v
table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let table = []$/;"	v
close_tag_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_list(lists, ldest)$/;"	f
close_tag_def_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:close_tag_def_list(deflist, ldest)$/;"	f
process_tag_pre	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_pre(line, pre)$/;"	f
process_tag_math	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_math(line, math)$/;"	f
process_tag_quote	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_quote(line, quote)$/;"	f
process_tag_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_list(line, lists)$/;"	f
in_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let in_list = (len(a:lists) > 0)$/;"	v
pos	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let pos = match(a:line, '^\\s*'.vimwiki#vars#get_syntaxlocal('rxBold'))$/;"	v
lines	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let lines = []$/;"	v
processed	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let processed = 0$/;"	v
lstSym	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstSym = matchstr(a:line, s:bullets)$/;"	v
lstTagOpen	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagOpen = '<ul>'$/;"	v
lstTagClose	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagClose = '<\/ul>'$/;"	v
lstRegExp	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstRegExp = '^\\s*'.s:bullets.'\\s'$/;"	v
lstSym	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstSym = matchstr(a:line, s:numbers)$/;"	v
lstTagOpen	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagOpen = '<ol>'$/;"	v
lstTagClose	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagClose = '<\/ol>'$/;"	v
lstRegExp	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstRegExp = '^\\s*'.s:numbers.'\\s'$/;"	v
lstSym	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstSym = ''$/;"	v
lstTagOpen	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagOpen = ''$/;"	v
lstTagClose	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstTagClose = ''$/;"	v
lstRegExp	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let lstRegExp = ''$/;"	v
line	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let line = substitute(a:line, '\\t', repeat(' ', &tabstop), 'g')$/;"	v
indent	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let indent = stridx(line, lstSym)$/;"	v
checkbox	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let checkbox = '\\s*\\[\\(.\\)\\]\\s*'$/;"	v
item	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^      let item = remove(a:lists, -1)$/;"	v
item	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^        let item = remove(a:lists, -1)$/;"	v
item	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^      let item = remove(a:lists, -1)$/;"	v
processed	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let processed = 1$/;"	v
processed	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let processed = 1$/;"	v
process_tag_def_list	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_def_list(line, deflist)$/;"	f
process_tag_para	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_para(line, para)$/;"	f
process_tag_h	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_h(line, id)$/;"	f
process_tag_hr	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_hr(line)$/;"	f
process_tag_table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:process_tag_table(line, table, header_ids)$/;"	f
table_add_row	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  function! s:table_add_row(table, line)$/;"	f
table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let table = a:table$/;"	v
lines	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let lines = []$/;"	v
processed	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^  let processed = 0$/;"	v
processed	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let processed = 1$/;"	v
processed	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let processed = 1$/;"	v
cells	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let cells = vimwiki#tbl#get_cells(a:line)$/;"	v
table	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^    let table = s:close_tag_table(table, lines, a:header_ids)$/;"	v
parse_line	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:parse_line(line, state)$/;"	f
use_custom_wiki2html	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:use_custom_wiki2html()$/;"	f
vimwiki#html#CustomWiki2HTML	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#CustomWiki2HTML(path, wikifile, force)$/;"	f
convert_file	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:convert_file(path_html, wikifile)$/;"	f
vimwiki#html#Wiki2HTML	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#Wiki2HTML(path_html, wikifile)$/;"	f
vimwiki#html#WikiAll2HTML	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#WikiAll2HTML(path_html)$/;"	f
file_exists	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:file_exists(fname)$/;"	f
binary_exists	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:binary_exists(fname)$/;"	f
get_wikifile_url	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! s:get_wikifile_url(wikifile)$/;"	f
vimwiki#html#PasteUrl	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#PasteUrl(wikifile)$/;"	f
vimwiki#html#CatUrl	nvim/plugged/vimwiki/autoload/vimwiki/html.vim	/^function! vimwiki#html#CatUrl(wikifile)$/;"	f
g:loaded_vimwiki_tbl_auto	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^let g:loaded_vimwiki_tbl_auto = 1$/;"	v
s:textwidth	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^let s:textwidth = &tw$/;"	v
rxSep	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:rxSep()$/;"	f
wide_len	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:wide_len(str)$/;"	f
cell_splitter	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:cell_splitter()$/;"	f
sep_splitter	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:sep_splitter()$/;"	f
is_table	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_table(line)$/;"	f
is_separator	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_separator(line)$/;"	f
is_separator_tail	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_separator_tail(line)$/;"	f
is_last_column	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_last_column(lnum, cnum)$/;"	f
is_first_column	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:is_first_column(lnum, cnum)$/;"	f
count_separators_up	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:count_separators_up(lnum)$/;"	f
count_separators_down	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:count_separators_down(lnum)$/;"	f
create_empty_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:create_empty_row(cols)$/;"	f
create_row_sep	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:create_row_sep(cols)$/;"	f
vimwiki#tbl#get_cells	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#get_cells(line)$/;"	f
col_count	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:col_count(lnum)$/;"	f
get_indent	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:get_indent(lnum)$/;"	f
get_rows	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:get_rows(lnum)$/;"	f
get_cell_max_lens	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:get_cell_max_lens(lnum, ...)$/;"	f
get_aligned_rows	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:get_aligned_rows(lnum, col1, col2)$/;"	f
cur_column	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:cur_column()$/;"	f
fmt_cell	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:fmt_cell(cell, max_len)$/;"	f
fmt_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:fmt_row(cells, max_lens, col1, col2)$/;"	f
fmt_cell_sep	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:fmt_cell_sep(max_len)$/;"	f
fmt_sep	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:fmt_sep(max_lens, col1, col2)$/;"	f
kbd_create_new_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_create_new_row(cols, goto_first)$/;"	f
kbd_goto_next_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_goto_next_row()$/;"	f
kbd_goto_prev_row	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_goto_prev_row()$/;"	f
vimwiki#tbl#goto_next_col	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#goto_next_col()$/;"	f
kbd_goto_next_col	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_goto_next_col(jumpdown)$/;"	f
vimwiki#tbl#goto_prev_col	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#goto_prev_col()$/;"	f
kbd_goto_prev_col	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! s:kbd_goto_prev_col(jumpup)$/;"	f
vimwiki#tbl#kbd_cr	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#kbd_cr()$/;"	f
vimwiki#tbl#kbd_tab	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#kbd_tab()$/;"	f
vimwiki#tbl#kbd_shift_tab	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#kbd_shift_tab()$/;"	f
vimwiki#tbl#format	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#format(lnum, ...)$/;"	f
vimwiki#tbl#create	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#create(...)$/;"	f
vimwiki#tbl#align_or_cmd	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#align_or_cmd(cmd)$/;"	f
vimwiki#tbl#reset_tw	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#reset_tw(lnum)$/;"	f
vimwiki#tbl#move_column_left	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#move_column_left()$/;"	f
vimwiki#tbl#move_column_right	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#move_column_right()$/;"	f
vimwiki#tbl#get_rows	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#get_rows(lnum)$/;"	f
vimwiki#tbl#is_table	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#is_table(line)$/;"	f
vimwiki#tbl#is_separator	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#is_separator(line)$/;"	f
vimwiki#tbl#cell_splitter	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#cell_splitter()$/;"	f
vimwiki#tbl#sep_splitter	nvim/plugged/vimwiki/autoload/vimwiki/tbl.vim	/^function! vimwiki#tbl#sep_splitter()$/;"	f
g:loaded_vimwiki_list_auto	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^let g:loaded_vimwiki_list_auto = 1$/;"	v
increment_1	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_1(value)$/;"	f
increment_A	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_A(value)$/;"	f
increment_a	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_a(value)$/;"	f
increment_I	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_I(value)$/;"	f
increment_i	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increment_i(value)$/;"	f
substitute_rx_in_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:substitute_rx_in_line(lnum, pattern, new_string)$/;"	f
substitute_string_in_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:substitute_string_in_line(lnum, old_string, new_string)$/;"	f
first_char	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:first_char(string)$/;"	f
string_length	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^  function! s:string_length(str)$/;"	f
string_length	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^  function! s:string_length(str)$/;"	f
vimwiki#lst#default_symbol	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#default_symbol()$/;"	f
vimwiki#lst#get_list_margin	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#get_list_margin()$/;"	f
text_begin	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:text_begin(lnum)$/;"	f
line_has_marker	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:line_has_marker(lnum)$/;"	f
get_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_item(lnum)$/;"	f
empty_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:empty_item()$/;"	f
get_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_level(lnum)$/;"	f
guess_kind_of_numbered_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:guess_kind_of_numbered_item(item)$/;"	f
regexp_of_marker	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:regexp_of_marker(item)$/;"	f
is_closed	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:is_closed(item)$/;"	f
get_next_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_next_list_item(item, ignore_kind)$/;"	f
get_prev_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_prev_list_item(item, ignore_kind)$/;"	f
get_item_of_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_item_of_level(cur_ln, cur_lvl, org_lvl, org_regex)$/;"	f
get_any_item_of_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_any_item_of_level(cur_ln, cur_lvl, org_lvl)$/;"	f
get_first_item_in_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_first_item_in_list(item, ignore_kind)$/;"	f
get_last_item_in_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_last_item_in_list(item, ignore_kind)$/;"	f
get_next_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_next_line(lnum, ...)$/;"	f
get_prev_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_prev_line(lnum)$/;"	f
get_first_child	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_first_child(item)$/;"	f
get_next_child_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_next_child_item(parent, child)$/;"	f
get_parent	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_parent(item)$/;"	f
get_a_neighbor_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_a_neighbor_item(item)$/;"	f
get_a_neighbor_item_in_column	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_a_neighbor_item_in_column(lnum, column)$/;"	f
get_corresponding_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_corresponding_item(lnum)$/;"	f
get_last_line_of_item_incl_children	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_last_line_of_item_incl_children(item)$/;"	f
get_last_line_of_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_last_line_of_item(item)$/;"	f
adjust_numbered_list_below	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:adjust_numbered_list_below(item, recursive)$/;"	f
adjust_items_recursively	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:adjust_items_recursively(parent)$/;"	f
adjust_numbered_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:adjust_numbered_list(item, ignore_kind, recursive)$/;"	f
vimwiki#lst#adjust_numbered_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#adjust_numbered_list()$/;"	f
vimwiki#lst#adjust_whole_buffer	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#adjust_whole_buffer()$/;"	f
get_rate	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_rate(item)$/;"	f
set_state	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_state(item, new_rate)$/;"	f
set_state_plus_children	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_state_plus_children(item, new_rate, ...)$/;"	f
rate_to_state	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:rate_to_state(rate)$/;"	f
update_state	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:update_state(item)$/;"	f
set_state_recursively	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_state_recursively(item, new_rate)$/;"	f
create_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:create_cb(item, start_rate)$/;"	f
remove_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:remove_cb(item)$/;"	f
change_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:change_cb(from_line, to_line, new_rate)$/;"	f
toggle_create_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:toggle_create_cb(from_line, to_line, state1, state2, start_rate)$/;"	f
vimwiki#lst#decrement_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#decrement_cb(from_line, to_line)$/;"	f
vimwiki#lst#increment_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#increment_cb(from_line, to_line)$/;"	f
vimwiki#lst#toggle_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#toggle_cb(from_line, to_line)$/;"	f
vimwiki#lst#toggle_rejected_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#toggle_rejected_cb(from_line, to_line)$/;"	f
vimwiki#lst#remove_cb	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#remove_cb(first_line, last_line)$/;"	f
vimwiki#lst#remove_cb_in_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#remove_cb_in_list()$/;"	f
set_indent	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_indent(lnum, new_indent)$/;"	f
decrease_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:decrease_level(item)$/;"	f
increase_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:increase_level(item)$/;"	f
indent_line_by	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:indent_line_by(lnum, indent_by)$/;"	f
change_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:change_level(from_line, to_line, direction, plus_children)$/;"	f
vimwiki#lst#change_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#change_level(from_line, to_line, direction, plus_children)$/;"	f
indent_multiline	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:indent_multiline(prev_item, lnum)$/;"	f
get_idx_list_markers	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_idx_list_markers(item)$/;"	f
get_next_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_next_mrkr(item)$/;"	f
get_prev_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:get_prev_mrkr(item)$/;"	f
set_new_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:set_new_mrkr(item, new_mrkr)$/;"	f
vimwiki#lst#change_marker	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#change_marker(from_line, to_line, new_mrkr, mode)$/;"	f
vimwiki#lst#change_marker_in_list	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#change_marker_in_list(new_mrkr)$/;"	f
adjust_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:adjust_mrkr(item)$/;"	f
clone_marker_from_to	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:clone_marker_from_to(from, to)$/;"	f
remove_mrkr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:remove_mrkr(item)$/;"	f
create_marker	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:create_marker(lnum)$/;"	f
vimwiki#lst#kbd_o	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#kbd_o()$/;"	f
vimwiki#lst#kbd_O	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#kbd_O()$/;"	f
cr_on_empty_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:cr_on_empty_list_item(lnum, behavior)$/;"	f
cr_on_empty_line	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:cr_on_empty_line(lnum, behavior)$/;"	f
cr_on_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! s:cr_on_list_item(lnum, insert_new_marker, not_at_eol)$/;"	f
vimwiki#lst#kbd_cr	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#kbd_cr(normal, just_mrkr)$/;"	f
vimwiki#lst#toggle_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#toggle_list_item()$/;"	f
vimwiki#lst#TO_list_item	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#TO_list_item(inner, visual)$/;"	f
vimwiki#lst#fold_level	nvim/plugged/vimwiki/autoload/vimwiki/lst.vim	/^function! vimwiki#lst#fold_level(lnum)$/;"	f
vimwiki#path#chomp_slash	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#chomp_slash(str)$/;"	f
vimwiki#path#is_equal	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^  function! vimwiki#path#is_equal(p1, p2)$/;"	f
vimwiki#path#is_equal	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^  function! vimwiki#path#is_equal(p1, p2)$/;"	f
vimwiki#path#normalize	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#normalize(path)$/;"	f
vimwiki#path#path_norm	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#path_norm(path)$/;"	f
vimwiki#path#is_link_to_dir	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#is_link_to_dir(link)$/;"	f
vimwiki#path#abs_path_of_link	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#abs_path_of_link(link)$/;"	f
vimwiki#path#path_common_pfx	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#path_common_pfx(path1, path2)$/;"	f
vimwiki#path#wikify_path	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#wikify_path(path)$/;"	f
vimwiki#path#current_wiki_file	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#current_wiki_file()$/;"	f
vimwiki#path#relpath	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#relpath(dir, file)$/;"	f
vimwiki#path#mkdir	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#mkdir(path, ...)$/;"	f
vimwiki#path#is_absolute	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^function! vimwiki#path#is_absolute(path)$/;"	f
vimwiki#path#join_path	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^  function! vimwiki#path#join_path(directory, file)$/;"	f
vimwiki#path#join_path	nvim/plugged/vimwiki/autoload/vimwiki/path.vim	/^  function! vimwiki#path#join_path(directory, file)$/;"	f
g:loaded_vimwiki_auto	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^let g:loaded_vimwiki_auto = 1$/;"	v
safesubstitute	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:safesubstitute(text, search, replace, mode)$/;"	f
vimwiki_get_known_syntaxes	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:vimwiki_get_known_syntaxes()$/;"	f
vimwiki#base#file_pattern	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#file_pattern(files)$/;"	f
vimwiki#base#subdir	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#subdir(path, filename)$/;"	f
vimwiki#base#current_subdir	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#current_subdir()$/;"	f
vimwiki#base#invsubdir	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#invsubdir(subdir)$/;"	f
vimwiki#base#find_wiki	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#find_wiki(path)$/;"	f
vimwiki#base#resolve_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#resolve_link(link_text, ...)$/;"	f
vimwiki#base#system_open_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#system_open_link(url)$/;"	f
macunix_handler	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^  function! s:macunix_handler(url)$/;"	f
linux_handler	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^  function! s:linux_handler(url)$/;"	f
vimwiki#base#open_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#open_link(cmd, link, ...)$/;"	f
vimwiki#base#get_globlinks_escaped	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#get_globlinks_escaped() abort$/;"	f
vimwiki#base#generate_links	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#generate_links()$/;"	f
vimwiki#base#goto	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto(...)$/;"	f
vimwiki#base#backlinks	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#backlinks()$/;"	f
vimwiki#base#find_files	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#find_files(wiki_nr, directories_only)$/;"	f
vimwiki#base#get_wikilinks	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#get_wikilinks(wiki_nr, also_absolute_links)$/;"	f
vimwiki#base#get_wiki_directories	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#get_wiki_directories(wiki_nr)$/;"	f
vimwiki#base#get_anchors	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#get_anchors(filename, syntax)$/;"	f
jump_to_anchor	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:jump_to_anchor(anchor)$/;"	f
get_links	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:get_links(wikifile, idx)$/;"	f
vimwiki#base#check_links	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#check_links()$/;"	f
vimwiki#base#edit_file	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#edit_file(command, filename, anchor, ...)$/;"	f
vimwiki#base#search_word	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#search_word(wikiRx, cmd)$/;"	f
vimwiki#base#matchstr_at_cursor	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#matchstr_at_cursor(wikiRX)$/;"	f
vimwiki#base#replacestr_at_cursor	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#replacestr_at_cursor(wikiRX, sub)$/;"	f
print_wiki_list	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:print_wiki_list()$/;"	f
update_wiki_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:update_wiki_link(fname, old, new)$/;"	f
update_wiki_links_dir	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:update_wiki_links_dir(wiki_nr, dir, old_fname, new_fname)$/;"	f
tail_name	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:tail_name(fname)$/;"	f
update_wiki_links	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:update_wiki_links(wiki_nr, old_fname, new_fname,old_fname_relpath)$/;"	f
get_wiki_buffers	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:get_wiki_buffers()$/;"	f
open_wiki_buffer	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:open_wiki_buffer(item)$/;"	f
vimwiki#base#nested_syntax	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#nested_syntax(filetype, start, end, textSnipHl) abort$/;"	f
vimwiki#base#update_listing_in_buffer	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#update_listing_in_buffer(strings, start_header,$/;"	f
vimwiki#base#find_next_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#find_next_link()$/;"	f
vimwiki#base#find_prev_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#find_prev_link()$/;"	f
vimwiki#base#follow_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#follow_link(split, ...)$/;"	f
vimwiki#base#go_back_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#go_back_link()$/;"	f
vimwiki#base#goto_index	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_index(wnum, ...)$/;"	f
vimwiki#base#delete_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#delete_link()$/;"	f
vimwiki#base#rename_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#rename_link()$/;"	f
vimwiki#base#ui_select	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#ui_select()$/;"	f
vimwiki#base#TO_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#TO_header(inner, including_subheaders, count)$/;"	f
vimwiki#base#TO_table_cell	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#TO_table_cell(inner, visual)$/;"	f
vimwiki#base#TO_table_col	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#TO_table_col(inner, visual)$/;"	f
vimwiki#base#AddHeaderLevel	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#AddHeaderLevel()$/;"	f
vimwiki#base#RemoveHeaderLevel	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#RemoveHeaderLevel()$/;"	f
collect_headers	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:collect_headers()$/;"	f
current_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:current_header(headers, line_number)$/;"	f
get_another_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:get_another_header(headers, current_index, direction, operation)$/;"	f
vimwiki#base#goto_parent_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_parent_header()$/;"	f
vimwiki#base#goto_next_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_next_header()$/;"	f
vimwiki#base#goto_prev_header	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_prev_header()$/;"	f
vimwiki#base#goto_sibling	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#goto_sibling(direction)$/;"	f
vimwiki#base#table_of_contents	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#table_of_contents(create)$/;"	f
vimwiki#base#apply_template	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#apply_template(template, rxUrl, rxDesc, rxStyle)$/;"	f
clean_url	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:clean_url(url)$/;"	f
is_diary_file	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:is_diary_file(filename)$/;"	f
vimwiki#base#normalize_link_helper	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#normalize_link_helper(str, rxUrl, rxDesc, template)$/;"	f
vimwiki#base#normalize_imagelink_helper	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#normalize_imagelink_helper(str, rxUrl, rxDesc, rxStyle, template)$/;"	f
normalize_link_in_diary	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:normalize_link_in_diary(lnk)$/;"	f
normalize_link_syntax_n	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:normalize_link_syntax_n()$/;"	f
normalize_link_syntax_v	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! s:normalize_link_syntax_v()$/;"	f
vimwiki#base#normalize_link	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#normalize_link(is_visual_mode)$/;"	f
vimwiki#base#detect_nested_syntax	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#detect_nested_syntax()$/;"	f
vimwiki#base#complete_links_escaped	nvim/plugged/vimwiki/autoload/vimwiki/base.vim	/^function! vimwiki#base#complete_links_escaped(ArgLead, CmdLine, CursorPos) abort$/;"	f
s:TAGS_METADATA_FILE_NAME	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^let s:TAGS_METADATA_FILE_NAME = '.tags'$/;"	v
vimwiki#tags#update_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#update_tags(full_rebuild, all_files)$/;"	f
scan_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:scan_tags(lines, page_name)$/;"	f
vimwiki#tags#metadata_file_path	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#metadata_file_path() abort$/;"	f
load_tags_metadata	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:load_tags_metadata() abort$/;"	f
remove_page_from_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:remove_page_from_tags(metadata, page_name)$/;"	f
merge_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:merge_tags(metadata, pagename, file_metadata)$/;"	f
tags_entry_cmp	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:tags_entry_cmp(i1, i2)$/;"	f
write_tags_metadata	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! s:write_tags_metadata(metadata)$/;"	f
vimwiki#tags#get_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#get_tags()$/;"	f
vimwiki#tags#generate_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#generate_tags(...) abort$/;"	f
vimwiki#tags#complete_tags	nvim/plugged/vimwiki/autoload/vimwiki/tags.vim	/^function! vimwiki#tags#complete_tags(ArgLead, CmdLine, CursorPos) abort$/;"	f
b:did_ftplugin	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let b:did_ftplugin = 1  " Don't load another plugin for this buffer$/;"	v
Complete_wikifiles	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! Complete_wikifiles(findstart, base)$/;"	f
s:l_o	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  let s:l_o = matchstr(&langmap, '\\C,\\zs.\\zeo,')$/;"	v
s:l_O	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  let s:l_O = matchstr(&langmap, '\\C,\\zs.\\zeO,')$/;"	v
VimwikiFoldListLevel	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! VimwikiFoldListLevel(lnum)$/;"	f
VimwikiFoldLevel	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! VimwikiFoldLevel(lnum)$/;"	f
s:ellipsis	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let s:ellipsis = (&enc ==? 'utf-8') ? "\\u2026" : "..."$/;"	v
s:ell_len	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let s:ell_len = strlen(s:ellipsis)$/;"	v
s:newline	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let s:newline = (&enc ==? 'utf-8') ? "\\u21b2 " : "  "$/;"	v
s:tolerance	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^let s:tolerance = 5$/;"	v
shorten_text_simple	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! s:shorten_text_simple(text, len)$/;"	f
shorten_text	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! s:shorten_text(text, len)$/;"	f
VimwikiFoldText	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! VimwikiFoldText()$/;"	f
Vimwiki2HTML	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer Vimwiki2HTML$/;"	c
Vimwiki2HTMLBrowse	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer Vimwiki2HTMLBrowse$/;"	c
VimwikiAll2HTML	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiAll2HTML$/;"	c
VimwikiTOC	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTOC call vimwiki#base#table_of_contents(1)$/;"	c
VimwikiNextLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiNextLink call vimwiki#base#find_next_link()$/;"	c
VimwikiPrevLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiPrevLink call vimwiki#base#find_prev_link()$/;"	c
VimwikiDeleteLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiDeleteLink call vimwiki#base#delete_link()$/;"	c
VimwikiRenameLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiRenameLink call vimwiki#base#rename_link()$/;"	c
VimwikiFollowLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiFollowLink call vimwiki#base#follow_link('nosplit', 0, 1)$/;"	c
VimwikiGoBackLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiGoBackLink call vimwiki#base#go_back_link()$/;"	c
VimwikiSplitLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=* VimwikiSplitLink call vimwiki#base#follow_link('hsplit', <f-args>)$/;"	c
VimwikiVSplitLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=* VimwikiVSplitLink call vimwiki#base#follow_link('vsplit', <f-args>)$/;"	c
VimwikiNormalizeLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=? VimwikiNormalizeLink call vimwiki#base#normalize_link(<f-args>)$/;"	c
VimwikiTabnewLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTabnewLink call vimwiki#base#follow_link('tab', 0, 1)$/;"	c
VimwikiGenerateLinks	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiGenerateLinks call vimwiki#base#generate_links()$/;"	c
VimwikiBacklinks	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=0 VimwikiBacklinks call vimwiki#base#backlinks()$/;"	c
VWB	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=0 VWB call vimwiki#base#backlinks()$/;"	c
VimwikiGoto	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^      \\ VimwikiGoto call vimwiki#base#goto(<f-args>)$/;"	c
VimwikiCheckLinks	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiCheckLinks call vimwiki#base#check_links()$/;"	c
VimwikiReturn	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=+ VimwikiReturn call <SID>CR(<f-args>)$/;"	c
VimwikiChangeSymbolTo	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range -nargs=1 VimwikiChangeSymbolTo$/;"	c
VimwikiListChangeSymbolI	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range -nargs=1 VimwikiListChangeSymbolI$/;"	c
VimwikiChangeSymbolInListTo	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=1 VimwikiChangeSymbolInListTo$/;"	c
VimwikiToggleListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiToggleListItem call vimwiki#lst#toggle_cb(<line1>, <line2>)$/;"	c
VimwikiToggleRejectedListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiToggleRejectedListItem$/;"	c
VimwikiIncrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiIncrementListItem call vimwiki#lst#increment_cb(<line1>, <line2>)$/;"	c
VimwikiDecrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiDecrementListItem call vimwiki#lst#decrement_cb(<line1>, <line2>)$/;"	c
VimwikiListChangeLvl	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range -nargs=+ VimwikiListChangeLvl$/;"	c
VimwikiRemoveSingleCB	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -range VimwikiRemoveSingleCB call vimwiki#lst#remove_cb(<line1>, <line2>)$/;"	c
VimwikiRemoveCBInList	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiRemoveCBInList call vimwiki#lst#remove_cb_in_list()$/;"	c
VimwikiRenumberList	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiRenumberList call vimwiki#lst#adjust_numbered_list()$/;"	c
VimwikiRenumberAllLists	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiRenumberAllLists call vimwiki#lst#adjust_whole_buffer()$/;"	c
VimwikiListToggle	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiListToggle call vimwiki#lst#toggle_list_item()$/;"	c
VimwikiTable	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -nargs=* VimwikiTable call vimwiki#tbl#create(<f-args>)$/;"	c
VimwikiTableAlignQ	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTableAlignQ call vimwiki#tbl#align_or_cmd('gqq')$/;"	c
VimwikiTableAlignW	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTableAlignW call vimwiki#tbl#align_or_cmd('gww')$/;"	c
VimwikiTableMoveColumnLeft	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTableMoveColumnLeft call vimwiki#tbl#move_column_left()$/;"	c
VimwikiTableMoveColumnRight	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiTableMoveColumnRight call vimwiki#tbl#move_column_right()$/;"	c
VimwikiDiaryNextDay	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiDiaryNextDay call vimwiki#diary#goto_next_day()$/;"	c
VimwikiDiaryPrevDay	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiDiaryPrevDay call vimwiki#diary#goto_prev_day()$/;"	c
VimwikiRebuildTags	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer -bang VimwikiRebuildTags call vimwiki#tags#update_tags(1, '<bang>')$/;"	c
VimwikiSearchTags	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^      \\ VimwikiSearchTags VimwikiSearch \/:<args>:\/$/;"	c
VimwikiGenerateTags	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^      \\ VimwikiGenerateTags call vimwiki#tags#generate_tags(<f-args>)$/;"	c
VimwikiPasteUrl	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiPasteUrl call vimwiki#html#PasteUrl(expand('%:p'))$/;"	c
VimwikiCatUrl	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^command! -buffer VimwikiCatUrl call vimwiki#html#CatUrl(expand('%:p'))$/;"	c
<S-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <buffer> <S-LeftMouse> <NOP>$/;"	m
<C-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <buffer> <C-LeftMouse> <NOP>$/;"	m
<2-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nnoremap <silent><buffer> <2-LeftMouse>$/;"	m
<S-2-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nnoremap <silent><buffer> <S-2-LeftMouse> <LeftMouse>:VimwikiSplitLink<CR>$/;"	m
<C-2-LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nnoremap <silent><buffer> <C-2-LeftMouse> <LeftMouse>:VimwikiVSplitLink<CR>$/;"	m
<RightMouse><LeftMouse>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nnoremap <silent><buffer> <RightMouse><LeftMouse> :VimwikiGoBackLink<CR>$/;"	m
<Plug>Vimwiki2HTML	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <script><buffer> <Plug>Vimwiki2HTML :Vimwiki2HTML<CR>$/;"	m
<Plug>Vimwiki2HTMLBrowse	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <script><buffer> <Plug>Vimwiki2HTMLBrowse :Vimwiki2HTMLBrowse<CR>$/;"	m
<CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <CR> <Plug>VimwikiFollowLink$/;"	m
<Plug>VimwikiFollowLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiFollowLink :VimwikiFollowLink<CR>$/;"	m
<S-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <S-CR> <Plug>VimwikiSplitLink$/;"	m
<Plug>VimwikiSplitLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiSplitLink :VimwikiSplitLink<CR>$/;"	m
<C-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-CR> <Plug>VimwikiVSplitLink$/;"	m
<Plug>VimwikiVSplitLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiVSplitLink :VimwikiVSplitLink<CR>$/;"	m
+	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> + <Plug>VimwikiNormalizeLink$/;"	m
<Plug>VimwikiNormalizeLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiNormalizeLink :VimwikiNormalizeLink 0<CR>$/;"	m
+	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> + <Plug>VimwikiNormalizeLinkVisual$/;"	m
<Plug>VimwikiNormalizeLinkVisual	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><script><buffer> <Plug>VimwikiNormalizeLinkVisual :<C-U>VimwikiNormalizeLink 1<CR>$/;"	m
<CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> <CR> <Plug>VimwikiNormalizeLinkVisualCR$/;"	m
<D-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <D-CR> <Plug>VimwikiTabnewLink$/;"	m
<C-S-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-S-CR> <Plug>VimwikiTabnewLink$/;"	m
<Plug>VimwikiTabnewLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiTabnewLink :VimwikiTabnewLink<CR>$/;"	m
<BS>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <BS> <Plug>VimwikiGoBackLink$/;"	m
<Plug>VimwikiGoBackLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiGoBackLink :VimwikiGoBackLink<CR>$/;"	m
<TAB>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <TAB> <Plug>VimwikiNextLink$/;"	m
<Plug>VimwikiNextLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiNextLink :VimwikiNextLink<CR>$/;"	m
<S-TAB>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <S-TAB> <Plug>VimwikiPrevLink$/;"	m
<Plug>VimwikiPrevLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiPrevLink :VimwikiPrevLink<CR>$/;"	m
<Plug>VimwikiDeleteLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiDeleteLink :VimwikiDeleteLink<CR>$/;"	m
<Plug>VimwikiRenameLink	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiRenameLink :VimwikiRenameLink<CR>$/;"	m
<C-Down>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-Down> <Plug>VimwikiDiaryNextDay$/;"	m
<Plug>VimwikiDiaryNextDay	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiDiaryNextDay :VimwikiDiaryNextDay<CR>$/;"	m
<C-Up>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-Up> <Plug>VimwikiDiaryPrevDay$/;"	m
<Plug>VimwikiDiaryPrevDay	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiDiaryPrevDay :VimwikiDiaryPrevDay<CR>$/;"	m
<C-Space>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <C-Space> <Plug>VimwikiToggleListItem$/;"	m
<C-Space>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> <C-Space> <Plug>VimwikiToggleListItem$/;"	m
<C-@>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^    nmap <silent><buffer> <C-@> <Plug>VimwikiToggleListItem$/;"	m
<C-@>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^    vmap <silent><buffer> <C-@> <Plug>VimwikiToggleListItem$/;"	m
glx	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> glx <Plug>VimwikiToggleRejectedListItem$/;"	m
glx	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> glx <Plug>VimwikiToggleRejectedListItem$/;"	m
<Plug>VimwikiToggleListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiToggleListItem :VimwikiToggleListItem<CR>$/;"	m
<Plug>VimwikiToggleListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><script><buffer> <Plug>VimwikiToggleListItem :VimwikiToggleListItem<CR>$/;"	m
gln	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> gln <Plug>VimwikiIncrementListItem$/;"	m
gln	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> gln <Plug>VimwikiIncrementListItem$/;"	m
glp	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> glp <Plug>VimwikiDecrementListItem$/;"	m
glp	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  vmap <silent><buffer> glp <Plug>VimwikiDecrementListItem$/;"	m
<Plug>VimwikiIncrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiIncrementListItem :VimwikiIncrementListItem<CR>$/;"	m
<Plug>VimwikiIncrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><script><buffer> <Plug>VimwikiIncrementListItem :VimwikiIncrementListItem<CR>$/;"	m
<Plug>VimwikiDecrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiDecrementListItem :VimwikiDecrementListItem<CR>$/;"	m
<Plug>VimwikiDecrementListItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><script><buffer> <Plug>VimwikiDecrementListItem :VimwikiDecrementListItem<CR>$/;"	m
<C-D>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-D> <Plug>VimwikiDecreaseLvlSingleItem$/;"	m
<Plug>VimwikiDecreaseLvlSingleItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiDecreaseLvlSingleItem$/;"	m
<C-T>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-T> <Plug>VimwikiIncreaseLvlSingleItem$/;"	m
<Plug>VimwikiIncreaseLvlSingleItem	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiIncreaseLvlSingleItem$/;"	m
<C-L><C-J>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-L><C-J> <Plug>VimwikiListNextSymbol$/;"	m
<Plug>VimwikiListNextSymbol	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiListNextSymbol$/;"	m
<C-L><C-K>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-L><C-K> <Plug>VimwikiListPrevSymbol$/;"	m
<Plug>VimwikiListPrevSymbol	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiListPrevSymbol$/;"	m
<C-L><C-M>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  imap <silent><buffer> <C-L><C-M> <Plug>VimwikiListToggle$/;"	m
<Plug>VimwikiListToggle	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^inoremap <silent><script><buffer> <Plug>VimwikiListToggle <Esc>:VimwikiListToggle<CR>$/;"	m
o	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent> <buffer> o :<C-U>call vimwiki#lst#kbd_o()<CR>$/;"	m
O	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent> <buffer> O :<C-U>call vimwiki#lst#kbd_O()<CR>$/;"	m
glr	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> glr <Plug>VimwikiRenumberList$/;"	m
<Plug>VimwikiRenumberList	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiRenumberList :VimwikiRenumberList<CR>$/;"	m
gLr	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> gLr <Plug>VimwikiRenumberAllLists$/;"	m
gLR	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> gLR <Plug>VimwikiRenumberAllLists$/;"	m
<Plug>VimwikiRenumberAllLists	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiRenumberAllLists :VimwikiRenumberAllLists<CR>$/;"	m
glh	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> glh <Plug>VimwikiDecreaseLvlSingleItem$/;"	m
gll	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gll <Plug>VimwikiIncreaseLvlSingleItem$/;"	m
gLh	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gLh <Plug>VimwikiDecreaseLvlWholeItem$/;"	m
gLH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gLH <Plug>VimwikiDecreaseLvlWholeItem$/;"	m
gLl	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gLl <Plug>VimwikiIncreaseLvlWholeItem$/;"	m
gLL	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gLL <Plug>VimwikiIncreaseLvlWholeItem$/;"	m
gl<Space>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gl<Space> <Plug>VimwikiRemoveSingleCB$/;"	m
<Plug>VimwikiRemoveSingleCB	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^noremap <silent><script><buffer> <Plug>VimwikiRemoveSingleCB :VimwikiRemoveSingleCB<CR>$/;"	m
gL<Space>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  map <silent><buffer> gL<Space> <Plug>VimwikiRemoveCBInList$/;"	m
<Plug>VimwikiRemoveCBInList	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^noremap <silent><script><buffer> <Plug>VimwikiRemoveCBInList :VimwikiRemoveCBInList<CR>$/;"	m
CR	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^function! s:CR(normal, just_mrkr)$/;"	f
<CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^    inoremap <silent><buffer> <CR> <Esc>:VimwikiReturn 1 5<CR>$/;"	m
<S-CR>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^    inoremap <silent><buffer> <S-CR> <Esc>:VimwikiReturn 2 2<CR>$/;"	m
<Tab>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^   inoremap <expr> <buffer> <Tab> vimwiki#tbl#kbd_tab()$/;"	m
<S-Tab>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^   inoremap <expr> <buffer> <S-Tab> vimwiki#tbl#kbd_shift_tab()$/;"	m
gqq	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <buffer> gqq :VimwikiTableAlignQ<CR>$/;"	m
gww	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <buffer> gww :VimwikiTableAlignW<CR>$/;"	m
<A-Left>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <A-Left> <Plug>VimwikiTableMoveColumnLeft$/;"	m
<Plug>VimwikiTableMoveColumnLeft	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><script><buffer> <Plug>VimwikiTableMoveColumnLeft :VimwikiTableMoveColumnLeft<CR>$/;"	m
<A-Right>	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> <A-Right> <Plug>VimwikiTableMoveColumnRight$/;"	m
ah	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> ah :<C-U>call vimwiki#base#TO_header(0, 0, v:count1)<CR>$/;"	m
ah	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> ah :<C-U>call vimwiki#base#TO_header(0, 0, v:count1)<CR>$/;"	m
ih	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> ih :<C-U>call vimwiki#base#TO_header(1, 0, v:count1)<CR>$/;"	m
ih	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> ih :<C-U>call vimwiki#base#TO_header(1, 0, v:count1)<CR>$/;"	m
aH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> aH :<C-U>call vimwiki#base#TO_header(0, 1, v:count1)<CR>$/;"	m
aH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> aH :<C-U>call vimwiki#base#TO_header(0, 1, v:count1)<CR>$/;"	m
iH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> iH :<C-U>call vimwiki#base#TO_header(1, 1, v:count1)<CR>$/;"	m
iH	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> iH :<C-U>call vimwiki#base#TO_header(1, 1, v:count1)<CR>$/;"	m
a\	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> a\\ :<C-U>call vimwiki#base#TO_table_cell(0, 0)<CR>$/;"	m
a\	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> a\\ :<C-U>call vimwiki#base#TO_table_cell(0, 1)<CR>$/;"	m
i\	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> i\\ :<C-U>call vimwiki#base#TO_table_cell(1, 0)<CR>$/;"	m
i\	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> i\\ :<C-U>call vimwiki#base#TO_table_cell(1, 1)<CR>$/;"	m
ac	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> ac :<C-U>call vimwiki#base#TO_table_col(0, 0)<CR>$/;"	m
ac	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> ac :<C-U>call vimwiki#base#TO_table_col(0, 1)<CR>$/;"	m
ic	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> ic :<C-U>call vimwiki#base#TO_table_col(1, 0)<CR>$/;"	m
ic	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> ic :<C-U>call vimwiki#base#TO_table_col(1, 1)<CR>$/;"	m
al	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> al :<C-U>call vimwiki#lst#TO_list_item(0, 0)<CR>$/;"	m
al	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> al :<C-U>call vimwiki#lst#TO_list_item(0, 1)<CR>$/;"	m
il	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^onoremap <silent><buffer> il :<C-U>call vimwiki#lst#TO_list_item(1, 0)<CR>$/;"	m
il	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^vnoremap <silent><buffer> il :<C-U>call vimwiki#lst#TO_list_item(1, 1)<CR>$/;"	m
=	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> = <Plug>VimwikiAddHeaderLevel$/;"	m
<Plug>VimwikiAddHeaderLevel	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiAddHeaderLevel :<C-U>call vimwiki#base#AddHeaderLevel()<CR>$/;"	m
-	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> - <Plug>VimwikiRemoveHeaderLevel$/;"	m
<Plug>VimwikiRemoveHeaderLevel	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiRemoveHeaderLevel :$/;"	m
]u	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> ]u <Plug>VimwikiGoToParentHeader$/;"	m
[u	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> [u <Plug>VimwikiGoToParentHeader$/;"	m
<Plug>VimwikiGoToParentHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToParentHeader :$/;"	m
]]	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> ]] <Plug>VimwikiGoToNextHeader$/;"	m
<Plug>VimwikiGoToNextHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToNextHeader :$/;"	m
[[	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> [[ <Plug>VimwikiGoToPrevHeader$/;"	m
<Plug>VimwikiGoToPrevHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToPrevHeader :$/;"	m
]=	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> ]= <Plug>VimwikiGoToNextSiblingHeader$/;"	m
<Plug>VimwikiGoToNextSiblingHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToNextSiblingHeader :$/;"	m
[=	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  nmap <silent><buffer> [= <Plug>VimwikiGoToPrevSiblingHeader$/;"	m
<Plug>VimwikiGoToPrevSiblingHeader	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^nnoremap <silent><buffer> <Plug>VimwikiGoToPrevSiblingHeader :$/;"	m
vimwiki	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  augroup vimwiki$/;"	a
vimwiki	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  augroup vimwiki$/;"	a
vimwiki	nvim/plugged/vimwiki/ftplugin/vimwiki.vim	/^  augroup vimwiki$/;"	a
g:loaded_rhubarb	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^let g:loaded_rhubarb = 1$/;"	v
g:dispatch_compilers	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^  let g:dispatch_compilers = {}$/;"	v
g:dispatch_compilers	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^let g:dispatch_compilers['hub'] = 'git'$/;"	v
g:fugitive_git_command	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^  let g:fugitive_git_command = 'hub'$/;"	v
Config	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^function! s:Config() abort$/;"	f
rhubarb	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^augroup rhubarb$/;"	a
g:fugitive_browse_handlers	nvim/plugged/vim-rhubarb/plugin/rhubarb.vim	/^  let g:fugitive_browse_handlers = []$/;"	v
g:autoloaded_rhubarb	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^let g:autoloaded_rhubarb = 1$/;"	v
throw	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:throw(string) abort$/;"	f
shellesc	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:shellesc(arg) abort$/;"	f
rhubarb#HomepageForUrl	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#HomepageForUrl(url) abort$/;"	f
rhubarb#homepage_for_url	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#homepage_for_url(url) abort$/;"	f
repo_homepage	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:repo_homepage() abort$/;"	f
credentials	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:credentials() abort$/;"	f
rhubarb#JsonDecode	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#JsonDecode(string) abort$/;"	f
rhubarb#JsonEncode	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#JsonEncode(object) abort$/;"	f
curl_arguments	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:curl_arguments(path, ...) abort$/;"	f
rhubarb#Request	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#Request(path, ...) abort$/;"	f
rhubarb#request	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#request(...) abort$/;"	f
rhubarb#RepoRequest	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#RepoRequest(...) abort$/;"	f
rhubarb#repo_request	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#repo_request(...) abort$/;"	f
url_encode	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! s:url_encode(str) abort$/;"	f
rhubarb#RepoSearch	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#RepoSearch(type, q) abort$/;"	f
rhubarb#repo_search	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#repo_search(...) abort$/;"	f
s:reference	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^let s:reference = '\\<\\%(\\c\\%(clos\\|resolv\\|referenc\\)e[sd]\\=\\|\\cfix\\%(e[sd]\\)\\=\\)\\>'$/;"	v
rhubarb#Complete	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#Complete(findstart, base) abort$/;"	f
rhubarb#omnifunc	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#omnifunc(findstart, base) abort$/;"	f
rhubarb#FugitiveUrl	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#FugitiveUrl(...) abort$/;"	f
rhubarb#fugitive_url	nvim/plugged/vim-rhubarb/autoload/rhubarb.vim	/^function! rhubarb#fugitive_url(...) abort$/;"	f
s:sfile	nvim/plugged/emmet-vim/unittest.vim	/^let s:sfile = expand('<sfile>')$/;"	v
s:logging	nvim/plugged/emmet-vim/unittest.vim	/^let s:logging = 0$/;"	v
reload	nvim/plugged/emmet-vim/unittest.vim	/^function! s:reload(d)$/;"	f
logn	nvim/plugged/emmet-vim/unittest.vim	/^function! s:logn(msg)$/;"	f
log	nvim/plugged/emmet-vim/unittest.vim	/^function! s:log(msg)$/;"	f
show_type	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_type(type)$/;"	f
show_category	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_category(category)$/;"	f
show_pass	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_pass(pass)$/;"	f
show_done	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_done()$/;"	f
escape	nvim/plugged/emmet-vim/unittest.vim	/^function! s:escape(str)$/;"	f
show_title	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_title(no, title)$/;"	f
show_skip	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_skip(no, title)$/;"	f
show_ok	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_ok()$/;"	f
show_ng	nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_ng(no, expect, got)$/;"	f
test	nvim/plugged/emmet-vim/unittest.vim	/^function! s:test(...)$/;"	f
do_tests	nvim/plugged/emmet-vim/unittest.vim	/^function! s:do_tests(bang, ...)$/;"	f
emmet_unittest_complete	nvim/plugged/emmet-vim/unittest.vim	/^function! s:emmet_unittest_complete(arglead, cmdline, cmdpos)$/;"	f
EmmetUnitTest	nvim/plugged/emmet-vim/unittest.vim	/^command! -bang -nargs=* -complete=customlist,<SID>emmet_unittest_complete EmmetUnitTest call s:do_tests("<bang>", <f-args>)$/;"	c
quickExpr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var quickExpr = \/^[^<]*(<(.|\\s)+>)[^>]*$|^#(\\w+)$\/,$/;"	V
init	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	init: function( selector, context ) {$/;"	M
jquery	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	jquery: "1.2.6",$/;"	P
size	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	size: function() {$/;"	M
length	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	length: 0,$/;"	P
get	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	get: function( num ) {$/;"	M
pushStack	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	pushStack: function( elems ) {$/;"	M
setArray	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	setArray: function( elems ) {$/;"	M
each	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	each: function( callback, args ) {$/;"	M
index	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	index: function( elem ) {$/;"	M
attr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	attr: function( name, value, type ) {$/;"	M
css	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	css: function( key, value ) {$/;"	M
text	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	text: function( text ) {$/;"	M
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = "";$/;"	V
wrapAll	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	wrapAll: function( html ) {$/;"	M
wrapInner	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	wrapInner: function( html ) {$/;"	M
wrap	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	wrap: function( html ) {$/;"	M
append	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	append: function() {$/;"	M
prepend	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prepend: function() {$/;"	M
before	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	before: function() {$/;"	M
after	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	after: function() {$/;"	M
end	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	end: function() {$/;"	M
find	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	find: function( selector ) {$/;"	M
clone	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	clone: function( events ) {$/;"	M
filter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	filter: function( selector ) {$/;"	M
not	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	not: function( selector ) {$/;"	M
add	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	add: function( selector ) {$/;"	M
is	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	is: function( selector ) {$/;"	M
hasClass	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hasClass: function( selector ) {$/;"	M
val	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	val: function( value ) {$/;"	M
checked	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				this.checked = (jQuery.inArray(this.value, value) >= 0 ||$/;"	M
jQuery	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				jQuery( "option", this ).each(function(){$/;"	M
selected	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					this.selected = (jQuery.inArray( this.value, values ) >= 0 ||$/;"	M
html	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	html: function( value ) {$/;"	M
replaceWith	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	replaceWith: function( value ) {$/;"	M
eq	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	eq: function( i ) {$/;"	M
slice	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slice: function() {$/;"	M
map	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	map: function( callback ) {$/;"	M
andSelf	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	andSelf: function() {$/;"	M
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	data: function( key, value ){$/;"	M
removeData	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeData: function( key ){$/;"	M
domManip	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	domManip: function( args, table, reverse, callback ) {$/;"	M
evalScript	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function evalScript( i, elem ) {$/;"	F
async	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			async: false,$/;"	P
dataType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			dataType: "script"$/;"	P
now	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function now(){$/;"	F
expando	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var expando = "jQuery" + now(), uuid = 0, windowData = {},$/;"	V
noConflict	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	noConflict: function( deep ) {$/;"	M
isFunction	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isFunction: function( fn ) {$/;"	M
isXMLDoc	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isXMLDoc: function( elem ) {$/;"	M
globalEval	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	globalEval: function( data ) {$/;"	M
nodeName	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nodeName: function( elem, name ) {$/;"	M
cache	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	cache: {},$/;"	P
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	data: function( elem, name, data ) {$/;"	M
removeData	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeData: function( elem, name ) {$/;"	M
each	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	each: function( object, callback, args ) {$/;"	M
name	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var name, i = 0, length = object.length;$/;"	V
i	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var name, i = 0, length = object.length;$/;"	V
prop	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prop: function( elem, value, type, i, name ) {$/;"	M
className	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	className: {$/;"	P
add	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		add: function( elem, classNames ) {$/;"	M
remove	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		remove: function( elem, classNames ) {$/;"	M
has	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		has: function( elem, className ) {$/;"	M
swap	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	swap: function( elem, options, callback ) {$/;"	M
old	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var old = {};$/;"	O
css	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	css: function( elem, name, force ) {$/;"	M
val	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = name == "width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ];$/;"	V
props	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = name == "width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ];$/;"	V
getWH	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			function getWH() {$/;"	F
padding	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var padding = 0, border = 0;$/;"	V
curCSS	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	curCSS: function( elem, name, force ) {$/;"	M
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret, style = elem.style;$/;"	V
style	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret, style = elem.style;$/;"	V
color	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function color( elem ) {$/;"	F
swap	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var swap = [], stack = [], a = elem, i = 0;$/;"	A
clean	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	clean: function( elems, context ) {$/;"	M
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [];$/;"	A
attr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	attr: function( elem, name, value ) {$/;"	M
special	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var special = \/href|src|style\/.test( name );$/;"	V
filter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				elem.filter = (elem.filter || "").replace( \/alpha\\([^)]*\\)\/, "" ) +$/;"	M
trim	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	trim: function( text ) {$/;"	M
makeArray	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	makeArray: function( array ) {$/;"	M
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [];$/;"	A
if	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		if( array != null ){$/;"	M
inArray	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	inArray: function( elem, array ) {$/;"	M
merge	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	merge: function( first, second ) {$/;"	M
i	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var i = 0, elem, pos = first.length;$/;"	V
unique	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	unique: function( array ) {$/;"	M
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [], done = {};$/;"	A
grep	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	grep: function( elems, callback, inv ) {$/;"	M
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [];$/;"	A
map	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	map: function( elems, callback ) {$/;"	M
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [];$/;"	A
browser	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.browser = {$/;"	P
version	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	version: (userAgent.match( \/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/ ) || [])[1],$/;"	M
safari	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	safari: \/webkit\/.test( userAgent ),$/;"	P
opera	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	opera: \/opera\/.test( userAgent ),$/;"	P
msie	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	msie: \/msie\/.test( userAgent ) && !\/opera\/.test( userAgent ),$/;"	P
mozilla	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	mozilla: \/mozilla\/.test( userAgent ) && !\/(compatible|webkit)\/.test( userAgent )$/;"	P
props	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	props: {$/;"	P
cssFloat	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		cssFloat: styleFloat,$/;"	P
styleFloat	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		styleFloat: styleFloat,$/;"	P
readonly	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		readonly: "readOnly",$/;"	P
maxlength	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		maxlength: "maxLength",$/;"	P
cellspacing	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		cellspacing: "cellSpacing"$/;"	P
parent	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	parent: function(elem){return elem.parentNode;},$/;"	M
parents	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	parents: function(elem){return jQuery.dir(elem,"parentNode");},$/;"	M
next	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	next: function(elem){return jQuery.nth(elem,2,"nextSibling");},$/;"	M
prev	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prev: function(elem){return jQuery.nth(elem,2,"previousSibling");},$/;"	M
nextAll	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nextAll: function(elem){return jQuery.dir(elem,"nextSibling");},$/;"	M
prevAll	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prevAll: function(elem){return jQuery.dir(elem,"previousSibling");},$/;"	M
siblings	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	siblings: function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},$/;"	M
children	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	children: function(elem){return jQuery.sibling(elem.firstChild);},$/;"	M
contents	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	contents: function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}$/;"	M
appendTo	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	appendTo: "append",$/;"	P
prependTo	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prependTo: "prepend",$/;"	P
insertBefore	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	insertBefore: "before",$/;"	P
insertAfter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	insertAfter: "after",$/;"	P
replaceAll	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	replaceAll: "replaceWith"$/;"	P
removeAttr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeAttr: function( name ) {$/;"	M
addClass	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	addClass: function( classNames ) {$/;"	M
removeClass	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeClass: function( classNames ) {$/;"	M
toggleClass	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggleClass: function( classNames ) {$/;"	M
remove	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	remove: function( selector ) {$/;"	M
jQuery	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery( "*", this ).add(this).each(function(){$/;"	M
empty	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	empty: function() {$/;"	M
num	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function num(elem, prop) {$/;"	F
expr	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	expr: {$/;"	P
lt	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			lt: function(a,i,m){return i<m[3]-0;},$/;"	M
gt	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			gt: function(a,i,m){return i>m[3]-0;},$/;"	M
nth	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			nth: function(a,i,m){return m[3]-0==i;},$/;"	M
eq	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			eq: function(a,i,m){return m[3]-0==i;},$/;"	M
first	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			first: function(a,i){return i==0;},$/;"	M
last	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			last: function(a,i,m,r){return i==r.length-1;},$/;"	M
even	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			even: function(a,i){return i%2==0;},$/;"	M
odd	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			odd: function(a,i){return i%2;},$/;"	M
parent	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			parent: function(a){return a.firstChild;},$/;"	M
empty	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			empty: function(a){return !a.firstChild;},$/;"	M
contains	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			contains: function(a,i,m){return (a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m[3])>=0;},$/;"	M
visible	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			visible: function(a){return "hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"visibility")!="hidden";},$/;"	M
hidden	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			hidden: function(a){return "hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"visibility")=="hidden";},$/;"	M
enabled	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			enabled: function(a){return !a.disabled;},$/;"	M
disabled	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			disabled: function(a){return a.disabled;},$/;"	M
checked	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			checked: function(a){return a.checked;},$/;"	M
selected	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			selected: function(a){return a.selected||jQuery.attr(a,"selected");},$/;"	M
text	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			text: function(a){return "text"==a.type;},$/;"	M
radio	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			radio: function(a){return "radio"==a.type;},$/;"	M
checkbox	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			checkbox: function(a){return "checkbox"==a.type;},$/;"	M
file	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			file: function(a){return "file"==a.type;},$/;"	M
password	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			password: function(a){return "password"==a.type;},$/;"	M
submit	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			submit: function(a){return "submit"==a.type;},$/;"	M
image	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			image: function(a){return "image"==a.type;},$/;"	M
reset	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			reset: function(a){return "reset"==a.type;},$/;"	M
button	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			button: function(a){return "button"==a.type||jQuery.nodeName(a,"button");},$/;"	M
input	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			input: function(a){return \/input|select|textarea|button\/i.test(a.nodeName);},$/;"	M
has	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			has: function(a,i,m){return jQuery.find(m[3],a).length;},$/;"	M
header	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			header: function(a){return \/h\\d\/i.test(a.nodeName);},$/;"	M
animated	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			animated: function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).length;}$/;"	M
parse	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	parse: [$/;"	P
multiFilter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	multiFilter: function( expr, elems, not ) {$/;"	M
old	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var old, cur = [];$/;"	V
cur	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var old, cur = [];$/;"	V
find	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	find: function( t, context ) {$/;"	M
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = [context], done = [], last, nodeName;$/;"	A
r	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var r = [];$/;"	A
merge	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					var merge = {};$/;"	O
tmp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^							var tmp = [];$/;"	A
classFilter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	classFilter: function(r,m,not){$/;"	M
tmp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var tmp = [];$/;"	A
filter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	filter: function(t,r,not) {$/;"	M
last	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var last;$/;"	V
tmp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var tmp = [], type = m[3];$/;"	A
merge	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var merge = {}, tmp = [],$/;"	O
first	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					first = (test[1] + (test[2] || 1)) - 0, last = test[3] - 0;$/;"	M
c	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^						var c = 1;$/;"	V
dir	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	dir: function( elem, dir ){$/;"	M
matched	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var matched = [],$/;"	A
nth	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nth: function(cur,result,dir,elem){$/;"	M
num	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var num = 0;$/;"	V
sibling	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	sibling: function( n, elem ) {$/;"	M
r	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var r = [];$/;"	A
event	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.event = {$/;"	P
add	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	add: function(elem, types, handler, data) {$/;"	M
if	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		if( data != undefined ) {$/;"	M
guid	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	guid: 1,$/;"	P
global	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	global: {},$/;"	P
remove	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	remove: function(elem, types, handler) {$/;"	M
trigger	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	trigger: function(type, data, elem, donative, extra) {$/;"	M
val	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	V
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	V
fn	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	V
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					type: type,$/;"	P
target	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					target: elem,$/;"	P
preventDefault	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					preventDefault: function(){},$/;"	M
stopPropagation	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					stopPropagation: function(){},$/;"	M
handle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	handle: function(event) {$/;"	M
val	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	V
ret	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	V
namespace	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	V
handlers	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		handlers = ( jQuery.data(this, "events") || {} )[event.type];$/;"	M
fix	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fix: function(event) {$/;"	M
props	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var props = "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode metaKey newValue originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target timeStamp toElement type view wheelDelta which".split(" ");$/;"	V
preventDefault	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		event.preventDefault = function() {$/;"	M
stopPropagation	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		event.stopPropagation = function() {$/;"	M
which	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			event.which = (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) ));$/;"	M
proxy	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	proxy: function( fn, proxy ){$/;"	M
special	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	special: {$/;"	P
ready	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		ready: {$/;"	P
setup	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			setup: function() {$/;"	M
teardown	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			teardown: function() { return; }$/;"	M
mouseenter	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		mouseenter: {$/;"	P
setup	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			setup: function() {$/;"	M
teardown	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			teardown: function() {$/;"	M
handler	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			handler: function(event) {$/;"	M
mouseleave	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		mouseleave: {$/;"	P
setup	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			setup: function() {$/;"	M
teardown	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			teardown: function() {$/;"	M
handler	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			handler: function(event) {$/;"	M
bind	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	bind: function( type, data, fn ) {$/;"	M
one	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	one: function( type, data, fn ) {$/;"	M
unbind	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	unbind: function( type, fn ) {$/;"	M
trigger	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	trigger: function( type, data, fn ) {$/;"	M
triggerHandler	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	triggerHandler: function( type, data, fn ) {$/;"	M
toggle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggle: function( fn ) {$/;"	M
lastToggle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			this.lastToggle = ( this.lastToggle || 0 ) % i;$/;"	M
hover	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hover: function(fnOver, fnOut) {$/;"	M
ready	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ready: function(fn) {$/;"	M
isReady	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isReady: false,$/;"	P
readyList	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	readyList: [],$/;"	P
ready	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ready: function() {$/;"	M
bindReady	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function bindReady(){$/;"	F
numStyles	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var numStyles;$/;"	V
withinElement	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var withinElement = function(event, elem) {$/;"	F
jQuery	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery(window).bind("unload", function() {$/;"	M
load	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	load: function( url, params, callback ) {$/;"	M
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var type = "GET";$/;"	V
url	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			url: url,$/;"	P
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			type: type,$/;"	P
dataType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			dataType: "html",$/;"	P
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			data: params,$/;"	P
complete	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			complete: function(res, status){$/;"	M
serialize	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	serialize: function() {$/;"	M
serializeArray	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	serializeArray: function() {$/;"	M
get	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	get: function( url, data, callback, type ) {$/;"	M
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			type: "GET",$/;"	P
url	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			url: url,$/;"	P
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			data: data,$/;"	P
success	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			success: callback,$/;"	P
dataType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			dataType: type$/;"	P
getScript	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	getScript: function( url, callback ) {$/;"	M
getJSON	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	getJSON: function( url, data, callback ) {$/;"	M
post	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	post: function( url, data, callback, type ) {$/;"	M
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			type: "POST",$/;"	P
url	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			url: url,$/;"	P
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			data: data,$/;"	P
success	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			success: callback,$/;"	P
dataType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			dataType: type$/;"	P
ajaxSetup	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ajaxSetup: function( settings ) {$/;"	M
ajaxSettings	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ajaxSettings: {$/;"	P
global	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		global: true,$/;"	P
type	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		type: "GET",$/;"	P
timeout	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		timeout: 0,$/;"	P
contentType	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		contentType: "application\/x-www-form-urlencoded",$/;"	P
processData	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		processData: true,$/;"	P
async	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		async: true,$/;"	P
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		data: null,$/;"	P
username	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		username: null,$/;"	P
password	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		password: null,$/;"	P
accepts	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		accepts: {$/;"	P
xml	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			xml: "application\/xml, text\/xml",$/;"	P
html	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			html: "text\/html",$/;"	P
script	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			script: "text\/javascript, application\/javascript",$/;"	P
json	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			json: "application\/json, text\/javascript",$/;"	P
text	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			text: "text\/plain",$/;"	P
_default	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			_default: "*\/*"$/;"	P
lastModified	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	lastModified: {},$/;"	P
ajax	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ajax: function( s ) {$/;"	M
jsonp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var jsonp, jsre = \/=\\?(&|$)\/g, status, data,$/;"	V
jsre	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var jsonp, jsre = \/=\\?(&|$)\/g, status, data,$/;"	V
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";$/;"	M
data	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");$/;"	M
remote	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var remote = \/^(?:\\w+:)?\\\/\\\/([^\\\/?#]+)\/;$/;"	V
onreadystatechange	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var onreadystatechange = function(isTimeout){$/;"	F
modRes	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					var modRes;$/;"	V
setTimeout	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				setTimeout(function(){$/;"	M
success	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function success(){$/;"	F
complete	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function complete(){$/;"	F
handleError	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	handleError: function( s, xhr, status, e ) {$/;"	M
active	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	active: 0,$/;"	P
httpSuccess	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpSuccess: function( xhr ) {$/;"	M
httpNotModified	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpNotModified: function( xhr, url ) {$/;"	M
httpData	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpData: function( xhr, type, filter ) {$/;"	M
param	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	param: function( a ) {$/;"	M
s	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var s = [];$/;"	A
show	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	show: function(speed,callback){$/;"	M
height	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				height: "show", width: "show", opacity: "show"$/;"	P
hide	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hide: function(speed,callback){$/;"	M
height	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				height: "hide", width: "hide", opacity: "hide"$/;"	P
toggle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggle: function( fn, fn2 ){$/;"	M
height	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					height: "toggle", width: "toggle", opacity: "toggle"$/;"	P
slideDown	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideDown: function(speed,callback){$/;"	M
slideUp	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideUp: function(speed,callback){$/;"	M
slideToggle	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideToggle: function(speed, callback){$/;"	M
fadeIn	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeIn: function(speed, callback){$/;"	M
fadeOut	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeOut: function(speed, callback){$/;"	M
fadeTo	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeTo: function(speed,to,callback){$/;"	M
animate	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	animate: function( prop, speed, easing, callback ) {$/;"	M
e	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var e = new jQuery.fx( self, opt, name );$/;"	V
start	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^							start = ((end || 1) \/ e.cur(true)) * start;$/;"	M
end	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^							end = ((parts[1] == "-=" ? -1 : 1) * end) + start;$/;"	M
queue	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	queue: function(type, fn){$/;"	M
stop	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	stop: function(clearQueue, gotoEnd){$/;"	M
queue	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var queue = function( elem, type, array ) {$/;"	F
dequeue	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.fn.dequeue = function(type){$/;"	M
speed	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	speed: function(speed, easing, fn) {$/;"	M
duration	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			duration: speed,$/;"	P
duration	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		opt.duration = (opt.duration && opt.duration.constructor == Number ?$/;"	M
complete	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		opt.complete = function(){$/;"	M
easing	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	easing: {$/;"	P
linear	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		linear: function( p, n, firstNum, diff ) {$/;"	M
swing	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		swing: function( p, n, firstNum, diff ) {$/;"	M
timers	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	timers: [],$/;"	P
timerId	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	timerId: null,$/;"	P
fx	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fx: function( elem, options, prop ){$/;"	M
orig	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			options.orig = {};$/;"	P
update	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	update: function(){$/;"	M
cur	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	cur: function(force){$/;"	M
custom	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	custom: function(from, to, unit){$/;"	M
t	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function t(gotoEnd){$/;"	F
show	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	show: function(){$/;"	M
hide	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hide: function(){$/;"	M
step	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	step: function(gotoEnd){$/;"	M
speeds	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	speeds:{$/;"	P
slow	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		slow: 600,$/;"	P
fast	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^ 		fast: 200,$/;"	P
def	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^ 		def: 400$/;"	P
step	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	step: {$/;"	P
scrollLeft	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		scrollLeft: function(fx){$/;"	M
scrollTop	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		scrollTop: function(fx){$/;"	M
opacity	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		opacity: function(fx){$/;"	M
_default	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		_default: function(fx){$/;"	M
offset	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.fn.offset = function() {$/;"	M
left	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var left = 0, top = 0, elem = this[0], results;$/;"	V
border	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	function border(elem) {$/;"	F
add	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	function add(l, t) {$/;"	F
position	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	position: function() {$/;"	M
left	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var left = 0, top = 0, results;$/;"	V
offsetParent	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	offsetParent: function() {$/;"	M
method	nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var method = 'scroll' + name;$/;"	V
g:loaded_emmet_vim	nvim/plugged/emmet-vim/plugin/emmet.vim	/^let g:loaded_emmet_vim = 1$/;"	v
s:save_cpo	nvim/plugged/emmet-vim/plugin/emmet.vim	/^let s:save_cpo = &cpoptions$/;"	v
g:emmet_html5	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_html5 = 1$/;"	v
g:emmet_docroot	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_docroot = {}$/;"	v
g:emmet_debug	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_debug = 0$/;"	v
g:emmet_curl_command	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_curl_command = 'curl -s -L -A Mozilla\/5.0'$/;"	v
g:user_emmet_leader_key	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:user_emmet_leader_key = '<c-y>'$/;"	v
install_plugin	nvim/plugged/emmet-vim/plugin/emmet.vim	/^function! s:install_plugin(mode, buffer)$/;"	f
EmmetInstall	nvim/plugged/emmet-vim/plugin/emmet.vim	/^command! -nargs=0 -bar EmmetInstall call <SID>install_plugin(get(g:, 'user_emmet_mode', 'a'), 1)$/;"	c
Emmet	nvim/plugged/emmet-vim/plugin/emmet.vim	/^  command! -nargs=1 Emmet call emmet#expandAbbr(4, <q-args>)$/;"	c
emmet#lang#slim#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#findTokens(str) abort$/;"	f
emmet#lang#slim#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#slim#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#slim#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#imageSize() abort$/;"	f
emmet#lang#slim#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#imageEncode() abort$/;"	f
emmet#lang#slim#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#parseTag(tag) abort$/;"	f
emmet#lang#slim#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#toggleComment() abort$/;"	f
emmet#lang#slim#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#balanceTag(flag) range abort$/;"	f
emmet#lang#slim#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#slim#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#moveNextPrev(flag) abort$/;"	f
emmet#lang#slim#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#splitJoinTag() abort$/;"	f
emmet#lang#slim#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#removeTag() abort$/;"	f
emmet#lang#slim#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#mergeLines() abort$/;"	f
emmet#lang#less#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#findTokens(str) abort$/;"	f
emmet#lang#less#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#less#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#less#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#imageSize() abort$/;"	f
emmet#lang#less#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#imageEncode() abort$/;"	f
emmet#lang#less#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#parseTag(tag) abort$/;"	f
emmet#lang#less#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#toggleComment() abort$/;"	f
emmet#lang#less#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#balanceTag(flag) range abort$/;"	f
emmet#lang#less#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#less#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#moveNextPrev(flag) abort$/;"	f
emmet#lang#less#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#splitJoinTag() abort$/;"	f
emmet#lang#less#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#removeTag() abort$/;"	f
emmet#lang#less#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#mergeLines() abort$/;"	f
s:bx	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^let s:bx = '{\\%("[^"]*"\\|''[^'']*''\\|\\$#\\|\\${\\w\\+}\\|\\$\\+\\|{[^{]\\+\\|[^{}]\\)\\{-}}'$/;"	v
s:mx	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^let s:mx = '\\([+>]\\|[<^]\\+\\)\\{-}'$/;"	v
emmet#lang#html#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#findTokens(str) abort$/;"	f
emmet#lang#html#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#parseIntoTree(abbr, type) abort$/;"	f
dollar_add	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! s:dollar_add(base,no) abort$/;"	f
emmet#lang#html#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#html#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#imageSize() abort$/;"	f
emmet#lang#html#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#imageEncode() abort$/;"	f
emmet#lang#html#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#parseTag(tag) abort$/;"	f
emmet#lang#html#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#toggleComment() abort$/;"	f
emmet#lang#html#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#balanceTag(flag) range abort$/;"	f
emmet#lang#html#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#html#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#moveNextPrev(flag) abort$/;"	f
emmet#lang#html#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#splitJoinTag() abort$/;"	f
emmet#lang#html#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#removeTag() abort$/;"	f
emmet#lang#html#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#mergeLines() abort$/;"	f
emmet#lang#elm#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#findTokens(str) abort$/;"	f
emmet#lang#elm#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#elm#renderNode	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#renderNode(node)$/;"	f
emmet#lang#elm#renderParam	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#renderParam(param)$/;"	f
emmet#lang#elm#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#elm#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#imageEncode() abort$/;"	f
emmet#lang#elm#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#parseTag(tag) abort$/;"	f
emmet#lang#elm#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#toggleComment() abort$/;"	f
emmet#lang#elm#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#balanceTag(flag) range abort$/;"	f
emmet#lang#elm#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#elm#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#moveNextPrev(flag) abort$/;"	f
emmet#lang#elm#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#splitJoinTag() abort$/;"	f
emmet#lang#elm#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#removeTag() abort$/;"	f
emmet#lang#elm#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#mergeLines() abort$/;"	f
emmet#lang#jade#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#findTokens(str) abort$/;"	f
emmet#lang#jade#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#jade#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#jade#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#imageSize() abort$/;"	f
emmet#lang#jade#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#imageEncode() abort$/;"	f
emmet#lang#jade#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#parseTag(tag) abort$/;"	f
emmet#lang#jade#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#toggleComment() abort$/;"	f
emmet#lang#jade#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#balanceTag(flag) range abort$/;"	f
emmet#lang#jade#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#jade#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#moveNextPrev(flag) abort$/;"	f
emmet#lang#jade#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#splitJoinTag() abort$/;"	f
emmet#lang#jade#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#removeTag() abort$/;"	f
emmet#lang#jade#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#mergeLines() abort$/;"	f
emmet#lang#sass#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#findTokens(str) abort$/;"	f
emmet#lang#sass#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#sass#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#sass#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#imageSize() abort$/;"	f
emmet#lang#sass#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#imageEncode() abort$/;"	f
emmet#lang#sass#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#parseTag(tag) abort$/;"	f
emmet#lang#sass#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#toggleComment() abort$/;"	f
emmet#lang#sass#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#balanceTag(flag) range abort$/;"	f
emmet#lang#sass#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#sass#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#moveNextPrev(flag) abort$/;"	f
emmet#lang#sass#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#splitJoinTag() abort$/;"	f
emmet#lang#sass#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#removeTag() abort$/;"	f
emmet#lang#sass#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#mergeLines() abort$/;"	f
emmet#lang#css#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#findTokens(str) abort$/;"	f
emmet#lang#css#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#css#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#css#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#imageSize() abort$/;"	f
emmet#lang#css#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#imageEncode() abort$/;"	f
emmet#lang#css#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#parseTag(tag) abort$/;"	f
emmet#lang#css#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#toggleComment() abort$/;"	f
emmet#lang#css#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#balanceTag(flag) range abort$/;"	f
emmet#lang#css#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#css#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#moveNextPrev(flag) abort$/;"	f
emmet#lang#css#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#splitJoinTag() abort$/;"	f
emmet#lang#css#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#removeTag() abort$/;"	f
emmet#lang#css#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#mergeLines() abort$/;"	f
emmet#lang#scss#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#findTokens(str) abort$/;"	f
emmet#lang#scss#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#scss#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#scss#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#imageSize() abort$/;"	f
emmet#lang#scss#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#imageEncode() abort$/;"	f
emmet#lang#scss#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#parseTag(tag) abort$/;"	f
emmet#lang#scss#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#toggleComment() abort$/;"	f
emmet#lang#scss#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#balanceTag(flag) range abort$/;"	f
emmet#lang#scss#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#scss#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#moveNextPrev(flag) abort$/;"	f
emmet#lang#scss#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#splitJoinTag() abort$/;"	f
emmet#lang#scss#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#removeTag() abort$/;"	f
emmet#lang#scss#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#mergeLines() abort$/;"	f
emmet#lang#haml#findTokens	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#findTokens(str) abort$/;"	f
emmet#lang#haml#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#haml#toString	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#toString(settings, current, type, inline, filters, itemno, indent) abort$/;"	f
emmet#lang#haml#imageSize	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#imageSize() abort$/;"	f
emmet#lang#haml#imageEncode	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#imageEncode() abort$/;"	f
emmet#lang#haml#parseTag	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#parseTag(tag) abort$/;"	f
emmet#lang#haml#toggleComment	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#toggleComment() abort$/;"	f
emmet#lang#haml#balanceTag	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#balanceTag(flag) range abort$/;"	f
emmet#lang#haml#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#haml#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#moveNextPrev(flag) abort$/;"	f
emmet#lang#haml#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#splitJoinTag() abort$/;"	f
emmet#lang#haml#removeTag	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#removeTag() abort$/;"	f
emmet#lang#haml#mergeLines	nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#mergeLines() abort$/;"	f
emmet#lorem#ja#expand	nvim/plugged/emmet-vim/autoload/emmet/lorem/ja.vim	/^function! emmet#lorem#ja#expand(command) abort$/;"	f
emmet#lorem#en#expand	nvim/plugged/emmet-vim/autoload/emmet/lorem/en.vim	/^function! emmet#lorem#en#expand(command) abort$/;"	f
emmet#util#deleteContent	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#deleteContent(region) abort$/;"	f
emmet#util#setContent	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#setContent(region, content) abort$/;"	f
emmet#util#selectRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#selectRegion(region) abort$/;"	f
emmet#util#pointInRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#pointInRegion(point, region) abort$/;"	f
emmet#util#cursorInRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#cursorInRegion(region) abort$/;"	f
emmet#util#regionIsValid	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#regionIsValid(region) abort$/;"	f
emmet#util#searchRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#searchRegion(start, end) abort$/;"	f
emmet#util#getContent	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getContent(region) abort$/;"	f
emmet#util#regionInRegion	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#regionInRegion(outer, inner) abort$/;"	f
emmet#util#getVisualBlock	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getVisualBlock() abort$/;"	f
emmet#util#getContentFromURL	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getContentFromURL(url) abort$/;"	f
emmet#util#getTextFromHTML	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getTextFromHTML(buf) abort$/;"	f
emmet#util#getImageSize	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getImageSize(fn) abort$/;"	f
emmet#util#imageSizeWithImageMagick	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#imageSizeWithImageMagick(fn) abort$/;"	f
emmet#util#isImageMagickInstalled	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#isImageMagickInstalled() abort$/;"	f
b64encode	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! s:b64encode(bytes, table, pad)$/;"	f
emmet#util#imageEncodeDecode	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#imageEncodeDecode(fn, flag) abort$/;"	f
emmet#util#unique	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#unique(arr) abort$/;"	f
s:seed	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^let s:seed = localtime()$/;"	v
emmet#util#srand	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#srand(seed) abort$/;"	f
emmet#util#rand	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#rand() abort$/;"	f
emmet#util#cache	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#cache(name, ...) abort$/;"	f
emmet#util#getcurpos	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getcurpos() abort$/;"	f
emmet#util#closePopup	nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#closePopup() abort$/;"	f
s:exists	nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^let s:exists = {}$/;"	v
emmet#lang#exists	nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#exists(type) abort$/;"	f
emmet#lang#type	nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#type(type) abort$/;"	f
emmet#lang#getExtends	nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#getExtends(type) abort$/;"	f
s:save_cpo	nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:filtermx	nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:filtermx = '|\\(\\%(bem\\|html\\|blade\\|haml\\|slim\\|e\\|c\\|s\\|fc\\|xsl\\|t\\|\\\/[^ ]\\+\\)\\s*,\\{0,1}\\s*\\)*$'$/;"	v
emmet#getExpandos	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getExpandos(type, key) abort$/;"	f
emmet#splitFilterArg	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#splitFilterArg(filters) abort$/;"	f
emmet#useFilter	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#useFilter(filters, filter) abort$/;"	f
emmet#getIndentation	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getIndentation(...) abort$/;"	f
emmet#getBaseType	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getBaseType(type) abort$/;"	f
emmet#isExtends	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#isExtends(type, extend) abort$/;"	f
emmet#parseIntoTree	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#parseIntoTree(abbr, type) abort$/;"	f
emmet#expandAbbrIntelligent	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandAbbrIntelligent(feedkey) abort$/;"	f
emmet#isExpandable	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#isExpandable() abort$/;"	f
emmet#mergeConfig	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeConfig(lhs, rhs) abort$/;"	f
emmet#newNode	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#newNode() abort$/;"	f
itemno	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! s:itemno(itemno, current) abort$/;"	f
localvar	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! s:localvar(current, key) abort$/;"	f
emmet#toString	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#toString(...) abort$/;"	f
emmet#getSettings	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getSettings() abort$/;"	f
emmet#getFilters	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getFilters(type) abort$/;"	f
emmet#getResource	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getResource(type, name, default) abort$/;"	f
emmet#getFileType	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getFileType(...) abort$/;"	f
emmet#getDollarExprs	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getDollarExprs(expand) abort$/;"	f
emmet#getDollarValueByKey	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getDollarValueByKey(key) abort$/;"	f
emmet#reExpandDollarExpr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#reExpandDollarExpr(expand, times) abort$/;"	f
emmet#expandDollarExpr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandDollarExpr(expand) abort$/;"	f
emmet#expandCursorExpr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandCursorExpr(expand, mode) abort$/;"	f
emmet#unescapeDollarExpr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#unescapeDollarExpr(expand) abort$/;"	f
emmet#expandAbbr	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandAbbr(mode, abbr) range abort$/;"	f
emmet#updateTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#updateTag() abort$/;"	f
emmet#moveNextPrevItem	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#moveNextPrevItem(flag) abort$/;"	f
emmet#moveNextPrev	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#moveNextPrev(flag) abort$/;"	f
emmet#imageSize	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#imageSize() abort$/;"	f
emmet#imageEncode	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#imageEncode() abort$/;"	f
emmet#toggleComment	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#toggleComment() abort$/;"	f
emmet#balanceTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#balanceTag(flag) range abort$/;"	f
emmet#splitJoinTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#splitJoinTag() abort$/;"	f
emmet#mergeLines	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeLines() range abort$/;"	f
emmet#removeTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#removeTag() abort$/;"	f
emmet#mergeLines	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeLines() abort$/;"	f
emmet#anchorizeURL	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#anchorizeURL(flag) abort$/;"	f
emmet#codePretty	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#codePretty() range abort$/;"	f
emmet#expandWord	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandWord(abbr, type, orig) abort$/;"	f
emmet#getSnippets	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getSnippets(type) abort$/;"	f
emmet#completeTag	nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#completeTag(findstart, base) abort$/;"	f
s:emmet_settings	nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:emmet_settings = {$/;"	v
render	nvim/plugged/vim-css-color/tests/example.jsx	/^	render: function() {$/;"	M
style	nvim/plugged/vim-css-color/tests/example.jsx	/^		var style = {$/;"	O
fontSize	nvim/plugged/vim-css-color/tests/example.jsx	/^			fontSize: 200$/;"	P
css_color#init	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! css_color#init(type, keywords, groups)$/;"	f
css_color#extend	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! css_color#extend(groups)$/;"	f
rgb2color	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:rgb2color(r,g,b)$/;"	f
hsl2color	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:hsl2color(h,s,l)$/;"	f
s:hex	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:hex={}$/;"	v
s:hex	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:hex[ printf( '%02x', i ) ] = i$/;"	v
create_highlight	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! s:create_highlight(color, is_bright)$/;"	f
s:xtermcolor	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xtermcolor = [$/;"	v
s:xtermcolor	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xtermcolor += map(range(24),'repeat([10*v:val+8],3) + [v:val+232]')$/;"	v
s:cubergb	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:cubergb = [ 0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF ]$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant = repeat([0],48)$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[2]] = 2$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[3]] = 3$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[4]] = 4$/;"	v
s:xvquant	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[5]] = 5$/;"	v
rgb2xterm	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! s:rgb2xterm(color)$/;"	f
s:color_idx	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:color_idx = {}$/;"	v
create_highlight	nvim/plugged/vim-css-color/autoload/css_color.vim	/^	function! s:create_highlight(color, is_bright)$/;"	f
s:pattern_color	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:pattern_color = {}$/;"	v
s:color_bright	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:color_bright  = {}$/;"	v
create_syn_match	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:create_syn_match()$/;"	f
clear_matches	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:clear_matches()$/;"	f
create_matches	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:create_matches()$/;"	f
s:_hexcolor	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_hexcolor   = '#\\(\\x\\{3}\\|\\x\\{6}\\)\\>' " submatch 1$/;"	v
s:_funcname	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_funcname   = '\\(rgb\\|hsl\\)a\\?' " submatch 2$/;"	v
s:_ws_	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_ws_        = '\\s*'$/;"	v
s:_numval	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_numval     = s:_ws_ . '\\(\\d\\{1,3}%\\?\\)' " submatch 3,4,5$/;"	v
s:_listsep	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_listsep    = s:_ws_ . ','$/;"	v
s:_otherargs_	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_otherargs_ = '\\%(,[^)]*\\)\\?'$/;"	v
s:_funcexpr	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_funcexpr   = s:_funcname . '[(]' . s:_numval . s:_listsep . s:_numval . s:_listsep . s:_numval . s:_ws_ . s:_otherargs_ . '[)]'$/;"	v
s:_csscolor	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_csscolor   = s:_hexcolor . '\\|' . s:_funcexpr$/;"	v
parse_screen	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:parse_screen()$/;"	f
css_color#reinit	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#reinit()$/;"	f
css_color#enable	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#enable()$/;"	f
css_color#disable	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#disable()$/;"	f
css_color#toggle	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#toggle()$/;"	f
s:type	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:type         = [ 'none', 'hex', 'css', 'none' ] " with wraparound for index() == -1$/;"	v
s:pat_for_type	nvim/plugged/vim-css-color/autoload/css_color.vim	/^let s:pat_for_type = [ '^$', s:_hexcolor, s:_csscolor, '^$' ]$/;"	v
css_color#init	nvim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#init(type, keywords, groups)$/;"	f
foo	nvim/plugged/vim-jsdoc/test/test.ts	/^function foo(foo: string = 'foo', bar: number = 1): string {$/;"	f
foo	nvim/plugged/vim-jsdoc/test/test.ts	/^function foo(foo: string = 'foo', bar: number = 1): string {$/;"	f
foo	nvim/plugged/vim-jsdoc/test/test.ts	/^function foo(foo: string = 'foo', bar: number = 1): string {$/;"	f
bar	nvim/plugged/vim-jsdoc/test/test.ts	/^function bar() : any {$/;"	f
bar	nvim/plugged/vim-jsdoc/test/test.ts	/^function bar() : any {$/;"	f
bar	nvim/plugged/vim-jsdoc/test/test.ts	/^function bar() : any {$/;"	f
_baz	nvim/plugged/vim-jsdoc/test/test.ts	/^function _baz()  :number{$/;"	f
_baz	nvim/plugged/vim-jsdoc/test/test.ts	/^function _baz()  :number{$/;"	f
_baz	nvim/plugged/vim-jsdoc/test/test.ts	/^function _baz()  :number{$/;"	f
union	nvim/plugged/vim-jsdoc/test/test.ts	/^function union(): number | string {$/;"	f
union	nvim/plugged/vim-jsdoc/test/test.ts	/^function union(): number | string {$/;"	f
union	nvim/plugged/vim-jsdoc/test/test.ts	/^function union(): number | string {$/;"	f
IFoo	nvim/plugged/vim-jsdoc/test/test.ts	/^interface IFoo {$/;"	i
InterfaceBar	nvim/plugged/vim-jsdoc/test/test.ts	/^interface InterfaceBar extends IFoo {$/;"	i
Foo	nvim/plugged/vim-jsdoc/test/test.ts	/^class Foo {$/;"	c
Bar	nvim/plugged/vim-jsdoc/test/test.ts	/^class Bar extends Foo implements IFoo {$/;"	c
foo	nvim/plugged/vim-jsdoc/test/test.ts	/^  private foo: number$/;"	m
foo	nvim/plugged/vim-jsdoc/test/test.ts	/^  private foo(arg1: string, arg2: number = 0): void {$/;"	m
_bar	nvim/plugged/vim-jsdoc/test/test.ts	/^  public _bar(): void {$/;"	m
baz	nvim/plugged/vim-jsdoc/test/test.ts	/^  public baz(arg1: string = 'foo', arg2: number = 100): void {$/;"	m
Baz	nvim/plugged/vim-jsdoc/test/test.ts	/^class Baz extends Foo implements IFoo {$/;"	c
ifoo	nvim/plugged/vim-jsdoc/test/test.ts	/^function ifoo(): IFoo {$/;"	f
ifoo	nvim/plugged/vim-jsdoc/test/test.ts	/^function ifoo(): IFoo {$/;"	f
ifoo	nvim/plugged/vim-jsdoc/test/test.ts	/^function ifoo(): IFoo {$/;"	f
list	nvim/plugged/vim-jsdoc/test/test.ts	/^function list(args: Array<Bar>): void {$/;"	f
list	nvim/plugged/vim-jsdoc/test/test.ts	/^function list(args: Array<Bar>): void {$/;"	f
list	nvim/plugged/vim-jsdoc/test/test.ts	/^function list(args: Array<Bar>): void {$/;"	f
anonymousGeneratorFunctionExpression	nvim/plugged/vim-jsdoc/test/test.js	/^var anonymousGeneratorFunctionExpression = function* (arg1, arg2) {};$/;"	G
namedGeneratorFunctionExpression	nvim/plugged/vim-jsdoc/test/test.js	/^var namedGeneratorFunctionExpression = function* namedGenerator(arg1, arg2) {};$/;"	G
anonymousFunctionExpression	nvim/plugged/vim-jsdoc/test/test.js	/^var anonymousFunctionExpression = function (arg1, arg2) {};$/;"	F
namedFunctionExpression	nvim/plugged/vim-jsdoc/test/test.js	/^var namedFunctionExpression = function namedExpression(el, $jq) {}$/;"	F
arrowFunction	nvim/plugged/vim-jsdoc/test/test.js	/^var arrowFunction = (foo, bar) => { };$/;"	F
arrowFunctionSingle	nvim/plugged/vim-jsdoc/test/test.js	/^var arrowFunctionSingle = foo => {};$/;"	F
namedFunctionDeclaration	nvim/plugged/vim-jsdoc/test/test.js	/^function namedFunctionDeclaration(_a2, err) { }$/;"	F
namedGeneratorFunc	nvim/plugged/vim-jsdoc/test/test.js	/^function* namedGeneratorFunc(data) { }$/;"	G
defaultParams	nvim/plugged/vim-jsdoc/test/test.js	/^function defaultParams(arg, arg1 = 'foo', arg2 = 100) {}$/;"	F
namespace	nvim/plugged/vim-jsdoc/test/test.js	/^const namespace = {};$/;"	O
x0	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x0 = function (e) { }; \/\/ anonymous method$/;"	M
x1	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x1 = (e) => { }; \/\/ anonymous method shorthand$/;"	M
x2	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x2 = function* (e) { }; \/\/ anonymous method generator$/;"	M
x3	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x3 = function testing(e) { }; \/\/ named method$/;"	M
x4	nvim/plugged/vim-jsdoc/test/test.js	/^namespace.x4 = function* testgen(description) { }; \/\/ named method generator$/;"	M
Foo	nvim/plugged/vim-jsdoc/test/test.js	/^class Foo {$/;"	C
foo	nvim/plugged/vim-jsdoc/test/test.js	/^  static foo(bar, baz) { } \/\/ static method$/;"	M
bar	nvim/plugged/vim-jsdoc/test/test.js	/^  bar(aaa, bb, ccc) { } \/\/ shorthand method$/;"	M
Foo	nvim/plugged/vim-jsdoc/test/test.js	/^class Foo extends Bar { }$/;"	C
foo	nvim/plugged/vim-jsdoc/test/flow.js	/^function foo(arg1 :string, arg2: number): string {$/;"	F
foo	nvim/plugged/vim-jsdoc/test/flow.js	/^  foo: string$/;"	P
bar	nvim/plugged/vim-jsdoc/test/flow.js	/^  bar: number$/;"	P
FooBar	nvim/plugged/vim-jsdoc/test/flow.js	/^class FooBar {$/;"	C
props	nvim/plugged/vim-jsdoc/test/flow.js	/^  props: Bar$/;"	P
s:save_cpo	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let s:save_cpo = &cpo$/;"	v
g:jsdoc_input_description	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_input_description       = get(g:, 'jsdoc_input_description')$/;"	v
g:jsdoc_additional_descriptions	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_additional_descriptions = get(g:, 'jsdoc_additional_descriptions')$/;"	v
g:jsdoc_return	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_return                  = get(g:, 'jsdoc_return', 1)$/;"	v
g:jsdoc_return_description	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_return_description      = get(g:, 'jsdoc_return_description', 1)$/;"	v
g:jsdoc_allow_input_prompt	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_allow_input_prompt      = get(g:, 'jsdoc_allow_input_prompt')$/;"	v
g:jsdoc_access_descriptions	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_access_descriptions     = get(g:, 'jsdoc_access_descriptions')$/;"	v
g:jsdoc_underscore_private	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_underscore_private      = get(g:, 'jsdoc_underscore_private')$/;"	v
g:jsdoc_allow_shorthand	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_allow_shorthand         = get(g:, 'jsdoc_allow_shorthand')$/;"	v
g:jsdoc_enable_es6	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_enable_es6              = get(g:, 'jsdoc_enable_es6')$/;"	v
g:jsdoc_custom_args_regex_only	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_custom_args_regex_only  = get(g:, 'jsdoc_custom_args_regex_only')$/;"	v
g:jsdoc_param_description_separator	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_param_description_separator =$/;"	v
g:jsdoc_custom_args_hook	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_custom_args_hook = exists('g:jsdoc_custom_args_hook')$/;"	v
g:jsdoc_type_hook	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_type_hook = exists('g:jsdoc_type_hook')$/;"	v
g:jsdoc_user_defined_tags	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_user_defined_tags = exists('g:jsdoc_user_defined_tags')$/;"	v
s:jsdoc_default_tags	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let s:jsdoc_default_tags = {$/;"	v
g:jsdoc_tags	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let g:jsdoc_tags = exists('g:jsdoc_tags')$/;"	v
s:candidate_type	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let s:candidate_type = ''$/;"	v
jsdoc#listDataTypes	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! jsdoc#listDataTypes(A, L, P) abort$/;"	f
s:regexs	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^let s:regexs = {$/;"	v
trim	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:trim(value)$/;"	f
parse_type	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:parse_type(args)$/;"	f
build_description	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:build_description(argType, arg) abort$/;"	f
hookArgs	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:hookArgs(lines, space, arg, hook, argType, argDescription) abort$/;"	f
determine_style	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:determine_style(line)$/;"	f
extract_return_type	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:extract_return_type(line)$/;"	f
parse_keyword_arg	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! s:parse_keyword_arg(arg)$/;"	f
jsdoc#insert	nvim/plugged/vim-jsdoc/autoload/jsdoc.vim	/^function! jsdoc#insert() abort$/;"	f
s:save_cpo	nvim/plugged/vim-jsdoc/ftplugin/typescript/jsdoc.vim	/^let s:save_cpo = &cpo$/;"	v
JsDoc	nvim/plugged/vim-jsdoc/ftplugin/typescript/jsdoc.vim	/^command! -nargs=0 -buffer -complete=customlist,jsdoc#insert JsDoc call jsdoc#insert()$/;"	c
<Plug>(jsdoc)	nvim/plugged/vim-jsdoc/ftplugin/typescript/jsdoc.vim	/^nnoremap <silent> <buffer> <Plug>(jsdoc) :call jsdoc#insert()<CR>$/;"	m
s:save_cpo	nvim/plugged/vim-jsdoc/ftplugin/javascript/jsdoc.vim	/^let s:save_cpo = &cpo$/;"	v
JsDoc	nvim/plugged/vim-jsdoc/ftplugin/javascript/jsdoc.vim	/^command! -nargs=0 -buffer -complete=customlist,jsdoc#insert JsDoc call jsdoc#insert()$/;"	c
<Plug>(jsdoc)	nvim/plugged/vim-jsdoc/ftplugin/javascript/jsdoc.vim	/^nnoremap <silent> <buffer> <Plug>(jsdoc) :call jsdoc#insert()<CR>$/;"	m
b:did_indent	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^let b:undo_indent = 'setl smartindent< indentkeys< indentexpr<'$/;"	v
s:keepcpo	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^let s:keepcpo= &cpoptions$/;"	v
prevnonblanknoncomment	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
count_chars	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^function s:count_chars(lnum, count_open, chars)$/;"	f
GetSCSSIndent	nvim/plugged/scss-syntax.vim/indent/scss.vim	/^function GetSCSSIndent()$/;"	f
main_syntax	nvim/plugged/scss-syntax.vim/syntax/scss.vim	/^  let main_syntax = 'scss'$/;"	v
b:current_syntax	nvim/plugged/scss-syntax.vim/syntax/scss.vim	/^let b:current_syntax = "scss"$/;"	v
b:did_indent	nvim/plugged/Dockerfile.vim/indent/Dockerfile.vim	/^let b:did_indent = 1$/;"	v
DockerfileIndent	nvim/plugged/Dockerfile.vim/indent/Dockerfile.vim	/^function! DockerfileIndent(line)$/;"	f
b:current_syntax	nvim/plugged/Dockerfile.vim/syntax/Dockerfile.vim	/^let b:current_syntax = "dockerfile"$/;"	v
main_syntax	nvim/plugged/Dockerfile.vim/syntax/docker-compose.vim	/^    let main_syntax = 'yaml'$/;"	v
b:current_syntax	nvim/plugged/Dockerfile.vim/syntax/docker-compose.vim	/^let b:current_syntax = "dockercompose"$/;"	v
DockerfileReplaceInstruction	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^function! DockerfileReplaceInstruction(original, replacement)$/;"	f
from	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> from <C-R>=DockerfileReplaceInstruction("from", "FROM")<CR>$/;"	m
maintainer	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> maintainer <C-R>=DockerfileReplaceInstruction("maintainer", "MAINTAINER")<CR>$/;"	m
run	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> run <C-R>=DockerfileReplaceInstruction("run", "RUN")<CR>$/;"	m
cmd	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> cmd <C-R>=DockerfileReplaceInstruction("cmd", "CMD")<CR>$/;"	m
label	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> label <C-R>=DockerfileReplaceInstruction("label", "LABEL")<CR>$/;"	m
expose	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> expose <C-R>=DockerfileReplaceInstruction("expose", "EXPOSE")<CR>$/;"	m
env	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> env <C-R>=DockerfileReplaceInstruction("env", "ENV")<CR>$/;"	m
add	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> add <C-R>=DockerfileReplaceInstruction("add", "ADD")<CR>$/;"	m
copy	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> copy <C-R>=DockerfileReplaceInstruction("copy", "COPY")<CR>$/;"	m
entrypoint	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> entrypoint <C-R>=DockerfileReplaceInstruction("entrypoint", "ENTRYPOINT")<CR>$/;"	m
volume	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> volume <C-R>=DockerfileReplaceInstruction("volume", "VOLUME")<CR>$/;"	m
user	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> user <C-R>=DockerfileReplaceInstruction("user", "USER")<CR>$/;"	m
workdir	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> workdir <C-R>=DockerfileReplaceInstruction("workdir", "WORKDIR")<CR>$/;"	m
arg	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> arg <C-R>=DockerfileReplaceInstruction("arg", "ARG")<CR>$/;"	m
onbuild	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> onbuild <C-R>=DockerfileReplaceInstruction("onbuild", "ONBUILD")<CR>$/;"	m
stopsignal	nvim/plugged/Dockerfile.vim/ftplugin/Dockerfile.vim	/^inoreabbr <silent> <buffer> stopsignal <C-R>=DockerfileReplaceInstruction("stopsignal", "STOPSIGNAL")<CR>$/;"	m
main_syntax	nvim/plugged/svg.vim/syntax/svg.vim	/^  let main_syntax = 'svg'$/;"	v
b:current_syntax	nvim/plugged/svg.vim/syntax/svg.vim	/^let b:current_syntax = "svg"$/;"	v
ShowUsage	nvim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
CleanUp	nvim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
ShowUsage	nvim/plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
CTAGS_EXE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
TAGS_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
PROJECT_ROOT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
FILE_LIST_CMD	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
UPDATED_SOURCE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
POST_PROCESS_CMD	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PAUSE_BEFORE_EXIT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
ParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
CTAGS_EXE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
TAGS_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
PROJECT_ROOT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
FILE_LIST_CMD	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
UPDATED_SOURCE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
PAUSE_BEFORE_EXIT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
POST_PROCESS_CMD	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
LoopParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
DoneParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
INDEX_WHOLE_PROJECT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
INDEX_WHOLE_PROJECT	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
use_raw_list	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
use_raw_list	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
Unlock	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Usage	nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
CSCOPE_EXE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CSCOPE_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
DB_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
FILE_LIST_CMD	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
BUILD_INVERTED_INDEX	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
ParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
CSCOPE_EXE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
DB_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
PROJ_ROOT	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
FILE_LIST_CMD	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
BUILD_INVERTED_INDEX	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
LoopParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
DoneParseArgs	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
LOG_FILE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
FILESIZE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILESIZE	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
CSCOPE_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_ARGS	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
Usage	nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
g:gutentags_debug	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:loaded_gutentags	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:gutentags_trace	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_fake	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_background_update	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_pause_after_update	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_enabled	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_modules	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_init_user_func	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_add_ctrlp_root_markers	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_project_root	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root_finder	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_project_info	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_exclude_filetypes	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'])$/;"	v
g:gutentags_resolve_symlinks	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_generate_on_new	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_missing	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_write	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_generate_on_empty_buffer	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_file_list_command	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_use_jobs	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:gutentags_cache_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_define_advanced_commands	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_plat_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_res_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_script_ext	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_plat_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_res_dir	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_script_ext	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:__gutentags_vim_is_leaving	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
gutentags_detect	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
GutentagsToggleEnabled	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleTrace	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsToggleFake	nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
g:gutentags_ctags_executable	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_tagfile	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_ctags_auto_set_tags	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_options_file	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_check_tagfile	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_extra_args	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_post_process_cmd	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_exclude	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
_handleOldOptions	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:did_check_exe	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:runner_exe	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = gutentags#get_plat_file('update_tags')$/;"	v
s:unix_redir	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:wildignores_options_path	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:last_wildignores	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
gutentags#ctags#init	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#generate	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#on_job_exit	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
get_ctags_executable	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
generate_wildignore_options	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
process_options_file	nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
g:gutentags_gtags_executable	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_dbpath	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_options_file	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_gtags_cscope_executable	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_auto_add_gtags_cscope	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
s:added_db_files	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
add_db	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
gutentags#gtags_cscope#init	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#generate	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
g:gutentags_cscope_executable	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_scopefile	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_auto_add_cscope	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_cscope_build_inverted_index	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
s:runner_exe	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:unix_redir	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:added_dbs	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
gutentags#cscope#init	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#generate	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#on_job_exit	nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#chdir	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#throw	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#error	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#warning	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags#trace	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#stripslash	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#normalizepath	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#shellslash	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#get_plat_file	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_res_file	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#get_cachefile	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#validate_cmd	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#make_args	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#make_args	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#is_path_rooted	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#is_path_rooted	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
s:known_files	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
cache_project_root	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
gutentags#get_project_file_list_cmd	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_root	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#default_get_project_root	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#get_project_info	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#setup_gutentags	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#on_vim_leave_pre	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
s:update_queue	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_in_progress	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_in_progress	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
gutentags#add_job	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#find_job_index_by_data	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#get_job_tags_file	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_job_data	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#remove_job	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
manual_update_tags	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
write_triggered_update_tags	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
update_tags	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
gutentags#rescan	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#toggletrace	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#fake	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#default_stdout_cb	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#default_stderr_cb	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
nvim_job_exit_wrapper	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
nvim_job_out_wrapper	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
gutentags#build_default_job_options	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#start_job	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#build_default_job_options	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#start_job	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#inprogress	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#statusline	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
b:did_indent	nvim/plugged/vim-javascript/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	nvim/plugged/vim-javascript/indent/javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
s:cpo_save	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:bvars	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:bvars = {$/;"	v
GetVars	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:GetVars()$/;"	f
sw	nvim/plugged/vim-javascript/indent/javascript.vim	/^  function s:sw()$/;"	f
sw	nvim/plugged/vim-javascript/indent/javascript.vim	/^  function s:sw()$/;"	f
s:z	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
s:skip_expr	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:in_comm	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:rel	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:rel = has('reltime')$/;"	v
GetPair	nvim/plugged/vim-javascript/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
GetPair	nvim/plugged/vim-javascript/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
SynAt	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:SynAt(l,c)$/;"	f
ParseCino	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:ParseCino(f)$/;"	f
SkipFunc	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:SkipFunc()$/;"	f
AlternatePair	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:AlternatePair()$/;"	f
Nat	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Nat(int)$/;"	f
LookingAt	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:LookingAt()$/;"	f
Token	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Token()$/;"	f
PreviousToken	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:PreviousToken(...)$/;"	f
Pure	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Pure(f,...)$/;"	f
SearchLoop	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
ExprCol	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:ExprCol()$/;"	f
s:opfirst	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:continuation	nvim/plugged/vim-javascript/indent/javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
Continues	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Continues()$/;"	f
Balanced	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
OneScope	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:OneScope()$/;"	f
DoWhile	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:DoWhile()$/;"	f
IsContOne	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:IsContOne(cont)$/;"	f
IsSwitch	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:IsSwitch()$/;"	f
IsBlock	nvim/plugged/vim-javascript/indent/javascript.vim	/^function s:IsBlock()$/;"	f
GetJavascriptIndent	nvim/plugged/vim-javascript/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
current_compiler	nvim/plugged/vim-javascript/compiler/eslint.vim	/^let current_compiler = "eslint"$/;"	v
CompilerSet	nvim/plugged/vim-javascript/compiler/eslint.vim	/^  command! -nargs=* CompilerSet setlocal <args>$/;"	c
did_javascript_syn_inits	nvim/plugged/vim-javascript/extras/flow.vim	/^    let did_javascript_syn_inits = 1$/;"	v
HiLink	nvim/plugged/vim-javascript/extras/flow.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/extras/flow.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
did_javascript_syn_inits	nvim/plugged/vim-javascript/extras/jsdoc.vim	/^    let did_javascript_syn_inits = 1$/;"	v
HiLink	nvim/plugged/vim-javascript/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
SelectJavascript	nvim/plugged/vim-javascript/ftdetect/javascript.vim	/^fun! s:SelectJavascript()$/;"	f
main_syntax	nvim/plugged/vim-javascript/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
did_javascript_syn_inits	nvim/plugged/vim-javascript/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
HiLink	nvim/plugged/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	nvim/plugged/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	nvim/plugged/vim-javascript/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:undo_ftplugin	nvim/plugged/vim-javascript/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	nvim/plugged/vim-javascript/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
s:tree_up_dir_line	nvim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:dirArrows	nvim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpandable, '~]\\-')$/;"	v
loaded_nerd_tree	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
s:old_cpo	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
initVariable	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
g:NERDTreeIgnore	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeSortOrder	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeOldSortOrder	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeStatusline	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"$/;"	v
NERDTree	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTreeHijackNetrw	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeChDirOnTabSwitch	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeAddMenuItem	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddSubmenu	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeAddKeyMap	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeRender	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeFocus	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeCWD	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeAddPathFilter	nvim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
g:loaded_nerdtree_autoload	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
s:rootNERDTreePath	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand("<sfile>:p:h:h"))$/;"	v
nerdtree#version	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...)$/;"	f
nerdtree#slash	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash()$/;"	f
nerdtree#and	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#and(x,y)$/;"	f
nerdtree#checkForBrowse	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir)$/;"	f
reuseWin	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
nerdtree#completeBookmarks	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P)$/;"	f
nerdtree#compareNodes	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2)$/;"	f
nerdtree#compareNodesBySortKey	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodesBySortKey(n1, n2)$/;"	f
nerdtree#deprecated	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...)$/;"	f
nerdtree#exec	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll)$/;"	f
nerdtree#has_opt	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name)$/;"	f
nerdtree#loadClassFiles	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles()$/;"	f
nerdtree#postSourceActions	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions()$/;"	f
nerdtree#runningWindows	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows()$/;"	f
nerdtree#runningCygwin	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin()$/;"	f
nerdtree#echo	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg)$/;"	f
nerdtree#echoError	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg)$/;"	f
nerdtree#echoWarning	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg)$/;"	f
nerdtree#renderView	nvim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView()$/;"	f
g:loaded_nerdtree_ui_glue_autoload	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
nerdtree#ui_glue#createDefaultBindings	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings()$/;"	f
customOpenFile	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node)$/;"	f
customOpenDir	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node)$/;"	f
customOpenBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node)$/;"	f
initCustomOpenArgs	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs()$/;"	f
activateAll	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll()$/;"	f
activateDirNode	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...)$/;"	f
activateFileNode	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node)$/;"	f
activateBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm)$/;"	f
nerdtree#ui_glue#bookmarkNode	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...)$/;"	f
chCwd	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node)$/;"	f
chRoot	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node)$/;"	f
nerdtree#ui_glue#chRootCwd	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd()$/;"	f
nerdtree#ui_glue#clearBookmarks	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks)$/;"	f
closeChildren	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node)$/;"	f
closeCurrentDir	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node)$/;"	f
closeTreeWindow	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow()$/;"	f
deleteBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark)$/;"	f
displayHelp	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp()$/;"	f
findAndRevealPath	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr)$/;"	f
handleLeftClick	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick()$/;"	f
handleMiddleMouse	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse()$/;"	f
nerdtree#ui_glue#invokeKeyMap	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key)$/;"	f
jumpToFirstChild	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node)$/;"	f
jumpToLastChild	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node)$/;"	f
jumpToChild	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last)$/;"	f
jumpToParent	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node)$/;"	f
jumpToRoot	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot()$/;"	f
jumpToNextSibling	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node)$/;"	f
jumpToPrevSibling	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
jumpToSibling	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward)$/;"	f
nerdtree#ui_glue#openBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name)$/;"	f
openHSplit	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target)$/;"	f
openVSplit	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target)$/;"	f
openExplorer	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node)$/;"	f
openInNewTab	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target)$/;"	f
openInNewTabSilent	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target)$/;"	f
openNodeRecursively	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node)$/;"	f
previewBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark)$/;"	f
previewNodeCurrent	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node)$/;"	f
previewNodeHSplit	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node)$/;"	f
previewNodeVSplit	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node)$/;"	f
nerdtree#ui_glue#revealBookmark	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name)$/;"	f
refreshRoot	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot()$/;"	f
refreshCurrent	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node)$/;"	f
nerdtree#ui_glue#setupCommands	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands()$/;"	f
SID	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function s:SID()$/;"	f
showMenu	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node)$/;"	f
toggleIgnoreFilter	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom()$/;"	f
nerdtree#ui_glue#upDir	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState)$/;"	f
upDirCurrentRootOpen	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
upDirCurrentRootClosed	nvim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
s:Notifier	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
Notifier.AddListener	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
Notifier.NotifyListeners	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
Notifier.GetListenersMap	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
Notifier.GetListenersForEvent	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
g:NERDTreePathNotifier	nvim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
s:UI	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
g:NERDTreeUI	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
UI.centerView	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
UI._dumpHelp	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
UI.New	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
UI.getPath	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
UI.getLineNum	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
UI.getRootLineNum	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
UI.getShowBookmarks	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
UI.getShowFiles	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
UI.getShowHelp	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
UI.getShowHidden	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
UI._indentLevelFor	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
UI.IndentWid	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
UI.isIgnoreFilterEnabled	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
UI.isMinimal	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
UI.MarkupReg	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
UI._renderBookmarks	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
UI.restoreScreenState	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
UI.saveScreenState	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
UI.setShowHidden	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
UI._stripMarkup	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
UI.render	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
UI.renderViewSavingPosition	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
UI.toggleHelp	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
UI.toggleIgnoreFilter	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
UI.toggleShowBookmarks	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
UI.toggleShowFiles	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
UI.toggleShowHidden	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
UI.toggleZoom	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
UI.UpDirLine	nvim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:MenuItem	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
g:NERDTreeMenuItem	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
MenuItem.All	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	nvim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:Creator	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
g:NERDTreeCreator	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
Creator._bindMappings	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
Creator._broadcastInitEvent	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
Creator.BufNamePrefix	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
Creator.CreateTabTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
Creator.createTabTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
Creator.CreateWindowTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
Creator.createWindowTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
Creator._createNERDTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
Creator.CreateMirror	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
Creator.createMirror	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
Creator._createTreeWin	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
Creator._isBufHidden	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
Creator.New	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
Creator._nextBufferName	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
Creator._nextBufferNumber	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
Creator._pathForString	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
Creator._removeTreeBufForTab	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
Creator._setCommonBufOptions	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
Creator._setupStatusline	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
Creator._tabpagevar	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
Creator.ToggleTabTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
Creator.toggleTabTree	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
Creator._uniq	nvim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:NERDTree	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
g:NERDTree	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
NERDTree.AddPathFilter	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
NERDTree.changeRoot	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
NERDTree.Close	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
NERDTree.CloseIfQuitOnOpen	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CloseIfQuitOnOpen()$/;"	f
NERDTree.CursorToBookmarkTable	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
NERDTree.CursorToTreeWin	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin()$/;"	f
NERDTree.ExistsForBuf	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
NERDTree.ExistsForTab	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
NERDTree.ForCurrentBuf	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
NERDTree.ForCurrentTab	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
NERDTree.getRoot	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
NERDTree.GetWinNum	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
NERDTree.IsOpen	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
NERDTree.isTabTree	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
NERDTree.isWinTree	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
NERDTree.MustBeOpen	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
NERDTree.New	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
NERDTree.PathFilters	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
NERDTree.previousBuf	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
NERDTree.setPreviousBuf	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
NERDTree.render	nvim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:TreeDirNode	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
g:NERDTreeDirNode	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
TreeDirNode.AbsoluteTreeRoot	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.activate	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
TreeDirNode.addChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.displayString	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
TreeDirNode.findNode	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getCascade	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
TreeDirNode.getCascadeRoot	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
TreeDirNode.getChildCount	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildIndex	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getDirChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
TreeDirNode._glob	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
TreeDirNode.GetSelected	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.getVisibleChildCount	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.isCascadable	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
TreeDirNode._initChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode.New	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
TreeDirNode.open	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
TreeDirNode.openAlong	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
TreeDirNode.openExplorer	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode._openInNewTab	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
TreeDirNode.openRecursively	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.refreshFlags	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
TreeDirNode.refreshDirFlags	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
TreeDirNode.reveal	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
TreeDirNode.removeChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.sortChildren	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
TreeDirNode.transplantChild	nvim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:Bookmark	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
g:NERDTreeBookmark	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
Bookmark.activate	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
Bookmark.AddBookmark	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.Bookmarks	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.BookmarkExistsFor	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.CacheBookmarks	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.CompareBookmarksByName	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
Bookmark.ClearAll	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.delete	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.Edit	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
Bookmark.getNode	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetNodeForName	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
Bookmark.GetSelected	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.mustExist	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.New	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.open	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
Bookmark.openInNewTab	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.SortBookmarksList	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
Bookmark.str	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
Bookmark.ToRoot	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
Bookmark.validate	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
Bookmark.Write	nvim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Opener	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
g:NERDTreeOpener	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
Opener._bufInWindows	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
Opener._checkToCloseTree	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
Opener._firstUsableWindow	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
Opener._gotoTargetWin	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
Opener._isWindowUsable	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
Opener.New	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
Opener._newSplit	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
Opener._newVSplit	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
Opener.open	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
Opener._openFile	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
Opener._openDirectory	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
Opener._previousWindow	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
Opener._restoreCursorPos	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
Opener._reuseWindow	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
Opener._saveCursorPos	nvim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:FlagSet	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
g:NERDTreeFlagSet	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
FlagSet.addFlag	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
FlagSet.clearFlags	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
FlagSet._flagsForScope	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
FlagSet.New	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
FlagSet.removeFlag	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
FlagSet.renderToString	nvim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:KeyMap	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
g:NERDTreeKeyMap	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
s:keyMaps	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
KeyMap.All	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.Compare	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
KeyMap.FindFor	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
KeyMap.BindAll	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.bind	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
KeyMap.Remove	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
KeyMap.invoke	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
KeyMap.Invoke	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
KeyMap.Create	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.Add	nvim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:Event	nvim/plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
g:NERDTreeEvent	nvim/plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
Event.New	nvim/plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:Path	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
g:NERDTreePath	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
Path.AbsolutePathFor	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
Path.bookmarkNames	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
Path.addDelimiter	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
Path.changeToDir	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.Create	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.copy	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
Path.CopyingSupported	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.copyingWillOverwrite	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.createParentDirectories	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
Path.delete	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
Path.edit	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
Path.extractDriveLetter	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.exists	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
Path._escChars	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
Path.getDir	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
Path.getParent	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
Path.getLastPathComponent	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getSortOrderIndex	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path._splitChunks	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
Path.getSortKey	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
Path.isHiddenUnder	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
Path.isUnixHiddenFile	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
Path.isUnixHiddenPath	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
Path.ignore	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
Path._ignorePatternMatches	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
Path.isAncestor	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(path)$/;"	f
Path.isUnder	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.JoinPathStrings	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.equals	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
Path.New	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
Path.Slash	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Slash()$/;"	f
Path.Resolve	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
Path.readInfoFromDisk	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
Path.refreshFlags	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
Path.rename	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
Path._strForUI	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
Path._strForCd	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
Path._str	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
Path.strTrunk	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
Path.tabnr	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
Path.WinToUnixPath	nvim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:TreeFileNode	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
g:NERDTreeFileNode	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
TreeFileNode.activate	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
TreeFileNode.bookmark	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBookmarks	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
TreeFileNode.copy	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findSibling	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getNerdtree	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
TreeFileNode.GetRootForTab	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetSelected	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.isVisible	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.isRoot	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.New	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
TreeFileNode.open	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
TreeFileNode.openSplit	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.openInNewTab	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openExplorer	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
TreeFileNode.putCursorHere	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.refreshFlags	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
TreeFileNode.rename	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeFileNode._renderToString	nvim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:MenuController	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
g:NERDTreeMenuController	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
MenuController.New	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController.isMinimal	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
MenuController.showMenu	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuController._echoPrompt	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._current	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
MenuController._handleKeypress	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._allIndexesFor	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._nextIndexFor	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._setCmdheight	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController._saveOptions	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._restoreOptions	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._cursorDown	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	nvim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
g:loaded_nerdtree_fs_menu	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:NERDTreeAutoDeleteBuffer	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
inputPrompt	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
promptToDelBuffer	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
renameBuffer	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
NERDTreeAddNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeMoveNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeDeleteNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeListNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeCopyNode	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeQuickLook	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRevealInFinder	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeExecuteFile	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeRevealFileLinux	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeExecuteFileLinux	nvim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeVCS	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
NERDTreeToggleVCS	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
CreateTabTreeVCS	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
ToggleTabTreeVCS	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
FindParentVCSRoot	nvim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
g:loaded_nerdtree_exec_menuitem	nvim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
NERDTreeExecFileActive	nvim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecFile	nvim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
b:did_indent	nvim/plugged/html5.vim/indent/html.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	nvim/plugged/html5.vim/indent/html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:hi_indent	nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
s:cpo_save	nvim/plugged/html5.vim/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
HtmlIndent_CheckUserSettings	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
b:hi_lasttick	nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_newstate	nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_newstate = {}$/;"	v
s:countonly	nvim/plugged/html5.vim/indent/html.vim	/^let s:countonly = 0$/;"	v
s:indent_tags	nvim/plugged/html5.vim/indent/html.vim	/^let s:indent_tags = {}$/;"	v
s:endtags	nvim/plugged/html5.vim/indent/html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
AddITags	nvim/plugged/html5.vim/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
RemoveITags	nvim/plugged/html5.vim/indent/html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
AddBlockTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
HtmlIndent_IsOpenTag	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
get_tag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:get_tag(tagname)$/;"	f
CountITags	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CountITags(text)$/;"	f
CountTagsAndState	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
CheckTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
CheckBlockTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
CheckCustomTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
GetScriptType	nvim/plugged/html5.vim/indent/html.vim	/^func! s:GetScriptType(str)$/;"	f
FreshState	nvim/plugged/html5.vim/indent/html.vim	/^func! s:FreshState(lnum)$/;"	f
Alien2	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien2()$/;"	f
Alien3	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien3()$/;"	f
Alien4	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien4()$/;"	f
CSSIndent	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CSSIndent()$/;"	f
CssUnfinished	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
CssFirstUnfinished	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
CssPrevNonComment	nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
HtmlIndent_CountBraces	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
Alien5	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien5()$/;"	f
Alien6	nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien6()$/;"	f
HtmlIndent_FindTagStart	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_FindStartTag	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindTagEnd	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
InsideTag	nvim/plugged/html5.vim/indent/html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
HtmlIndent	nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent()$/;"	f
VERSION	nvim/plugged/html5.vim/config.mk	/^VERSION=0.26$/;"	m
RECORD_FILE	nvim/plugged/html5.vim/Makefile	/^RECORD_FILE=.record$/;"	m
PWD	nvim/plugged/html5.vim/Makefile	/^PWD=`pwd`$/;"	m
README_FILES	nvim/plugged/html5.vim/Makefile	/^README_FILES=`ls -1 | grep -i readme`$/;"	m
WGET_OPT	nvim/plugged/html5.vim/Makefile	/^WGET_OPT=-c -nv$/;"	m
CURL_OPT	nvim/plugged/html5.vim/Makefile	/^CURL_OPT=$/;"	m
RECORD_SCRIPT	nvim/plugged/html5.vim/Makefile	/^RECORD_SCRIPT=.mkrecord$/;"	m
TAR	nvim/plugged/html5.vim/Makefile	/^TAR=tar czvf$/;"	m
GIT_SOURCES	nvim/plugged/html5.vim/Makefile	/^GIT_SOURCES=$/;"	m
record_file	nvim/plugged/html5.vim/Makefile	/^record_file = \\$/;"	m
GIT_SOURCES	nvim/plugged/html5.vim/Makefile	/^GIT_SOURCES=$/;"	m
DEPEND_DIR	nvim/plugged/html5.vim/Makefile	/^DEPEND_DIR=\/tmp\/vim-deps$/;"	m
install_git_source	nvim/plugged/html5.vim/Makefile	/^install_git_source = \\$/;"	m
install_file	nvim/plugged/html5.vim/Makefile	/^install_file = \\$/;"	m
link_file	nvim/plugged/html5.vim/Makefile	/^link_file = \\$/;"	m
unlink_file	nvim/plugged/html5.vim/Makefile	/^unlink_file = \\$/;"	m
fetch_url	nvim/plugged/html5.vim/Makefile	/^fetch_url = \\$/;"	m
install_source	nvim/plugged/html5.vim/Makefile	/^install_source = \\$/;"	m
fetch_github	nvim/plugged/html5.vim/Makefile	/^fetch_github = \\$/;"	m
fetch_local	nvim/plugged/html5.vim/Makefile	/^fetch_local = @cp -v $(1) $(2) \\$/;"	m
dep_from_git	nvim/plugged/html5.vim/Makefile	/^dep_from_git = \\$/;"	m
dep_from_svn	nvim/plugged/html5.vim/Makefile	/^dep_from_svn = \\$/;"	m
NAME	nvim/plugged/html5.vim/Makefile	/^NAME=`basename \\`pwd\\``$/;"	m
VERSION	nvim/plugged/html5.vim/Makefile	/^VERSION=0.1$/;"	m
DIRS	nvim/plugged/html5.vim/Makefile	/^DIRS=`ls -1F | grep \/ | sed -e 's\/\\\/\/\/'`$/;"	m
VIMRUNTIME	nvim/plugged/html5.vim/Makefile	/^VIMRUNTIME=~\/.vim$/;"	m
FILES	nvim/plugged/html5.vim/Makefile	/^FILES=`ls -1 | grep '.vim$$'`$/;"	m
MKFILES	nvim/plugged/html5.vim/Makefile	/^MKFILES=Makefile `ls -1 | grep '.mk$$'`$/;"	m
SHELL	nvim/plugged/html5.vim/Makefile	/^SHELL=bash$/;"	m
CONFIG_FILE	nvim/plugged/html5.vim/Makefile	/^CONFIG_FILE=config.mk$/;"	m
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role = {}$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes = {}$/;"	v
default_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let default_role = {}$/;"	v
widget_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let widget_role = [$/;"	v
document_structure	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let document_structure = [$/;"	v
landmark_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let landmark_role = [$/;"	v
dpub_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let dpub_role = [$/;"	v
graphic_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let graphic_role = [$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(widget_role, document_structure)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, landmark_role)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, dpub_role)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, graphic_role)$/;"	v
global_states_and_properties	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let global_states_and_properties = {$/;"	v
widget_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let widget_attributes = {$/;"	v
live_region_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let live_region_attributes = {$/;"	v
drag_and_drop_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let drag_and_drop_attributes = {$/;"	v
relationship_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let relationship_attributes = {$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = global_states_and_properties$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, widget_attributes)$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, live_region_attributes)$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, drag_and_drop_attributes)$/;"	v
aria_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, relationship_attributes)$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['roletype'] = ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['default'] = abstract_role['roletype']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['structure'] = abstract_role['roletype']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['widget'] = abstract_role['roletype']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['window'] = abstract_role['roletype'] + ['aria-expanded']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['composite'] = abstract_role['widget'] + ['aria-activedescendant']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['input'] = abstract_role['widget']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['section'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['sectionhead'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['group'] = abstract_role['section']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['select'] = abstract_role['composite'] + role_attributes['group'] + abstract_role['input']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['range'] = abstract_role['input'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['region'] = abstract_role['section']$/;"	v
abstract_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['landmark'] = role_attributes['region']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['list'] = role_attributes['region'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['listitem'] = abstract_role['section']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['dialog'] = abstract_role['window']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitem'] = abstract_role['input'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['checkbox'] = abstract_role['input'] + ['aria-checked'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitemcheckbox'] = role_attributes['menuitem'] + role_attributes['checkbox']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['option'] = abstract_role['input'] + ['aria-checked', 'aria-posinset', 'aria-selected', 'aria-setsize']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['radio'] = role_attributes['checkbox'] + role_attributes['option']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['directory'] = role_attributes['list'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['alert'] = role_attributes['region']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['alertdialog'] = role_attributes['alert'] + role_attributes['dialog']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['button'] = role_attributes['region'] + role_attributes['menuitemcheckbox']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['combobox'] = abstract_role['select'] + ['aria-expanded', 'aria-required'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['gridcell'] = abstract_role['section'] + abstract_role['widget']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['link'] = abstract_role['widget'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['log'] = role_attributes['region'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['marquee'] = role_attributes['region'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitemradio'] = role_attributes['menuitemcheckbox'] + role_attributes['radio']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['progressbar'] = abstract_role['widget'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['radiogroup'] = abstract_role['select'] + ['aria-required']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['scrollbar'] = abstract_role['range'] + ['aria-controls', 'aria-orientation', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['slider'] = abstract_role['range'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['spinbutton'] = abstract_role['composite'] + abstract_role['range'] + ['aria-required'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['status'] = abstract_role['composite'] + role_attributes['region']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tab'] = abstract_role['sectionhead'] + abstract_role['widget'] + ['aria-selected']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tabpanel'] = role_attributes['region']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['textbox'] = abstract_role['input'] + ['aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['searchbox'] = role_attributes['textbox']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['switch'] = role_attributes['checkbox']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['timer'] = role_attributes['status'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tooltip'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['treeitem'] = role_attributes['listitem'] + role_attributes['option']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['grid'] = abstract_role['composite'] + role_attributes['region'] + ['aria-level', 'aria-multiselectable', 'aria-readonly']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['listbox'] = role_attributes['list'] + abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menu'] =  role_attributes['list'] + abstract_role['select'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menubar'] = role_attributes['menu'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tablist'] = abstract_role['composite'] + role_attributes['directory']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['toolbar'] = role_attributes['group'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tree'] = abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['treegrid'] = role_attributes['grid'] + role_attributes['tree']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['document'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['article'] = role_attributes['document'] + role_attributes['region'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['cell'] = abstract_role['section'] + ['aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['columnheader'] = role_attributes['gridcell'] + abstract_role['sectionhead'] + ['aria-sort']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['definition'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['feed'] = role_attributes['list']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['figure'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['heading'] = abstract_role['sectionhead'] + ['aria-level'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['img'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['math'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['note'] = abstract_role['section'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['presentation'] = abstract_role['structure']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['none'] = role_attributes['presentation']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['row'] = role_attributes['group'] + ['aria-level', 'aria-selected']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['rowheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['separator'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['table'] = abstract_role['section'] + ['aria-colcount', 'aria-rowcount']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['term'] = abstract_role['section']$/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['application'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['banner'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['complementary'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['contentinfo'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['form'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['main'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['navigation'] = abstract_role['landmark'] $/;"	v
role_attributes	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['search'] = abstract_role['landmark']$/;"	v
aria_attributes_value	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes_value = {$/;"	v
default_role	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let default_role = {$/;"	v
g:xmldata_aria	nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let g:xmldata_aria = {$/;"	v
lang_tag	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let lang_tag = [$/;"	v
charset	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let charset = [$/;"	v
autofill_tokens	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let autofill_tokens = ['on', 'off', 'name', 'honorific-prefix', 'given-name', 'additional-name', 'family-name', 'honorific-suffix', 'nickname', 'organization-title', 'username', 'new-password', 'current-password', 'organization', 'street-address', 'address-line1', 'address-line2', 'address-line3', 'address-level4', 'address-level3', 'address-level2', 'address-level1', 'country', 'country-name', 'postal-code', 'cc-name', 'cc-given-name', 'cc-additional-name', 'cc-family-name', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc', 'cc-type', 'transaction-currency', 'transaction-amount', 'language', 'bday', 'bday-day', 'bday-month', 'bday-year', 'sex', 'url', 'photo', 'tel', 'tel-country-code', 'tel-national', 'tel-area-code', 'tel-local', 'tel-local-prefix', 'tel-local-suffix', 'tel-extension', 'email', 'impp']$/;"	v
core_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let core_attributes = {'accesskey': [], 'class': [], 'contenteditable': ['true', 'false', ''], 'contextmenu': [], 'dir': ['ltr', 'rtl'], 'draggable': ['true', 'false'], 'hidden': ['hidden', ''], 'id': [], 'is': [], 'lang': lang_tag, 'spellcheck': ['true', 'false', ''], 'style': [], 'tabindex': [], 'title': []}$/;"	v
xml_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let xml_attributes = {'xml:lang': lang_tag, 'xml:space': ['preserve'], 'xml:base': [], 'xmlns': ['http:\/\/www.w3.org\/1999\/xhtml', 'http:\/\/www.w3.org\/1998\/Math\/MathML', 'http:\/\/www.w3.org\/2000\/svg', 'http:\/\/www.w3.org\/1999\/xlink']}$/;"	v
body_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let body_attributes = {}$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let global_attributes = extend(core_attributes, xml_attributes)$/;"	v
g:html5_event_handler_attributes_complete	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_event_handler_attributes_complete = 1$/;"	v
attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let attributes_value = {$/;"	v
event_handler_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let event_handler_attributes = {'onabort': [], 'onblur': [], 'oncanplay': [], 'oncanplaythrough': [], 'onchange': [], 'onclick': [], 'oncontextmenu': [], 'ondblclick': [], 'ondrag': [], 'ondragend': [], 'ondragenter': [], 'ondragleave': [], 'ondragover': [], 'ondragstart': [], 'ondrop': [], 'ondurationchange': [], 'onemptied': [], 'onended': [], 'onerror': [], 'onfocus': [], 'onformchange': [], 'onforminput': [], 'oninput': [], 'oninvalid': [], 'onkeydown': [], 'onkeypress': [], 'onkeyup': [], 'onload': [], 'onloadeddata': [], 'onloadedmetadata': [], 'onloadstart': [], 'onmousedown': [], 'onmousemove': [], 'onmouseout': [], 'onmouseover': [], 'onmouseup': [], 'onmousewheel': [], 'onpause': [], 'onplay': [], 'onplaying': [], 'onprogress': [], 'onratechange': [], 'onreadystatechange': [], 'onscroll': [], 'onseeked': [], 'onseeking': [], 'onselect': [], 'onshow': [], 'onstalled': [], 'onsubmit': [], 'onsuspend': [], 'ontimeupdate': [], 'onvolumechange': [], 'onwaiting': [], 'onselectstart': [], 'onselectchange': []}$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, event_handler_attributes)$/;"	v
body_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let body_attributes = {'onafterprint': [], 'onbeforeprint': [], 'onbeforeunload': [], 'onblur': [], 'onerror': [], 'onfocus': [], 'onhashchange': [], 'onload': [], 'onmessage': [], 'onoffline': [], 'ononline': [], 'onpopstate': [], 'onredo': [], 'onresize': [], 'onstorage': [], 'onundo': [], 'onunload': []}$/;"	v
event_attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let event_attributes_value = {$/;"	v
attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, event_attributes_value)$/;"	v
g:html5_rdfa_attributes_complete	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_rdfa_attributes_complete = 1$/;"	v
relrev	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let relrev = ['chapter', 'contents', 'copyright', 'first', 'glossary', 'help', 'icon', 'index', 'last', 'license', 'meta', 'next', 'p3pv1', 'prev', 'role', 'section', 'stylesheet', 'subsection', 'start', 'top', 'up']$/;"	v
rdfa_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let rdfa_attributes = {'about': [], 'content': [], 'datatype': [], 'prefix': [], 'profile': [], 'property': [], 'resource': [], 'rel': relrev, 'rev': relrev, 'typeof': [], 'vocab': []}$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, rdfa_attributes)$/;"	v
rdfa_attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let rdfa_attributes_value = {$/;"	v
attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, rdfa_attributes_value)$/;"	v
g:html5_microdata_attributes_complete	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_microdata_attributes_complete = 1$/;"	v
microdata_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let microdata_attributes = {'itemid': [], 'itemscope': ['itemscope', ''], 'itemtype': [], 'itemprop': [], 'itemref': []}$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, microdata_attributes)$/;"	v
microdata_attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let microdata_attributes_value = {$/;"	v
attributes_value	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, microdata_attributes_value)$/;"	v
g:html5_aria_attributes_complete	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_aria_attributes_complete = 1$/;"	v
widget_role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let widget_role = ['alert', 'alertdialog', 'button', 'checkbox', 'combobox', 'dialog', 'gridcell', 'link', 'log', 'marquee', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'searchbox', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'tabpanel', 'textbox', 'timer', 'tooltip', 'treeitem', 'combobox', 'grid', 'listbox', 'menu', 'menubar', 'radiogroup', 'tablist', 'tree', 'treegrid']$/;"	v
document_structure	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let document_structure = ['article', 'cell', 'columnheader', 'definition', 'directory', 'document', 'feed', 'figure', 'group', 'heading', 'img', 'list', 'listitem', 'math', 'none', 'note', 'presentation', 'region', 'row', 'rowheader', 'separator', 'table', 'term']$/;"	v
landmark_role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let landmark_role = ['application', 'banner', 'complementary', 'contentinfo', 'form', 'main', 'navigation', 'search']$/;"	v
dpub_role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let dpub_role = ['dpub-abstract', 'dpub-afterword', 'dpub-appendix', 'dpub-biblioentry', 'dpub-bibliography', 'dpub-biblioref', 'dpub-chapter', 'dpub-cover', 'dpub-epilogue', 'dpub-footnote', 'dpub-footnotes', 'dpub-foreword', 'dpub-glossary', 'dpub-glossdef', 'dpub-glossref', 'dpub-glossterm', 'dpub-index', 'dpub-locator', 'dpub-noteref', 'dpub-notice', 'dpub-pagebreak', 'dpub-pagelist', 'dpub-part', 'dpub-preface', 'dpub-prologue', 'dpub-pullquote', 'dpub-qna', 'dpub-subtitle', 'dpub-tip', 'dpub-title', 'dpub-toc']$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(widget_role, document_structure)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(role, landmark_role)$/;"	v
role	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(role, dpub_role)$/;"	v
global_attributes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, {'role': role})$/;"	v
phrasing_elements	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let phrasing_elements = ['a', 'em', 'strong', 'small', 'mark', 'abbr', 'dfn', 'i', 'b', 'u', 'code', 'var', 'samp', 'kbd', 'sup', 'sub', 'q', 'cite', 'span', 'bdo', 'bdi', 'br', 'wbr', 'ins', 'del', 'img', 'picture', 'embed', 'object', 'iframe', 'map', 'area', 'script', 'noscript', 'ruby', 'video', 'audio', 'input', 'textarea', 'select', 'button', 'label', 'output', 'datalist', 'keygen', 'progress', 'command', 'canvas', 'time', 'meter', 'data', 'content', 'shadow']$/;"	v
metadata_elements	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let metadata_elements = ['link', 'style', 'meta', 'script', 'noscript', 'command']$/;"	v
flow_elements	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let flow_elements = phrasing_elements + ['p', 'hr', 'pre', 'ul', 'ol', 'dl', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'address', 'blockquote', 'ins', 'del', 'element', 'object', 'main', 'map', 'noscript', 'section', 'nav', 'article', 'aside', 'header', 'footer', 'video', 'audio', 'figure', 'table', 'template', 'form', 'fieldset', 'menu', 'canvas', 'details']$/;"	v
linktypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linktypes = ['alternate', 'author', 'bookmark', 'dns-prefetch', 'external', 'help', 'icon', 'license', 'next', 'nofollow', 'noreferrer', 'noopener', 'pingback', 'preconnect', 'prefetch', 'preload', 'prerender', 'prev', 'search', 'stylesheet', 'tag']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linktypes$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['manifest']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['canonical']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['import']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['webmention']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['search']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['sitemap']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['amphtml']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['apple-touch-icon', 'apple-touch-icon-precomposed', 'apple-touch-startup-image']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['chrome-webstore-item']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['hub']$/;"	v
linkreltypes	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['pgpkey']$/;"	v
abutton_dec	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let abutton_dec = 'details\\\\|embed\\\\|iframe\\\\|keygen\\\\|label\\\\|menu\\\\|select\\\\|textarea'$/;"	v
crossorigin	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let crossorigin = ['anonymous', 'use-credentials']$/;"	v
referrerpolicy	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let referrerpolicy = ['no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url']$/;"	v
g:xmldata_html5	nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let g:xmldata_html5 = {$/;"	v
g:aria_attributes_complete	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^  let g:aria_attributes_complete = 1$/;"	v
htmlcomplete#DetectOmniFlavor	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#CompleteTags	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#LoadAria	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadAria() " {{{$/;"	f
htmlcomplete#LoadData	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
htmlcomplete#CheckDoctype	nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
g:colors_name	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:colors_name='gruvbox'$/;"	v
g:gruvbox_bold	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_bold=1$/;"	v
g:gruvbox_italic	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let g:gruvbox_italic=1$/;"	v
g:gruvbox_italic	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let g:gruvbox_italic=0$/;"	v
g:gruvbox_undercurl	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_undercurl=1$/;"	v
g:gruvbox_underline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_underline=1$/;"	v
g:gruvbox_inverse	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_inverse=1$/;"	v
g:gruvbox_guisp_fallback	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_guisp_fallback='NONE'$/;"	v
g:gruvbox_improved_strings	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_improved_strings=0$/;"	v
g:gruvbox_improved_warnings	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_improved_warnings=0$/;"	v
g:gruvbox_termcolors	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_termcolors=256$/;"	v
g:gruvbox_invert_indent_guides	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_invert_indent_guides=0$/;"	v
g:gruvbox_contrast_dark	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_contrast_dark='medium'$/;"	v
g:gruvbox_contrast_light	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_contrast_light='medium'$/;"	v
s:is_dark	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:is_dark=(&background == 'dark')$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb = {}$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0_hard  = ['#1d2021', 234]     " 29-32-33$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0       = ['#282828', 235]     " 40-40-40$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0_soft  = ['#32302f', 236]     " 50-48-47$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark1       = ['#3c3836', 237]     " 60-56-54$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark2       = ['#504945', 239]     " 80-73-69$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark3       = ['#665c54', 241]     " 102-92-84$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark4       = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark4_256   = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray_245    = ['#928374', 245]     " 146-131-116$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray_244    = ['#928374', 244]     " 146-131-116$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0_hard = ['#f9f5d7', 230]     " 249-245-215$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0      = ['#fbf1c7', 229]     " 253-244-193$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0_soft = ['#f2e5bc', 228]     " 242-229-188$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light1      = ['#ebdbb2', 223]     " 235-219-178$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light2      = ['#d5c4a1', 250]     " 213-196-161$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light3      = ['#bdae93', 248]     " 189-174-147$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light4      = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light4_256  = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_red     = ['#fb4934', 167]     " 251-73-52$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_green   = ['#b8bb26', 142]     " 184-187-38$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_yellow  = ['#fabd2f', 214]     " 250-189-47$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_blue    = ['#83a598', 109]     " 131-165-152$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_purple  = ['#d3869b', 175]     " 211-134-155$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_aqua    = ['#8ec07c', 108]     " 142-192-124$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_orange  = ['#fe8019', 208]     " 254-128-25$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_red    = ['#cc241d', 124]     " 204-36-29$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_green  = ['#98971a', 106]     " 152-151-26$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_yellow = ['#d79921', 172]     " 215-153-33$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_blue   = ['#458588', 66]      " 69-133-136$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_purple = ['#b16286', 132]     " 177-98-134$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_aqua   = ['#689d6a', 72]      " 104-157-106$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_orange = ['#d65d0e', 166]     " 214-93-14$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_red      = ['#9d0006', 88]      " 157-0-6$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_green    = ['#79740e', 100]     " 121-116-14$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_yellow   = ['#b57614', 136]     " 181-118-20$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_blue     = ['#076678', 24]      " 7-102-120$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_purple   = ['#8f3f71', 96]      " 143-63-113$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_aqua     = ['#427b58', 66]      " 66-123-88$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_orange   = ['#af3a03', 130]     " 175-58-3$/;"	v
s:bold	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:bold = 'bold,'$/;"	v
s:bold	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bold = ''$/;"	v
s:italic	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italic = 'italic,'$/;"	v
s:italic	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:italic = ''$/;"	v
s:underline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:underline = 'underline,'$/;"	v
s:underline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:underline = ''$/;"	v
s:undercurl	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:undercurl = 'undercurl,'$/;"	v
s:undercurl	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:undercurl = ''$/;"	v
s:inverse	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:inverse = 'inverse,'$/;"	v
s:inverse	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:inverse = ''$/;"	v
s:vim_bg	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vim_bg = ['bg', 'bg']$/;"	v
s:vim_fg	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vim_fg = ['fg', 'fg']$/;"	v
s:none	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:none = ['NONE', 'NONE']$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0  = s:gb.dark0$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_soft$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_hard$/;"	v
s:bg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg1  = s:gb.dark1$/;"	v
s:bg2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg2  = s:gb.dark2$/;"	v
s:bg3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg3  = s:gb.dark3$/;"	v
s:bg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg4  = s:gb.dark4$/;"	v
s:gray	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_245$/;"	v
s:fg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg0 = s:gb.light0$/;"	v
s:fg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1 = s:gb.light1$/;"	v
s:fg2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg2 = s:gb.light2$/;"	v
s:fg3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg3 = s:gb.light3$/;"	v
s:fg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4 = s:gb.light4$/;"	v
s:fg4_256	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.light4_256$/;"	v
s:red	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red    = s:gb.bright_red$/;"	v
s:green	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green  = s:gb.bright_green$/;"	v
s:yellow	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow = s:gb.bright_yellow$/;"	v
s:blue	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue   = s:gb.bright_blue$/;"	v
s:purple	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple = s:gb.bright_purple$/;"	v
s:aqua	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua   = s:gb.bright_aqua$/;"	v
s:orange	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:orange = s:gb.bright_orange$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0  = s:gb.light0$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_soft$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_hard$/;"	v
s:bg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg1  = s:gb.light1$/;"	v
s:bg2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg2  = s:gb.light2$/;"	v
s:bg3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg3  = s:gb.light3$/;"	v
s:bg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg4  = s:gb.light4$/;"	v
s:gray	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_244$/;"	v
s:fg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg0 = s:gb.dark0$/;"	v
s:fg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1 = s:gb.dark1$/;"	v
s:fg2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg2 = s:gb.dark2$/;"	v
s:fg3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg3 = s:gb.dark3$/;"	v
s:fg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4 = s:gb.dark4$/;"	v
s:fg4_256	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.dark4_256$/;"	v
s:red	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red    = s:gb.faded_red$/;"	v
s:green	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green  = s:gb.faded_green$/;"	v
s:yellow	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow = s:gb.faded_yellow$/;"	v
s:blue	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue   = s:gb.faded_blue$/;"	v
s:purple	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple = s:gb.faded_purple$/;"	v
s:aqua	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua   = s:gb.faded_aqua$/;"	v
s:orange	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:orange = s:gb.faded_orange$/;"	v
s:bg0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0[1]    = 0$/;"	v
s:fg4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4[1]    = 7$/;"	v
s:gray	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray[1]   = 8$/;"	v
s:red	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red[1]    = 9$/;"	v
s:green	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green[1]  = 10$/;"	v
s:yellow	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow[1] = 11$/;"	v
s:blue	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue[1]   = 12$/;"	v
s:purple	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple[1] = 13$/;"	v
s:aqua	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua[1]   = 14$/;"	v
s:fg1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1[1]    = 15$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg0 = s:bg0$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg1 = s:bg1$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg2 = s:bg2$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg3 = s:bg3$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg4 = s:bg4$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray = s:gray$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg0 = s:fg0$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg1 = s:fg1$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg2 = s:fg2$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg3 = s:fg3$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg4 = s:fg4$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg4_256 = s:fg4_256$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.red    = s:red$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.green  = s:green$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.yellow = s:yellow$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.blue   = s:blue$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.purple = s:purple$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.aqua   = s:aqua$/;"	v
s:gb	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.orange = s:orange$/;"	v
g:terminal_color_0	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_0 = s:bg0[0]$/;"	v
g:terminal_color_8	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_8 = s:gray[0]$/;"	v
g:terminal_color_1	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_1 = s:gb.neutral_red[0]$/;"	v
g:terminal_color_9	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_9 = s:red[0]$/;"	v
g:terminal_color_2	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_2 = s:gb.neutral_green[0]$/;"	v
g:terminal_color_10	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_10 = s:green[0]$/;"	v
g:terminal_color_3	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_3 = s:gb.neutral_yellow[0]$/;"	v
g:terminal_color_11	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_11 = s:yellow[0]$/;"	v
g:terminal_color_4	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_4 = s:gb.neutral_blue[0]$/;"	v
g:terminal_color_12	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_12 = s:blue[0]$/;"	v
g:terminal_color_5	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_5 = s:gb.neutral_purple[0]$/;"	v
g:terminal_color_13	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_13 = s:purple[0]$/;"	v
g:terminal_color_6	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_6 = s:gb.neutral_aqua[0]$/;"	v
g:terminal_color_14	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_14 = s:aqua[0]$/;"	v
g:terminal_color_7	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_7 = s:fg4[0]$/;"	v
g:terminal_color_15	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_15 = s:fg1[0]$/;"	v
s:hls_cursor	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:hls_cursor = s:orange$/;"	v
s:hls_cursor	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:hls_cursor = get(s:gb, g:gruvbox_hls_cursor)$/;"	v
s:number_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:number_column = s:none$/;"	v
s:number_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:number_column = get(s:gb, g:gruvbox_number_column)$/;"	v
s:sign_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:sign_column = s:bg1$/;"	v
s:sign_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:sign_column = s:number_column$/;"	v
g:gitgutter_override_sign_column_highlight	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gitgutter_override_sign_column_highlight = 0$/;"	v
s:sign_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:sign_column = get(s:gb, g:gruvbox_sign_column)$/;"	v
s:color_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:color_column = s:bg1$/;"	v
s:color_column	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:color_column = get(s:gb, g:gruvbox_color_column)$/;"	v
s:vert_split	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vert_split = s:bg0$/;"	v
s:vert_split	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:vert_split = get(s:gb, g:gruvbox_vert_split)$/;"	v
s:invert_signs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_signs = ''$/;"	v
s:invert_signs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_signs = s:inverse$/;"	v
s:invert_selection	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_selection = s:inverse$/;"	v
s:invert_selection	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_selection = ''$/;"	v
s:invert_tabline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_tabline = ''$/;"	v
s:invert_tabline	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_tabline = s:inverse$/;"	v
s:italicize_comments	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italicize_comments = s:italic$/;"	v
s:italicize_comments	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:italicize_comments = ''$/;"	v
s:italicize_strings	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italicize_strings = ''$/;"	v
s:italicize_strings	nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:italicize_strings = s:italic$/;"	v
HL	nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! s:HL(group, fg, ...)$/;"	f
g:indent_guides_auto_colors	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indent_guides_auto_colors = 0$/;"	v
g:indentLine_color_term	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indentLine_color_term = s:bg2[1]$/;"	v
g:indentLine_color_gui	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indentLine_color_gui = s:bg2[0]$/;"	v
g:rbpt_colorpairs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:rbpt_colorpairs =$/;"	v
g:rainbow_guifgs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_ctermfgs	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_conf	nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:niji_dark_colours	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:vimshell_escape_colors	nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:vimshell_escape_colors = [$/;"	v
GruvboxHlsShowCursor	nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! GruvboxHlsShowCursor()$/;"	f
GruvboxHlsHideCursor	nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! GruvboxHlsHideCursor()$/;"	f
getGruvColor	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^function! s:getGruvColor(group)$/;"	f
s:bg0	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg0  = s:getGruvColor('GruvboxBg0')$/;"	v
s:bg1	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg1  = s:getGruvColor('GruvboxBg1')$/;"	v
s:bg2	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg2  = s:getGruvColor('GruvboxBg2')$/;"	v
s:bg4	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg4  = s:getGruvColor('GruvboxBg4')$/;"	v
s:fg1	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:fg1  = s:getGruvColor('GruvboxFg1')$/;"	v
s:fg4	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:fg4  = s:getGruvColor('GruvboxFg4')$/;"	v
s:yellow	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:yellow = s:getGruvColor('GruvboxYellow')$/;"	v
s:blue	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:blue   = s:getGruvColor('GruvboxBlue')$/;"	v
s:aqua	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:aqua   = s:getGruvColor('GruvboxAqua')$/;"	v
s:orange	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:orange = s:getGruvColor('GruvboxOrange')$/;"	v
s:green	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:green = s:getGruvColor('GruvboxGreen')$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p = {'normal':{}, 'inactive':{}, 'insert':{}, 'replace':{}, 'visual':{}, 'tabline':{}, 'terminal':{}}$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.left = [ [ s:bg0, s:fg4, 'bold' ], [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.right = [ [ s:bg0, s:fg4 ], [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.right = [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.left =  [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.middle = [ [ s:bg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.left = [ [ s:bg0, s:blue, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.right = [ [ s:bg0, s:blue ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.left = [ [ s:bg0, s:green, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.right = [ [ s:bg0, s:green ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.left = [ [ s:bg0, s:aqua, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.right = [ [ s:bg0, s:aqua ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.left = [ [ s:bg0, s:orange, 'bold' ], [ s:bg0, s:bg4 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.right = [ [ s:bg0, s:orange ], [ s:bg0, s:bg4 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.left = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.tabsel = [ [ s:bg0, s:fg4 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.middle = [ [ s:bg0, s:bg0 ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.right = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.error = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.warning = [ [ s:bg2, s:yellow ] ]$/;"	v
g:lightline#colorscheme#gruvbox#palette	nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let g:lightline#colorscheme#gruvbox#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:airline#themes#gruvbox#palette	nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^let g:airline#themes#gruvbox#palette = {}$/;"	v
airline#themes#gruvbox#refresh	nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^function! airline#themes#gruvbox#refresh()$/;"	f
gruvbox#invert_signs_toggle	nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#invert_signs_toggle()$/;"	f
gruvbox#hls_show	nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_show()$/;"	f
gruvbox#hls_hide	nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_hide()$/;"	f
gruvbox#hls_toggle	nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_toggle()$/;"	f
g:loaded_fugitive_gitlab	nvim/plugged/fugitive-gitlab.vim/plugin/gitlab.vim	/^let g:loaded_fugitive_gitlab = 1$/;"	v
g:fugitive_browse_handlers	nvim/plugged/fugitive-gitlab.vim/plugin/gitlab.vim	/^    let g:fugitive_browse_handlers = []$/;"	v
gitlab	nvim/plugged/fugitive-gitlab.vim/plugin/gitlab.vim	/^augroup gitlab$/;"	a
g:autoloaded_fugitive_gitlab	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^let g:autoloaded_fugitive_gitlab = 1$/;"	v
gitlab#fugitive_handler	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#fugitive_handler(opts, ...)$/;"	f
gitlab#homepage_for_remote	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#homepage_for_remote(remote) abort$/;"	f
gitlab#json_parse	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#json_parse(string) abort$/;"	f
gitlab#json_generate	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#json_generate(object) abort$/;"	f
gitlab_api_key	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! s:gitlab_api_key(root) abort$/;"	f
gitlab#api_paths_for_remote	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#api_paths_for_remote(remote) abort$/;"	f
gitlab_project_from_repo	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! s:gitlab_project_from_repo(...) abort$/;"	f
gitlab#request	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#request(domain, path, ...) abort$/;"	f
gitlab#issues	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#issues(query, type, ...) abort$/;"	f
gitlab#members	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#members(query, type, ...) abort$/;"	f
gitlab#contributors	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#contributors(...) abort$/;"	f
s:reference	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^let s:reference = '\\<\\%(\\c\\%(clos\\|resolv\\|referenc\\)e[sd]\\=\\|\\cfix\\%(e[sd]\\)\\=\\)\\>'$/;"	v
gitlab#omnifunc	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! gitlab#omnifunc(findstart, base) abort$/;"	f
throw	nvim/plugged/fugitive-gitlab.vim/autoload/gitlab.vim	/^function! s:throw(string) abort$/;"	f
num	nvim/plugged/vim-gitgutter/unplace.vim	/^let num = 500$/;"	v
start	nvim/plugged/vim-gitgutter/unplace.vim	/^let start = reltime()$/;"	v
elapsed	nvim/plugged/vim-gitgutter/unplace.vim	/^let elapsed = reltime(start)$/;"	v
s:current_dir	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:current_dir = expand('%:p:h')$/;"	v
s:test_repo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:test_repo   = s:current_dir.'\/test-repo'$/;"	v
s:bufnr	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:bufnr       = bufnr('')$/;"	v
assert_list_of_dicts	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_list_of_dicts(expected, actual)$/;"	f
assert_signs	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_signs(expected, filename)$/;"	f
git_diff	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff(...)$/;"	f
git_diff_staged	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff_staged(...)$/;"	f
trigger_gitgutter	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:trigger_gitgutter()$/;"	f
SetUp	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function SetUp()$/;"	f
TearDown	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function TearDown()$/;"	f
Test_add_lines	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines()$/;"	f
Test_add_lines_fish	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines_fish()$/;"	f
Test_modify_lines	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_modify_lines()$/;"	f
Test_remove_lines	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_lines()$/;"	f
Test_remove_first_lines	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_first_lines()$/;"	f
Test_priority	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_priority()$/;"	f
Test_overlapping_hunks	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunks()$/;"	f
Test_edit_file_with_same_name_as_a_branch	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_edit_file_with_same_name_as_a_branch()$/;"	f
Test_file_added_to_git	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_added_to_git()$/;"	f
Test_filename_with_equals	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_equals()$/;"	f
Test_filename_with_square_brackets	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_square_brackets()$/;"	f
Test_filename_leading_dash	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_leading_dash()$/;"	f
Test_filename_umlaut	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_umlaut()$/;"	f
Test_follow_symlink	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_follow_symlink()$/;"	f
Test_keep_alt	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_alt()$/;"	f
Test_keep_modified	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_modified()$/;"	f
Test_keep_op_marks	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_op_marks()$/;"	f
Test_no_modifications	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_no_modifications()$/;"	f
Test_orphaned_signs	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_orphaned_signs()$/;"	f
Test_untracked_file_outside_repo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_outside_repo()$/;"	f
Test_untracked_file_within_repo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_within_repo()$/;"	f
Test_untracked_file_square_brackets_within_repo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_square_brackets_within_repo()$/;"	f
Test_hunk_outside_noop	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_outside_noop()$/;"	f
Test_preview	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview()$/;"	f
Test_preview_dos	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview_dos()$/;"	f
Test_hunk_stage	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage()$/;"	f
Test_hunk_stage_nearby_hunk	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_nearby_hunk()$/;"	f
Test_hunk_stage_partial_visual_added	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_visual_added()$/;"	f
Test_hunk_stage_partial_cmd_added	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_cmd_added()$/;"	f
Test_hunk_stage_partial_preview_added	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added()$/;"	f
Test_hunk_stage_preview_write	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_preview_write()$/;"	f
Test_hunk_stage_partial_preview_added_removed	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added_removed()$/;"	f
Test_hunk_undo	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo()$/;"	f
Test_hunk_undo_dos	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo_dos()$/;"	f
Test_undo_nearby_hunk	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_undo_nearby_hunk()$/;"	f
Test_overlapping_hunk_op	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunk_op()$/;"	f
gg	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  normal gg$/;"	m
expected	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 2, 'name': 'GitGutterLineRemoved'}]$/;"	v
gg	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  normal gg$/;"	m
expected	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 1, 'name': 'GitGutterLineRemovedFirstLine'}]$/;"	v
Test_write_option	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_write_option()$/;"	f
Test_inner_text_object	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_inner_text_object()$/;"	f
Test_around_text_object	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_around_text_object()$/;"	f
Test_user_autocmd	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_user_autocmd()$/;"	f
Test_fix_file_references	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_fix_file_references()$/;"	f
Test_encoding	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_encoding()$/;"	f
Test_empty_file	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_empty_file()$/;"	f
Test_quickfix	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_quickfix()$/;"	f
Test_common_prefix	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_prefix()$/;"	f
Test_common_suffix	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_suffix()$/;"	f
Test_diff_highlight	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_diff_highlight()$/;"	f
Test_lcs	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_lcs()$/;"	f
Test_split	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_split()$/;"	f
Test_foldtext	nvim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_foldtext()$/;"	f
RunTest	nvim/plugged/vim-gitgutter/test/runner.vim	/^function RunTest(test)$/;"	f
Log	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Log(msg)$/;"	f
Exception	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Exception()$/;"	f
Shuffle	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Shuffle(list)$/;"	f
Random	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Random(min, max)$/;"	f
FriendlyName	nvim/plugged/vim-gitgutter/test/runner.vim	/^function FriendlyName(test_name)$/;"	f
Align	nvim/plugged/vim-gitgutter/test/runner.vim	/^function Align(left, right)$/;"	f
g:testname	nvim/plugged/vim-gitgutter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
s:errored	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:errored = 0$/;"	v
s:done	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:done = 0$/;"	v
s:fail	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:fail = 0$/;"	v
s:errors	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:errors = 0$/;"	v
s:messages	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:messages = []$/;"	v
s:indent	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:indent = ''$/;"	v
s:errors	nvim/plugged/vim-gitgutter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:tests	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:tests	nvim/plugged/vim-gitgutter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:indent	nvim/plugged/vim-gitgutter/test/runner.vim	/^let s:indent = max(map(copy(s:tests), {_, val -> len(FriendlyName(val))}))$/;"	v
s:done	nvim/plugged/vim-gitgutter/test/runner.vim	/^  let s:done += 1$/;"	v
friendly_name	nvim/plugged/vim-gitgutter/test/runner.vim	/^  let friendly_name = FriendlyName(test)$/;"	v
s:errors	nvim/plugged/vim-gitgutter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errored	nvim/plugged/vim-gitgutter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:fail	nvim/plugged/vim-gitgutter/test/runner.vim	/^      let s:fail += 1$/;"	v
i	nvim/plugged/vim-gitgutter/test/runner.vim	/^    let i = 0$/;"	v
i	nvim/plugged/vim-gitgutter/test/runner.vim	/^      let i += 1$/;"	v
summary	nvim/plugged/vim-gitgutter/test/runner.vim	/^let summary = [$/;"	v
g:loaded_gitgutter	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:loaded_gitgutter = 1$/;"	v
set	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:set(var, default) abort$/;"	f
g:gitgutter_sign_allow_clobber	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_allow_clobber = 1$/;"	v
default_grep	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^let default_grep = 'grep'$/;"	v
g:gitgutter_grep	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^      let g:gitgutter_grep .= ' --color=never'$/;"	v
g:gitgutter_grep	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    let g:gitgutter_grep = ''$/;"	v
GitGutterAll	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterAll call gitgutter#all(1)$/;"	c
GitGutter	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 1)$/;"	c
GitGutterDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDisable call gitgutter#disable()$/;"	c
GitGutterEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterEnable  call gitgutter#enable()$/;"	c
GitGutterToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterToggle  call gitgutter#toggle()$/;"	c
GitGutterBufferDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferDisable call gitgutter#buffer_disable()$/;"	c
GitGutterBufferEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferEnable  call gitgutter#buffer_enable()$/;"	c
GitGutterBufferToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferToggle  call gitgutter#buffer_toggle()$/;"	c
GitGutterQuickFix	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFix call gitgutter#quickfix()$/;"	c
GitGutterLineHighlightsDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsDisable call gitgutter#highlight#line_disable()$/;"	c
GitGutterLineHighlightsEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsEnable  call gitgutter#highlight#line_enable()$/;"	c
GitGutterLineHighlightsToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsToggle  call gitgutter#highlight#line_toggle()$/;"	c
GitGutterLineNrHighlightsDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsDisable call gitgutter#highlight#linenr_disable()$/;"	c
GitGutterLineNrHighlightsEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsEnable  call gitgutter#highlight#linenr_enable()$/;"	c
GitGutterLineNrHighlightsToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsToggle  call gitgutter#highlight#linenr_toggle()$/;"	c
GitGutterSignsEnable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsEnable  call gitgutter#sign#enable()$/;"	c
GitGutterSignsDisable	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsDisable call gitgutter#sign#disable()$/;"	c
GitGutterSignsToggle	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsToggle  call gitgutter#sign#toggle()$/;"	c
GitGutterNextHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)$/;"	c
GitGutterPrevHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)$/;"	c
GitGutterStageHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -range=% GitGutterStageHunk call gitgutter#hunk#stage(<line1>,<line2>)$/;"	c
GitGutterUndoHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterUndoHunk    call gitgutter#hunk#undo()$/;"	c
GitGutterPreviewHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterPreviewHunk call gitgutter#hunk#preview()$/;"	c
<Plug>(GitGutterTextObjectInnerPending)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>$/;"	m
<Plug>(GitGutterTextObjectOuterPending)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>$/;"	m
GitGutterGetHunks	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunks()$/;"	f
GitGutterGetHunkSummary	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunkSummary()$/;"	f
GitGutterFold	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterFold call gitgutter#fold#toggle()$/;"	c
GitGutterDebug	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDebug call gitgutter#debug#debug()$/;"	c
<Plug>(GitGutterNextHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\\<C-U>execute v:count1 . 'GitGutterNextHunk'\\<CR>"$/;"	m
<Plug>GitGutterNextHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\\<C-U>call gitgutter#utility#warn('please change your map \\<lt>Plug>GitGutterNextHunk to \\<lt>Plug>(GitGutterNextHunk)')\\<CR>"$/;"	m
<Plug>(GitGutterPrevHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\\<C-U>execute v:count1 . 'GitGutterPrevHunk'\\<CR>"$/;"	m
<Plug>GitGutterPrevHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\\<C-U>call gitgutter#utility#warn('please change your map \\<lt>Plug>GitGutterPrevHunk to \\<lt>Plug>(GitGutterPrevHunk)')\\<CR>"$/;"	m
<Plug>(GitGutterStageHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>$/;"	m
<Plug>GitGutterStageHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>$/;"	m
<Plug>(GitGutterUndoHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>$/;"	m
<Plug>GitGutterUndoHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>$/;"	m
<Plug>(GitGutterPreviewHunk)	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>$/;"	m
<Plug>GitGutterPreviewHunk	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>$/;"	m
on_bufenter	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:on_bufenter()$/;"	f
gitgutter	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^augroup gitgutter$/;"	a
s:focus_was_lost	nvim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let s:focus_was_lost = 0$/;"	v
gitgutter#highlight#line_disable	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_disable() abort$/;"	f
gitgutter#highlight#line_enable	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_enable() abort$/;"	f
gitgutter#highlight#line_toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_toggle() abort$/;"	f
gitgutter#highlight#linenr_disable	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_disable() abort$/;"	f
gitgutter#highlight#linenr_enable	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_enable() abort$/;"	f
gitgutter#highlight#linenr_toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_toggle() abort$/;"	f
gitgutter#highlight#define_sign_column_highlight	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_column_highlight() abort$/;"	f
gitgutter#highlight#define_highlights	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_highlights() abort$/;"	f
gitgutter#highlight#define_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_signs() abort$/;"	f
define_sign_text	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_text() abort$/;"	f
gitgutter#highlight#define_sign_text_highlights	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text_highlights() abort$/;"	f
define_sign_line_highlights	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_line_highlights() abort$/;"	f
define_sign_linenr_highlights	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_linenr_highlights() abort$/;"	f
get_hl	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_hl(group, what, mode) abort$/;"	f
get_foreground_colors	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_colors(group) abort$/;"	f
get_background_colors	nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_background_colors(group) abort$/;"	f
s:first_sign_id	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:first_sign_id = 3000$/;"	v
s:next_sign_id	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:next_sign_id  = s:first_sign_id$/;"	v
s:supports_star	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:supports_star = v:version > 703 || (v:version == 703 && has("patch596"))$/;"	v
gitgutter#sign#enable	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#enable() abort$/;"	f
gitgutter#sign#disable	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#disable() abort$/;"	f
gitgutter#sign#toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#toggle() abort$/;"	f
gitgutter#sign#clear_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#clear_signs(bufnr) abort$/;"	f
gitgutter#sign#update_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#update_signs(bufnr, modified_lines) abort$/;"	f
find_current_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:find_current_signs(bufnr) abort$/;"	f
obsolete_gitgutter_signs_to_remove	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:obsolete_gitgutter_signs_to_remove(bufnr, new_gitgutter_signs_line_numbers) abort$/;"	f
remove_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:remove_signs(bufnr, sign_ids, all_signs) abort$/;"	f
upsert_new_gitgutter_signs	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:upsert_new_gitgutter_signs(bufnr, modified_lines) abort$/;"	f
handle_double_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:handle_double_hunk(modified_lines)$/;"	f
next_sign_id	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:next_sign_id() abort$/;"	f
gitgutter#sign#reset	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#reset()$/;"	f
highlight_name_for_change	nvim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:highlight_name_for_change(text) abort$/;"	f
s:available	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:available = has('nvim') || ($/;"	v
gitgutter#async#available	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#available()$/;"	f
gitgutter#async#execute	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#execute(cmd, bufnr, handler) abort$/;"	f
build_command	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:build_command(cmd)$/;"	f
on_stdout_nvim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_nvim(_job_id, data, _event) dict abort$/;"	f
on_stderr_nvim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_nvim(_job_id, data, _event) dict abort$/;"	f
on_exit_nvim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_nvim(_job_id, exit_code, _event) dict abort$/;"	f
on_stdout_vim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_vim(_channel, data) dict abort$/;"	f
on_stderr_vim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_vim(channel, _data) dict abort$/;"	f
on_exit_vim	nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_vim(channel) dict abort$/;"	f
gitgutter#utility#supports_overscore_sign	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#supports_overscore_sign()$/;"	f
gitgutter#utility#setbufvar	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#setbufvar(buffer, varname, val)$/;"	f
gitgutter#utility#getbufvar	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#getbufvar(buffer, varname, ...)$/;"	f
gitgutter#utility#warn	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn(message) abort$/;"	f
gitgutter#utility#warn_once	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn_once(bufnr, message, key) abort$/;"	f
gitgutter#utility#is_active	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_active(bufnr) abort$/;"	f
not_git_dir	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:not_git_dir(bufnr) abort$/;"	f
is_file_buffer	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:is_file_buffer(bufnr) abort$/;"	f
winshell	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:winshell()$/;"	f
gitgutter#utility#shellescape	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shellescape(arg) abort$/;"	f
gitgutter#utility#file	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file(bufnr)$/;"	f
gitgutter#utility#extension	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#extension(bufnr) abort$/;"	f
gitgutter#utility#system	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#system(cmd, ...) abort$/;"	f
gitgutter#utility#repo_path	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#repo_path(bufnr, shellesc) abort$/;"	f
s:set_path_handler	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:set_path_handler = {}$/;"	v
set_path_handler.out	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.out(buffer, path) abort$/;"	f
set_path_handler.err	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.err(buffer) abort$/;"	f
gitgutter#utility#set_repo_path	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#set_repo_path(bufnr, continuation) abort$/;"	f
gitgutter#utility#cd_cmd	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#cd_cmd(bufnr, cmd) abort$/;"	f
unc_path	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:unc_path(bufnr)$/;"	f
use_known_shell	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:use_known_shell() abort$/;"	f
restore_shell	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:restore_shell() abort$/;"	f
abs_path	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:abs_path(bufnr, shellesc)$/;"	f
dir	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dir(bufnr) abort$/;"	f
filename	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:filename(bufnr) abort$/;"	f
exists_file	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:exists_file(bufnr) abort$/;"	f
strip_trailing_new_line	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:strip_trailing_new_line(line) abort$/;"	f
gitgutter#utility#windows	nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#windows()$/;"	f
s:plugin_dir	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:plugin_dir  = expand('<sfile>:p:h:h:h').'\/'$/;"	v
s:log_file	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:log_file    = s:plugin_dir.'gitgutter.log'$/;"	v
s:channel_log	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:channel_log = s:plugin_dir.'channel.log'$/;"	v
s:new_log_session	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:new_log_session = 1$/;"	v
gitgutter#debug#debug	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#debug()$/;"	f
separator	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:separator()$/;"	f
vim_version	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:vim_version()$/;"	f
git_version	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:git_version()$/;"	f
grep_version	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:grep_version()$/;"	f
option	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:option(name)$/;"	f
output	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:output(text)$/;"	f
gitgutter#debug#log	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#log(message, ...) abort$/;"	f
format_for_log	nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:format_for_log(data) abort$/;"	f
s:gap_between_regions	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^let s:gap_between_regions = 5$/;"	v
gitgutter#diff_highlight#process	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! gitgutter#diff_highlight#process(hunk_body)$/;"	f
diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:diff(rline, aline, rlinenr, alinenr, rprefix, aprefix, regions, whole_line)$/;"	f
lcs	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:lcs(s1, s2)$/;"	f
gitgutter#diff_highlight#lcs	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#lcs(s1, s2)$/;"	f
common_prefix	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_prefix(a, b)$/;"	f
gitgutter#diff_highlight#common_prefix	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_prefix(a, b)$/;"	f
common_suffix	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_suffix(a, b, start)$/;"	f
gitgutter#diff_highlight#common_suffix	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_suffix(a, b, start)$/;"	f
split	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:split(str, delimiter)$/;"	f
gitgutter#diff_highlight#split	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#split(str, delimiter)$/;"	f
gitgutter#fold#enable	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#enable()$/;"	f
gitgutter#fold#disable	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#disable()$/;"	f
gitgutter#fold#toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#toggle()$/;"	f
gitgutter#fold#level	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#level(lnum)$/;"	f
gitgutter#fold#foldtext	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#foldtext()$/;"	f
gitgutter#fold#is_changed	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#is_changed()$/;"	f
set_fold_levels	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:set_fold_levels()$/;"	f
save_fold_state	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:save_fold_state()$/;"	f
restore_fold_state	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:restore_fold_state()$/;"	f
folded	nvim/plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:folded()$/;"	f
s:nomodeline	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:hunk_re	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:hunk_re = '^@@ -\\(\\d\\+\\),\\?\\(\\d*\\) +\\(\\d\\+\\),\\?\\(\\d*\\) @@'$/;"	v
git_supports_command_line_config_override	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:git_supports_command_line_config_override() abort$/;"	f
s:c_flag	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:c_flag = s:git_supports_command_line_config_override()$/;"	v
s:temp_from	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_from = tempname()$/;"	v
s:temp_buffer	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_buffer = tempname()$/;"	v
s:counter	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:counter = 0$/;"	v
gitgutter#diff#run_diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#run_diff(bufnr, from, preserve_full_diff) abort$/;"	f
gitgutter#diff#handler	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#handler(bufnr, diff) abort$/;"	f
gitgutter#diff#parse_diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_diff(diff) abort$/;"	f
gitgutter#diff#parse_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_hunk(line) abort$/;"	f
gitgutter#diff#process_hunks	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunks(bufnr, hunks) abort$/;"	f
process_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_hunk(bufnr, hunk) abort$/;"	f
is_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_added(from_count, to_count) abort$/;"	f
is_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_removed(from_count, to_count) abort$/;"	f
is_modified	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified(from_count, to_count) abort$/;"	f
is_modified_and_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_added(from_count, to_count) abort$/;"	f
is_modified_and_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_removed(from_count, to_count) abort$/;"	f
process_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_removed(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_removed(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#hunk_diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#hunk_diff(bufnr, full_diff, ...)$/;"	f
write_buffer	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:write_buffer(bufnr, file)$/;"	f
save_last_seen_change	nvim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:save_last_seen_change(bufnr) abort$/;"	f
s:winid	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:winid = 0$/;"	v
gitgutter#hunk#set_hunks	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#set_hunks(bufnr, hunks) abort$/;"	f
gitgutter#hunk#hunks	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#hunks(bufnr) abort$/;"	f
gitgutter#hunk#reset	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#reset(bufnr) abort$/;"	f
gitgutter#hunk#summary	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#summary(bufnr) abort$/;"	f
reset_summary	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:reset_summary(bufnr) abort$/;"	f
gitgutter#hunk#increment_lines_added	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_added(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_modified	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_modified(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_removed	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_removed(bufnr, count) abort$/;"	f
gitgutter#hunk#next_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#next_hunk(count) abort$/;"	f
gitgutter#hunk#prev_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#prev_hunk(count) abort$/;"	f
current_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:current_hunk() abort$/;"	f
cursor_in_two_hunks	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:cursor_in_two_hunks()$/;"	f
gitgutter#hunk#cursor_in_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#cursor_in_hunk(hunk) abort$/;"	f
gitgutter#hunk#in_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#in_hunk(lnum)$/;"	f
gitgutter#hunk#text_object	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#text_object(inner) abort$/;"	f
gitgutter#hunk#stage	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#stage(...) abort$/;"	f
gitgutter#hunk#undo	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#undo() abort$/;"	f
gitgutter#hunk#preview	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#preview() abort$/;"	f
hunk_op	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:hunk_op(op, ...)$/;"	f
stage	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:stage(hunk_diff)$/;"	f
undo	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:undo(hunk_diff)$/;"	f
preview	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:preview(hunk_diff)$/;"	f
part_of_diff	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:part_of_diff(hunk_diff, first, last)$/;"	f
adjust_header	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_header(bufnr, hunk_diff)$/;"	f
fix_file_references	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:fix_file_references(filepath, hunk_diff)$/;"	f
gitgutter#hunk#fix_file_references	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^  function! gitgutter#hunk#fix_file_references(filepath, hunk_diff)$/;"	f
adjust_hunk_summary	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_hunk_summary(hunk_diff) abort$/;"	f
line_adjustment_for_current_hunk	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:line_adjustment_for_current_hunk() abort$/;"	f
in_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:in_hunk_preview_window()$/;"	f
open_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:open_hunk_preview_window()$/;"	f
populate_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:populate_hunk_preview_window(header, body)$/;"	f
enable_staging_from_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:enable_staging_from_hunk_preview_window()$/;"	f
goto_original_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:goto_original_window()$/;"	f
close_hunk_preview_window	nvim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:close_hunk_preview_window()$/;"	f
s:t_string	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^let s:t_string = type('')$/;"	v
gitgutter#all	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#all(force) abort$/;"	f
gitgutter#process_buffer	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#process_buffer(bufnr, force) abort$/;"	f
gitgutter#disable	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#disable() abort$/;"	f
gitgutter#enable	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#enable() abort$/;"	f
gitgutter#toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#toggle() abort$/;"	f
gitgutter#buffer_disable	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_disable() abort$/;"	f
gitgutter#buffer_enable	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_enable() abort$/;"	f
gitgutter#buffer_toggle	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_toggle() abort$/;"	f
gitgutter#setup_maps	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#setup_maps()$/;"	f
setup_path	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:setup_path(bufnr, continuation)$/;"	f
has_fresh_changes	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:has_fresh_changes(bufnr) abort$/;"	f
reset_tick	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:reset_tick(bufnr) abort$/;"	f
clear	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:clear(bufnr)$/;"	f
gitgutter#quickfix	nvim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#quickfix()$/;"	f
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^getThing<T>(Fred f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^getThing<T>(Fred<T> f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^getThing<T>(Fred<T>::List f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^AClass<T>(Fred f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^AClass<T>(Fred<T> f);$/;"	v
f	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^AClass<T>(Fred<T>::List f);$/;"	v
BaseCalss	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^class BaseCalss:$/;"	c	file:
BaseCalss	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^class BaseCalss:$/;"	c	file:
aClass	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^Aclass<T> aClass = bClass->getThing();$/;"	v	typeref:class:BaseCalss
a	nvim/plugged/vim-cpp-enhanced-highlight/test/color.cpp	/^    return b > a;$/;"	v
Class	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^class Class {$/;"	c	file:
Class	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^    Class(int val): value(val) {$/;"	f	class:Class	file:
operator <	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^bool operator<(const ConnectionString& other) const {$/;"	f
Class	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^class Class {$/;"	c	file:
Class	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^    Class(T val, typename std::enable_if<std::is_floating_point<T>::value, T>::type* = 0)$/;"	f	class:Class
Function	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^void Class::Function(double variable) {$/;"	f	class:Class
func	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^void func<std::map<std::string, std::string<double>>>() {$/;"	f
b	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^uint32_t b = static_cast<uint8_t>(a);$/;"	v
j	nvim/plugged/vim-cpp-enhanced-highlight/test/color2.cpp	/^char j = reinterpret_cast<char>(k);$/;"	v
s:needs_cppstructure_match	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^let s:needs_cppstructure_match = 0$/;"	v
s:needs_cppstructure_match	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^	let s:needs_cppstructure_match += 1$/;"	v
s:needs_cppstructure_match	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^	let s:needs_cppstructure_match += 2$/;"	v
did_cpp_syntax_inits	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^    let did_cpp_syntax_inits = 1$/;"	v
HiLink	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	nvim/plugged/vim-cpp-enhanced-highlight/after/syntax/cpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
s:ics	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? :\\)\\@='$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	nvim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
b:current_syntax	nvim/plugged/tagbar/syntax/tagbar.vim	/^let b:current_syntax = 'tagbar'$/;"	v
init_var	nvim/plugged/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
setup_options	nvim/plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
g:tagbar_iconchars	nvim/plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▶', '▼']$/;"	v
g:tagbar_iconchars	nvim/plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
setup_keymaps	nvim/plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
TagbarSession	nvim/plugged/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
Tagbar	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 Tagbar              call tagbar#ToggleWindow()$/;"	c
TagbarToggle	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call tagbar#ToggleWindow()$/;"	c
TagbarOpen	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarClose	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarSetFoldlevel	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarCurrentTag	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarGetTypeConfig	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarDebug	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarTogglePause	nvim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
s:compare_typeinfo	nvim/plugged/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
tagbar#sorting#sort	nvim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
compare_by_kind	nvim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
compare_by_line	nvim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
tagbar#prototypes#kindheadertag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
isKindheader	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
getPrototype	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
isFoldable	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFolded	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
openFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
closeFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
toggleFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
tagbar#prototypes#splittag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
isSplitTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
tagbar#prototypes#pseudotag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
isPseudoTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
strfmt	nvim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
tagbar#prototypes#normaltag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
isNormalTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
strfmt	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
str	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
getPrototype	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
tagbar#prototypes#fileinfo#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
addTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
getTags	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
getTagsByName	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
removeTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
reset	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
clearOldFolds	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
sortTags	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
openKindFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
closeKindFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
tagbar#prototypes#typeinfo#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
getKind	nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
createKinddict	nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:visibility_symbols	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
tagbar#prototypes#basetag#new	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
isNormalTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isPseudoTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isSplitTag	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
isKindheader	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
getPrototype	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
_getPrefix	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
initFoldState	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
getClosedParentTline	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
isFoldable	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFolded	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
openFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
closeFold	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
setFolded	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
openParents	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
addChild	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
getChildren	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
getChildrenByName	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
removeChild	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
add_snr	nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
tagbar#types#ctags#init	nvim/plugged/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	nvim/plugged/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
tagbar#debug#start_debug	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#debug#log	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#enabled	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
gettime	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
gettime	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
s:debug_enabled	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	nvim/plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
tagbar#state#get_current_file	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
get	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
s:State	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
State.New	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
State.getCurrent	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
State.setCurrentFile	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
State.setPaused	nvim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
g:tagbar#icon_closed	nvim/plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	nvim/plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
s:type_init_done	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:autocommands_done	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:statusline_in_use	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:init_done	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:checked_ctags	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:ctags_is_uctags	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:new_window	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:is_maximized	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:winrestcmd	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:short_help	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:nearby_disabled	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:paused	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:pwin_by_tagbar	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:buffer_seqno	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:vim_quitting	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:last_alt_bufnr	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:window_expanded	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:expand_bufnr	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:window_pos	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:delayed_update_files	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
g:loaded_tagbar	nvim/plugged/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
s:last_highlight_tline	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:warnings	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
Init	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
InitTypes	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
LoadUserTypeDefs	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
TransformUserTypeDef	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
RestoreSession	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
MapKeys	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
CreateAutocommands	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
CheckForExCtags	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
CtagsErrMsg	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
CheckExCtagsVersion	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
CheckFTCtags	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
GetSupportedFiletypes	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
s:known_files	nvim/plugged/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
known_files.get	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
known_files.put	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
known_files.has	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
known_files.rm	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
ToggleWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
OpenWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
InitWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
CloseWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
ShrinkIfExpanded	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
ZoomWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
CorrectFocusOnStartup	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
ProcessFile	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
ExecuteCtagsOnFile	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
ParseTagline	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
ProcessTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
add_tag_recursive	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
create_pseudotag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
ToggleSort	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
RenderContent	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
PrintKinds	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
PrintTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
PrintHelp	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
get_map_str	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
RenderKeepView	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
HighlightTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
JumpToTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar) abort$/;"	f
ShowInPreviewWin	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
ShowPrototype	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
ToggleHelp	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
GotoNextToplevelTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
OpenFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
CloseFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
ToggleFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
ChangeFoldLevel	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
SetFoldLevel	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
SetFoldLevelRecursive	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
MinimizeMaxFoldLevel	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
OpenParents	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
GotoNextFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
GotoPrevFold	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
AutoUpdate	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
CheckMouseClick	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
DetectFiletype	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
EscapeCtagsCmd	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
ExecuteCtags	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
GetNearbyTag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(all, forcecurrent, ...) abort$/;"	f
GetTagInfo	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
GetFileWinnr	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
GotoFileWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
ToggleHideNonPublicTags	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
ToggleCaseInsensitive	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
ToggleAutoclose	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
IsValidFile	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
SetStatusLine	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine() abort$/;"	f
HandleOnlyWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
HandleBufDelete	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
HandleBufWrite	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
do_delayed_update	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
ReopenWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
HasOpenFileWindows	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
TagbarBufName	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
goto_win	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
goto_tagbar	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
mark_window	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
goto_markedwin	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
warning	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
TogglePause	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! s:TogglePause() abort$/;"	f
TagbarBalloonExpr	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
tagbar#ToggleWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#OpenWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#CloseWindow	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#SetFoldLevel	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#highlighttag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#RestoreSession	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#StopAutoUpdate	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#StopAutoUpdate() abort$/;"	f
tagbar#toggle_pause	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#is_paused	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#getusertypes	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#autoopen	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currenttag	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#currentfile	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#gettypeconfig	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#inspect	nvim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
get_indentexpr	nvim/plugged/vim-vue/indent/vue.vim	/^function! s:get_indentexpr(language)$/;"	f
s:languages	nvim/plugged/vim-vue/indent/vue.vim	/^let s:languages = [$/;"	v
s:language	nvim/plugged/vim-vue/indent/vue.vim	/^    let s:language.indentexpr = s:get_indentexpr(s:language.name)$/;"	v
s:html_indent	nvim/plugged/vim-vue/indent/vue.vim	/^let s:html_indent = s:get_indentexpr('html')$/;"	v
b:did_indent	nvim/plugged/vim-vue/indent/vue.vim	/^let b:did_indent = 1$/;"	v
GetVueIndent	nvim/plugged/vim-vue/indent/vue.vim	/^function! GetVueIndent()$/;"	f
VADER_OUTPUT_FILE	nvim/plugged/vim-vue/Makefile	/^	VADER_OUTPUT_FILE=\/dev\/stderr nvim -u test\/vimrc -c 'Vader! test\/*.vader' --headless$/;"	m
dependencies	nvim/plugged/vim-vue/Makefile	/^dependencies = \\$/;"	m
g:vue_pre_processors	nvim/plugged/vim-vue/syntax/vue.vim	/^  let g:vue_pre_processors = []$/;"	v
attr	nvim/plugged/vim-vue/syntax/vue.vim	/^function! s:attr(name, value)$/;"	f
should_register	nvim/plugged/vim-vue/syntax/vue.vim	/^function! s:should_register(language, start_pattern)$/;"	f
s:languages	nvim/plugged/vim-vue/syntax/vue.vim	/^let s:languages = [$/;"	v
s:attr_pattern	nvim/plugged/vim-vue/syntax/vue.vim	/^  let s:attr_pattern = has_key(s:language, 'attr_pattern') ? s:language.attr_pattern : s:attr('lang', s:language.name)$/;"	v
s:start_pattern	nvim/plugged/vim-vue/syntax/vue.vim	/^  let s:start_pattern = '<' . s:language.tag . '\\>\\_[^>]*' . s:attr_pattern . '\\_[^>]*>'$/;"	v
b:current_syntax	nvim/plugged/vim-vue/syntax/vue.vim	/^let b:current_syntax = "vue"$/;"	v
g:loaded_syntastic_vue_eslint_checker	nvim/plugged/vim-vue/syntax_checkers/vue/eslint.vim	/^let g:loaded_syntastic_vue_eslint_checker = 1$/;"	v
[[	nvim/plugged/vim-vue/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [[ :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'bW')<CR>$/;"	m
]]	nvim/plugged/vim-vue/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ]] :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'W')<CR>$/;"	m
[]	nvim/plugged/vim-vue/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [] :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'bW')<CR>$/;"	m
][	nvim/plugged/vim-vue/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ][ :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'W')<CR>$/;"	m
b:current_syntax	nvim/plugged/vim-fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax	nvim/plugged/vim-fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
g:loaded_fugitive	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
FugitiveGitDir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveReal	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveFind	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitivePath	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitiveParse	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePrepare	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveConfig	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveRemoteUrl	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveHead	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveStatusline	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveCommonDir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveWorkTree	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
FugitiveIsGitDir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(path) abort$/;"	f
s:worktree_for_dir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:dir_for_worktree	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
Tree	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
FugitiveExtractGitDir	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveDetect	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(path) abort$/;"	f
FugitiveVimPath	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveGitPath	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
Slash	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Slash(path) abort$/;"	f
ProjectionistDetect	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
g:io_fugitive	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
fugitive	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
s:addr_other	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') ? '-addr=other' : ''$/;"	v
s:addr_tabs	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:nowait	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
Map	nvim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
g:autoloaded_fugitive	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:fugitive_git_executable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_git_executable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'env ' . g:fugitive_git_executable$/;"	v
function	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
sub	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
gsub	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
Uniq	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
winshell	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
shellesc	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
s:fnameescape	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
fnameescape	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
throw	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
DirCheck	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
Mods	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
Slash	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Slash(path) abort$/;"	f
Resolve	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
cpath	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
Cd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Cd(...) abort$/;"	f
s:executables	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
executable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
DoAutocmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(cmd) abort$/;"	f
s:nowait	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
Map	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
QuickfixGet	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
QuickfixSet	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
QuickfixCreate	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
QuickfixStream	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, title, cmd, first, callback, ...) abort$/;"	f
UserCommandList	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
UserCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommand(...) abort$/;"	f
s:git_versions	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
fugitive#GitVersion	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
s:commondirs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
fugitive#CommonDir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
Dir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
Tree	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
HasOpt	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
PreparePathArgs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal) abort$/;"	f
s:prepare_env	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
fugitive#PrepareDirEnvArgv	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvArgv(...) abort$/;"	f
BuildShell	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, args) abort$/;"	f
fugitive#Prepare	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
SystemError	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
ChompError	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompError(...) abort$/;"	f
ChompDefault	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
LinesError	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
NullError	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NullError(...) abort$/;"	f
TreeChomp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
EchoExec	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:EchoExec(...) abort$/;"	f
s:head_cache	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
fugitive#Head	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#RevParse	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
ConfigTimestamps	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
s:config	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
fugitive#Config	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
Remote	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remote(dir) abort$/;"	f
fugitive#RemoteUrl	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
add_methods	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:repo_prototype	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repos = {}$/;"	v
fugitive#repo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
repo_dir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_tree	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
repo_bare	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_find	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
repo_translate	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
repo_head	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
repo_prepare	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_prepare(...) dict abort$/;"	f
repo_git_command	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_git_chomp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_rev_parse	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_config	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
repo_user	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
DirCommitFile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
DirRev	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
s:merge_heads	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
MergeHead	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeHead(...) abort$/;"	f
Owner	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
fugitive#Real	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#Path	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
Relative	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
fugitive#Find	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
Generate	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Generate(rev, ...) abort$/;"	f
DotRelative	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
fugitive#Object	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
s:var	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:var = '\\%(%\\|#<\\=\\d\\+\\|##\\=\\)'$/;"	v
s:flag	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:expand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
BufName	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
ExpandVarLegacy	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
ExpandVar	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
Expand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
fugitive#Expand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
ExpandSplit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandSplit(string, ...) abort$/;"	f
SplitExpand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpand(string, ...) abort$/;"	f
SplitExpandChain	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
s:trees	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:indexes	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
TreeInfo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
PathInfo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
fugitive#simplify	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#resolve	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#getftime	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getfsize	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftype	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#filereadable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#isdirectory	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#getfperm	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#setfperm	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
TempCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempCmd(out, cmd) abort$/;"	f
s:blobdirs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
BlobTemp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
fugitive#readfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#writefile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
s:globsubs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
fugitive#glob	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#delete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
s:buffer_prototype	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
fugitive#buffer	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
buffer_repo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_type	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
FilterEscape	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
GlobComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern) abort$/;"	f
fugitive#CompletePath	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#PathComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
CompleteHeads	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
fugitive#CompleteObject	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
CompleteSub	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
CompleteRevision	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
CompleteRemote	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P) abort$/;"	f
ReplaceCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
QueryLog	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec) abort$/;"	f
FormatLog	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
FormatRebase	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
FormatFile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
Format	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
AddHeader	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
AddSection	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
fugitive#BufReadStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus() abort$/;"	f
fugitive#FileReadCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#BufReadCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufWriteCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#SourceCmd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
s:temp_files	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
TempState	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
TempReadPre	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
TempReadPost	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
fugitive_temp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
fugitive#Command	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
s:exec_paths	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
ExecPath	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
Subcommands	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Subcommands() abort$/;"	f
s:aliases	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:aliases = {}$/;"	v
Aliases	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Aliases(dir) abort$/;"	f
fugitive#Complete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CdComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
StatusCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
StageJump	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
StageSeek	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
DoAutocmdChanged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
ReloadStatusBuffer	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
ReloadStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
s:last_time	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
ExpireStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
ReloadWinStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
ReloadTabStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
fugitive#ReloadStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#EfmDir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive_status	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
StageInfo	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
Selection	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
StageArgs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
Do	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
StageReveal	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
s:file_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:file_commit_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:item_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
NextHunk	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
PreviousHunk	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
NextFile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
PreviousFile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
NextItem	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
PreviousItem	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
s:section_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:section_commit_pattern	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
NextSection	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
PreviousSection	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
NextSectionEnd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
PreviousSectionEnd	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
PatchSearchExpr	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
StageInline	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
NextExpandedHunk	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
StageDiff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
StageDiffEdit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
StageApply	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
StageDelete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
StageIgnore	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
DoToggleHeadHeader	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
DoStageUnpushedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
DoToggleUnpushedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
DoStageUnpushed	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
DoToggleUnpushed	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
DoUnstageUnpulledHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
DoToggleUnpulledHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
DoUnstageUnpulled	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
DoToggleUnpulled	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
DoUnstageUnpushed	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
DoToggleStagedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
DoUnstageStagedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
DoToggleUnstagedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
DoStageUnstagedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
DoToggleUntrackedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
DoStageUntrackedHeading	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
DoToggleStaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
DoUnstageStaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
DoToggleUnstaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
DoStageUnstaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
DoUnstageUnstaged	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
DoToggleUntracked	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
DoStageUntracked	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
StagePatch	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
CommitInteractive	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, args, patch) abort$/;"	f
CommitSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, args, ...) abort$/;"	f
RevertSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
fugitive#CommitComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P) abort$/;"	f
fugitive#RevertComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P) abort$/;"	f
FinishCommit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FinishCommit() abort$/;"	f
fugitive#MergeComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P) abort$/;"	f
fugitive#RebaseComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P) abort$/;"	f
fugitive#PullComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P) abort$/;"	f
RebaseSequenceAborter	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSequenceAborter() abort$/;"	f
fugitive#Cwindow	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
s:common_efm	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:common_efm = ''$/;"	v
s:rebase_abbrevs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
RebaseEdit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseEdit(cmd, dir) abort$/;"	f
MergeRebase	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeRebase(cmd, bang, mods, args, ...) abort$/;"	f
RebaseClean	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseClean(file) abort$/;"	f
MergeSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
RebaseSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
PullSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PullSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
fugitive_merge	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_merge$/;"	a
g:fugitive_summary_format	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
fugitive#GrepComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#LogComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
GrepParseLine	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(prefix, name_only, dir, line) abort$/;"	f
GrepSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
LogFlushQueue	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state) abort$/;"	f
LogParse	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, line) abort$/;"	f
fugitive#LogCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
UsableWin	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
OpenParse	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenParse(args, wants_cmd) abort$/;"	f
DiffClose	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DiffClose() abort$/;"	f
BlurStatus	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
OpenExec	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenExec(cmd, mods, args, ...) abort$/;"	f
fugitive#Open	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, args) abort$/;"	f
fugitive#ReadCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#EditComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#ReadComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#WriteCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#WqCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive_commit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive#PushComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P) abort$/;"	f
fugitive#FetchComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P) abort$/;"	f
AskPassArgs	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
Dispatch	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dispatch(bang, cmd, args) abort$/;"	f
PushSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PushSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
FetchSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FetchSubcommand(line1, line2, range, bang, mods, args) abort$/;"	f
fugitive_diff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
can_diffoff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
fugitive#CanDiffoff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
diff_modifier	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
diff_window_count	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
diff_restore	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
diffthis	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
diffoff	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
diffoff_all	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
CompareAge	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompareAge(mine, theirs) abort$/;"	f
IsConflicted	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
fugitive#Diffsplit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, args) abort$/;"	f
Move	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
fugitive#RenameComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#MoveCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
Remove	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
fugitive#RemoveCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#DeleteCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
Keywordprg	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
linechars	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
BlameBufnr	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
BlameCommitFileLnum	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
BlameLeave	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
BlameQuit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
fugitive#BlameComplete	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
BlameSubcommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, args) abort$/;"	f
BlameCommit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
BlameJump	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
s:hash_colors	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
fugitive#BlameSyntax	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
BlameRehighlight	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
BlameFileType	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameFileType() abort$/;"	f
fugitive_blame	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
s:redirects	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^let s:redirects = {}$/;"	v
fugitive#BrowseCommand	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
<SID>:	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
fugitive#MapCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
ContainingCommit	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
SquashArgument	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
RebaseArgument	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
NavigateUp	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
MapMotion	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
fugitive#MapJumps	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
StatusCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
fugitive#StatusCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#StatusCfile() abort$/;"	f
MessageCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MessageCfile(...) abort$/;"	f
fugitive#MessageCfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
cfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
GF	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
fugitive#Cfile	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Statusline	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#statusline	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#head	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#Foldtext	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#foldtext	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive_folding	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_folding$/;"	a
fugitive#Init	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#is_git_dir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#extract_git_dir	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#detect	nvim/plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
msg	nvim/plugged/coc.nvim/jest.js	/^  let msg = 'Uncaught exception: ' + err.stack$/;"	V
exports	nvim/plugged/coc.nvim/webpack.config.js	/^module.exports = {$/;"	P
output	nvim/plugged/coc.nvim/webpack.config.js	/^  output: {$/;"	P
plugins	nvim/plugged/coc.nvim/webpack.config.js	/^  plugins: [$/;"	P
node	nvim/plugged/coc.nvim/webpack.config.js	/^  node: {$/;"	P
__filename	nvim/plugged/coc.nvim/webpack.config.js	/^    __filename: false,$/;"	P
__dirname	nvim/plugged/coc.nvim/webpack.config.js	/^    __dirname: false$/;"	P
terminateTree	nvim/plugged/coc.nvim/bin/terminateProcess.sh	/^terminateTree() {$/;"	f
value	nvim/plugged/coc.nvim/bin/server.js	/^  value: function () {$/;"	M
msg	nvim/plugged/coc.nvim/bin/server.js	/^  let msg = 'Uncaught exception: ' + err.stack$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^  value: function () {$/;"	M
msg	nvim/plugged/coc.nvim/build/index.js	/^  let msg = 'Uncaught exception: ' + err.stack$/;"	V
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function () {$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function () {}$/;"	M
MAX_LENGTH	nvim/plugged/coc.nvim/build/index.js	/^var MAX_LENGTH = 256$/;"	V
MAX_SAFE_COMPONENT_LENGTH	nvim/plugged/coc.nvim/build/index.js	/^var MAX_SAFE_COMPONENT_LENGTH = 16$/;"	V
R	nvim/plugged/coc.nvim/build/index.js	/^var R = 0$/;"	V
tok	nvim/plugged/coc.nvim/build/index.js	/^function tok (n) {$/;"	F
tildeTrimReplace	nvim/plugged/coc.nvim/build/index.js	/^var tildeTrimReplace = '$1~'$/;"	V
caretTrimReplace	nvim/plugged/coc.nvim/build/index.js	/^var caretTrimReplace = '$1^'$/;"	V
comparatorTrimReplace	nvim/plugged/coc.nvim/build/index.js	/^var comparatorTrimReplace = '$1$2$3'$/;"	V
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse (version, options) {$/;"	F
includePrerelease	nvim/plugged/coc.nvim/build/index.js	/^      includePrerelease: false$/;"	P
valid	nvim/plugged/coc.nvim/build/index.js	/^function valid (version, options) {$/;"	F
clean	nvim/plugged/coc.nvim/build/index.js	/^function clean (version, options) {$/;"	F
SemVer	nvim/plugged/coc.nvim/build/index.js	/^function SemVer (version, options) {$/;"	F
includePrerelease	nvim/plugged/coc.nvim/build/index.js	/^      includePrerelease: false$/;"	P
format	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.format = function () {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.toString = function () {$/;"	M
compare	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.compare = function (other) {$/;"	M
compareMain	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.compareMain = function (other) {$/;"	M
comparePre	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.comparePre = function (other) {$/;"	M
i	nvim/plugged/coc.nvim/build/index.js	/^  var i = 0$/;"	V
compareBuild	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.compareBuild = function (other) {$/;"	M
i	nvim/plugged/coc.nvim/build/index.js	/^  var i = 0$/;"	V
inc	nvim/plugged/coc.nvim/build/index.js	/^SemVer.prototype.inc = function (release, identifier) {$/;"	M
inc	nvim/plugged/coc.nvim/build/index.js	/^function inc (version, release, loose, identifier) {$/;"	F
diff	nvim/plugged/coc.nvim/build/index.js	/^function diff (version1, version2) {$/;"	F
prefix	nvim/plugged/coc.nvim/build/index.js	/^    var prefix = ''$/;"	V
defaultResult	nvim/plugged/coc.nvim/build/index.js	/^      var defaultResult = 'prerelease'$/;"	V
numeric	nvim/plugged/coc.nvim/build/index.js	/^var numeric = \/^[0-9]+$\/$/;"	V
compareIdentifiers	nvim/plugged/coc.nvim/build/index.js	/^function compareIdentifiers (a, b) {$/;"	F
rcompareIdentifiers	nvim/plugged/coc.nvim/build/index.js	/^function rcompareIdentifiers (a, b) {$/;"	F
major	nvim/plugged/coc.nvim/build/index.js	/^function major (a, loose) {$/;"	F
minor	nvim/plugged/coc.nvim/build/index.js	/^function minor (a, loose) {$/;"	F
patch	nvim/plugged/coc.nvim/build/index.js	/^function patch (a, loose) {$/;"	F
compare	nvim/plugged/coc.nvim/build/index.js	/^function compare (a, b, loose) {$/;"	F
compareLoose	nvim/plugged/coc.nvim/build/index.js	/^function compareLoose (a, b) {$/;"	F
compareBuild	nvim/plugged/coc.nvim/build/index.js	/^function compareBuild (a, b, loose) {$/;"	F
versionA	nvim/plugged/coc.nvim/build/index.js	/^  var versionA = new SemVer(a, loose)$/;"	V
versionB	nvim/plugged/coc.nvim/build/index.js	/^  var versionB = new SemVer(b, loose)$/;"	V
rcompare	nvim/plugged/coc.nvim/build/index.js	/^function rcompare (a, b, loose) {$/;"	F
sort	nvim/plugged/coc.nvim/build/index.js	/^function sort (list, loose) {$/;"	F
rsort	nvim/plugged/coc.nvim/build/index.js	/^function rsort (list, loose) {$/;"	F
gt	nvim/plugged/coc.nvim/build/index.js	/^function gt (a, b, loose) {$/;"	F
lt	nvim/plugged/coc.nvim/build/index.js	/^function lt (a, b, loose) {$/;"	F
eq	nvim/plugged/coc.nvim/build/index.js	/^function eq (a, b, loose) {$/;"	F
neq	nvim/plugged/coc.nvim/build/index.js	/^function neq (a, b, loose) {$/;"	F
gte	nvim/plugged/coc.nvim/build/index.js	/^function gte (a, b, loose) {$/;"	F
lte	nvim/plugged/coc.nvim/build/index.js	/^function lte (a, b, loose) {$/;"	F
cmp	nvim/plugged/coc.nvim/build/index.js	/^function cmp (a, op, b, loose) {$/;"	F
Comparator	nvim/plugged/coc.nvim/build/index.js	/^function Comparator (comp, options) {$/;"	F
includePrerelease	nvim/plugged/coc.nvim/build/index.js	/^      includePrerelease: false$/;"	P
ANY	nvim/plugged/coc.nvim/build/index.js	/^var ANY = {}$/;"	O
parse	nvim/plugged/coc.nvim/build/index.js	/^Comparator.prototype.parse = function (comp) {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^Comparator.prototype.toString = function () {$/;"	M
test	nvim/plugged/coc.nvim/build/index.js	/^Comparator.prototype.test = function (version) {$/;"	M
intersects	nvim/plugged/coc.nvim/build/index.js	/^Comparator.prototype.intersects = function (comp, options) {$/;"	M
includePrerelease	nvim/plugged/coc.nvim/build/index.js	/^      includePrerelease: false$/;"	P
Range	nvim/plugged/coc.nvim/build/index.js	/^function Range (range, options) {$/;"	F
includePrerelease	nvim/plugged/coc.nvim/build/index.js	/^      includePrerelease: false$/;"	P
format	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.format = function () {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.toString = function () {$/;"	M
parseRange	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.parseRange = function (range) {$/;"	M
intersects	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.intersects = function (range, options) {$/;"	M
isSatisfiable	nvim/plugged/coc.nvim/build/index.js	/^function isSatisfiable (comparators, options) {$/;"	F
toComparators	nvim/plugged/coc.nvim/build/index.js	/^function toComparators (range, options) {$/;"	F
parseComparator	nvim/plugged/coc.nvim/build/index.js	/^function parseComparator (comp, options) {$/;"	F
isX	nvim/plugged/coc.nvim/build/index.js	/^function isX (id) {$/;"	F
replaceTildes	nvim/plugged/coc.nvim/build/index.js	/^function replaceTildes (comp, options) {$/;"	F
replaceTilde	nvim/plugged/coc.nvim/build/index.js	/^function replaceTilde (comp, options) {$/;"	F
replaceCarets	nvim/plugged/coc.nvim/build/index.js	/^function replaceCarets (comp, options) {$/;"	F
replaceCaret	nvim/plugged/coc.nvim/build/index.js	/^function replaceCaret (comp, options) {$/;"	F
replaceXRanges	nvim/plugged/coc.nvim/build/index.js	/^function replaceXRanges (comp, options) {$/;"	F
replaceXRange	nvim/plugged/coc.nvim/build/index.js	/^function replaceXRange (comp, options) {$/;"	F
replaceStars	nvim/plugged/coc.nvim/build/index.js	/^function replaceStars (comp, options) {$/;"	F
hyphenReplace	nvim/plugged/coc.nvim/build/index.js	/^function hyphenReplace ($0,$/;"	F
test	nvim/plugged/coc.nvim/build/index.js	/^Range.prototype.test = function (version) {$/;"	M
testSet	nvim/plugged/coc.nvim/build/index.js	/^function testSet (set, version, options) {$/;"	F
satisfies	nvim/plugged/coc.nvim/build/index.js	/^function satisfies (version, range, options) {$/;"	F
maxSatisfying	nvim/plugged/coc.nvim/build/index.js	/^function maxSatisfying (versions, range, options) {$/;"	F
rangeObj	nvim/plugged/coc.nvim/build/index.js	/^    var rangeObj = new Range(range, options)$/;"	V
minSatisfying	nvim/plugged/coc.nvim/build/index.js	/^function minSatisfying (versions, range, options) {$/;"	F
rangeObj	nvim/plugged/coc.nvim/build/index.js	/^    var rangeObj = new Range(range, options)$/;"	V
minVersion	nvim/plugged/coc.nvim/build/index.js	/^function minVersion (range, loose) {$/;"	F
minver	nvim/plugged/coc.nvim/build/index.js	/^  var minver = new SemVer('0.0.0')$/;"	V
compver	nvim/plugged/coc.nvim/build/index.js	/^      var compver = new SemVer(comparator.semver.version)$/;"	V
validRange	nvim/plugged/coc.nvim/build/index.js	/^function validRange (range, options) {$/;"	F
ltr	nvim/plugged/coc.nvim/build/index.js	/^function ltr (version, range, options) {$/;"	F
gtr	nvim/plugged/coc.nvim/build/index.js	/^function gtr (version, range, options) {$/;"	F
outside	nvim/plugged/coc.nvim/build/index.js	/^function outside (version, range, hilo, options) {$/;"	F
gtfn	nvim/plugged/coc.nvim/build/index.js	/^  var gtfn, ltefn, ltfn, comp, ecomp$/;"	V
ltefn	nvim/plugged/coc.nvim/build/index.js	/^  var gtfn, ltefn, ltfn, comp, ecomp$/;"	V
ltfn	nvim/plugged/coc.nvim/build/index.js	/^  var gtfn, ltefn, ltfn, comp, ecomp$/;"	V
ltefn	nvim/plugged/coc.nvim/build/index.js	/^        ltefn(version, low.semver)) {$/;"	M
prerelease	nvim/plugged/coc.nvim/build/index.js	/^function prerelease (version, options) {$/;"	F
intersects	nvim/plugged/coc.nvim/build/index.js	/^function intersects (r1, r2, options) {$/;"	F
coerce	nvim/plugged/coc.nvim/build/index.js	/^function coerce (version, options) {$/;"	F
getLogFile	nvim/plugged/coc.nvim/build/index.js	/^function getLogFile() {$/;"	F
MAX_LOG_SIZE	nvim/plugged/coc.nvim/build/index.js	/^const MAX_LOG_SIZE = 1024 * 1024;$/;"	V
MAX_LOG_BACKUPS	nvim/plugged/coc.nvim/build/index.js	/^const MAX_LOG_BACKUPS = 10;$/;"	V
disableClustering	nvim/plugged/coc.nvim/build/index.js	/^    disableClustering: true,$/;"	P
appenders	nvim/plugged/coc.nvim/build/index.js	/^    appenders: {$/;"	P
out	nvim/plugged/coc.nvim/build/index.js	/^        out: {$/;"	P
mode	nvim/plugged/coc.nvim/build/index.js	/^            mode: 0o666,$/;"	P
filename	nvim/plugged/coc.nvim/build/index.js	/^            filename: logfile,$/;"	P
maxLogSize	nvim/plugged/coc.nvim/build/index.js	/^            maxLogSize: MAX_LOG_SIZE,$/;"	P
backups	nvim/plugged/coc.nvim/build/index.js	/^            backups: MAX_LOG_BACKUPS,$/;"	P
layout	nvim/plugged/coc.nvim/build/index.js	/^            layout: {$/;"	P
categories	nvim/plugged/coc.nvim/build/index.js	/^    categories: {$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^        default: { appenders: ['out'], level }$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = (name = 'coc-nvim') => {$/;"	M
getLogFile	nvim/plugged/coc.nvim/build/index.js	/^    logger.getLogFile = () => {$/;"	M
extendStatics	nvim/plugged/coc.nvim/build/index.js	/^var extendStatics = function(d, b) {$/;"	F
__extends	nvim/plugged/coc.nvim/build/index.js	/^function __extends(d, b) {$/;"	F
__	nvim/plugged/coc.nvim/build/index.js	/^    function __() { this.constructor = d; }$/;"	F
__rest	nvim/plugged/coc.nvim/build/index.js	/^function __rest(s, e) {$/;"	F
t	nvim/plugged/coc.nvim/build/index.js	/^    var t = {};$/;"	O
__decorate	nvim/plugged/coc.nvim/build/index.js	/^function __decorate(decorators, target, key, desc) {$/;"	F
__param	nvim/plugged/coc.nvim/build/index.js	/^function __param(paramIndex, decorator) {$/;"	F
__metadata	nvim/plugged/coc.nvim/build/index.js	/^function __metadata(metadataKey, metadataValue) {$/;"	F
__awaiter	nvim/plugged/coc.nvim/build/index.js	/^function __awaiter(thisArg, _arguments, P, generator) {$/;"	F
fulfilled	nvim/plugged/coc.nvim/build/index.js	/^        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }$/;"	F
rejected	nvim/plugged/coc.nvim/build/index.js	/^        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }$/;"	F
__generator	nvim/plugged/coc.nvim/build/index.js	/^function __generator(thisArg, body) {$/;"	F
_	nvim/plugged/coc.nvim/build/index.js	/^    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;$/;"	O
verb	nvim/plugged/coc.nvim/build/index.js	/^    function verb(n) { return function (v) { return step([n, v]); }; }$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^    function step(op) {$/;"	F
__exportStar	nvim/plugged/coc.nvim/build/index.js	/^function __exportStar(m, exports) {$/;"	F
__values	nvim/plugged/coc.nvim/build/index.js	/^function __values(o) {$/;"	F
next	nvim/plugged/coc.nvim/build/index.js	/^        next: function () {$/;"	M
__read	nvim/plugged/coc.nvim/build/index.js	/^function __read(o, n) {$/;"	F
__spread	nvim/plugged/coc.nvim/build/index.js	/^function __spread() {$/;"	F
__spreadArrays	nvim/plugged/coc.nvim/build/index.js	/^function __spreadArrays() {$/;"	F
__await	nvim/plugged/coc.nvim/build/index.js	/^function __await(v) {$/;"	F
__asyncGenerator	nvim/plugged/coc.nvim/build/index.js	/^function __asyncGenerator(thisArg, _arguments, generator) {$/;"	F
verb	nvim/plugged/coc.nvim/build/index.js	/^    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }$/;"	F
resume	nvim/plugged/coc.nvim/build/index.js	/^    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }$/;"	F
fulfill	nvim/plugged/coc.nvim/build/index.js	/^    function fulfill(value) { resume("next", value); }$/;"	F
reject	nvim/plugged/coc.nvim/build/index.js	/^    function reject(value) { resume("throw", value); }$/;"	F
settle	nvim/plugged/coc.nvim/build/index.js	/^    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }$/;"	F
__asyncDelegator	nvim/plugged/coc.nvim/build/index.js	/^function __asyncDelegator(o) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^    var i, p;$/;"	V
p	nvim/plugged/coc.nvim/build/index.js	/^    var i, p;$/;"	V
verb	nvim/plugged/coc.nvim/build/index.js	/^    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }$/;"	F
__asyncValues	nvim/plugged/coc.nvim/build/index.js	/^function __asyncValues(o) {$/;"	F
verb	nvim/plugged/coc.nvim/build/index.js	/^    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }$/;"	F
settle	nvim/plugged/coc.nvim/build/index.js	/^    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }$/;"	F
__makeTemplateObject	nvim/plugged/coc.nvim/build/index.js	/^function __makeTemplateObject(cooked, raw) {$/;"	F
__importStar	nvim/plugged/coc.nvim/build/index.js	/^function __importStar(mod) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^    var result = {};$/;"	O
__importDefault	nvim/plugged/coc.nvim/build/index.js	/^function __importDefault(mod) {$/;"	F
sendLogEventToAppender	nvim/plugged/coc.nvim/build/index.js	/^function sendLogEventToAppender(logEvent) {$/;"	F
loadConfigurationFile	nvim/plugged/coc.nvim/build/index.js	/^function loadConfigurationFile(filename) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(configurationFileOrObject) {$/;"	F
shutdown	nvim/plugged/coc.nvim/build/index.js	/^function shutdown(cb) {$/;"	F
completed	nvim/plugged/coc.nvim/build/index.js	/^  let completed = 0;$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^  let error;$/;"	V
complete	nvim/plugged/coc.nvim/build/index.js	/^  function complete(err) {$/;"	F
getLogger	nvim/plugged/coc.nvim/build/index.js	/^function getLogger(category) {$/;"	F
appenders	nvim/plugged/coc.nvim/build/index.js	/^        appenders: { out: { type: "stdout" } },$/;"	P
categories	nvim/plugged/coc.nvim/build/index.js	/^        categories: { default: { appenders: ["out"], level: "OFF" } }$/;"	P
log4js	nvim/plugged/coc.nvim/build/index.js	/^const log4js = {$/;"	O
useColors	nvim/plugged/coc.nvim/build/index.js	/^function useColors() {$/;"	F
formatArgs	nvim/plugged/coc.nvim/build/index.js	/^function formatArgs(args) {$/;"	F
c	nvim/plugged/coc.nvim/build/index.js	/^	const c = 'color: ' + this.color;$/;"	V
index	nvim/plugged/coc.nvim/build/index.js	/^	let index = 0;$/;"	V
lastC	nvim/plugged/coc.nvim/build/index.js	/^	let lastC = 0;$/;"	V
log	nvim/plugged/coc.nvim/build/index.js	/^function log(...args) {$/;"	F
save	nvim/plugged/coc.nvim/build/index.js	/^function save(namespaces) {$/;"	F
XXX	nvim/plugged/coc.nvim/build/index.js	/^		\/\/ XXX (@Qix-) should we be logging these?$/;"	T
load	nvim/plugged/coc.nvim/build/index.js	/^function load() {$/;"	F
r	nvim/plugged/coc.nvim/build/index.js	/^	let r;$/;"	V
XXX	nvim/plugged/coc.nvim/build/index.js	/^		\/\/ XXX (@Qix-) should we be logging these?$/;"	T
localstorage	nvim/plugged/coc.nvim/build/index.js	/^function localstorage() {$/;"	F
XXX	nvim/plugged/coc.nvim/build/index.js	/^		\/\/ XXX (@Qix-) should we be logging these?$/;"	T
j	nvim/plugged/coc.nvim/build/index.js	/^formatters.j = function (v) {$/;"	M
setup	nvim/plugged/coc.nvim/build/index.js	/^function setup(env) {$/;"	F
formatters	nvim/plugged/coc.nvim/build/index.js	/^	createDebug.formatters = {};$/;"	P
selectColor	nvim/plugged/coc.nvim/build/index.js	/^	function selectColor(namespace) {$/;"	F
hash	nvim/plugged/coc.nvim/build/index.js	/^		let hash = 0;$/;"	V
hash	nvim/plugged/coc.nvim/build/index.js	/^			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);$/;"	M
createDebug	nvim/plugged/coc.nvim/build/index.js	/^	function createDebug(namespace) {$/;"	F
prevTime	nvim/plugged/coc.nvim/build/index.js	/^		let prevTime;$/;"	V
debug	nvim/plugged/coc.nvim/build/index.js	/^		function debug(...args) {$/;"	F
index	nvim/plugged/coc.nvim/build/index.js	/^			let index = 0;$/;"	V
destroy	nvim/plugged/coc.nvim/build/index.js	/^	function destroy() {$/;"	F
extend	nvim/plugged/coc.nvim/build/index.js	/^	function extend(namespace, delimiter) {$/;"	F
enable	nvim/plugged/coc.nvim/build/index.js	/^	function enable(namespaces) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^		let i;$/;"	V
disable	nvim/plugged/coc.nvim/build/index.js	/^	function disable() {$/;"	F
namespaces	nvim/plugged/coc.nvim/build/index.js	/^		const namespaces = [$/;"	A
enabled	nvim/plugged/coc.nvim/build/index.js	/^	function enabled(name) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^		let i;$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^		let len;$/;"	V
toNamespace	nvim/plugged/coc.nvim/build/index.js	/^	function toNamespace(regexp) {$/;"	F
coerce	nvim/plugged/coc.nvim/build/index.js	/^	function coerce(val) {$/;"	F
s	nvim/plugged/coc.nvim/build/index.js	/^var s = 1000;$/;"	V
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function(val, options) {$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse(str) {$/;"	F
match	nvim/plugged/coc.nvim/build/index.js	/^  var match = \/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$\/i.exec($/;"	V
fmtShort	nvim/plugged/coc.nvim/build/index.js	/^function fmtShort(ms) {$/;"	F
fmtLong	nvim/plugged/coc.nvim/build/index.js	/^function fmtLong(ms) {$/;"	F
plural	nvim/plugged/coc.nvim/build/index.js	/^function plural(ms, msAbs, n, name) {$/;"	F
useColors	nvim/plugged/coc.nvim/build/index.js	/^function useColors() {$/;"	F
formatArgs	nvim/plugged/coc.nvim/build/index.js	/^function formatArgs(args) {$/;"	F
colorCode	nvim/plugged/coc.nvim/build/index.js	/^		const colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);$/;"	V
getDate	nvim/plugged/coc.nvim/build/index.js	/^function getDate() {$/;"	F
log	nvim/plugged/coc.nvim/build/index.js	/^function log(...args) {$/;"	F
save	nvim/plugged/coc.nvim/build/index.js	/^function save(namespaces) {$/;"	F
load	nvim/plugged/coc.nvim/build/index.js	/^function load() {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^function init(debug) {$/;"	F
inspectOpts	nvim/plugged/coc.nvim/build/index.js	/^	debug.inspectOpts = {};$/;"	P
o	nvim/plugged/coc.nvim/build/index.js	/^formatters.o = function (v) {$/;"	M
O	nvim/plugged/coc.nvim/build/index.js	/^formatters.O = function (v) {$/;"	M
forceColor	nvim/plugged/coc.nvim/build/index.js	/^let forceColor;$/;"	V
hasFlag	nvim/plugged/coc.nvim/build/index.js	/^	hasFlag('color=never')) {$/;"	M
hasFlag	nvim/plugged/coc.nvim/build/index.js	/^	hasFlag('color=always')) {$/;"	M
translateLevel	nvim/plugged/coc.nvim/build/index.js	/^function translateLevel(level) {$/;"	F
hasBasic	nvim/plugged/coc.nvim/build/index.js	/^		hasBasic: true,$/;"	P
supportsColor	nvim/plugged/coc.nvim/build/index.js	/^function supportsColor(stream) {$/;"	F
hasFlag	nvim/plugged/coc.nvim/build/index.js	/^		hasFlag('color=truecolor')) {$/;"	M
getSupportLevel	nvim/plugged/coc.nvim/build/index.js	/^function getSupportLevel(stream) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
supportsColor	nvim/plugged/coc.nvim/build/index.js	/^	supportsColor: getSupportLevel,$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = (flag, argv) => {$/;"	M
rfdc	nvim/plugged/coc.nvim/build/index.js	/^function rfdc (opts) {$/;"	F
cloneArray	nvim/plugged/coc.nvim/build/index.js	/^  function cloneArray (a, fn) {$/;"	F
a2	nvim/plugged/coc.nvim/build/index.js	/^    var a2 = new Array(keys.length)$/;"	V
clone	nvim/plugged/coc.nvim/build/index.js	/^  function clone (o) {$/;"	F
o2	nvim/plugged/coc.nvim/build/index.js	/^    var o2 = {}$/;"	O
cloneProto	nvim/plugged/coc.nvim/build/index.js	/^  function cloneProto (o) {$/;"	F
o2	nvim/plugged/coc.nvim/build/index.js	/^    var o2 = {}$/;"	O
rfdcCircles	nvim/plugged/coc.nvim/build/index.js	/^function rfdcCircles (opts) {$/;"	F
refs	nvim/plugged/coc.nvim/build/index.js	/^  var refs = []$/;"	A
refsNew	nvim/plugged/coc.nvim/build/index.js	/^  var refsNew = []$/;"	A
cloneArray	nvim/plugged/coc.nvim/build/index.js	/^  function cloneArray (a, fn) {$/;"	F
a2	nvim/plugged/coc.nvim/build/index.js	/^    var a2 = new Array(keys.length)$/;"	V
clone	nvim/plugged/coc.nvim/build/index.js	/^  function clone (o) {$/;"	F
o2	nvim/plugged/coc.nvim/build/index.js	/^    var o2 = {}$/;"	O
cloneProto	nvim/plugged/coc.nvim/build/index.js	/^  function cloneProto (o) {$/;"	F
o2	nvim/plugged/coc.nvim/build/index.js	/^    var o2 = {}$/;"	O
preProcessingListeners	nvim/plugged/coc.nvim/build/index.js	/^const preProcessingListeners = [];$/;"	A
listeners	nvim/plugged/coc.nvim/build/index.js	/^const listeners = [];$/;"	A
not	nvim/plugged/coc.nvim/build/index.js	/^const not = thing => !thing;$/;"	F
anObject	nvim/plugged/coc.nvim/build/index.js	/^const anObject = thing => thing && typeof thing === 'object' && !Array.isArray(thing);$/;"	F
validIdentifier	nvim/plugged/coc.nvim/build/index.js	/^const validIdentifier = thing => \/^[A-Za-z][A-Za-z0-9_]*$\/g.test(thing);$/;"	F
anInteger	nvim/plugged/coc.nvim/build/index.js	/^const anInteger = thing => thing && typeof thing === 'number' && Number.isInteger(thing);$/;"	F
addListener	nvim/plugged/coc.nvim/build/index.js	/^const addListener = (fn) => {$/;"	F
addPreProcessingListener	nvim/plugged/coc.nvim/build/index.js	/^const addPreProcessingListener = (fn) => {$/;"	F
throwExceptionIf	nvim/plugged/coc.nvim/build/index.js	/^const throwExceptionIf = (config, checks, message) => {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^const configure = (candidate) => {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
styles	nvim/plugged/coc.nvim/build/index.js	/^const styles = {$/;"	O
bold	nvim/plugged/coc.nvim/build/index.js	/^  bold: [1, 22],$/;"	P
italic	nvim/plugged/coc.nvim/build/index.js	/^  italic: [3, 23],$/;"	P
underline	nvim/plugged/coc.nvim/build/index.js	/^  underline: [4, 24],$/;"	P
inverse	nvim/plugged/coc.nvim/build/index.js	/^  inverse: [7, 27],$/;"	P
white	nvim/plugged/coc.nvim/build/index.js	/^  white: [37, 39],$/;"	P
grey	nvim/plugged/coc.nvim/build/index.js	/^  grey: [90, 39],$/;"	P
black	nvim/plugged/coc.nvim/build/index.js	/^  black: [90, 39],$/;"	P
blue	nvim/plugged/coc.nvim/build/index.js	/^  blue: [34, 39],$/;"	P
cyan	nvim/plugged/coc.nvim/build/index.js	/^  cyan: [36, 39],$/;"	P
green	nvim/plugged/coc.nvim/build/index.js	/^  green: [32, 39],$/;"	P
magenta	nvim/plugged/coc.nvim/build/index.js	/^  magenta: [35, 39],$/;"	P
red	nvim/plugged/coc.nvim/build/index.js	/^  red: [91, 39],$/;"	P
yellow	nvim/plugged/coc.nvim/build/index.js	/^  yellow: [33, 39]$/;"	P
colorizeStart	nvim/plugged/coc.nvim/build/index.js	/^function colorizeStart(style) {$/;"	F
colorizeEnd	nvim/plugged/coc.nvim/build/index.js	/^function colorizeEnd(style) {$/;"	F
colorize	nvim/plugged/coc.nvim/build/index.js	/^function colorize(str, style) {$/;"	F
timestampLevelAndCategory	nvim/plugged/coc.nvim/build/index.js	/^function timestampLevelAndCategory(loggingEvent, colour) {$/;"	F
basicLayout	nvim/plugged/coc.nvim/build/index.js	/^function basicLayout(loggingEvent) {$/;"	F
colouredLayout	nvim/plugged/coc.nvim/build/index.js	/^function colouredLayout(loggingEvent) {$/;"	F
messagePassThroughLayout	nvim/plugged/coc.nvim/build/index.js	/^function messagePassThroughLayout(loggingEvent) {$/;"	F
dummyLayout	nvim/plugged/coc.nvim/build/index.js	/^function dummyLayout(loggingEvent) {$/;"	F
patternLayout	nvim/plugged/coc.nvim/build/index.js	/^function patternLayout(pattern, tokens) {$/;"	F
TTCC_CONVERSION_PATTERN	nvim/plugged/coc.nvim/build/index.js	/^  const TTCC_CONVERSION_PATTERN = '%r %p %c - %m%n';$/;"	V
regex	nvim/plugged/coc.nvim/build/index.js	/^  const regex = \/%(-?[0-9]+)?(\\.?[0-9]+)?([[\\]cdhmnprzxXyflos%])(\\{([^}]+)\\})?|([^%]+)\/;$/;"	V
categoryName	nvim/plugged/coc.nvim/build/index.js	/^  function categoryName(loggingEvent, specifier) {$/;"	F
formatAsDate	nvim/plugged/coc.nvim/build/index.js	/^  function formatAsDate(loggingEvent, specifier) {$/;"	F
hostname	nvim/plugged/coc.nvim/build/index.js	/^  function hostname() {$/;"	F
formatMessage	nvim/plugged/coc.nvim/build/index.js	/^  function formatMessage(loggingEvent) {$/;"	F
endOfLine	nvim/plugged/coc.nvim/build/index.js	/^  function endOfLine() {$/;"	F
logLevel	nvim/plugged/coc.nvim/build/index.js	/^  function logLevel(loggingEvent) {$/;"	F
startTime	nvim/plugged/coc.nvim/build/index.js	/^  function startTime(loggingEvent) {$/;"	F
startColour	nvim/plugged/coc.nvim/build/index.js	/^  function startColour(loggingEvent) {$/;"	F
endColour	nvim/plugged/coc.nvim/build/index.js	/^  function endColour(loggingEvent) {$/;"	F
percent	nvim/plugged/coc.nvim/build/index.js	/^  function percent() {$/;"	F
pid	nvim/plugged/coc.nvim/build/index.js	/^  function pid(loggingEvent) {$/;"	F
clusterInfo	nvim/plugged/coc.nvim/build/index.js	/^  function clusterInfo() {$/;"	F
userDefined	nvim/plugged/coc.nvim/build/index.js	/^  function userDefined(loggingEvent, specifier) {$/;"	F
contextDefined	nvim/plugged/coc.nvim/build/index.js	/^  function contextDefined(loggingEvent, specifier) {$/;"	F
fileName	nvim/plugged/coc.nvim/build/index.js	/^  function fileName(loggingEvent, specifier) {$/;"	F
lineNumber	nvim/plugged/coc.nvim/build/index.js	/^  function lineNumber(loggingEvent) {$/;"	F
columnNumber	nvim/plugged/coc.nvim/build/index.js	/^  function columnNumber(loggingEvent) {$/;"	F
callStack	nvim/plugged/coc.nvim/build/index.js	/^  function callStack(loggingEvent) {$/;"	F
replacers	nvim/plugged/coc.nvim/build/index.js	/^  const replacers = {$/;"	O
c	nvim/plugged/coc.nvim/build/index.js	/^    c: categoryName,$/;"	P
d	nvim/plugged/coc.nvim/build/index.js	/^    d: formatAsDate,$/;"	P
h	nvim/plugged/coc.nvim/build/index.js	/^    h: hostname,$/;"	P
m	nvim/plugged/coc.nvim/build/index.js	/^    m: formatMessage,$/;"	P
n	nvim/plugged/coc.nvim/build/index.js	/^    n: endOfLine,$/;"	P
p	nvim/plugged/coc.nvim/build/index.js	/^    p: logLevel,$/;"	P
r	nvim/plugged/coc.nvim/build/index.js	/^    r: startTime,$/;"	P
y	nvim/plugged/coc.nvim/build/index.js	/^    y: clusterInfo,$/;"	P
z	nvim/plugged/coc.nvim/build/index.js	/^    z: pid,$/;"	P
x	nvim/plugged/coc.nvim/build/index.js	/^    x: userDefined,$/;"	P
X	nvim/plugged/coc.nvim/build/index.js	/^    X: contextDefined,$/;"	P
f	nvim/plugged/coc.nvim/build/index.js	/^    f: fileName,$/;"	P
l	nvim/plugged/coc.nvim/build/index.js	/^    l: lineNumber,$/;"	P
o	nvim/plugged/coc.nvim/build/index.js	/^    o: columnNumber,$/;"	P
s	nvim/plugged/coc.nvim/build/index.js	/^    s: callStack$/;"	P
replaceToken	nvim/plugged/coc.nvim/build/index.js	/^  function replaceToken(conversionCharacter, loggingEvent, specifier) {$/;"	F
truncate	nvim/plugged/coc.nvim/build/index.js	/^  function truncate(truncation, toTruncate) {$/;"	F
len	nvim/plugged/coc.nvim/build/index.js	/^    let len;$/;"	V
pad	nvim/plugged/coc.nvim/build/index.js	/^  function pad(padding, toPad) {$/;"	F
len	nvim/plugged/coc.nvim/build/index.js	/^    let len;$/;"	V
truncateAndPad	nvim/plugged/coc.nvim/build/index.js	/^  function truncateAndPad(toTruncAndPad, truncation, padding) {$/;"	F
formattedString	nvim/plugged/coc.nvim/build/index.js	/^    let formattedString = '';$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^    let result;$/;"	V
layoutMakers	nvim/plugged/coc.nvim/build/index.js	/^const layoutMakers = {$/;"	O
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
coloredLayout	nvim/plugged/coc.nvim/build/index.js	/^  coloredLayout: colouredLayout,$/;"	P
padWithZeros	nvim/plugged/coc.nvim/build/index.js	/^function padWithZeros(vNumber, width) {$/;"	F
addZero	nvim/plugged/coc.nvim/build/index.js	/^function addZero(vNumber) {$/;"	F
offset	nvim/plugged/coc.nvim/build/index.js	/^function offset(timezoneOffset) {$/;"	F
datePart	nvim/plugged/coc.nvim/build/index.js	/^function datePart(date, displayUTC, part) {$/;"	F
asString	nvim/plugged/coc.nvim/build/index.js	/^function asString(format, date) {$/;"	F
extractDateParts	nvim/plugged/coc.nvim/build/index.js	/^function extractDateParts(pattern, str, missingValuesDate) {$/;"	F
matchers	nvim/plugged/coc.nvim/build/index.js	/^  var matchers = [$/;"	A
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/y{1,4}\/,$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d{1,4}",$/;"	P
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/MM\/,$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d{1,2}",$/;"	P
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/dd\/,$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d{1,2}",$/;"	P
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/hh\/,$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d{1,2}",$/;"	P
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/mm\/,$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d\\\\d",$/;"	P
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/ss\/,$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d\\\\d",$/;"	P
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/SSS\/,$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "\\\\d\\\\d\\\\d",$/;"	P
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
pattern	nvim/plugged/coc.nvim/build/index.js	/^      pattern: \/O\/,$/;"	P
regexp	nvim/plugged/coc.nvim/build/index.js	/^      regexp: "[+-]\\\\d{3,4}|Z",$/;"	P
fn	nvim/plugged/coc.nvim/build/index.js	/^      fn: function(date, value) {$/;"	M
function	nvim/plugged/coc.nvim/build/index.js	/^    function(p, m) {$/;"	M
matcher	nvim/plugged/coc.nvim/build/index.js	/^  var matcher = new RegExp(parsedPattern.regexp);$/;"	V
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse(pattern, str, missingValuesDate) {$/;"	F
now	nvim/plugged/coc.nvim/build/index.js	/^function now() {$/;"	F
validColours	nvim/plugged/coc.nvim/build/index.js	/^const validColours = [$/;"	A
Level	nvim/plugged/coc.nvim/build/index.js	/^class Level {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(level, levelStr, colour) {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^  toString() {$/;"	M
getLevel	nvim/plugged/coc.nvim/build/index.js	/^  static getLevel(sArg, defaultLevel) {$/;"	M
addLevels	nvim/plugged/coc.nvim/build/index.js	/^  static addLevels(customLevels) {$/;"	M
existingLevelIndex	nvim/plugged/coc.nvim/build/index.js	/^        const existingLevelIndex = Level.levels.findIndex(lvl => lvl.levelStr === levelStr);$/;"	F
isLessThanOrEqualTo	nvim/plugged/coc.nvim/build/index.js	/^  isLessThanOrEqualTo(otherLevel) {$/;"	M
isGreaterThanOrEqualTo	nvim/plugged/coc.nvim/build/index.js	/^  isGreaterThanOrEqualTo(otherLevel) {$/;"	M
isEqualTo	nvim/plugged/coc.nvim/build/index.js	/^  isEqualTo(otherLevel) {$/;"	M
ALL	nvim/plugged/coc.nvim/build/index.js	/^  ALL: { value: Number.MIN_VALUE, colour: 'grey' },$/;"	P
TRACE	nvim/plugged/coc.nvim/build/index.js	/^  TRACE: { value: 5000, colour: 'blue' },$/;"	P
DEBUG	nvim/plugged/coc.nvim/build/index.js	/^  DEBUG: { value: 10000, colour: 'cyan' },$/;"	P
INFO	nvim/plugged/coc.nvim/build/index.js	/^  INFO: { value: 20000, colour: 'green' },$/;"	P
WARN	nvim/plugged/coc.nvim/build/index.js	/^  WARN: { value: 30000, colour: 'yellow' },$/;"	P
ERROR	nvim/plugged/coc.nvim/build/index.js	/^  ERROR: { value: 40000, colour: 'red' },$/;"	P
FATAL	nvim/plugged/coc.nvim/build/index.js	/^  FATAL: { value: 50000, colour: 'magenta' },$/;"	P
MARK	nvim/plugged/coc.nvim/build/index.js	/^  MARK: { value: 9007199254740992, colour: 'grey' }, \/\/ 2^53$/;"	P
OFF	nvim/plugged/coc.nvim/build/index.js	/^  OFF: { value: Number.MAX_VALUE, colour: 'grey' }$/;"	P
coreAppenders	nvim/plugged/coc.nvim/build/index.js	/^const coreAppenders = new Map();$/;"	V
appenders	nvim/plugged/coc.nvim/build/index.js	/^const appenders = new Map();$/;"	V
tryLoading	nvim/plugged/coc.nvim/build/index.js	/^const tryLoading = (modulePath, config) => {$/;"	F
loadAppenderModule	nvim/plugged/coc.nvim/build/index.js	/^const loadAppenderModule = (type, config) => coreAppenders.get(type)$/;"	F
createAppender	nvim/plugged/coc.nvim/build/index.js	/^const createAppender = (name, config) => {$/;"	F
setup	nvim/plugged/coc.nvim/build/index.js	/^const setup = (config) => {$/;"	F
listeners	nvim/plugged/coc.nvim/build/index.js	/^const listeners = [];$/;"	A
pm2InstanceVar	nvim/plugged/coc.nvim/build/index.js	/^let pm2InstanceVar = "NODE_APP_INSTANCE";$/;"	V
isPM2Master	nvim/plugged/coc.nvim/build/index.js	/^const isPM2Master = () => pm2 && process.env[pm2InstanceVar] === "0";$/;"	F
isMaster	nvim/plugged/coc.nvim/build/index.js	/^const isMaster = () => disabled || cluster.isMaster || isPM2Master();$/;"	F
sendToListeners	nvim/plugged/coc.nvim/build/index.js	/^const sendToListeners = logEvent => {$/;"	F
receiver	nvim/plugged/coc.nvim/build/index.js	/^const receiver = (worker, message) => {$/;"	F
disableClustering	nvim/plugged/coc.nvim/build/index.js	/^      disableClustering: disabled,$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
onlyOnMaster	nvim/plugged/coc.nvim/build/index.js	/^  onlyOnMaster: (fn, notMaster) => (isMaster() ? fn() : notMaster),$/;"	M
cluster	nvim/plugged/coc.nvim/build/index.js	/^        msg.cluster = {$/;"	P
LoggingEvent	nvim/plugged/coc.nvim/build/index.js	/^class LoggingEvent {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(categoryName, level, data, context, location) {$/;"	M
serialise	nvim/plugged/coc.nvim/build/index.js	/^  serialise() {$/;"	M
logData	nvim/plugged/coc.nvim/build/index.js	/^    const logData = this.data.map((e) => {$/;"	F
deserialise	nvim/plugged/coc.nvim/build/index.js	/^  static deserialise(serialised) {$/;"	M
event	nvim/plugged/coc.nvim/build/index.js	/^    let event;$/;"	V
fakeError	nvim/plugged/coc.nvim/build/index.js	/^          const fakeError = new Error(e);$/;"	V
Flatted	nvim/plugged/coc.nvim/build/index.js	/^  var Flatted = {$/;"	O
replace	nvim/plugged/coc.nvim/build/index.js	/^        replace = function (key, value) {$/;"	M
noop	nvim/plugged/coc.nvim/build/index.js	/^  function noop(key, value) {$/;"	F
revive	nvim/plugged/coc.nvim/build/index.js	/^  function revive(input, parsed, output, $) {$/;"	F
set	nvim/plugged/coc.nvim/build/index.js	/^  function set(known, input, value) {$/;"	F
primitives	nvim/plugged/coc.nvim/build/index.js	/^  function primitives(value) {$/;"	F
Primitives	nvim/plugged/coc.nvim/build/index.js	/^  function Primitives(key, value) {$/;"	F
maxFileSizeUnitTransform	nvim/plugged/coc.nvim/build/index.js	/^function maxFileSizeUnitTransform(maxLogSize) {$/;"	F
units	nvim/plugged/coc.nvim/build/index.js	/^  const units = {$/;"	O
K	nvim/plugged/coc.nvim/build/index.js	/^    K: 1024,$/;"	P
adapter	nvim/plugged/coc.nvim/build/index.js	/^function adapter(configAdapter, config) {$/;"	F
fileAppenderAdapter	nvim/plugged/coc.nvim/build/index.js	/^function fileAppenderAdapter(config) {$/;"	F
configAdapter	nvim/plugged/coc.nvim/build/index.js	/^  const configAdapter = {$/;"	O
maxLogSize	nvim/plugged/coc.nvim/build/index.js	/^    maxLogSize: maxFileSizeUnitTransform$/;"	P
adapters	nvim/plugged/coc.nvim/build/index.js	/^const adapters = {$/;"	O
file	nvim/plugged/coc.nvim/build/index.js	/^  file: fileAppenderAdapter,$/;"	P
fileSync	nvim/plugged/coc.nvim/build/index.js	/^  fileSync: fileAppenderAdapter$/;"	P
consoleAppender	nvim/plugged/coc.nvim/build/index.js	/^function consoleAppender(layout, timezoneOffset) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts) {$/;"	F
stdoutAppender	nvim/plugged/coc.nvim/build/index.js	/^function stdoutAppender(layout, timezoneOffset) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts) {$/;"	F
stderrAppender	nvim/plugged/coc.nvim/build/index.js	/^function stderrAppender(layout, timezoneOffset) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts) {$/;"	F
logLevelFilter	nvim/plugged/coc.nvim/build/index.js	/^function logLevelFilter(minLevelString, maxLevelString, appender, levels) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts, findAppender, levels) {$/;"	F
categoryFilter	nvim/plugged/coc.nvim/build/index.js	/^function categoryFilter(excludes, appender) {$/;"	F
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts, findAppender) {$/;"	F
removeNullOrEmptyRegexp	nvim/plugged/coc.nvim/build/index.js	/^function removeNullOrEmptyRegexp(regexp) {$/;"	F
filtered	nvim/plugged/coc.nvim/build/index.js	/^  const filtered = regexp.filter(el => ((el != null) && (el !== '')));$/;"	F
noLogFilter	nvim/plugged/coc.nvim/build/index.js	/^function noLogFilter(filters, appender) {$/;"	F
regex	nvim/plugged/coc.nvim/build/index.js	/^    const regex = new RegExp(filters.join('|'), 'i');$/;"	V
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts, findAppender) {$/;"	F
openTheStream	nvim/plugged/coc.nvim/build/index.js	/^function openTheStream(file, fileSize, numFiles, options) {$/;"	F
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new streams.RollingFileStream($/;"	V
fileAppender	nvim/plugged/coc.nvim/build/index.js	/^function fileAppender(file, layout, logSize, numBackups, options, timezoneOffset) {$/;"	F
app	nvim/plugged/coc.nvim/build/index.js	/^  const app = function (loggingEvent) {$/;"	F
reopen	nvim/plugged/coc.nvim/build/index.js	/^  app.reopen = function () {$/;"	M
sighupHandler	nvim/plugged/coc.nvim/build/index.js	/^  app.sighupHandler = function () {$/;"	M
shutdown	nvim/plugged/coc.nvim/build/index.js	/^  app.shutdown = function (complete) {$/;"	M
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
RollingFileWriteStream	nvim/plugged/coc.nvim/build/index.js	/^class RollingFileWriteStream extends Writable {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(filePath, options) {$/;"	M
state	nvim/plugged/coc.nvim/build/index.js	/^    this.state = {$/;"	P
currentSize	nvim/plugged/coc.nvim/build/index.js	/^      currentSize: 0$/;"	P
index	nvim/plugged/coc.nvim/build/index.js	/^      index: 0,$/;"	P
_setExistingSizeAndDate	nvim/plugged/coc.nvim/build/index.js	/^  _setExistingSizeAndDate() {$/;"	M
_parseOption	nvim/plugged/coc.nvim/build/index.js	/^  _parseOption(rawOptions) {$/;"	M
defaultOptions	nvim/plugged/coc.nvim/build/index.js	/^    const defaultOptions = {$/;"	O
encoding	nvim/plugged/coc.nvim/build/index.js	/^      encoding: "utf8",$/;"	P
flags	nvim/plugged/coc.nvim/build/index.js	/^      flags: "a",$/;"	P
compress	nvim/plugged/coc.nvim/build/index.js	/^      compress: false,$/;"	P
keepFileExt	nvim/plugged/coc.nvim/build/index.js	/^      keepFileExt: false,$/;"	P
alwaysIncludePattern	nvim/plugged/coc.nvim/build/index.js	/^      alwaysIncludePattern: false$/;"	P
_final	nvim/plugged/coc.nvim/build/index.js	/^  _final(callback) {$/;"	M
_write	nvim/plugged/coc.nvim/build/index.js	/^  _write(chunk, encoding, callback) {$/;"	M
_dateChanged	nvim/plugged/coc.nvim/build/index.js	/^  _dateChanged() {$/;"	M
_tooBig	nvim/plugged/coc.nvim/build/index.js	/^  _tooBig() {$/;"	M
_roll	nvim/plugged/coc.nvim/build/index.js	/^  _roll() {$/;"	M
index	nvim/plugged/coc.nvim/build/index.js	/^        index: i$/;"	P
files	nvim/plugged/coc.nvim/build/index.js	/^    const files = await fs.readdir(this.fileObject.dir).catch(() => []);$/;"	F
getKey	nvim/plugged/coc.nvim/build/index.js	/^    const getKey = n =>$/;"	F
_renewWriteStream	nvim/plugged/coc.nvim/build/index.js	/^  _renewWriteStream() {$/;"	M
index	nvim/plugged/coc.nvim/build/index.js	/^      index: 0$/;"	P
ops	nvim/plugged/coc.nvim/build/index.js	/^    const ops = {$/;"	O
_tooManyFiles	nvim/plugged/coc.nvim/build/index.js	/^  _tooManyFiles(numFiles) {$/;"	M
deleteFiles	nvim/plugged/coc.nvim/build/index.js	/^const deleteFiles = fileNames => {$/;"	F
api	nvim/plugged/coc.nvim/build/index.js	/^const api = [$/;"	A
exists	nvim/plugged/coc.nvim/build/index.js	/^exports.exists = function (filename, callback) {$/;"	M
read	nvim/plugged/coc.nvim/build/index.js	/^exports.read = function (fd, buffer, offset, length, position, callback) {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^exports.write = function (fd, buffer, ...args) {$/;"	M
fromCallback	nvim/plugged/coc.nvim/build/index.js	/^exports.fromCallback = function (fn) {$/;"	M
fromPromise	nvim/plugged/coc.nvim/build/index.js	/^exports.fromPromise = function (fn) {$/;"	M
noop	nvim/plugged/coc.nvim/build/index.js	/^function noop () {}$/;"	F
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function() {$/;"	M
queue	nvim/plugged/coc.nvim/build/index.js	/^  var queue = []$/;"	A
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function() {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^  fs.close = (function (fs$close) {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^    function close (fd, cb) {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^      value: fs$close$/;"	P
closeSync	nvim/plugged/coc.nvim/build/index.js	/^  fs.closeSync = (function (fs$closeSync) {$/;"	M
closeSync	nvim/plugged/coc.nvim/build/index.js	/^    function closeSync (fd) {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^      value: fs$closeSync$/;"	P
patch	nvim/plugged/coc.nvim/build/index.js	/^function patch (fs) {$/;"	F
readFile	nvim/plugged/coc.nvim/build/index.js	/^  function readFile (path, options, cb) {$/;"	F
go$readFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$readFile (path, options, cb) {$/;"	F
writeFile	nvim/plugged/coc.nvim/build/index.js	/^  function writeFile (path, data, options, cb) {$/;"	F
go$writeFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$writeFile (path, data, options, cb) {$/;"	F
appendFile	nvim/plugged/coc.nvim/build/index.js	/^  function appendFile (path, data, options, cb) {$/;"	F
go$appendFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$appendFile (path, data, options, cb) {$/;"	F
readdir	nvim/plugged/coc.nvim/build/index.js	/^  function readdir (path, options, cb) {$/;"	F
args	nvim/plugged/coc.nvim/build/index.js	/^    var args = [path]$/;"	A
go$readdir$cb	nvim/plugged/coc.nvim/build/index.js	/^    function go$readdir$cb (err, files) {$/;"	F
go$readdir	nvim/plugged/coc.nvim/build/index.js	/^  function go$readdir (args) {$/;"	F
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function () {$/;"	M
set	nvim/plugged/coc.nvim/build/index.js	/^    set: function (val) {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^    enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^    configurable: true$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function () {$/;"	M
set	nvim/plugged/coc.nvim/build/index.js	/^    set: function (val) {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^    enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^    configurable: true$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function () {$/;"	M
set	nvim/plugged/coc.nvim/build/index.js	/^    set: function (val) {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^    enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^    configurable: true$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function () {$/;"	M
set	nvim/plugged/coc.nvim/build/index.js	/^    set: function (val) {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^    enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^    configurable: true$/;"	P
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^  function ReadStream (path, options) {$/;"	F
ReadStream$open	nvim/plugged/coc.nvim/build/index.js	/^  function ReadStream$open () {$/;"	F
open	nvim/plugged/coc.nvim/build/index.js	/^    open(that.path, that.flags, that.mode, function (err, fd) {$/;"	M
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^  function WriteStream (path, options) {$/;"	F
WriteStream$open	nvim/plugged/coc.nvim/build/index.js	/^  function WriteStream$open () {$/;"	F
open	nvim/plugged/coc.nvim/build/index.js	/^    open(that.path, that.flags, that.mode, function (err, fd) {$/;"	M
createReadStream	nvim/plugged/coc.nvim/build/index.js	/^  function createReadStream (path, options) {$/;"	F
createWriteStream	nvim/plugged/coc.nvim/build/index.js	/^  function createWriteStream (path, options) {$/;"	F
open	nvim/plugged/coc.nvim/build/index.js	/^  function open (path, flags, mode, cb) {$/;"	F
go$open	nvim/plugged/coc.nvim/build/index.js	/^    function go$open (path, flags, mode, cb) {$/;"	F
enqueue	nvim/plugged/coc.nvim/build/index.js	/^function enqueue (elem) {$/;"	F
retry	nvim/plugged/coc.nvim/build/index.js	/^function retry () {$/;"	F
cwd	nvim/plugged/coc.nvim/build/index.js	/^process.cwd = function() {$/;"	M
chdir	nvim/plugged/coc.nvim/build/index.js	/^process.chdir = function(d) {$/;"	M
patch	nvim/plugged/coc.nvim/build/index.js	/^function patch (fs) {$/;"	F
lchmod	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmod = function (path, mode, cb) {$/;"	M
lchmodSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmodSync = function () {}$/;"	M
lchown	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchown = function (path, uid, gid, cb) {$/;"	M
lchownSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchownSync = function () {}$/;"	M
rename	nvim/plugged/coc.nvim/build/index.js	/^    fs.rename = (function (fs$rename) { return function (from, to, cb) {$/;"	M
backoff	nvim/plugged/coc.nvim/build/index.js	/^      var backoff = 0;$/;"	V
fs$rename	nvim/plugged/coc.nvim/build/index.js	/^      fs$rename(from, to, function CB (er) {$/;"	M
setTimeout	nvim/plugged/coc.nvim/build/index.js	/^          setTimeout(function() {$/;"	M
read	nvim/plugged/coc.nvim/build/index.js	/^  fs.read = (function (fs$read) {$/;"	M
read	nvim/plugged/coc.nvim/build/index.js	/^    function read (fd, buffer, offset, length, position, callback_) {$/;"	F
eagCounter	nvim/plugged/coc.nvim/build/index.js	/^        var eagCounter = 0$/;"	V
callback	nvim/plugged/coc.nvim/build/index.js	/^        callback = function (er, _, __) {$/;"	M
readSync	nvim/plugged/coc.nvim/build/index.js	/^  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {$/;"	M
eagCounter	nvim/plugged/coc.nvim/build/index.js	/^    var eagCounter = 0$/;"	V
patchLchmod	nvim/plugged/coc.nvim/build/index.js	/^  function patchLchmod (fs) {$/;"	F
lchmod	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmod = function (path, mode, callback) {$/;"	M
lchmodSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmodSync = function (path, mode) {$/;"	M
patchLutimes	nvim/plugged/coc.nvim/build/index.js	/^  function patchLutimes (fs) {$/;"	F
lutimes	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimes = function (path, at, mt, cb) {$/;"	M
lutimesSync	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimesSync = function (path, at, mt) {$/;"	M
lutimes	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }$/;"	M
lutimesSync	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimesSync = function () {}$/;"	M
chmodFix	nvim/plugged/coc.nvim/build/index.js	/^  function chmodFix (orig) {$/;"	F
chmodFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function chmodFixSync (orig) {$/;"	F
chownFix	nvim/plugged/coc.nvim/build/index.js	/^  function chownFix (orig) {$/;"	F
chownFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function chownFixSync (orig) {$/;"	F
statFix	nvim/plugged/coc.nvim/build/index.js	/^  function statFix (orig) {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^      function callback (er, stats) {$/;"	F
statFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function statFixSync (orig) {$/;"	F
chownErOk	nvim/plugged/coc.nvim/build/index.js	/^  function chownErOk (er) {$/;"	F
legacy	nvim/plugged/coc.nvim/build/index.js	/^function legacy (fs) {$/;"	F
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^    ReadStream: ReadStream,$/;"	P
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^    WriteStream: WriteStream$/;"	P
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^  function ReadStream (path, options) {$/;"	F
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^  function WriteStream (path, options) {$/;"	F
clone	nvim/plugged/coc.nvim/build/index.js	/^function clone (obj) {$/;"	F
copy	nvim/plugged/coc.nvim/build/index.js	/^    var copy = { __proto__: obj.__proto__ }$/;"	O
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
copySync	nvim/plugged/coc.nvim/build/index.js	/^function copySync (src, dest, opts) {$/;"	F
handleFilterAndCopy	nvim/plugged/coc.nvim/build/index.js	/^function handleFilterAndCopy (destStat, src, dest, opts) {$/;"	F
startCopy	nvim/plugged/coc.nvim/build/index.js	/^function startCopy (destStat, src, dest, opts) {$/;"	F
getStats	nvim/plugged/coc.nvim/build/index.js	/^function getStats (destStat, src, dest, opts) {$/;"	F
onFile	nvim/plugged/coc.nvim/build/index.js	/^function onFile (srcStat, destStat, src, dest, opts) {$/;"	F
mayCopyFile	nvim/plugged/coc.nvim/build/index.js	/^function mayCopyFile (srcStat, src, dest, opts) {$/;"	F
copyFile	nvim/plugged/coc.nvim/build/index.js	/^function copyFile (srcStat, src, dest, opts) {$/;"	F
copyFileFallback	nvim/plugged/coc.nvim/build/index.js	/^function copyFileFallback (srcStat, src, dest, opts) {$/;"	F
BUF_LENGTH	nvim/plugged/coc.nvim/build/index.js	/^  const BUF_LENGTH = 64 * 1024$/;"	V
pos	nvim/plugged/coc.nvim/build/index.js	/^  let pos = 0$/;"	V
onDir	nvim/plugged/coc.nvim/build/index.js	/^function onDir (srcStat, destStat, src, dest, opts) {$/;"	F
mkDirAndCopy	nvim/plugged/coc.nvim/build/index.js	/^function mkDirAndCopy (srcStat, src, dest, opts) {$/;"	F
copyDir	nvim/plugged/coc.nvim/build/index.js	/^function copyDir (src, dest, opts) {$/;"	F
copyDirItem	nvim/plugged/coc.nvim/build/index.js	/^function copyDirItem (item, src, dest, opts) {$/;"	F
onLink	nvim/plugged/coc.nvim/build/index.js	/^function onLink (destStat, src, dest, opts) {$/;"	F
copyLink	nvim/plugged/coc.nvim/build/index.js	/^function copyLink (resolvedSrc, dest) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
mkdirp	nvim/plugged/coc.nvim/build/index.js	/^  mkdirp: mkdirs,$/;"	P
mkdirpSync	nvim/plugged/coc.nvim/build/index.js	/^  mkdirpSync: mkdirsSync,$/;"	P
ensureDir	nvim/plugged/coc.nvim/build/index.js	/^  ensureDir: mkdirs,$/;"	P
ensureDirSync	nvim/plugged/coc.nvim/build/index.js	/^  ensureDirSync: mkdirsSync$/;"	P
mkdirs	nvim/plugged/coc.nvim/build/index.js	/^function mkdirs (p, opts, callback, made) {$/;"	F
errInval	nvim/plugged/coc.nvim/build/index.js	/^    const errInval = new Error(p + ' contains invalid WIN32 path characters.')$/;"	V
getRootPath	nvim/plugged/coc.nvim/build/index.js	/^function getRootPath (p) {$/;"	F
TODO	nvim/plugged/coc.nvim/build/index.js	/^\/\/ TODO: expand to include the rest$/;"	T
INVALID_PATH_CHARS	nvim/plugged/coc.nvim/build/index.js	/^const INVALID_PATH_CHARS = \/[<>:"|?*]\/$/;"	V
invalidWin32Path	nvim/plugged/coc.nvim/build/index.js	/^function invalidWin32Path (p) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
mkdirsSync	nvim/plugged/coc.nvim/build/index.js	/^function mkdirsSync (p, opts, made) {$/;"	F
errInval	nvim/plugged/coc.nvim/build/index.js	/^    const errInval = new Error(p + ' contains invalid WIN32 path characters.')$/;"	V
hasMillisResSync	nvim/plugged/coc.nvim/build/index.js	/^function hasMillisResSync () {$/;"	F
d	nvim/plugged/coc.nvim/build/index.js	/^  const d = new Date(1435410243862)$/;"	V
hasMillisRes	nvim/plugged/coc.nvim/build/index.js	/^function hasMillisRes (callback) {$/;"	F
d	nvim/plugged/coc.nvim/build/index.js	/^  const d = new Date(1435410243862)$/;"	V
timeRemoveMillis	nvim/plugged/coc.nvim/build/index.js	/^function timeRemoveMillis (timestamp) {$/;"	F
utimesMillis	nvim/plugged/coc.nvim/build/index.js	/^function utimesMillis (path, atime, mtime, callback) {$/;"	F
utimesMillisSync	nvim/plugged/coc.nvim/build/index.js	/^function utimesMillisSync (path, atime, mtime) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
NODE_VERSION_MAJOR_WITH_BIGINT	nvim/plugged/coc.nvim/build/index.js	/^const NODE_VERSION_MAJOR_WITH_BIGINT = 10$/;"	V
NODE_VERSION_MINOR_WITH_BIGINT	nvim/plugged/coc.nvim/build/index.js	/^const NODE_VERSION_MINOR_WITH_BIGINT = 5$/;"	V
NODE_VERSION_PATCH_WITH_BIGINT	nvim/plugged/coc.nvim/build/index.js	/^const NODE_VERSION_PATCH_WITH_BIGINT = 0$/;"	V
nodeSupportsBigInt	nvim/plugged/coc.nvim/build/index.js	/^function nodeSupportsBigInt () {$/;"	F
getStats	nvim/plugged/coc.nvim/build/index.js	/^function getStats (src, dest, cb) {$/;"	F
getStatsSync	nvim/plugged/coc.nvim/build/index.js	/^function getStatsSync (src, dest) {$/;"	F
srcStat	nvim/plugged/coc.nvim/build/index.js	/^  let srcStat, destStat$/;"	V
destStat	nvim/plugged/coc.nvim/build/index.js	/^  let srcStat, destStat$/;"	V
checkPaths	nvim/plugged/coc.nvim/build/index.js	/^function checkPaths (src, dest, funcName, cb) {$/;"	F
checkPathsSync	nvim/plugged/coc.nvim/build/index.js	/^function checkPathsSync (src, dest, funcName) {$/;"	F
checkParentPaths	nvim/plugged/coc.nvim/build/index.js	/^function checkParentPaths (src, srcStat, dest, funcName, cb) {$/;"	F
checkParentPathsSync	nvim/plugged/coc.nvim/build/index.js	/^function checkParentPathsSync (src, srcStat, dest, funcName) {$/;"	F
isSrcSubdir	nvim/plugged/coc.nvim/build/index.js	/^function isSrcSubdir (src, dest) {$/;"	F
srcArr	nvim/plugged/coc.nvim/build/index.js	/^  const srcArr = path.resolve(src).split(path.sep).filter(i => i)$/;"	F
destArr	nvim/plugged/coc.nvim/build/index.js	/^  const destArr = path.resolve(dest).split(path.sep).filter(i => i)$/;"	F
errMsg	nvim/plugged/coc.nvim/build/index.js	/^function errMsg (src, dest, funcName) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (size) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
copy	nvim/plugged/coc.nvim/build/index.js	/^function copy (src, dest, opts, cb) {$/;"	F
checkParentDir	nvim/plugged/coc.nvim/build/index.js	/^function checkParentDir (destStat, src, dest, opts, cb) {$/;"	F
handleFilter	nvim/plugged/coc.nvim/build/index.js	/^function handleFilter (onInclude, destStat, src, dest, opts, cb) {$/;"	F
startCopy	nvim/plugged/coc.nvim/build/index.js	/^function startCopy (destStat, src, dest, opts, cb) {$/;"	F
getStats	nvim/plugged/coc.nvim/build/index.js	/^function getStats (destStat, src, dest, opts, cb) {$/;"	F
onFile	nvim/plugged/coc.nvim/build/index.js	/^function onFile (srcStat, destStat, src, dest, opts, cb) {$/;"	F
mayCopyFile	nvim/plugged/coc.nvim/build/index.js	/^function mayCopyFile (srcStat, src, dest, opts, cb) {$/;"	F
copyFile	nvim/plugged/coc.nvim/build/index.js	/^function copyFile (srcStat, src, dest, opts, cb) {$/;"	F
copyFileFallback	nvim/plugged/coc.nvim/build/index.js	/^function copyFileFallback (srcStat, src, dest, opts, cb) {$/;"	F
setDestModeAndTimestamps	nvim/plugged/coc.nvim/build/index.js	/^function setDestModeAndTimestamps (srcStat, dest, opts, cb) {$/;"	F
onDir	nvim/plugged/coc.nvim/build/index.js	/^function onDir (srcStat, destStat, src, dest, opts, cb) {$/;"	F
mkDirAndCopy	nvim/plugged/coc.nvim/build/index.js	/^function mkDirAndCopy (srcStat, src, dest, opts, cb) {$/;"	F
copyDir	nvim/plugged/coc.nvim/build/index.js	/^function copyDir (src, dest, opts, cb) {$/;"	F
copyDirItems	nvim/plugged/coc.nvim/build/index.js	/^function copyDirItems (items, src, dest, opts, cb) {$/;"	F
copyDirItem	nvim/plugged/coc.nvim/build/index.js	/^function copyDirItem (items, item, src, dest, opts, cb) {$/;"	F
onLink	nvim/plugged/coc.nvim/build/index.js	/^function onLink (destStat, src, dest, opts, cb) {$/;"	F
copyLink	nvim/plugged/coc.nvim/build/index.js	/^function copyLink (resolvedSrc, dest, cb) {$/;"	F
pathExists	nvim/plugged/coc.nvim/build/index.js	/^function pathExists (path) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
deleteItem	nvim/plugged/coc.nvim/build/index.js	/^    function deleteItem () {$/;"	F
emptyDirSync	nvim/plugged/coc.nvim/build/index.js	/^function emptyDirSync (dir) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
emptydirSync	nvim/plugged/coc.nvim/build/index.js	/^  emptydirSync: emptyDirSync,$/;"	P
emptydir	nvim/plugged/coc.nvim/build/index.js	/^  emptydir: emptyDir$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
defaults	nvim/plugged/coc.nvim/build/index.js	/^function defaults (options) {$/;"	F
methods	nvim/plugged/coc.nvim/build/index.js	/^  const methods = [$/;"	A
rimraf	nvim/plugged/coc.nvim/build/index.js	/^function rimraf (p, options, cb) {$/;"	F
busyTries	nvim/plugged/coc.nvim/build/index.js	/^  let busyTries = 0$/;"	V
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^  rimraf_(p, options, function CB (er) {$/;"	M
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^function rimraf_ (p, options, cb) {$/;"	F
fixWinEPERM	nvim/plugged/coc.nvim/build/index.js	/^function fixWinEPERM (p, options, er, cb) {$/;"	F
fixWinEPERMSync	nvim/plugged/coc.nvim/build/index.js	/^function fixWinEPERMSync (p, options, er) {$/;"	F
rmdir	nvim/plugged/coc.nvim/build/index.js	/^function rmdir (p, options, originalEr, cb) {$/;"	F
rmkids	nvim/plugged/coc.nvim/build/index.js	/^function rmkids (p, options, cb) {$/;"	F
rimrafSync	nvim/plugged/coc.nvim/build/index.js	/^function rimrafSync (p, options) {$/;"	F
rmdirSync	nvim/plugged/coc.nvim/build/index.js	/^function rmdirSync (p, options, originalEr) {$/;"	F
rmkidsSync	nvim/plugged/coc.nvim/build/index.js	/^function rmkidsSync (p, options) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
createFile	nvim/plugged/coc.nvim/build/index.js	/^function createFile (file, callback) {$/;"	F
makeFile	nvim/plugged/coc.nvim/build/index.js	/^  function makeFile () {$/;"	F
createFileSync	nvim/plugged/coc.nvim/build/index.js	/^function createFileSync (file) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
createLink	nvim/plugged/coc.nvim/build/index.js	/^function createLink (srcpath, dstpath, callback) {$/;"	F
makeLink	nvim/plugged/coc.nvim/build/index.js	/^  function makeLink (srcpath, dstpath) {$/;"	F
createLinkSync	nvim/plugged/coc.nvim/build/index.js	/^function createLinkSync (srcpath, dstpath) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
createSymlink	nvim/plugged/coc.nvim/build/index.js	/^function createSymlink (srcpath, dstpath, type, callback) {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^  callback = (typeof type === 'function') ? type : callback$/;"	M
type	nvim/plugged/coc.nvim/build/index.js	/^  type = (typeof type === 'function') ? false : type$/;"	M
createSymlinkSync	nvim/plugged/coc.nvim/build/index.js	/^function createSymlinkSync (srcpath, dstpath, type) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
symlinkPaths	nvim/plugged/coc.nvim/build/index.js	/^function symlinkPaths (srcpath, dstpath, callback) {$/;"	F
symlinkPathsSync	nvim/plugged/coc.nvim/build/index.js	/^function symlinkPathsSync (srcpath, dstpath) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
symlinkType	nvim/plugged/coc.nvim/build/index.js	/^function symlinkType (srcpath, type, callback) {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^  callback = (typeof type === 'function') ? type : callback$/;"	M
type	nvim/plugged/coc.nvim/build/index.js	/^  type = (typeof type === 'function') ? false : type$/;"	M
type	nvim/plugged/coc.nvim/build/index.js	/^    type = (stats && stats.isDirectory()) ? 'dir' : 'file'$/;"	M
symlinkTypeSync	nvim/plugged/coc.nvim/build/index.js	/^function symlinkTypeSync (srcpath, type) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
readFile	nvim/plugged/coc.nvim/build/index.js	/^function readFile (file, options, callback) {$/;"	F
readFileSync	nvim/plugged/coc.nvim/build/index.js	/^function readFileSync (file, options) {$/;"	F
stringify	nvim/plugged/coc.nvim/build/index.js	/^function stringify (obj, options) {$/;"	F
EOL	nvim/plugged/coc.nvim/build/index.js	/^  var EOL = '\\n'$/;"	V
writeFile	nvim/plugged/coc.nvim/build/index.js	/^function writeFile (file, obj, options, callback) {$/;"	F
str	nvim/plugged/coc.nvim/build/index.js	/^  var str = ''$/;"	V
writeFileSync	nvim/plugged/coc.nvim/build/index.js	/^function writeFileSync (file, obj, options) {$/;"	F
stripBom	nvim/plugged/coc.nvim/build/index.js	/^function stripBom (content) {$/;"	F
jsonfile	nvim/plugged/coc.nvim/build/index.js	/^var jsonfile = {$/;"	O
readFile	nvim/plugged/coc.nvim/build/index.js	/^  readFile: readFile,$/;"	P
readFileSync	nvim/plugged/coc.nvim/build/index.js	/^  readFileSync: readFileSync,$/;"	P
writeFile	nvim/plugged/coc.nvim/build/index.js	/^  writeFile: writeFile,$/;"	P
writeFileSync	nvim/plugged/coc.nvim/build/index.js	/^  writeFileSync: writeFileSync$/;"	P
queue	nvim/plugged/coc.nvim/build/index.js	/^var queue = []$/;"	A
noop	nvim/plugged/coc.nvim/build/index.js	/^function noop () {}$/;"	F
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function() {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^module.exports.close = (function (fs$close) { return function (fd, cb) {$/;"	M
closeSync	nvim/plugged/coc.nvim/build/index.js	/^module.exports.closeSync = (function (fs$closeSync) { return function (fd) {$/;"	M
patch	nvim/plugged/coc.nvim/build/index.js	/^function patch (fs) {$/;"	F
readFile	nvim/plugged/coc.nvim/build/index.js	/^  function readFile (path, options, cb) {$/;"	F
go$readFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$readFile (path, options, cb) {$/;"	F
writeFile	nvim/plugged/coc.nvim/build/index.js	/^  function writeFile (path, data, options, cb) {$/;"	F
go$writeFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$writeFile (path, data, options, cb) {$/;"	F
appendFile	nvim/plugged/coc.nvim/build/index.js	/^  function appendFile (path, data, options, cb) {$/;"	F
go$appendFile	nvim/plugged/coc.nvim/build/index.js	/^    function go$appendFile (path, data, options, cb) {$/;"	F
readdir	nvim/plugged/coc.nvim/build/index.js	/^  function readdir (path, options, cb) {$/;"	F
args	nvim/plugged/coc.nvim/build/index.js	/^    var args = [path]$/;"	A
go$readdir$cb	nvim/plugged/coc.nvim/build/index.js	/^    function go$readdir$cb (err, files) {$/;"	F
go$readdir	nvim/plugged/coc.nvim/build/index.js	/^  function go$readdir (args) {$/;"	F
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^  function ReadStream (path, options) {$/;"	F
ReadStream$open	nvim/plugged/coc.nvim/build/index.js	/^  function ReadStream$open () {$/;"	F
open	nvim/plugged/coc.nvim/build/index.js	/^    open(that.path, that.flags, that.mode, function (err, fd) {$/;"	M
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^  function WriteStream (path, options) {$/;"	F
WriteStream$open	nvim/plugged/coc.nvim/build/index.js	/^  function WriteStream$open () {$/;"	F
open	nvim/plugged/coc.nvim/build/index.js	/^    open(that.path, that.flags, that.mode, function (err, fd) {$/;"	M
createReadStream	nvim/plugged/coc.nvim/build/index.js	/^  function createReadStream (path, options) {$/;"	F
createWriteStream	nvim/plugged/coc.nvim/build/index.js	/^  function createWriteStream (path, options) {$/;"	F
open	nvim/plugged/coc.nvim/build/index.js	/^  function open (path, flags, mode, cb) {$/;"	F
go$open	nvim/plugged/coc.nvim/build/index.js	/^    function go$open (path, flags, mode, cb) {$/;"	F
enqueue	nvim/plugged/coc.nvim/build/index.js	/^function enqueue (elem) {$/;"	F
retry	nvim/plugged/coc.nvim/build/index.js	/^function retry () {$/;"	F
cwd	nvim/plugged/coc.nvim/build/index.js	/^process.cwd = function() {$/;"	M
chdir	nvim/plugged/coc.nvim/build/index.js	/^process.chdir = function(d) {$/;"	M
patch	nvim/plugged/coc.nvim/build/index.js	/^function patch (fs) {$/;"	F
lchmod	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmod = function (path, mode, cb) {$/;"	M
lchmodSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmodSync = function () {}$/;"	M
lchown	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchown = function (path, uid, gid, cb) {$/;"	M
lchownSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchownSync = function () {}$/;"	M
rename	nvim/plugged/coc.nvim/build/index.js	/^    fs.rename = (function (fs$rename) { return function (from, to, cb) {$/;"	M
backoff	nvim/plugged/coc.nvim/build/index.js	/^      var backoff = 0;$/;"	V
fs$rename	nvim/plugged/coc.nvim/build/index.js	/^      fs$rename(from, to, function CB (er) {$/;"	M
setTimeout	nvim/plugged/coc.nvim/build/index.js	/^          setTimeout(function() {$/;"	M
read	nvim/plugged/coc.nvim/build/index.js	/^  fs.read = (function (fs$read) { return function (fd, buffer, offset, length, position, callback_) {$/;"	M
eagCounter	nvim/plugged/coc.nvim/build/index.js	/^      var eagCounter = 0$/;"	V
callback	nvim/plugged/coc.nvim/build/index.js	/^      callback = function (er, _, __) {$/;"	M
readSync	nvim/plugged/coc.nvim/build/index.js	/^  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {$/;"	M
eagCounter	nvim/plugged/coc.nvim/build/index.js	/^    var eagCounter = 0$/;"	V
patchLchmod	nvim/plugged/coc.nvim/build/index.js	/^  function patchLchmod (fs) {$/;"	F
lchmod	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmod = function (path, mode, callback) {$/;"	M
lchmodSync	nvim/plugged/coc.nvim/build/index.js	/^    fs.lchmodSync = function (path, mode) {$/;"	M
patchLutimes	nvim/plugged/coc.nvim/build/index.js	/^  function patchLutimes (fs) {$/;"	F
lutimes	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimes = function (path, at, mt, cb) {$/;"	M
lutimesSync	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimesSync = function (path, at, mt) {$/;"	M
lutimes	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }$/;"	M
lutimesSync	nvim/plugged/coc.nvim/build/index.js	/^      fs.lutimesSync = function () {}$/;"	M
chmodFix	nvim/plugged/coc.nvim/build/index.js	/^  function chmodFix (orig) {$/;"	F
chmodFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function chmodFixSync (orig) {$/;"	F
chownFix	nvim/plugged/coc.nvim/build/index.js	/^  function chownFix (orig) {$/;"	F
chownFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function chownFixSync (orig) {$/;"	F
statFix	nvim/plugged/coc.nvim/build/index.js	/^  function statFix (orig) {$/;"	F
statFixSync	nvim/plugged/coc.nvim/build/index.js	/^  function statFixSync (orig) {$/;"	F
chownErOk	nvim/plugged/coc.nvim/build/index.js	/^  function chownErOk (er) {$/;"	F
legacy	nvim/plugged/coc.nvim/build/index.js	/^function legacy (fs) {$/;"	F
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^    ReadStream: ReadStream,$/;"	P
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^    WriteStream: WriteStream$/;"	P
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^  function ReadStream (path, options) {$/;"	F
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^  function WriteStream (path, options) {$/;"	F
clone	nvim/plugged/coc.nvim/build/index.js	/^function clone (obj) {$/;"	F
copy	nvim/plugged/coc.nvim/build/index.js	/^    var copy = { __proto__: obj.__proto__ }$/;"	O
outputJson	nvim/plugged/coc.nvim/build/index.js	/^function outputJson (file, data, options, callback) {$/;"	F
outputJsonSync	nvim/plugged/coc.nvim/build/index.js	/^function outputJsonSync (file, data, options) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
moveSync	nvim/plugged/coc.nvim/build/index.js	/^function moveSync (src, dest, opts) {$/;"	F
doRename	nvim/plugged/coc.nvim/build/index.js	/^function doRename (src, dest, overwrite) {$/;"	F
rename	nvim/plugged/coc.nvim/build/index.js	/^function rename (src, dest, overwrite) {$/;"	F
moveAcrossDevice	nvim/plugged/coc.nvim/build/index.js	/^function moveAcrossDevice (src, dest, overwrite) {$/;"	F
opts	nvim/plugged/coc.nvim/build/index.js	/^  const opts = {$/;"	O
errorOnExist	nvim/plugged/coc.nvim/build/index.js	/^    errorOnExist: true$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
move	nvim/plugged/coc.nvim/build/index.js	/^function move (src, dest, opts, cb) {$/;"	F
doRename	nvim/plugged/coc.nvim/build/index.js	/^function doRename (src, dest, overwrite, cb) {$/;"	F
rename	nvim/plugged/coc.nvim/build/index.js	/^function rename (src, dest, overwrite, cb) {$/;"	F
moveAcrossDevice	nvim/plugged/coc.nvim/build/index.js	/^function moveAcrossDevice (src, dest, overwrite, cb) {$/;"	F
opts	nvim/plugged/coc.nvim/build/index.js	/^  const opts = {$/;"	O
errorOnExist	nvim/plugged/coc.nvim/build/index.js	/^    errorOnExist: true$/;"	P
outputFile	nvim/plugged/coc.nvim/build/index.js	/^function outputFile (file, data, encoding, callback) {$/;"	F
outputFileSync	nvim/plugged/coc.nvim/build/index.js	/^function outputFileSync (file, ...args) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = () => new Date();$/;"	M
FILENAME_SEP	nvim/plugged/coc.nvim/build/index.js	/^const FILENAME_SEP = ".";$/;"	V
ZIP_EXT	nvim/plugged/coc.nvim/build/index.js	/^const ZIP_EXT = ".gz";$/;"	V
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = ({$/;"	M
ext	nvim/plugged/coc.nvim/build/index.js	/^  const ext = f => f + file.ext;$/;"	F
index	nvim/plugged/coc.nvim/build/index.js	/^  const index = (f, i, d) =>$/;"	F
date	nvim/plugged/coc.nvim/build/index.js	/^  const date = (f, i, d) => {$/;"	F
gzip	nvim/plugged/coc.nvim/build/index.js	/^  const gzip = (f, i) => (i && compress ? f + ZIP_EXT : f);$/;"	F
FILENAME_SEP	nvim/plugged/coc.nvim/build/index.js	/^const FILENAME_SEP = ".";$/;"	V
ZIP_EXT	nvim/plugged/coc.nvim/build/index.js	/^const ZIP_EXT = ".gz";$/;"	V
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = ({ file, keepFileExt, pattern }) => {$/;"	M
zip	nvim/plugged/coc.nvim/build/index.js	/^  const zip = (f, p) => {$/;"	F
extAtEnd	nvim/plugged/coc.nvim/build/index.js	/^  const extAtEnd = f => {$/;"	F
extInMiddle	nvim/plugged/coc.nvim/build/index.js	/^  const extInMiddle = f => {$/;"	F
dateAndIndex	nvim/plugged/coc.nvim/build/index.js	/^  const dateAndIndex = (f, p) => {$/;"	F
index	nvim/plugged/coc.nvim/build/index.js	/^  const index = (f, p) => {$/;"	F
parts	nvim/plugged/coc.nvim/build/index.js	/^  let parts = [$/;"	A
result	nvim/plugged/coc.nvim/build/index.js	/^    let result = { filename, index: 0, isCompressed: false };$/;"	O
RollingFileStream	nvim/plugged/coc.nvim/build/index.js	/^class RollingFileStream extends RollingFileWriteStream {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(filename, size, backups, options) {$/;"	M
DateRollingFileStream	nvim/plugged/coc.nvim/build/index.js	/^class DateRollingFileStream extends RollingFileWriteStream {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(filename, pattern, options) {$/;"	M
appender	nvim/plugged/coc.nvim/build/index.js	/^function appender($/;"	F
logFile	nvim/plugged/coc.nvim/build/index.js	/^  const logFile = new streams.DateRollingFileStream($/;"	V
app	nvim/plugged/coc.nvim/build/index.js	/^  const app = function (logEvent) {$/;"	F
shutdown	nvim/plugged/coc.nvim/build/index.js	/^  app.shutdown = function (complete) {$/;"	M
configure	nvim/plugged/coc.nvim/build/index.js	/^function configure(config, layouts) {$/;"	F
webpackEmptyContext	nvim/plugged/coc.nvim/build/index.js	/^function webpackEmptyContext(req) {$/;"	F
e	nvim/plugged/coc.nvim/build/index.js	/^	var e = new Error("Cannot find module '" + req + "'");$/;"	V
keys	nvim/plugged/coc.nvim/build/index.js	/^webpackEmptyContext.keys = function() { return []; };$/;"	M
categories	nvim/plugged/coc.nvim/build/index.js	/^const categories = new Map();$/;"	V
inheritFromParent	nvim/plugged/coc.nvim/build/index.js	/^function inheritFromParent(config, category, categoryName) {$/;"	F
addCategoryInheritance	nvim/plugged/coc.nvim/build/index.js	/^function addCategoryInheritance(config) {$/;"	F
setup	nvim/plugged/coc.nvim/build/index.js	/^const setup = (config) => {$/;"	F
categoryAppenders	nvim/plugged/coc.nvim/build/index.js	/^    const categoryAppenders = [];$/;"	A
appenders	nvim/plugged/coc.nvim/build/index.js	/^          appenders: categoryAppenders,$/;"	P
configForCategory	nvim/plugged/coc.nvim/build/index.js	/^const configForCategory = (category) => {$/;"	F
appendersForCategory	nvim/plugged/coc.nvim/build/index.js	/^const appendersForCategory = category => configForCategory(category).appenders;$/;"	F
getLevelForCategory	nvim/plugged/coc.nvim/build/index.js	/^const getLevelForCategory = category => configForCategory(category).level;$/;"	F
setLevelForCategory	nvim/plugged/coc.nvim/build/index.js	/^const setLevelForCategory = (category, level) => {$/;"	F
getEnableCallStackForCategory	nvim/plugged/coc.nvim/build/index.js	/^const getEnableCallStackForCategory = category => configForCategory(category).enableCallStack === true;$/;"	F
setEnableCallStackForCategory	nvim/plugged/coc.nvim/build/index.js	/^const setEnableCallStackForCategory = (category, useCallStack) => {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
stackReg	nvim/plugged/coc.nvim/build/index.js	/^const stackReg = \/at (?:(.+)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?\/;$/;"	V
defaultParseCallStack	nvim/plugged/coc.nvim/build/index.js	/^function defaultParseCallStack(data, skipIdx = 4) {$/;"	F
Logger	nvim/plugged/coc.nvim/build/index.js	/^class Logger {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor(name) {$/;"	M
context	nvim/plugged/coc.nvim/build/index.js	/^    this.context = {};$/;"	P
log	nvim/plugged/coc.nvim/build/index.js	/^  log(level, ...args) {$/;"	M
isLevelEnabled	nvim/plugged/coc.nvim/build/index.js	/^  isLevelEnabled(otherLevel) {$/;"	M
_log	nvim/plugged/coc.nvim/build/index.js	/^  _log(level, data) {$/;"	M
loggingEvent	nvim/plugged/coc.nvim/build/index.js	/^    const loggingEvent = new LoggingEvent($/;"	V
addContext	nvim/plugged/coc.nvim/build/index.js	/^  addContext(key, value) {$/;"	M
removeContext	nvim/plugged/coc.nvim/build/index.js	/^  removeContext(key) {$/;"	M
clearContext	nvim/plugged/coc.nvim/build/index.js	/^  clearContext() {$/;"	M
context	nvim/plugged/coc.nvim/build/index.js	/^    this.context = {};$/;"	P
setParseCallStackFunction	nvim/plugged/coc.nvim/build/index.js	/^  setParseCallStackFunction(parseFunction) {$/;"	M
addLevelMethods	nvim/plugged/coc.nvim/build/index.js	/^function addLevelMethods(target) {$/;"	F
levelMethod	nvim/plugged/coc.nvim/build/index.js	/^  const levelMethod = levelStrLower.replace(\/_([a-z])\/g, g =>$/;"	F
getUrl	nvim/plugged/coc.nvim/build/index.js	/^function getUrl(req) {$/;"	F
assembleTokens	nvim/plugged/coc.nvim/build/index.js	/^function assembleTokens(req, res, customTokens) {$/;"	F
arrayUniqueTokens	nvim/plugged/coc.nvim/build/index.js	/^  const arrayUniqueTokens = array => {$/;"	F
defaultTokens	nvim/plugged/coc.nvim/build/index.js	/^  const defaultTokens = [];$/;"	A
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":status",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":response-time",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":referrer",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":http-version",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":remote-addr",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":user-agent",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: ":content-length",$/;"	P
token	nvim/plugged/coc.nvim/build/index.js	/^    token: \/:req\\[([^\\]]+)]\/g,$/;"	P
replacement	nvim/plugged/coc.nvim/build/index.js	/^    replacement(_, field) {$/;"	M
token	nvim/plugged/coc.nvim/build/index.js	/^    token: \/:res\\[([^\\]]+)]\/g,$/;"	P
replacement	nvim/plugged/coc.nvim/build/index.js	/^    replacement(_, field) {$/;"	M
format	nvim/plugged/coc.nvim/build/index.js	/^function format(str, tokens) {$/;"	F
createNoLogCondition	nvim/plugged/coc.nvim/build/index.js	/^function createNoLogCondition(nolog) {$/;"	F
regexpsAsStrings	nvim/plugged/coc.nvim/build/index.js	/^    const regexpsAsStrings = nolog.map(reg => (reg.source ? reg.source : reg));$/;"	F
matchRules	nvim/plugged/coc.nvim/build/index.js	/^function matchRules(statusCode, currentLevel, ruleSet) {$/;"	F
matchedRule	nvim/plugged/coc.nvim/build/index.js	/^    const matchedRule = ruleSet.find(rule => {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function getLogger(logger4js, options) {$/;"	M
start	nvim/plugged/coc.nvim/build/index.js	/^      const start = new Date();$/;"	V
writeHead	nvim/plugged/coc.nvim/build/index.js	/^      res.writeHead = (code, headers) => {$/;"	M
line	nvim/plugged/coc.nvim/build/index.js	/^          const line = fmt(req, res, str => format(str, combinedTokens));$/;"	F
isTest	nvim/plugged/coc.nvim/build/index.js	/^const isTest = "none" == 'test';$/;"	V
default	nvim/plugged/coc.nvim/build/index.js	/^exports.default = (opts, requestApi = true) => {$/;"	M
file	nvim/plugged/coc.nvim/build/index.js	/^        vscode_uri_1.URI.file = (path) => {$/;"	M
plugin	nvim/plugged/coc.nvim/build/index.js	/^    const plugin = new plugin_1.default(nvim);$/;"	V
attach	nvim/plugged/coc.nvim/build/index.js	/^function attach({ reader: _reader, writer: _writer, proc, socket, }, _logger = null, requestApi = true) {$/;"	F
writer	nvim/plugged/coc.nvim/build/index.js	/^    let writer;$/;"	V
reader	nvim/plugged/coc.nvim/build/index.js	/^    let reader;$/;"	V
neovim	nvim/plugged/coc.nvim/build/index.js	/^    let neovim;$/;"	V
fulfilled	nvim/plugged/coc.nvim/build/index.js	/^        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }$/;"	F
rejected	nvim/plugged/coc.nvim/build/index.js	/^        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }$/;"	F
AsyncResponse	nvim/plugged/coc.nvim/build/index.js	/^class AsyncResponse {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(requestId, cb) {$/;"	M
finish	nvim/plugged/coc.nvim/build/index.js	/^    finish(err, res) {$/;"	M
NeovimClient	nvim/plugged/coc.nvim/build/index.js	/^class NeovimClient extends Neovim_1.Neovim {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^            value: this$/;"	P
createBuffer	nvim/plugged/coc.nvim/build/index.js	/^    createBuffer(id) {$/;"	M
data	nvim/plugged/coc.nvim/build/index.js	/^            data: id,$/;"	P
client	nvim/plugged/coc.nvim/build/index.js	/^            client: this$/;"	P
createWindow	nvim/plugged/coc.nvim/build/index.js	/^    createWindow(id) {$/;"	M
data	nvim/plugged/coc.nvim/build/index.js	/^            data: id,$/;"	P
client	nvim/plugged/coc.nvim/build/index.js	/^            client: this$/;"	P
createTabpage	nvim/plugged/coc.nvim/build/index.js	/^    createTabpage(id) {$/;"	M
data	nvim/plugged/coc.nvim/build/index.js	/^            data: id,$/;"	P
client	nvim/plugged/coc.nvim/build/index.js	/^            client: this$/;"	P
attach	nvim/plugged/coc.nvim/build/index.js	/^    attach({ reader, writer, }, requestApi = true) {$/;"	M
detach	nvim/plugged/coc.nvim/build/index.js	/^    detach() {$/;"	M
isAttached	nvim/plugged/coc.nvim/build/index.js	/^    isAttached(bufnr) {$/;"	M
handleRequest	nvim/plugged/coc.nvim/build/index.js	/^    handleRequest(method, args, resp) {$/;"	M
sendAsyncRequest	nvim/plugged/coc.nvim/build/index.js	/^    sendAsyncRequest(method, args) {$/;"	M
response	nvim/plugged/coc.nvim/build/index.js	/^            let response = new AsyncResponse(id, (err, res) => {$/;"	F
response	nvim/plugged/coc.nvim/build/index.js	/^            let response = new AsyncResponse(id, (err, res) => {$/;"	V
emitNotification	nvim/plugged/coc.nvim/build/index.js	/^    emitNotification(method, args) {$/;"	M
send	nvim/plugged/coc.nvim/build/index.js	/^                    send: (resp, isError) => {$/;"	M
handleNotification	nvim/plugged/coc.nvim/build/index.js	/^    handleNotification(method, args) {$/;"	M
setupTransport	nvim/plugged/coc.nvim/build/index.js	/^    setupTransport(requestApi = true) {$/;"	M
requestApi	nvim/plugged/coc.nvim/build/index.js	/^    requestApi() {$/;"	M
generateApi	nvim/plugged/coc.nvim/build/index.js	/^    generateApi() {$/;"	M
results	nvim/plugged/coc.nvim/build/index.js	/^            let results;$/;"	V
attachBufferEvent	nvim/plugged/coc.nvim/build/index.js	/^    attachBufferEvent(buffer, eventName, cb) {$/;"	M
detachBufferEvent	nvim/plugged/coc.nvim/build/index.js	/^    detachBufferEvent(buffer, eventName, cb) {$/;"	M
handlers	nvim/plugged/coc.nvim/build/index.js	/^        const handlers = (bufferMap.get(eventName) || []).filter(handler => handler !== cb);$/;"	F
pauseNotification	nvim/plugged/coc.nvim/build/index.js	/^    pauseNotification() {$/;"	M
resumeNotification	nvim/plugged/coc.nvim/build/index.js	/^    resumeNotification(cancel, notify) {$/;"	M
hasFunction	nvim/plugged/coc.nvim/build/index.js	/^    hasFunction(name) {$/;"	M
result	nvim/plugged/coc.nvim/build/index.js	/^    var result = {};$/;"	O
NvimTransport	nvim/plugged/coc.nvim/build/index.js	/^class NvimTransport extends base_1.default {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
parseMessage	nvim/plugged/coc.nvim/build/index.js	/^    parseMessage(msg) {$/;"	M
setupCodec	nvim/plugged/coc.nvim/build/index.js	/^    setupCodec() {$/;"	M
transport	nvim/plugged/coc.nvim/build/index.js	/^                transport: this,$/;"	P
attach	nvim/plugged/coc.nvim/build/index.js	/^    attach(writer, reader, client) {$/;"	M
buffered	nvim/plugged/coc.nvim/build/index.js	/^        const buffered = new buffered_1.default();$/;"	V
detach	nvim/plugged/coc.nvim/build/index.js	/^    detach() {$/;"	M
request	nvim/plugged/coc.nvim/build/index.js	/^    request(method, args, cb) {$/;"	M
notify	nvim/plugged/coc.nvim/build/index.js	/^    notify(method, args) {$/;"	M
createResponse	nvim/plugged/coc.nvim/build/index.js	/^    createResponse(requestId) {$/;"	M
send	nvim/plugged/coc.nvim/build/index.js	/^            send: (resp, isError) => {$/;"	M
encode	nvim/plugged/coc.nvim/build/index.js	/^function encode(input, options) {$/;"	F
encoder	nvim/plugged/coc.nvim/build/index.js	/^  var encoder = new EncodeBuffer(options);$/;"	V
EncodeBuffer	nvim/plugged/coc.nvim/build/index.js	/^function EncodeBuffer(options) {$/;"	F
write	nvim/plugged/coc.nvim/build/index.js	/^EncodeBuffer.prototype.write = function(input) {$/;"	M
addExtPacker	nvim/plugged/coc.nvim/build/index.js	/^  addExtPacker: addExtPacker,$/;"	P
getExtPacker	nvim/plugged/coc.nvim/build/index.js	/^  getExtPacker: getExtPacker,$/;"	P
init	nvim/plugged/coc.nvim/build/index.js	/^  init: init$/;"	P
getEncoder	nvim/plugged/coc.nvim/build/index.js	/^function getEncoder(options) {$/;"	F
encode	nvim/plugged/coc.nvim/build/index.js	/^  function encode(encoder, value) {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^function init() {$/;"	F
addExtPacker	nvim/plugged/coc.nvim/build/index.js	/^function addExtPacker(etype, Class, packer) {$/;"	F
extPacker	nvim/plugged/coc.nvim/build/index.js	/^  function extPacker(value) {$/;"	F
getExtPacker	nvim/plugged/coc.nvim/build/index.js	/^function getExtPacker(value) {$/;"	F
ExtBuffer	nvim/plugged/coc.nvim/build/index.js	/^function ExtBuffer(buffer, type) {$/;"	F
from	nvim/plugged/coc.nvim/build/index.js	/^function from(value) {$/;"	F
alloc	nvim/plugged/coc.nvim/build/index.js	/^function alloc(size) {$/;"	F
concat	nvim/plugged/coc.nvim/build/index.js	/^function concat(list, length) {$/;"	F
offset	nvim/plugged/coc.nvim/build/index.js	/^  var offset = 0;$/;"	V
dryrun	nvim/plugged/coc.nvim/build/index.js	/^  function dryrun(buffer) {$/;"	F
append	nvim/plugged/coc.nvim/build/index.js	/^  function append(buffer) {$/;"	F
isArrayBuffer	nvim/plugged/coc.nvim/build/index.js	/^function isArrayBuffer(value) {$/;"	F
fromString	nvim/plugged/coc.nvim/build/index.js	/^function fromString(value) {$/;"	F
auto	nvim/plugged/coc.nvim/build/index.js	/^function auto(that) {$/;"	F
_false	nvim/plugged/coc.nvim/build/index.js	/^function _false() {$/;"	F
_is	nvim/plugged/coc.nvim/build/index.js	/^function _is(name, key) {$/;"	F
c	nvim/plugged/coc.nvim/build/index.js	/^function c(B) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^var toString = {}.toString;$/;"	O
alloc	nvim/plugged/coc.nvim/build/index.js	/^function alloc(size) {$/;"	F
from	nvim/plugged/coc.nvim/build/index.js	/^function from(value) {$/;"	F
alloc	nvim/plugged/coc.nvim/build/index.js	/^function alloc(size) {$/;"	F
from	nvim/plugged/coc.nvim/build/index.js	/^function from(value) {$/;"	F
alloc	nvim/plugged/coc.nvim/build/index.js	/^function alloc(size) {$/;"	F
from	nvim/plugged/coc.nvim/build/index.js	/^function from(value) {$/;"	F
copy	nvim/plugged/coc.nvim/build/index.js	/^function copy(target, targetStart, start, end) {$/;"	F
slice	nvim/plugged/coc.nvim/build/index.js	/^function slice(start, end) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^function toString(encoding, start, end) {$/;"	F
gen	nvim/plugged/coc.nvim/build/index.js	/^function gen(method) {$/;"	F
wrap	nvim/plugged/coc.nvim/build/index.js	/^  function wrap() {$/;"	F
MAXBUFLEN	nvim/plugged/coc.nvim/build/index.js	/^var MAXBUFLEN = 8192;$/;"	V
write	nvim/plugged/coc.nvim/build/index.js	/^function write(string, offset) {$/;"	F
chr	nvim/plugged/coc.nvim/build/index.js	/^  var chr = 0;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^  var i = 0;$/;"	V
chr	nvim/plugged/coc.nvim/build/index.js	/^      chr = (((chr - 0xD800) << 10) | (string.charCodeAt(i++) - 0xDC00)) + 0x10000;$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^function toString(encoding, start, end) {$/;"	F
string	nvim/plugged/coc.nvim/build/index.js	/^  var string = '';$/;"	V
chr	nvim/plugged/coc.nvim/build/index.js	/^  var chr = 0;$/;"	V
chr	nvim/plugged/coc.nvim/build/index.js	/^      chr = (chr & 0x1F) << 6 |$/;"	M
chr	nvim/plugged/coc.nvim/build/index.js	/^      chr = (chr & 0x0F)             << 12 |$/;"	M
chr	nvim/plugged/coc.nvim/build/index.js	/^      chr = (chr & 0x07)             << 18 |$/;"	M
copy	nvim/plugged/coc.nvim/build/index.js	/^function copy(target, targetStart, start, end) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^  var i;$/;"	V
_encode	nvim/plugged/coc.nvim/build/index.js	/^var _encode;$/;"	V
ERROR_COLUMNS	nvim/plugged/coc.nvim/build/index.js	/^var ERROR_COLUMNS = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};$/;"	O
setExtPackers	nvim/plugged/coc.nvim/build/index.js	/^function setExtPackers(codec) {$/;"	F
encode	nvim/plugged/coc.nvim/build/index.js	/^function encode(input) {$/;"	F
packValueOf	nvim/plugged/coc.nvim/build/index.js	/^function packValueOf(value) {$/;"	F
packRegExp	nvim/plugged/coc.nvim/build/index.js	/^function packRegExp(value) {$/;"	F
out	nvim/plugged/coc.nvim/build/index.js	/^  var out = [value.pop()];$/;"	A
packError	nvim/plugged/coc.nvim/build/index.js	/^function packError(value) {$/;"	F
out	nvim/plugged/coc.nvim/build/index.js	/^  var out = {};$/;"	O
extmap	nvim/plugged/coc.nvim/build/index.js	/^var extmap = [];$/;"	A
getWriteType	nvim/plugged/coc.nvim/build/index.js	/^function getWriteType(options) {$/;"	F
writeType	nvim/plugged/coc.nvim/build/index.js	/^  var writeType = {$/;"	O
bool	nvim/plugged/coc.nvim/build/index.js	/^  function bool(encoder, value) {$/;"	F
number	nvim/plugged/coc.nvim/build/index.js	/^  function number(encoder, value) {$/;"	F
type	nvim/plugged/coc.nvim/build/index.js	/^    var type;$/;"	V
type	nvim/plugged/coc.nvim/build/index.js	/^      type = (ivalue <= 0xFF) ? 0xcc : (ivalue <= 0xFFFF) ? 0xcd : 0xce;$/;"	M
type	nvim/plugged/coc.nvim/build/index.js	/^      type = (-0x80 <= ivalue) ? 0xd0 : (-0x8000 <= ivalue) ? 0xd1 : 0xd2;$/;"	M
uint64	nvim/plugged/coc.nvim/build/index.js	/^  function uint64(encoder, value) {$/;"	F
type	nvim/plugged/coc.nvim/build/index.js	/^    var type = 0xcf;$/;"	V
int64	nvim/plugged/coc.nvim/build/index.js	/^  function int64(encoder, value) {$/;"	F
type	nvim/plugged/coc.nvim/build/index.js	/^    var type = 0xd3;$/;"	V
str_head_size	nvim/plugged/coc.nvim/build/index.js	/^  function str_head_size(length) {$/;"	F
raw_head_size	nvim/plugged/coc.nvim/build/index.js	/^  function raw_head_size(length) {$/;"	F
_string	nvim/plugged/coc.nvim/build/index.js	/^  function _string(head_size) {$/;"	F
string	nvim/plugged/coc.nvim/build/index.js	/^    function string(encoder, value) {$/;"	F
maxsize	nvim/plugged/coc.nvim/build/index.js	/^      var maxsize = 5 + length * 3;$/;"	V
object	nvim/plugged/coc.nvim/build/index.js	/^  function object(encoder, value) {$/;"	F
object_raw	nvim/plugged/coc.nvim/build/index.js	/^  function object_raw(encoder, value) {$/;"	F
nil	nvim/plugged/coc.nvim/build/index.js	/^  function nil(encoder, value) {$/;"	F
type	nvim/plugged/coc.nvim/build/index.js	/^    var type = 0xc0;$/;"	V
array	nvim/plugged/coc.nvim/build/index.js	/^  function array(encoder, value) {$/;"	F
bin_buffer	nvim/plugged/coc.nvim/build/index.js	/^  function bin_buffer(encoder, value) {$/;"	F
bin_arraybuffer	nvim/plugged/coc.nvim/build/index.js	/^  function bin_arraybuffer(encoder, value) {$/;"	F
ext	nvim/plugged/coc.nvim/build/index.js	/^  function ext(encoder, value) {$/;"	F
obj_to_map	nvim/plugged/coc.nvim/build/index.js	/^  function obj_to_map(encoder, value) {$/;"	F
map_to_map	nvim/plugged/coc.nvim/build/index.js	/^  function map_to_map(encoder, value) {$/;"	F
raw	nvim/plugged/coc.nvim/build/index.js	/^  function raw(encoder, value) {$/;"	F
Uint64BE	nvim/plugged/coc.nvim/build/index.js	/^var Uint64BE, Int64BE, Uint64LE, Int64LE;$/;"	V
Int64BE	nvim/plugged/coc.nvim/build/index.js	/^var Uint64BE, Int64BE, Uint64LE, Int64LE;$/;"	V
Uint64LE	nvim/plugged/coc.nvim/build/index.js	/^var Uint64BE, Int64BE, Uint64LE, Int64LE;$/;"	V
UNDEFINED	nvim/plugged/coc.nvim/build/index.js	/^  var UNDEFINED = "undefined";$/;"	V
ZERO	nvim/plugged/coc.nvim/build/index.js	/^  var ZERO = [0, 0, 0, 0, 0, 0, 0, 0];$/;"	A
BIT32	nvim/plugged/coc.nvim/build/index.js	/^  var BIT32 = 4294967296;$/;"	V
BIT24	nvim/plugged/coc.nvim/build/index.js	/^  var BIT24 = 16777216;$/;"	V
storage	nvim/plugged/coc.nvim/build/index.js	/^  var storage; \/\/ Array;$/;"	V
factory	nvim/plugged/coc.nvim/build/index.js	/^  function factory(name, bigendian, unsigned) {$/;"	F
isName	nvim/plugged/coc.nvim/build/index.js	/^    var isName = "is" + name;$/;"	V
_isInt64	nvim/plugged/coc.nvim/build/index.js	/^    var _isInt64 = "_" + isName;$/;"	V
Int64	nvim/plugged/coc.nvim/build/index.js	/^    function Int64(buffer, offset, value, raddix) {$/;"	F
isInt64	nvim/plugged/coc.nvim/build/index.js	/^    function isInt64(b) {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^    function init(that, buffer, offset, value, raddix) {$/;"	F
fromString	nvim/plugged/coc.nvim/build/index.js	/^    function fromString(buffer, offset, str, raddix) {$/;"	F
pos	nvim/plugged/coc.nvim/build/index.js	/^      var pos = 0;$/;"	V
high	nvim/plugged/coc.nvim/build/index.js	/^      var high = 0;$/;"	V
low	nvim/plugged/coc.nvim/build/index.js	/^      var low = 0;$/;"	V
toNumber	nvim/plugged/coc.nvim/build/index.js	/^    function toNumber() {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^    function toString(radix) {$/;"	F
str	nvim/plugged/coc.nvim/build/index.js	/^      var str = "";$/;"	V
str	nvim/plugged/coc.nvim/build/index.js	/^        str = (mod % radix).toString(radix) + str;$/;"	M
writeInt32	nvim/plugged/coc.nvim/build/index.js	/^    function writeInt32(buffer, offset, value) {$/;"	F
readInt32	nvim/plugged/coc.nvim/build/index.js	/^    function readInt32(buffer, offset) {$/;"	F
toArray	nvim/plugged/coc.nvim/build/index.js	/^  function toArray(raw) {$/;"	F
toBuffer	nvim/plugged/coc.nvim/build/index.js	/^  function toBuffer(raw) {$/;"	F
dest	nvim/plugged/coc.nvim/build/index.js	/^    var dest = new BUFFER(8);$/;"	V
toArrayBuffer	nvim/plugged/coc.nvim/build/index.js	/^  function toArrayBuffer(raw) {$/;"	F
dest	nvim/plugged/coc.nvim/build/index.js	/^    var dest = new UINT8ARRAY(8);$/;"	V
isValidBuffer	nvim/plugged/coc.nvim/build/index.js	/^  function isValidBuffer(buffer, offset) {$/;"	F
fromArray	nvim/plugged/coc.nvim/build/index.js	/^  function fromArray(destbuf, destoff, srcbuf, srcoff) {$/;"	F
newArray	nvim/plugged/coc.nvim/build/index.js	/^  function newArray(buffer, offset) {$/;"	F
fromPositiveBE	nvim/plugged/coc.nvim/build/index.js	/^  function fromPositiveBE(buffer, offset, value) {$/;"	F
fromNegativeBE	nvim/plugged/coc.nvim/build/index.js	/^  function fromNegativeBE(buffer, offset, value) {$/;"	F
fromPositiveLE	nvim/plugged/coc.nvim/build/index.js	/^  function fromPositiveLE(buffer, offset, value) {$/;"	F
fromNegativeLE	nvim/plugged/coc.nvim/build/index.js	/^  function fromNegativeLE(buffer, offset, value) {$/;"	F
_isArray	nvim/plugged/coc.nvim/build/index.js	/^  function _isArray(val) {$/;"	F
getWriteToken	nvim/plugged/coc.nvim/build/index.js	/^function getWriteToken(options) {$/;"	F
init_uint8array	nvim/plugged/coc.nvim/build/index.js	/^function init_uint8array() {$/;"	F
init_token	nvim/plugged/coc.nvim/build/index.js	/^function init_token() {$/;"	F
init_safe	nvim/plugged/coc.nvim/build/index.js	/^function init_safe() {$/;"	F
write1	nvim/plugged/coc.nvim/build/index.js	/^function write1(type) {$/;"	F
write2	nvim/plugged/coc.nvim/build/index.js	/^function write2(type) {$/;"	F
write4	nvim/plugged/coc.nvim/build/index.js	/^function write4(type) {$/;"	F
writeN	nvim/plugged/coc.nvim/build/index.js	/^function writeN(type, len, method, noAssert) {$/;"	F
writeUInt64BE	nvim/plugged/coc.nvim/build/index.js	/^function writeUInt64BE(value, offset) {$/;"	F
writeInt64BE	nvim/plugged/coc.nvim/build/index.js	/^function writeInt64BE(value, offset) {$/;"	F
writeFloatBE	nvim/plugged/coc.nvim/build/index.js	/^function writeFloatBE(value, offset) {$/;"	F
writeDoubleBE	nvim/plugged/coc.nvim/build/index.js	/^function writeDoubleBE(value, offset) {$/;"	F
read	nvim/plugged/coc.nvim/build/index.js	/^exports.read = function (buffer, offset, isLE, mLen, nBytes) {$/;"	M
e	nvim/plugged/coc.nvim/build/index.js	/^  var e, m$/;"	V
m	nvim/plugged/coc.nvim/build/index.js	/^  var e, m$/;"	V
write	nvim/plugged/coc.nvim/build/index.js	/^exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {$/;"	M
e	nvim/plugged/coc.nvim/build/index.js	/^  var e, m, c$/;"	V
m	nvim/plugged/coc.nvim/build/index.js	/^  var e, m, c$/;"	V
c	nvim/plugged/coc.nvim/build/index.js	/^  var e, m, c$/;"	V
m	nvim/plugged/coc.nvim/build/index.js	/^      m = ((value * c) - 1) * Math.pow(2, mLen)$/;"	M
e	nvim/plugged/coc.nvim/build/index.js	/^  e = (e << mLen) | m$/;"	M
write0	nvim/plugged/coc.nvim/build/index.js	/^function write0(type) {$/;"	F
Codec	nvim/plugged/coc.nvim/build/index.js	/^function Codec(options) {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^Codec.prototype.init = function() {$/;"	M
install	nvim/plugged/coc.nvim/build/index.js	/^function install(props) {$/;"	F
add	nvim/plugged/coc.nvim/build/index.js	/^function add(a, b) {$/;"	F
ab	nvim/plugged/coc.nvim/build/index.js	/^  function ab() {$/;"	F
join	nvim/plugged/coc.nvim/build/index.js	/^function join(filters) {$/;"	F
iterator	nvim/plugged/coc.nvim/build/index.js	/^  function iterator(value, filter) {$/;"	F
filter	nvim/plugged/coc.nvim/build/index.js	/^function filter(filter) {$/;"	F
createCodec	nvim/plugged/coc.nvim/build/index.js	/^function createCodec(options) {$/;"	F
MIN_BUFFER_SIZE	nvim/plugged/coc.nvim/build/index.js	/^var MIN_BUFFER_SIZE = 2048;$/;"	V
MAX_BUFFER_SIZE	nvim/plugged/coc.nvim/build/index.js	/^var MAX_BUFFER_SIZE = 65536;$/;"	V
BUFFER_SHORTAGE	nvim/plugged/coc.nvim/build/index.js	/^var BUFFER_SHORTAGE = "BUFFER_SHORTAGE";$/;"	V
FlexDecoder	nvim/plugged/coc.nvim/build/index.js	/^function FlexDecoder() {$/;"	F
FlexEncoder	nvim/plugged/coc.nvim/build/index.js	/^function FlexEncoder() {$/;"	F
getDecoderMethods	nvim/plugged/coc.nvim/build/index.js	/^function getDecoderMethods() {$/;"	F
bufferish	nvim/plugged/coc.nvim/build/index.js	/^    bufferish: Bufferish,$/;"	P
write	nvim/plugged/coc.nvim/build/index.js	/^    write: write,$/;"	P
fetch	nvim/plugged/coc.nvim/build/index.js	/^    fetch: fetch,$/;"	P
flush	nvim/plugged/coc.nvim/build/index.js	/^    flush: flush,$/;"	P
push	nvim/plugged/coc.nvim/build/index.js	/^    push: push,$/;"	P
pull	nvim/plugged/coc.nvim/build/index.js	/^    pull: pull,$/;"	P
read	nvim/plugged/coc.nvim/build/index.js	/^    read: read,$/;"	P
reserve	nvim/plugged/coc.nvim/build/index.js	/^    reserve: reserve,$/;"	P
offset	nvim/plugged/coc.nvim/build/index.js	/^    offset: 0$/;"	P
write	nvim/plugged/coc.nvim/build/index.js	/^  function write(chunk) {$/;"	F
flush	nvim/plugged/coc.nvim/build/index.js	/^  function flush() {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^      var value;$/;"	V
reserve	nvim/plugged/coc.nvim/build/index.js	/^  function reserve(length) {$/;"	F
getEncoderMethods	nvim/plugged/coc.nvim/build/index.js	/^function getEncoderMethods() {$/;"	F
bufferish	nvim/plugged/coc.nvim/build/index.js	/^    bufferish: Bufferish,$/;"	P
write	nvim/plugged/coc.nvim/build/index.js	/^    write: write,$/;"	P
fetch	nvim/plugged/coc.nvim/build/index.js	/^    fetch: fetch,$/;"	P
flush	nvim/plugged/coc.nvim/build/index.js	/^    flush: flush,$/;"	P
push	nvim/plugged/coc.nvim/build/index.js	/^    push: push,$/;"	P
pull	nvim/plugged/coc.nvim/build/index.js	/^    pull: pull,$/;"	P
read	nvim/plugged/coc.nvim/build/index.js	/^    read: read,$/;"	P
reserve	nvim/plugged/coc.nvim/build/index.js	/^    reserve: reserve,$/;"	P
send	nvim/plugged/coc.nvim/build/index.js	/^    send: send,$/;"	P
maxBufferSize	nvim/plugged/coc.nvim/build/index.js	/^    maxBufferSize: MAX_BUFFER_SIZE,$/;"	P
minBufferSize	nvim/plugged/coc.nvim/build/index.js	/^    minBufferSize: MIN_BUFFER_SIZE,$/;"	P
offset	nvim/plugged/coc.nvim/build/index.js	/^    offset: 0,$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^    start: 0$/;"	P
fetch	nvim/plugged/coc.nvim/build/index.js	/^  function fetch() {$/;"	F
flush	nvim/plugged/coc.nvim/build/index.js	/^  function flush() {$/;"	F
pull	nvim/plugged/coc.nvim/build/index.js	/^  function pull() {$/;"	F
reserve	nvim/plugged/coc.nvim/build/index.js	/^  function reserve(length) {$/;"	F
send	nvim/plugged/coc.nvim/build/index.js	/^  function send(buffer) {$/;"	F
write	nvim/plugged/coc.nvim/build/index.js	/^function write() {$/;"	F
fetch	nvim/plugged/coc.nvim/build/index.js	/^function fetch() {$/;"	F
read	nvim/plugged/coc.nvim/build/index.js	/^function read() {$/;"	F
push	nvim/plugged/coc.nvim/build/index.js	/^function push(chunk) {$/;"	F
pull	nvim/plugged/coc.nvim/build/index.js	/^function pull() {$/;"	F
mixinFactory	nvim/plugged/coc.nvim/build/index.js	/^function mixinFactory(source) {$/;"	F
mixin	nvim/plugged/coc.nvim/build/index.js	/^  function mixin(target) {$/;"	F
decode	nvim/plugged/coc.nvim/build/index.js	/^function decode(input, options) {$/;"	F
decoder	nvim/plugged/coc.nvim/build/index.js	/^  var decoder = new DecodeBuffer(options);$/;"	V
DecodeBuffer	nvim/plugged/coc.nvim/build/index.js	/^function DecodeBuffer(options) {$/;"	F
fetch	nvim/plugged/coc.nvim/build/index.js	/^DecodeBuffer.prototype.fetch = function() {$/;"	M
addExtUnpacker	nvim/plugged/coc.nvim/build/index.js	/^  addExtUnpacker: addExtUnpacker,$/;"	P
getExtUnpacker	nvim/plugged/coc.nvim/build/index.js	/^  getExtUnpacker: getExtUnpacker,$/;"	P
init	nvim/plugged/coc.nvim/build/index.js	/^  init: init$/;"	P
getDecoder	nvim/plugged/coc.nvim/build/index.js	/^function getDecoder(options) {$/;"	F
decode	nvim/plugged/coc.nvim/build/index.js	/^  function decode(decoder) {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^function init() {$/;"	F
addExtUnpacker	nvim/plugged/coc.nvim/build/index.js	/^function addExtUnpacker(etype, unpacker) {$/;"	F
getExtUnpacker	nvim/plugged/coc.nvim/build/index.js	/^function getExtUnpacker(type) {$/;"	F
extUnpacker	nvim/plugged/coc.nvim/build/index.js	/^  function extUnpacker(buffer) {$/;"	F
_decode	nvim/plugged/coc.nvim/build/index.js	/^var _decode;$/;"	V
ERROR_COLUMNS	nvim/plugged/coc.nvim/build/index.js	/^var ERROR_COLUMNS = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};$/;"	O
setExtUnpackers	nvim/plugged/coc.nvim/build/index.js	/^function setExtUnpackers(codec) {$/;"	F
decode	nvim/plugged/coc.nvim/build/index.js	/^function decode(input) {$/;"	F
unpackRegExp	nvim/plugged/coc.nvim/build/index.js	/^function unpackRegExp(value) {$/;"	F
unpackError	nvim/plugged/coc.nvim/build/index.js	/^function unpackError(Class) {$/;"	F
out	nvim/plugged/coc.nvim/build/index.js	/^    var out = new Class();$/;"	V
unpackClass	nvim/plugged/coc.nvim/build/index.js	/^function unpackClass(Class) {$/;"	F
unpackArrayBuffer	nvim/plugged/coc.nvim/build/index.js	/^function unpackArrayBuffer(value) {$/;"	F
getReadFormat	nvim/plugged/coc.nvim/build/index.js	/^function getReadFormat(options) {$/;"	F
readFormat	nvim/plugged/coc.nvim/build/index.js	/^  var readFormat = {$/;"	O
map	nvim/plugged/coc.nvim/build/index.js	/^    map: (usemap ? map_to_map : map_to_obj),$/;"	M
array	nvim/plugged/coc.nvim/build/index.js	/^    array: array,$/;"	P
str	nvim/plugged/coc.nvim/build/index.js	/^    str: str,$/;"	P
bin	nvim/plugged/coc.nvim/build/index.js	/^    bin: (binarraybuffer ? bin_arraybuffer : bin_buffer),$/;"	M
ext	nvim/plugged/coc.nvim/build/index.js	/^    ext: ext,$/;"	P
uint8	nvim/plugged/coc.nvim/build/index.js	/^    uint8: uint8,$/;"	P
uint16	nvim/plugged/coc.nvim/build/index.js	/^    uint16: uint16,$/;"	P
uint32	nvim/plugged/coc.nvim/build/index.js	/^    uint32: uint32,$/;"	P
int8	nvim/plugged/coc.nvim/build/index.js	/^    int8: int8,$/;"	P
int16	nvim/plugged/coc.nvim/build/index.js	/^    int16: int16,$/;"	P
int32	nvim/plugged/coc.nvim/build/index.js	/^    int32: int32,$/;"	P
map_to_obj	nvim/plugged/coc.nvim/build/index.js	/^function map_to_obj(decoder, len) {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^  var value = {};$/;"	O
i	nvim/plugged/coc.nvim/build/index.js	/^  var i;$/;"	V
k	nvim/plugged/coc.nvim/build/index.js	/^  var k = new Array(len);$/;"	V
v	nvim/plugged/coc.nvim/build/index.js	/^  var v = new Array(len);$/;"	V
map_to_map	nvim/plugged/coc.nvim/build/index.js	/^function map_to_map(decoder, len) {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^  var value = new Map();$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^  var i;$/;"	V
k	nvim/plugged/coc.nvim/build/index.js	/^  var k = new Array(len);$/;"	V
v	nvim/plugged/coc.nvim/build/index.js	/^  var v = new Array(len);$/;"	V
array	nvim/plugged/coc.nvim/build/index.js	/^function array(decoder, len) {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^  var value = new Array(len);$/;"	V
str	nvim/plugged/coc.nvim/build/index.js	/^function str(decoder, len) {$/;"	F
bin_buffer	nvim/plugged/coc.nvim/build/index.js	/^function bin_buffer(decoder, len) {$/;"	F
bin_arraybuffer	nvim/plugged/coc.nvim/build/index.js	/^function bin_arraybuffer(decoder, len) {$/;"	F
ext	nvim/plugged/coc.nvim/build/index.js	/^function ext(decoder, len) {$/;"	F
uint8	nvim/plugged/coc.nvim/build/index.js	/^function uint8(decoder) {$/;"	F
int8	nvim/plugged/coc.nvim/build/index.js	/^function int8(decoder) {$/;"	F
uint16	nvim/plugged/coc.nvim/build/index.js	/^function uint16(decoder) {$/;"	F
int16	nvim/plugged/coc.nvim/build/index.js	/^function int16(decoder) {$/;"	F
uint32	nvim/plugged/coc.nvim/build/index.js	/^function uint32(decoder) {$/;"	F
int32	nvim/plugged/coc.nvim/build/index.js	/^function int32(decoder) {$/;"	F
read	nvim/plugged/coc.nvim/build/index.js	/^function read(len, method) {$/;"	F
readUInt64BE	nvim/plugged/coc.nvim/build/index.js	/^function readUInt64BE(start) {$/;"	F
readInt64BE	nvim/plugged/coc.nvim/build/index.js	/^function readInt64BE(start) {$/;"	F
readUInt64BE_int64	nvim/plugged/coc.nvim/build/index.js	/^function readUInt64BE_int64(start) {$/;"	F
readInt64BE_int64	nvim/plugged/coc.nvim/build/index.js	/^function readInt64BE_int64(start) {$/;"	F
readFloatBE	nvim/plugged/coc.nvim/build/index.js	/^function readFloatBE(start) {$/;"	F
readDoubleBE	nvim/plugged/coc.nvim/build/index.js	/^function readDoubleBE(start) {$/;"	F
getReadToken	nvim/plugged/coc.nvim/build/index.js	/^function getReadToken(options) {$/;"	F
init_token	nvim/plugged/coc.nvim/build/index.js	/^function init_token(format) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^  var i;$/;"	V
token	nvim/plugged/coc.nvim/build/index.js	/^  var token = new Array(256);$/;"	V
init_useraw	nvim/plugged/coc.nvim/build/index.js	/^function init_useraw(format) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^  var i;$/;"	V
constant	nvim/plugged/coc.nvim/build/index.js	/^function constant(value) {$/;"	F
flex	nvim/plugged/coc.nvim/build/index.js	/^function flex(lenFunc, decodeFunc) {$/;"	F
fix	nvim/plugged/coc.nvim/build/index.js	/^function fix(len, method) {$/;"	F
Encoder	nvim/plugged/coc.nvim/build/index.js	/^function Encoder(options) {$/;"	F
encode	nvim/plugged/coc.nvim/build/index.js	/^Encoder.prototype.encode = function(chunk) {$/;"	M
end	nvim/plugged/coc.nvim/build/index.js	/^Encoder.prototype.end = function(chunk) {$/;"	M
EventLite	nvim/plugged/coc.nvim/build/index.js	/^function EventLite() {$/;"	F
LISTENERS	nvim/plugged/coc.nvim/build/index.js	/^  var LISTENERS = "listeners";$/;"	V
methods	nvim/plugged/coc.nvim/build/index.js	/^  var methods = {$/;"	O
on	nvim/plugged/coc.nvim/build/index.js	/^    on: on,$/;"	P
once	nvim/plugged/coc.nvim/build/index.js	/^    once: once,$/;"	P
off	nvim/plugged/coc.nvim/build/index.js	/^    off: off,$/;"	P
emit	nvim/plugged/coc.nvim/build/index.js	/^    emit: emit$/;"	P
mixin	nvim/plugged/coc.nvim/build/index.js	/^  function mixin(target) {$/;"	F
on	nvim/plugged/coc.nvim/build/index.js	/^  function on(type, func) {$/;"	F
once	nvim/plugged/coc.nvim/build/index.js	/^  function once(type, func) {$/;"	F
wrap	nvim/plugged/coc.nvim/build/index.js	/^    function wrap() {$/;"	F
off	nvim/plugged/coc.nvim/build/index.js	/^  function off(type, func) {$/;"	F
listners	nvim/plugged/coc.nvim/build/index.js	/^    var listners;$/;"	V
ne	nvim/plugged/coc.nvim/build/index.js	/^    function ne(test) {$/;"	F
emit	nvim/plugged/coc.nvim/build/index.js	/^  function emit(type, value) {$/;"	F
zeroarg	nvim/plugged/coc.nvim/build/index.js	/^    function zeroarg(func) {$/;"	F
onearg	nvim/plugged/coc.nvim/build/index.js	/^    function onearg(func) {$/;"	F
moreargs	nvim/plugged/coc.nvim/build/index.js	/^    function moreargs(func) {$/;"	F
getListeners	nvim/plugged/coc.nvim/build/index.js	/^  function getListeners(that, type, readonly) {$/;"	F
Decoder	nvim/plugged/coc.nvim/build/index.js	/^function Decoder(options) {$/;"	F
decode	nvim/plugged/coc.nvim/build/index.js	/^Decoder.prototype.decode = function(chunk) {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^Decoder.prototype.push = function(chunk) {$/;"	M
end	nvim/plugged/coc.nvim/build/index.js	/^Decoder.prototype.end = function(chunk) {$/;"	M
DEFAULT_OPTIONS	nvim/plugged/coc.nvim/build/index.js	/^var DEFAULT_OPTIONS = {objectMode: true};$/;"	O
EncodeStream	nvim/plugged/coc.nvim/build/index.js	/^function EncodeStream(options) {$/;"	F
push	nvim/plugged/coc.nvim/build/index.js	/^  encoder.push = function(chunk) {$/;"	M
_transform	nvim/plugged/coc.nvim/build/index.js	/^EncodeStream.prototype._transform = function(chunk, encoding, callback) {$/;"	M
_flush	nvim/plugged/coc.nvim/build/index.js	/^EncodeStream.prototype._flush = function(callback) {$/;"	M
DEFAULT_OPTIONS	nvim/plugged/coc.nvim/build/index.js	/^var DEFAULT_OPTIONS = {objectMode: true};$/;"	O
DecodeStream	nvim/plugged/coc.nvim/build/index.js	/^function DecodeStream(options) {$/;"	F
push	nvim/plugged/coc.nvim/build/index.js	/^  decoder.push = function(chunk) {$/;"	M
_transform	nvim/plugged/coc.nvim/build/index.js	/^DecodeStream.prototype._transform = function(chunk, encoding, callback) {$/;"	M
codec	nvim/plugged/coc.nvim/build/index.js	/^exports.codec = {$/;"	P
Buffered	nvim/plugged/coc.nvim/build/index.js	/^class Buffered extends stream_1.Transform {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
sendData	nvim/plugged/coc.nvim/build/index.js	/^    sendData() {$/;"	M
_transform	nvim/plugged/coc.nvim/build/index.js	/^    _transform(chunk, _encoding, callback) {$/;"	M
_flush	nvim/plugged/coc.nvim/build/index.js	/^    _flush(callback) {$/;"	M
ExtType	nvim/plugged/coc.nvim/build/index.js	/^var ExtType;$/;"	V
fulfilled	nvim/plugged/coc.nvim/build/index.js	/^        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }$/;"	F
rejected	nvim/plugged/coc.nvim/build/index.js	/^        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }$/;"	F
Buffer	nvim/plugged/coc.nvim/build/index.js	/^class Buffer extends Base_1.BaseApi {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
attach	nvim/plugged/coc.nvim/build/index.js	/^    attach(sendBuffer = false, options = {}) {$/;"	M
detach	nvim/plugged/coc.nvim/build/index.js	/^    detach() {$/;"	M
getCommands	nvim/plugged/coc.nvim/build/index.js	/^    getCommands(options = {}) {$/;"	M
getLines	nvim/plugged/coc.nvim/build/index.js	/^    getLines({ start, end, strictIndexing } = { start: 0, end: -1, strictIndexing: true }) {$/;"	M
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^        strictIndexing: true,$/;"	P
TODO	nvim/plugged/coc.nvim/build/index.js	/^        \/\/ TODO: Error checking$/;"	T
setVirtualText	nvim/plugged/coc.nvim/build/index.js	/^    setVirtualText(src_id, line, chunks, opts = {}) {$/;"	M
insert	nvim/plugged/coc.nvim/build/index.js	/^    insert(lines, start) {$/;"	M
end	nvim/plugged/coc.nvim/build/index.js	/^            end: start,$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^            strictIndexing: true,$/;"	P
replace	nvim/plugged/coc.nvim/build/index.js	/^    replace(_lines, start) {$/;"	M
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^            strictIndexing: false,$/;"	P
remove	nvim/plugged/coc.nvim/build/index.js	/^    remove(start, end, strictIndexing = false) {$/;"	M
append	nvim/plugged/coc.nvim/build/index.js	/^    append(lines) {$/;"	M
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^            strictIndexing: false,$/;"	P
setName	nvim/plugged/coc.nvim/build/index.js	/^    setName(value) {$/;"	M
mark	nvim/plugged/coc.nvim/build/index.js	/^    mark(name) {$/;"	M
getKeymap	nvim/plugged/coc.nvim/build/index.js	/^    getKeymap(mode) {$/;"	M
getOffset	nvim/plugged/coc.nvim/build/index.js	/^    getOffset(index) {$/;"	M
addHighlight	nvim/plugged/coc.nvim/build/index.js	/^    addHighlight({ hlGroup: _hlGroup, line, colStart: _start, colEnd: _end, srcId: _srcId, }) {$/;"	M
clearHighlight	nvim/plugged/coc.nvim/build/index.js	/^    clearHighlight(args = {}) {$/;"	M
defaults	nvim/plugged/coc.nvim/build/index.js	/^        const defaults = {$/;"	O
lineStart	nvim/plugged/coc.nvim/build/index.js	/^            lineStart: 0,$/;"	P
clearNamespace	nvim/plugged/coc.nvim/build/index.js	/^    clearNamespace(id, lineStart = 0, lineEnd = -1) {$/;"	M
listen	nvim/plugged/coc.nvim/build/index.js	/^    listen(eventName, cb) {$/;"	M
unlisten	nvim/plugged/coc.nvim/build/index.js	/^    unlisten(eventName, cb) {$/;"	M
fulfilled	nvim/plugged/coc.nvim/build/index.js	/^        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }$/;"	F
rejected	nvim/plugged/coc.nvim/build/index.js	/^        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }$/;"	F
BaseApi	nvim/plugged/coc.nvim/build/index.js	/^class BaseApi extends events_1.EventEmitter {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor({ transport, data, client, }) {$/;"	M
setTransport	nvim/plugged/coc.nvim/build/index.js	/^    setTransport(transport) {$/;"	M
equals	nvim/plugged/coc.nvim/build/index.js	/^    equals(other) {$/;"	M
request	nvim/plugged/coc.nvim/build/index.js	/^    request(name, args = []) {$/;"	M
getArgsByPrefix	nvim/plugged/coc.nvim/build/index.js	/^    getArgsByPrefix(args) {$/;"	M
getVar	nvim/plugged/coc.nvim/build/index.js	/^    getVar(name) {$/;"	M
setVar	nvim/plugged/coc.nvim/build/index.js	/^    setVar(name, value, isNotify = false) {$/;"	M
deleteVar	nvim/plugged/coc.nvim/build/index.js	/^    deleteVar(name) {$/;"	M
getOption	nvim/plugged/coc.nvim/build/index.js	/^    getOption(name) {$/;"	M
setOption	nvim/plugged/coc.nvim/build/index.js	/^    setOption(name, value, isNotify) {$/;"	M
notify	nvim/plugged/coc.nvim/build/index.js	/^    notify(name, args = []) {$/;"	M
Window	nvim/plugged/coc.nvim/build/index.js	/^class Window extends Base_1.BaseApi {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
setCursor	nvim/plugged/coc.nvim/build/index.js	/^    setCursor(pos, isNotify = false) {$/;"	M
setHeight	nvim/plugged/coc.nvim/build/index.js	/^    setHeight(height, isNotify = false) {$/;"	M
setWidth	nvim/plugged/coc.nvim/build/index.js	/^    setWidth(width, isNotify = false) {$/;"	M
setConfig	nvim/plugged/coc.nvim/build/index.js	/^    setConfig(options, isNotify) {$/;"	M
getConfig	nvim/plugged/coc.nvim/build/index.js	/^    getConfig() {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^    close(force, isNotify) {$/;"	M
count	nvim/plugged/coc.nvim/build/index.js	/^            let count = 0;$/;"	V
interval	nvim/plugged/coc.nvim/build/index.js	/^            let interval = setInterval(() => {$/;"	F
Tabpage	nvim/plugged/coc.nvim/build/index.js	/^class Tabpage extends Base_1.BaseApi {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
getOption	nvim/plugged/coc.nvim/build/index.js	/^    getOption() {$/;"	M
setOption	nvim/plugged/coc.nvim/build/index.js	/^    setOption() {$/;"	M
Transport	nvim/plugged/coc.nvim/build/index.js	/^class Transport extends events_1.EventEmitter {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^    debug(key, ...meta) {$/;"	M
debugMessage	nvim/plugged/coc.nvim/build/index.js	/^    debugMessage(msg) {$/;"	M
pauseNotification	nvim/plugged/coc.nvim/build/index.js	/^    pauseNotification() {$/;"	M
resumeNotification	nvim/plugged/coc.nvim/build/index.js	/^    resumeNotification(isNotify = false) {$/;"	M
getLogFile	nvim/plugged/coc.nvim/build/index.js	/^function getLogFile() {$/;"	F
toObject	nvim/plugged/coc.nvim/build/index.js	/^function toObject(arg) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^function toString(arg) {$/;"	F
Logger	nvim/plugged/coc.nvim/build/index.js	/^class Logger {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(name) {$/;"	M
getText	nvim/plugged/coc.nvim/build/index.js	/^    getText(level, data, meta) {$/;"	M
more	nvim/plugged/coc.nvim/build/index.js	/^        let more = '';$/;"	V
debug	nvim/plugged/coc.nvim/build/index.js	/^    debug(data, ...meta) {$/;"	M
info	nvim/plugged/coc.nvim/build/index.js	/^    info(data, ...meta) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^    error(data, ...meta) {$/;"	M
trace	nvim/plugged/coc.nvim/build/index.js	/^    trace(data, ...meta) {$/;"	M
createLogger	nvim/plugged/coc.nvim/build/index.js	/^function createLogger(name) {$/;"	F
VimTransport	nvim/plugged/coc.nvim/build/index.js	/^class VimTransport extends base_1.default {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
attach	nvim/plugged/coc.nvim/build/index.js	/^    attach(writer, reader, client) {$/;"	M
detach	nvim/plugged/coc.nvim/build/index.js	/^    detach() {$/;"	M
request	nvim/plugged/coc.nvim/build/index.js	/^    request(method, args, cb) {$/;"	M
req	nvim/plugged/coc.nvim/build/index.js	/^        let req = new request_1.default(this.connection, cb, this.nextRequestId);$/;"	V
notify	nvim/plugged/coc.nvim/build/index.js	/^    notify(method, args) {$/;"	M
createResponse	nvim/plugged/coc.nvim/build/index.js	/^    createResponse(requestId) {$/;"	M
send	nvim/plugged/coc.nvim/build/index.js	/^            send: (resp, isError) => {$/;"	M
Connection	nvim/plugged/coc.nvim/build/index.js	/^class Connection extends events_1.default {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(readable, writeable) {$/;"	M
parseData	nvim/plugged/coc.nvim/build/index.js	/^    parseData(str) {$/;"	M
arr	nvim/plugged/coc.nvim/build/index.js	/^        let arr;$/;"	V
response	nvim/plugged/coc.nvim/build/index.js	/^    response(requestId, data) {$/;"	M
notify	nvim/plugged/coc.nvim/build/index.js	/^    notify(event, data) {$/;"	M
send	nvim/plugged/coc.nvim/build/index.js	/^    send(arr) {$/;"	M
redraw	nvim/plugged/coc.nvim/build/index.js	/^    redraw(force = false) {$/;"	M
commmand	nvim/plugged/coc.nvim/build/index.js	/^    commmand(cmd) {$/;"	M
expr	nvim/plugged/coc.nvim/build/index.js	/^    expr(expr) {$/;"	M
call	nvim/plugged/coc.nvim/build/index.js	/^    call(func, args, requestId) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
Request	nvim/plugged/coc.nvim/build/index.js	/^class Request {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(connection, cb, id) {$/;"	M
request	nvim/plugged/coc.nvim/build/index.js	/^    request(method, args = []) {$/;"	M
callback	nvim/plugged/coc.nvim/build/index.js	/^    callback(client, err, result) {$/;"	M
fulfilled	nvim/plugged/coc.nvim/build/index.js	/^        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }$/;"	F
rejected	nvim/plugged/coc.nvim/build/index.js	/^        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }$/;"	F
step	nvim/plugged/coc.nvim/build/index.js	/^        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }$/;"	F
Neovim	nvim/plugged/coc.nvim/build/index.js	/^class Neovim extends Base_1.BaseApi {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
getArgs	nvim/plugged/coc.nvim/build/index.js	/^    getArgs(args) {$/;"	M
setBuffer	nvim/plugged/coc.nvim/build/index.js	/^    setBuffer(buffer) {$/;"	M
getChanInfo	nvim/plugged/coc.nvim/build/index.js	/^    getChanInfo(chan) {$/;"	M
createNamespace	nvim/plugged/coc.nvim/build/index.js	/^    createNamespace(name = "") {$/;"	M
getCommands	nvim/plugged/coc.nvim/build/index.js	/^    getCommands(options = {}) {$/;"	M
setTabpage	nvim/plugged/coc.nvim/build/index.js	/^    setTabpage(tabpage) {$/;"	M
getWindows	nvim/plugged/coc.nvim/build/index.js	/^    getWindows() {$/;"	M
setWindow	nvim/plugged/coc.nvim/build/index.js	/^    setWindow(win) {$/;"	M
setDirectory	nvim/plugged/coc.nvim/build/index.js	/^    setDirectory(dir) {$/;"	M
createNewBuffer	nvim/plugged/coc.nvim/build/index.js	/^    createNewBuffer(listed = false, scratch = false) {$/;"	M
openFloatWindow	nvim/plugged/coc.nvim/build/index.js	/^    openFloatWindow(buffer, enter, options) {$/;"	M
getLine	nvim/plugged/coc.nvim/build/index.js	/^    getLine() {$/;"	M
setLine	nvim/plugged/coc.nvim/build/index.js	/^    setLine(line) {$/;"	M
getKeymap	nvim/plugged/coc.nvim/build/index.js	/^    getKeymap(mode) {$/;"	M
getColorByName	nvim/plugged/coc.nvim/build/index.js	/^    getColorByName(name) {$/;"	M
getHighlight	nvim/plugged/coc.nvim/build/index.js	/^    getHighlight(nameOrId, isRgb = true) {$/;"	M
getHighlightByName	nvim/plugged/coc.nvim/build/index.js	/^    getHighlightByName(name, isRgb = true) {$/;"	M
getHighlightById	nvim/plugged/coc.nvim/build/index.js	/^    getHighlightById(id, isRgb = true) {$/;"	M
deleteCurrentLine	nvim/plugged/coc.nvim/build/index.js	/^    deleteCurrentLine() {$/;"	M
eval	nvim/plugged/coc.nvim/build/index.js	/^    eval(expr) {$/;"	M
lua	nvim/plugged/coc.nvim/build/index.js	/^    lua(code, args = []) {$/;"	M
executeLua	nvim/plugged/coc.nvim/build/index.js	/^    executeLua(code, args = []) {$/;"	M
callDictFunction	nvim/plugged/coc.nvim/build/index.js	/^    callDictFunction(dict, fname, args = []) {$/;"	M
call	nvim/plugged/coc.nvim/build/index.js	/^    call(fname, args = [], isNotify) {$/;"	M
callTimer	nvim/plugged/coc.nvim/build/index.js	/^    callTimer(fname, args = [], isNotify) {$/;"	M
callAsync	nvim/plugged/coc.nvim/build/index.js	/^    callAsync(fname, args = []) {$/;"	M
callFunction	nvim/plugged/coc.nvim/build/index.js	/^    callFunction(fname, args = []) {$/;"	M
callAtomic	nvim/plugged/coc.nvim/build/index.js	/^    callAtomic(calls) {$/;"	M
command	nvim/plugged/coc.nvim/build/index.js	/^    command(arg, isNotify) {$/;"	M
commandOutput	nvim/plugged/coc.nvim/build/index.js	/^    commandOutput(arg) {$/;"	M
getVvar	nvim/plugged/coc.nvim/build/index.js	/^    getVvar(name) {$/;"	M
feedKeys	nvim/plugged/coc.nvim/build/index.js	/^    feedKeys(keys, mode, escapeCsi) {$/;"	M
input	nvim/plugged/coc.nvim/build/index.js	/^    input(keys) {$/;"	M
parseExpression	nvim/plugged/coc.nvim/build/index.js	/^    parseExpression(expr, flags, highlight) {$/;"	M
getProc	nvim/plugged/coc.nvim/build/index.js	/^    getProc(pid) {$/;"	M
getProcChildren	nvim/plugged/coc.nvim/build/index.js	/^    getProcChildren(pid) {$/;"	M
replaceTermcodes	nvim/plugged/coc.nvim/build/index.js	/^    replaceTermcodes(str, fromPart, doIt, special) {$/;"	M
strWidth	nvim/plugged/coc.nvim/build/index.js	/^    strWidth(str) {$/;"	M
outWrite	nvim/plugged/coc.nvim/build/index.js	/^    outWrite(str) {$/;"	M
outWriteLine	nvim/plugged/coc.nvim/build/index.js	/^    outWriteLine(str) {$/;"	M
errWrite	nvim/plugged/coc.nvim/build/index.js	/^    errWrite(str) {$/;"	M
errWriteLine	nvim/plugged/coc.nvim/build/index.js	/^    errWriteLine(str) {$/;"	M
TODO	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ TODO: add type$/;"	T
uiAttach	nvim/plugged/coc.nvim/build/index.js	/^    uiAttach(width, height, options) {$/;"	M
uiDetach	nvim/plugged/coc.nvim/build/index.js	/^    uiDetach() {$/;"	M
uiTryResize	nvim/plugged/coc.nvim/build/index.js	/^    uiTryResize(width, height) {$/;"	M
uiSetOption	nvim/plugged/coc.nvim/build/index.js	/^    uiSetOption(name, value) {$/;"	M
subscribe	nvim/plugged/coc.nvim/build/index.js	/^    subscribe(event) {$/;"	M
unsubscribe	nvim/plugged/coc.nvim/build/index.js	/^    unsubscribe(event) {$/;"	M
setClientInfo	nvim/plugged/coc.nvim/build/index.js	/^    setClientInfo(name, version, type, methods, attributes) {$/;"	M
quit	nvim/plugged/coc.nvim/build/index.js	/^    quit() {$/;"	M
Events	nvim/plugged/coc.nvim/build/index.js	/^class Events {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
_cursor	nvim/plugged/coc.nvim/build/index.js	/^            this._cursor = {$/;"	P
on	nvim/plugged/coc.nvim/build/index.js	/^    on(event, handler, thisArg, disposables) {$/;"	M
disposables	nvim/plugged/coc.nvim/build/index.js	/^            let disposables = [];$/;"	A
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = vscode_languageserver_protocol_1.Disposable.create(() => {$/;"	F
__export	nvim/plugged/coc.nvim/build/index.js	/^function __export(m) {$/;"	F
Proposed	nvim/plugged/coc.nvim/build/index.js	/^var Proposed;$/;"	V
CallHierarchyRequest	nvim/plugged/coc.nvim/build/index.js	/^    let CallHierarchyRequest;$/;"	V
CallHierarchyDirection	nvim/plugged/coc.nvim/build/index.js	/^    let CallHierarchyDirection;$/;"	V
ProgressStartNotification	nvim/plugged/coc.nvim/build/index.js	/^    let ProgressStartNotification;$/;"	V
ProgressReportNotification	nvim/plugged/coc.nvim/build/index.js	/^    let ProgressReportNotification;$/;"	V
ProgressDoneNotification	nvim/plugged/coc.nvim/build/index.js	/^    let ProgressDoneNotification;$/;"	V
ProgressCancelNotification	nvim/plugged/coc.nvim/build/index.js	/^    let ProgressCancelNotification;$/;"	V
createProtocolConnection	nvim/plugged/coc.nvim/build/index.js	/^function createProtocolConnection(reader, writer, logger, strategy) {$/;"	F
__export	nvim/plugged/coc.nvim/build/index.js	/^function __export(m) {$/;"	F
CancelNotification	nvim/plugged/coc.nvim/build/index.js	/^var CancelNotification;$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^    error: () => { },$/;"	M
warn	nvim/plugged/coc.nvim/build/index.js	/^    warn: () => { },$/;"	M
info	nvim/plugged/coc.nvim/build/index.js	/^    info: () => { },$/;"	M
log	nvim/plugged/coc.nvim/build/index.js	/^    log: () => { }$/;"	M
Trace	nvim/plugged/coc.nvim/build/index.js	/^var Trace;$/;"	V
fromString	nvim/plugged/coc.nvim/build/index.js	/^    function fromString(value) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^    function toString(value) {$/;"	F
TraceFormat	nvim/plugged/coc.nvim/build/index.js	/^var TraceFormat;$/;"	V
fromString	nvim/plugged/coc.nvim/build/index.js	/^    function fromString(value) {$/;"	F
SetTraceNotification	nvim/plugged/coc.nvim/build/index.js	/^var SetTraceNotification;$/;"	V
LogTraceNotification	nvim/plugged/coc.nvim/build/index.js	/^var LogTraceNotification;$/;"	V
ConnectionErrors	nvim/plugged/coc.nvim/build/index.js	/^var ConnectionErrors;$/;"	V
ConnectionError	nvim/plugged/coc.nvim/build/index.js	/^class ConnectionError extends Error {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(code, message) {$/;"	M
ConnectionStrategy	nvim/plugged/coc.nvim/build/index.js	/^var ConnectionStrategy;$/;"	V
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
ConnectionState	nvim/plugged/coc.nvim/build/index.js	/^var ConnectionState;$/;"	V
_createMessageConnection	nvim/plugged/coc.nvim/build/index.js	/^function _createMessageConnection(messageReader, messageWriter, logger, strategy) {$/;"	F
sequenceNumber	nvim/plugged/coc.nvim/build/index.js	/^    let sequenceNumber = 0;$/;"	V
notificationSquenceNumber	nvim/plugged/coc.nvim/build/index.js	/^    let notificationSquenceNumber = 0;$/;"	V
unknownResponseSquenceNumber	nvim/plugged/coc.nvim/build/index.js	/^    let unknownResponseSquenceNumber = 0;$/;"	V
version	nvim/plugged/coc.nvim/build/index.js	/^    const version = '2.0';$/;"	V
timer	nvim/plugged/coc.nvim/build/index.js	/^    let timer;$/;"	V
messageQueue	nvim/plugged/coc.nvim/build/index.js	/^    let messageQueue = new linkedMap_1.LinkedMap();$/;"	V
tracer	nvim/plugged/coc.nvim/build/index.js	/^    let tracer;$/;"	V
errorEmitter	nvim/plugged/coc.nvim/build/index.js	/^    let errorEmitter = new events_1.Emitter();$/;"	V
closeEmitter	nvim/plugged/coc.nvim/build/index.js	/^    let closeEmitter = new events_1.Emitter();$/;"	V
unhandledNotificationEmitter	nvim/plugged/coc.nvim/build/index.js	/^    let unhandledNotificationEmitter = new events_1.Emitter();$/;"	V
disposeEmitter	nvim/plugged/coc.nvim/build/index.js	/^    let disposeEmitter = new events_1.Emitter();$/;"	V
createRequestQueueKey	nvim/plugged/coc.nvim/build/index.js	/^    function createRequestQueueKey(id) {$/;"	F
createResponseQueueKey	nvim/plugged/coc.nvim/build/index.js	/^    function createResponseQueueKey(id) {$/;"	F
createNotificationQueueKey	nvim/plugged/coc.nvim/build/index.js	/^    function createNotificationQueueKey() {$/;"	F
addMessageToQueue	nvim/plugged/coc.nvim/build/index.js	/^    function addMessageToQueue(queue, message) {$/;"	F
cancelUndispatched	nvim/plugged/coc.nvim/build/index.js	/^    function cancelUndispatched(_message) {$/;"	F
isListening	nvim/plugged/coc.nvim/build/index.js	/^    function isListening() {$/;"	F
isClosed	nvim/plugged/coc.nvim/build/index.js	/^    function isClosed() {$/;"	F
isDisposed	nvim/plugged/coc.nvim/build/index.js	/^    function isDisposed() {$/;"	F
closeHandler	nvim/plugged/coc.nvim/build/index.js	/^    function closeHandler() {$/;"	F
readErrorHandler	nvim/plugged/coc.nvim/build/index.js	/^    function readErrorHandler(error) {$/;"	F
writeErrorHandler	nvim/plugged/coc.nvim/build/index.js	/^    function writeErrorHandler(data) {$/;"	F
triggerMessageQueue	nvim/plugged/coc.nvim/build/index.js	/^    function triggerMessageQueue() {$/;"	F
processMessageQueue	nvim/plugged/coc.nvim/build/index.js	/^    function processMessageQueue() {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^    let callback = (message) => {$/;"	F
handleRequest	nvim/plugged/coc.nvim/build/index.js	/^    function handleRequest(requestMessage) {$/;"	F
reply	nvim/plugged/coc.nvim/build/index.js	/^        function reply(resultOrError, method, startTime) {$/;"	F
message	nvim/plugged/coc.nvim/build/index.js	/^            let message = {$/;"	O
jsonrpc	nvim/plugged/coc.nvim/build/index.js	/^                jsonrpc: version,$/;"	P
replyError	nvim/plugged/coc.nvim/build/index.js	/^        function replyError(error, method, startTime) {$/;"	F
message	nvim/plugged/coc.nvim/build/index.js	/^            let message = {$/;"	O
jsonrpc	nvim/plugged/coc.nvim/build/index.js	/^                jsonrpc: version,$/;"	P
replySuccess	nvim/plugged/coc.nvim/build/index.js	/^        function replySuccess(result, method, startTime) {$/;"	F
message	nvim/plugged/coc.nvim/build/index.js	/^            let message = {$/;"	O
jsonrpc	nvim/plugged/coc.nvim/build/index.js	/^                jsonrpc: version,$/;"	P
result	nvim/plugged/coc.nvim/build/index.js	/^                result: result$/;"	P
type	nvim/plugged/coc.nvim/build/index.js	/^        let type;$/;"	V
requestHandler	nvim/plugged/coc.nvim/build/index.js	/^        let requestHandler;$/;"	V
cancellationSource	nvim/plugged/coc.nvim/build/index.js	/^            let cancellationSource = new cancellation_1.CancellationTokenSource();$/;"	V
handlerResult	nvim/plugged/coc.nvim/build/index.js	/^                let handlerResult;$/;"	V
handleResponse	nvim/plugged/coc.nvim/build/index.js	/^    function handleResponse(responseMessage) {$/;"	F
handleNotification	nvim/plugged/coc.nvim/build/index.js	/^    function handleNotification(message) {$/;"	F
notificationHandler	nvim/plugged/coc.nvim/build/index.js	/^        let notificationHandler;$/;"	V
notificationHandler	nvim/plugged/coc.nvim/build/index.js	/^            notificationHandler = (params) => {$/;"	M
handleInvalidMessage	nvim/plugged/coc.nvim/build/index.js	/^    function handleInvalidMessage(message) {$/;"	F
traceSendingRequest	nvim/plugged/coc.nvim/build/index.js	/^    function traceSendingRequest(message) {$/;"	F
traceSendingNotification	nvim/plugged/coc.nvim/build/index.js	/^    function traceSendingNotification(message) {$/;"	F
traceSendingResponse	nvim/plugged/coc.nvim/build/index.js	/^    function traceSendingResponse(message, method, startTime) {$/;"	F
traceReceivedRequest	nvim/plugged/coc.nvim/build/index.js	/^    function traceReceivedRequest(message) {$/;"	F
traceReceivedNotification	nvim/plugged/coc.nvim/build/index.js	/^    function traceReceivedNotification(message) {$/;"	F
traceReceivedResponse	nvim/plugged/coc.nvim/build/index.js	/^    function traceReceivedResponse(message, responsePromise) {$/;"	F
logLSPMessage	nvim/plugged/coc.nvim/build/index.js	/^    function logLSPMessage(type, message) {$/;"	F
lspMessage	nvim/plugged/coc.nvim/build/index.js	/^        const lspMessage = {$/;"	O
isLSPMessage	nvim/plugged/coc.nvim/build/index.js	/^            isLSPMessage: true,$/;"	P
throwIfClosedOrDisposed	nvim/plugged/coc.nvim/build/index.js	/^    function throwIfClosedOrDisposed() {$/;"	F
throwIfListening	nvim/plugged/coc.nvim/build/index.js	/^    function throwIfListening() {$/;"	F
throwIfNotListening	nvim/plugged/coc.nvim/build/index.js	/^    function throwIfNotListening() {$/;"	F
undefinedToNull	nvim/plugged/coc.nvim/build/index.js	/^    function undefinedToNull(param) {$/;"	F
computeMessageParams	nvim/plugged/coc.nvim/build/index.js	/^    function computeMessageParams(type, params) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        let result;$/;"	V
connection	nvim/plugged/coc.nvim/build/index.js	/^    let connection = {$/;"	O
sendNotification	nvim/plugged/coc.nvim/build/index.js	/^        sendNotification: (type, ...params) => {$/;"	M
method	nvim/plugged/coc.nvim/build/index.js	/^            let method;$/;"	V
messageParams	nvim/plugged/coc.nvim/build/index.js	/^            let messageParams;$/;"	V
notificationMessage	nvim/plugged/coc.nvim/build/index.js	/^            let notificationMessage = {$/;"	O
jsonrpc	nvim/plugged/coc.nvim/build/index.js	/^                jsonrpc: version,$/;"	P
method	nvim/plugged/coc.nvim/build/index.js	/^                method: method,$/;"	P
params	nvim/plugged/coc.nvim/build/index.js	/^                params: messageParams$/;"	P
onNotification	nvim/plugged/coc.nvim/build/index.js	/^        onNotification: (type, handler) => {$/;"	M
sendRequest	nvim/plugged/coc.nvim/build/index.js	/^        sendRequest: (type, ...params) => {$/;"	M
method	nvim/plugged/coc.nvim/build/index.js	/^            let method;$/;"	V
messageParams	nvim/plugged/coc.nvim/build/index.js	/^            let messageParams;$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^            let result = new Promise((resolve, reject) => {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^            let result = new Promise((resolve, reject) => {$/;"	V
requestMessage	nvim/plugged/coc.nvim/build/index.js	/^                let requestMessage = {$/;"	O
jsonrpc	nvim/plugged/coc.nvim/build/index.js	/^                    jsonrpc: version,$/;"	P
id	nvim/plugged/coc.nvim/build/index.js	/^                    id: id,$/;"	P
method	nvim/plugged/coc.nvim/build/index.js	/^                    method: method,$/;"	P
params	nvim/plugged/coc.nvim/build/index.js	/^                    params: messageParams$/;"	P
responsePromise	nvim/plugged/coc.nvim/build/index.js	/^                let responsePromise = { method: method, timerStart: Date.now(), resolve, reject };$/;"	O
onRequest	nvim/plugged/coc.nvim/build/index.js	/^        onRequest: (type, handler) => {$/;"	M
trace	nvim/plugged/coc.nvim/build/index.js	/^        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^        dispose: () => {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^            let error = new Error('Connection got disposed.');$/;"	V
listen	nvim/plugged/coc.nvim/build/index.js	/^        listen: () => {$/;"	M
inspect	nvim/plugged/coc.nvim/build/index.js	/^        inspect: () => {$/;"	M
isMessageReader	nvim/plugged/coc.nvim/build/index.js	/^function isMessageReader(value) {$/;"	F
isMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^function isMessageWriter(value) {$/;"	F
createMessageConnection	nvim/plugged/coc.nvim/build/index.js	/^function createMessageConnection(input, output, logger, strategy) {$/;"	F
boolean	nvim/plugged/coc.nvim/build/index.js	/^function boolean(value) {$/;"	F
string	nvim/plugged/coc.nvim/build/index.js	/^function string(value) {$/;"	F
number	nvim/plugged/coc.nvim/build/index.js	/^function number(value) {$/;"	F
error	nvim/plugged/coc.nvim/build/index.js	/^function error(value) {$/;"	F
func	nvim/plugged/coc.nvim/build/index.js	/^function func(value) {$/;"	F
array	nvim/plugged/coc.nvim/build/index.js	/^function array(value) {$/;"	F
stringArray	nvim/plugged/coc.nvim/build/index.js	/^function stringArray(value) {$/;"	F
ErrorCodes	nvim/plugged/coc.nvim/build/index.js	/^var ErrorCodes;$/;"	V
ResponseError	nvim/plugged/coc.nvim/build/index.js	/^class ResponseError extends Error {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(code, message, data) {$/;"	M
toJson	nvim/plugged/coc.nvim/build/index.js	/^    toJson() {$/;"	M
AbstractMessageType	nvim/plugged/coc.nvim/build/index.js	/^class AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_method, _numberOfParams) {$/;"	M
RequestType0	nvim/plugged/coc.nvim/build/index.js	/^class RequestType0 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType	nvim/plugged/coc.nvim/build/index.js	/^class RequestType extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType1	nvim/plugged/coc.nvim/build/index.js	/^class RequestType1 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType2	nvim/plugged/coc.nvim/build/index.js	/^class RequestType2 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType3	nvim/plugged/coc.nvim/build/index.js	/^class RequestType3 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType4	nvim/plugged/coc.nvim/build/index.js	/^class RequestType4 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType5	nvim/plugged/coc.nvim/build/index.js	/^class RequestType5 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType6	nvim/plugged/coc.nvim/build/index.js	/^class RequestType6 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType7	nvim/plugged/coc.nvim/build/index.js	/^class RequestType7 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType8	nvim/plugged/coc.nvim/build/index.js	/^class RequestType8 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
RequestType9	nvim/plugged/coc.nvim/build/index.js	/^class RequestType9 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType0	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType0 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType1	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType1 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType2	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType2 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType3	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType3 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType4	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType4 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType5	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType5 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType6	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType6 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType7	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType7 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType8	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType8 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
NotificationType9	nvim/plugged/coc.nvim/build/index.js	/^class NotificationType9 extends AbstractMessageType {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(method) {$/;"	M
isRequestMessage	nvim/plugged/coc.nvim/build/index.js	/^function isRequestMessage(message) {$/;"	F
isNotificationMessage	nvim/plugged/coc.nvim/build/index.js	/^function isNotificationMessage(message) {$/;"	F
isResponseMessage	nvim/plugged/coc.nvim/build/index.js	/^function isResponseMessage(message) {$/;"	F
DefaultSize	nvim/plugged/coc.nvim/build/index.js	/^let DefaultSize = 8192;$/;"	V
CRLF	nvim/plugged/coc.nvim/build/index.js	/^let CRLF = '\\r\\n';$/;"	V
MessageBuffer	nvim/plugged/coc.nvim/build/index.js	/^class MessageBuffer {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(encoding = 'utf8') {$/;"	M
append	nvim/plugged/coc.nvim/build/index.js	/^    append(chunk) {$/;"	M
tryReadHeaders	nvim/plugged/coc.nvim/build/index.js	/^    tryReadHeaders() {$/;"	M
current	nvim/plugged/coc.nvim/build/index.js	/^        let current = 0;$/;"	V
tryReadContent	nvim/plugged/coc.nvim/build/index.js	/^    tryReadContent(length) {$/;"	M
MessageReader	nvim/plugged/coc.nvim/build/index.js	/^var MessageReader;$/;"	V
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
AbstractMessageReader	nvim/plugged/coc.nvim/build/index.js	/^class AbstractMessageReader {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
fireError	nvim/plugged/coc.nvim/build/index.js	/^    fireError(error) {$/;"	M
fireClose	nvim/plugged/coc.nvim/build/index.js	/^    fireClose() {$/;"	M
firePartialMessage	nvim/plugged/coc.nvim/build/index.js	/^    firePartialMessage(info) {$/;"	M
asError	nvim/plugged/coc.nvim/build/index.js	/^    asError(error) {$/;"	M
StreamMessageReader	nvim/plugged/coc.nvim/build/index.js	/^class StreamMessageReader extends AbstractMessageReader {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(readable, encoding = 'utf8') {$/;"	M
listen	nvim/plugged/coc.nvim/build/index.js	/^    listen(callback) {$/;"	M
onData	nvim/plugged/coc.nvim/build/index.js	/^    onData(data) {$/;"	M
clearPartialMessageTimer	nvim/plugged/coc.nvim/build/index.js	/^    clearPartialMessageTimer() {$/;"	M
setPartialMessageTimer	nvim/plugged/coc.nvim/build/index.js	/^    setPartialMessageTimer() {$/;"	M
IPCMessageReader	nvim/plugged/coc.nvim/build/index.js	/^class IPCMessageReader extends AbstractMessageReader {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(process) {$/;"	M
listen	nvim/plugged/coc.nvim/build/index.js	/^    listen(callback) {$/;"	M
SocketMessageReader	nvim/plugged/coc.nvim/build/index.js	/^class SocketMessageReader extends StreamMessageReader {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(socket, encoding = 'utf-8') {$/;"	M
Disposable	nvim/plugged/coc.nvim/build/index.js	/^var Disposable;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(func) {$/;"	F
dispose	nvim/plugged/coc.nvim/build/index.js	/^            dispose: func$/;"	P
Event	nvim/plugged/coc.nvim/build/index.js	/^var Event;$/;"	V
_disposable	nvim/plugged/coc.nvim/build/index.js	/^    const _disposable = { dispose() { } };$/;"	O
None	nvim/plugged/coc.nvim/build/index.js	/^    Event.None = function () { return _disposable; };$/;"	M
CallbackList	nvim/plugged/coc.nvim/build/index.js	/^class CallbackList {$/;"	C
add	nvim/plugged/coc.nvim/build/index.js	/^    add(callback, context = null, bucket) {$/;"	M
remove	nvim/plugged/coc.nvim/build/index.js	/^    remove(callback, context = null) {$/;"	M
invoke	nvim/plugged/coc.nvim/build/index.js	/^    invoke(...args) {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        var ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);$/;"	A
isEmpty	nvim/plugged/coc.nvim/build/index.js	/^    isEmpty() {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
Emitter	nvim/plugged/coc.nvim/build/index.js	/^class Emitter {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_options) {$/;"	M
_event	nvim/plugged/coc.nvim/build/index.js	/^            this._event = (listener, thisArgs, disposables) => {$/;"	M
result	nvim/plugged/coc.nvim/build/index.js	/^                let result;$/;"	V
dispose	nvim/plugged/coc.nvim/build/index.js	/^                    dispose: () => {$/;"	M
fire	nvim/plugged/coc.nvim/build/index.js	/^    fire(event) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
_noop	nvim/plugged/coc.nvim/build/index.js	/^Emitter._noop = function () { };$/;"	M
ContentLength	nvim/plugged/coc.nvim/build/index.js	/^let ContentLength = 'Content-Length: ';$/;"	V
CRLF	nvim/plugged/coc.nvim/build/index.js	/^let CRLF = '\\r\\n';$/;"	V
MessageWriter	nvim/plugged/coc.nvim/build/index.js	/^var MessageWriter;$/;"	V
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
AbstractMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^class AbstractMessageWriter {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
fireError	nvim/plugged/coc.nvim/build/index.js	/^    fireError(error, message, count) {$/;"	M
fireClose	nvim/plugged/coc.nvim/build/index.js	/^    fireClose() {$/;"	M
asError	nvim/plugged/coc.nvim/build/index.js	/^    asError(error) {$/;"	M
StreamMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^class StreamMessageWriter extends AbstractMessageWriter {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(writable, encoding = 'utf8') {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^    write(msg) {$/;"	M
headers	nvim/plugged/coc.nvim/build/index.js	/^        let headers = [$/;"	A
IPCMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^class IPCMessageWriter extends AbstractMessageWriter {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(process) {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^    write(msg) {$/;"	M
doWriteMessage	nvim/plugged/coc.nvim/build/index.js	/^    doWriteMessage(msg) {$/;"	M
SocketMessageWriter	nvim/plugged/coc.nvim/build/index.js	/^class SocketMessageWriter extends AbstractMessageWriter {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(socket, encoding = 'utf8') {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^    write(msg) {$/;"	M
doWriteMessage	nvim/plugged/coc.nvim/build/index.js	/^    doWriteMessage(msg) {$/;"	M
headers	nvim/plugged/coc.nvim/build/index.js	/^        let headers = [$/;"	A
handleError	nvim/plugged/coc.nvim/build/index.js	/^    handleError(error, msg) {$/;"	M
CancellationToken	nvim/plugged/coc.nvim/build/index.js	/^var CancellationToken;$/;"	V
isCancellationRequested	nvim/plugged/coc.nvim/build/index.js	/^        isCancellationRequested: false,$/;"	P
isCancellationRequested	nvim/plugged/coc.nvim/build/index.js	/^        isCancellationRequested: true,$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
MutableToken	nvim/plugged/coc.nvim/build/index.js	/^class MutableToken {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
cancel	nvim/plugged/coc.nvim/build/index.js	/^    cancel() {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
CancellationTokenSource	nvim/plugged/coc.nvim/build/index.js	/^class CancellationTokenSource {$/;"	C
cancel	nvim/plugged/coc.nvim/build/index.js	/^    cancel() {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
Touch	nvim/plugged/coc.nvim/build/index.js	/^var Touch;$/;"	V
LinkedMap	nvim/plugged/coc.nvim/build/index.js	/^class LinkedMap {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
clear	nvim/plugged/coc.nvim/build/index.js	/^    clear() {$/;"	M
isEmpty	nvim/plugged/coc.nvim/build/index.js	/^    isEmpty() {$/;"	M
has	nvim/plugged/coc.nvim/build/index.js	/^    has(key) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    get(key) {$/;"	M
set	nvim/plugged/coc.nvim/build/index.js	/^    set(key, value, touch = Touch.None) {$/;"	M
delete	nvim/plugged/coc.nvim/build/index.js	/^    delete(key) {$/;"	M
shift	nvim/plugged/coc.nvim/build/index.js	/^    shift() {$/;"	M
forEach	nvim/plugged/coc.nvim/build/index.js	/^    forEach(callbackfn, thisArg) {$/;"	M
forEachReverse	nvim/plugged/coc.nvim/build/index.js	/^    forEachReverse(callbackfn, thisArg) {$/;"	M
values	nvim/plugged/coc.nvim/build/index.js	/^    values() {$/;"	M
result	nvim/plugged/coc.nvim/build/index.js	/^        let result = [];$/;"	A
keys	nvim/plugged/coc.nvim/build/index.js	/^    keys() {$/;"	M
result	nvim/plugged/coc.nvim/build/index.js	/^        let result = [];$/;"	A
result	nvim/plugged/coc.nvim/build/index.js	/^                    let result = { value: current.key, done: false };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^                    let result = { value: current.value, done: false };$/;"	O
addItemFirst	nvim/plugged/coc.nvim/build/index.js	/^    addItemFirst(item) {$/;"	M
addItemLast	nvim/plugged/coc.nvim/build/index.js	/^    addItemLast(item) {$/;"	M
removeItem	nvim/plugged/coc.nvim/build/index.js	/^    removeItem(item) {$/;"	M
touch	nvim/plugged/coc.nvim/build/index.js	/^    touch(item, touch) {$/;"	M
generateRandomPipeName	nvim/plugged/coc.nvim/build/index.js	/^function generateRandomPipeName() {$/;"	F
createClientPipeTransport	nvim/plugged/coc.nvim/build/index.js	/^function createClientPipeTransport(pipeName, encoding = 'utf-8') {$/;"	F
connectResolve	nvim/plugged/coc.nvim/build/index.js	/^    let connectResolve;$/;"	V
connected	nvim/plugged/coc.nvim/build/index.js	/^    let connected = new Promise((resolve, _reject) => {$/;"	F
connected	nvim/plugged/coc.nvim/build/index.js	/^    let connected = new Promise((resolve, _reject) => {$/;"	V
server	nvim/plugged/coc.nvim/build/index.js	/^        let server = net_1.createServer((socket) => {$/;"	F
onConnected	nvim/plugged/coc.nvim/build/index.js	/^                onConnected: () => { return connected; }$/;"	M
createServerPipeTransport	nvim/plugged/coc.nvim/build/index.js	/^function createServerPipeTransport(pipeName, encoding = 'utf-8') {$/;"	F
createClientSocketTransport	nvim/plugged/coc.nvim/build/index.js	/^function createClientSocketTransport(port, encoding = 'utf-8') {$/;"	F
connectResolve	nvim/plugged/coc.nvim/build/index.js	/^    let connectResolve;$/;"	V
connected	nvim/plugged/coc.nvim/build/index.js	/^    let connected = new Promise((resolve, _reject) => {$/;"	F
connected	nvim/plugged/coc.nvim/build/index.js	/^    let connected = new Promise((resolve, _reject) => {$/;"	V
server	nvim/plugged/coc.nvim/build/index.js	/^        let server = net_1.createServer((socket) => {$/;"	F
onConnected	nvim/plugged/coc.nvim/build/index.js	/^                onConnected: () => { return connected; }$/;"	M
createServerSocketTransport	nvim/plugged/coc.nvim/build/index.js	/^function createServerSocketTransport(port, encoding = 'utf-8') {$/;"	F
Position	nvim/plugged/coc.nvim/build/index.js	/^var Position;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(line, character) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
Range	nvim/plugged/coc.nvim/build/index.js	/^var Range;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(one, two, three, four) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
Location	nvim/plugged/coc.nvim/build/index.js	/^var Location;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, range) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
LocationLink	nvim/plugged/coc.nvim/build/index.js	/^var LocationLink;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
Color	nvim/plugged/coc.nvim/build/index.js	/^var Color;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(red, green, blue, alpha) {$/;"	F
red	nvim/plugged/coc.nvim/build/index.js	/^            red: red,$/;"	P
green	nvim/plugged/coc.nvim/build/index.js	/^            green: green,$/;"	P
blue	nvim/plugged/coc.nvim/build/index.js	/^            blue: blue,$/;"	P
alpha	nvim/plugged/coc.nvim/build/index.js	/^            alpha: alpha,$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
ColorInformation	nvim/plugged/coc.nvim/build/index.js	/^var ColorInformation;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, color) {$/;"	F
range	nvim/plugged/coc.nvim/build/index.js	/^            range: range,$/;"	P
color	nvim/plugged/coc.nvim/build/index.js	/^            color: color,$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
ColorPresentation	nvim/plugged/coc.nvim/build/index.js	/^var ColorPresentation;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(label, textEdit, additionalTextEdits) {$/;"	F
label	nvim/plugged/coc.nvim/build/index.js	/^            label: label,$/;"	P
textEdit	nvim/plugged/coc.nvim/build/index.js	/^            textEdit: textEdit,$/;"	P
additionalTextEdits	nvim/plugged/coc.nvim/build/index.js	/^            additionalTextEdits: additionalTextEdits,$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
FoldingRangeKind	nvim/plugged/coc.nvim/build/index.js	/^var FoldingRangeKind;$/;"	V
FoldingRange	nvim/plugged/coc.nvim/build/index.js	/^var FoldingRange;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(startLine, endLine, startCharacter, endCharacter, kind) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = {$/;"	O
startLine	nvim/plugged/coc.nvim/build/index.js	/^            startLine: startLine,$/;"	P
endLine	nvim/plugged/coc.nvim/build/index.js	/^            endLine: endLine$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
DiagnosticRelatedInformation	nvim/plugged/coc.nvim/build/index.js	/^var DiagnosticRelatedInformation;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(location, message) {$/;"	F
location	nvim/plugged/coc.nvim/build/index.js	/^            location: location,$/;"	P
message	nvim/plugged/coc.nvim/build/index.js	/^            message: message$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
DiagnosticSeverity	nvim/plugged/coc.nvim/build/index.js	/^var DiagnosticSeverity;$/;"	V
DiagnosticTag	nvim/plugged/coc.nvim/build/index.js	/^var DiagnosticTag;$/;"	V
Diagnostic	nvim/plugged/coc.nvim/build/index.js	/^var Diagnostic;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, message, severity, code, source, relatedInformation) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { range: range, message: message };$/;"	O
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
Command	nvim/plugged/coc.nvim/build/index.js	/^var Command;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(title, command) {$/;"	F
args	nvim/plugged/coc.nvim/build/index.js	/^        var args = [];$/;"	A
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { title: title, command: command };$/;"	O
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
TextEdit	nvim/plugged/coc.nvim/build/index.js	/^var TextEdit;$/;"	V
replace	nvim/plugged/coc.nvim/build/index.js	/^    function replace(range, newText) {$/;"	F
insert	nvim/plugged/coc.nvim/build/index.js	/^    function insert(position, newText) {$/;"	F
del	nvim/plugged/coc.nvim/build/index.js	/^    function del(range) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
TextDocumentEdit	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentEdit;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(textDocument, edits) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
CreateFile	nvim/plugged/coc.nvim/build/index.js	/^var CreateFile;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, options) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = {$/;"	O
uri	nvim/plugged/coc.nvim/build/index.js	/^            uri: uri$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
RenameFile	nvim/plugged/coc.nvim/build/index.js	/^var RenameFile;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(oldUri, newUri, options) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = {$/;"	O
oldUri	nvim/plugged/coc.nvim/build/index.js	/^            oldUri: oldUri,$/;"	P
newUri	nvim/plugged/coc.nvim/build/index.js	/^            newUri: newUri$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
DeleteFile	nvim/plugged/coc.nvim/build/index.js	/^var DeleteFile;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, options) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = {$/;"	O
uri	nvim/plugged/coc.nvim/build/index.js	/^            uri: uri$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
WorkspaceEdit	nvim/plugged/coc.nvim/build/index.js	/^var WorkspaceEdit;$/;"	V
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
TextEditChangeImpl	nvim/plugged/coc.nvim/build/index.js	/^var TextEditChangeImpl = \/** @class *\/ (function () {$/;"	V
TextEditChangeImpl	nvim/plugged/coc.nvim/build/index.js	/^    function TextEditChangeImpl(edits) {$/;"	F
insert	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.insert = function (position, newText) {$/;"	M
replace	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.replace = function (range, newText) {$/;"	M
delete	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.delete = function (range) {$/;"	M
add	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.add = function (edit) {$/;"	M
all	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.all = function () {$/;"	M
clear	nvim/plugged/coc.nvim/build/index.js	/^    TextEditChangeImpl.prototype.clear = function () {$/;"	M
WorkspaceChange	nvim/plugged/coc.nvim/build/index.js	/^var WorkspaceChange = \/** @class *\/ (function () {$/;"	V
WorkspaceChange	nvim/plugged/coc.nvim/build/index.js	/^    function WorkspaceChange(workspaceEdit) {$/;"	F
textEditChange	nvim/plugged/coc.nvim/build/index.js	/^                        var textEditChange = new TextEditChangeImpl(change.edits);$/;"	V
textEditChange	nvim/plugged/coc.nvim/build/index.js	/^                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);$/;"	V
get	nvim/plugged/coc.nvim/build/index.js	/^        get: function () {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
getTextEditChange	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.getTextEditChange = function (key) {$/;"	M
_workspaceEdit	nvim/plugged/coc.nvim/build/index.js	/^                this._workspaceEdit = {$/;"	P
documentChanges	nvim/plugged/coc.nvim/build/index.js	/^                    documentChanges: []$/;"	P
edits	nvim/plugged/coc.nvim/build/index.js	/^                var edits = [];$/;"	A
textDocumentEdit	nvim/plugged/coc.nvim/build/index.js	/^                var textDocumentEdit = {$/;"	O
textDocument	nvim/plugged/coc.nvim/build/index.js	/^                    textDocument: textDocument,$/;"	P
edits	nvim/plugged/coc.nvim/build/index.js	/^                    edits: edits$/;"	P
_workspaceEdit	nvim/plugged/coc.nvim/build/index.js	/^                this._workspaceEdit = {$/;"	P
edits	nvim/plugged/coc.nvim/build/index.js	/^                var edits = [];$/;"	A
createFile	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.createFile = function (uri, options) {$/;"	M
renameFile	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, options) {$/;"	M
deleteFile	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.deleteFile = function (uri, options) {$/;"	M
checkDocumentChanges	nvim/plugged/coc.nvim/build/index.js	/^    WorkspaceChange.prototype.checkDocumentChanges = function () {$/;"	M
TextDocumentIdentifier	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentIdentifier;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
VersionedTextDocumentIdentifier	nvim/plugged/coc.nvim/build/index.js	/^var VersionedTextDocumentIdentifier;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, version) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
TextDocumentItem	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentItem;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, languageId, version, text) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
MarkupKind	nvim/plugged/coc.nvim/build/index.js	/^var MarkupKind;$/;"	V
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
MarkupContent	nvim/plugged/coc.nvim/build/index.js	/^var MarkupContent;$/;"	V
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
CompletionItemKind	nvim/plugged/coc.nvim/build/index.js	/^var CompletionItemKind;$/;"	V
InsertTextFormat	nvim/plugged/coc.nvim/build/index.js	/^var InsertTextFormat;$/;"	V
CompletionItem	nvim/plugged/coc.nvim/build/index.js	/^var CompletionItem;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(label) {$/;"	F
CompletionList	nvim/plugged/coc.nvim/build/index.js	/^var CompletionList;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(items, isIncomplete) {$/;"	F
MarkedString	nvim/plugged/coc.nvim/build/index.js	/^var MarkedString;$/;"	V
fromPlainText	nvim/plugged/coc.nvim/build/index.js	/^    function fromPlainText(plainText) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
Hover	nvim/plugged/coc.nvim/build/index.js	/^var Hover;$/;"	V
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
ParameterInformation	nvim/plugged/coc.nvim/build/index.js	/^var ParameterInformation;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(label, documentation) {$/;"	F
SignatureInformation	nvim/plugged/coc.nvim/build/index.js	/^var SignatureInformation;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(label, documentation) {$/;"	F
parameters	nvim/plugged/coc.nvim/build/index.js	/^        var parameters = [];$/;"	A
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { label: label };$/;"	O
DocumentHighlightKind	nvim/plugged/coc.nvim/build/index.js	/^var DocumentHighlightKind;$/;"	V
DocumentHighlight	nvim/plugged/coc.nvim/build/index.js	/^var DocumentHighlight;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, kind) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { range: range };$/;"	O
SymbolKind	nvim/plugged/coc.nvim/build/index.js	/^var SymbolKind;$/;"	V
SymbolInformation	nvim/plugged/coc.nvim/build/index.js	/^var SymbolInformation;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(name, kind, range, uri, containerName) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = {$/;"	O
name	nvim/plugged/coc.nvim/build/index.js	/^            name: name,$/;"	P
kind	nvim/plugged/coc.nvim/build/index.js	/^            kind: kind,$/;"	P
location	nvim/plugged/coc.nvim/build/index.js	/^            location: { uri: uri, range: range }$/;"	P
DocumentSymbol	nvim/plugged/coc.nvim/build/index.js	/^var DocumentSymbol = \/** @class *\/ (function () {$/;"	V
DocumentSymbol	nvim/plugged/coc.nvim/build/index.js	/^    function DocumentSymbol() {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(name, detail, kind, range, selectionRange, children) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = {$/;"	O
name	nvim/plugged/coc.nvim/build/index.js	/^            name: name,$/;"	P
detail	nvim/plugged/coc.nvim/build/index.js	/^            detail: detail,$/;"	P
kind	nvim/plugged/coc.nvim/build/index.js	/^            kind: kind,$/;"	P
range	nvim/plugged/coc.nvim/build/index.js	/^            range: range,$/;"	P
selectionRange	nvim/plugged/coc.nvim/build/index.js	/^            selectionRange: selectionRange$/;"	P
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
CodeActionKind	nvim/plugged/coc.nvim/build/index.js	/^var CodeActionKind;$/;"	V
CodeActionContext	nvim/plugged/coc.nvim/build/index.js	/^var CodeActionContext;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(diagnostics, only) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { diagnostics: diagnostics };$/;"	O
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
CodeAction	nvim/plugged/coc.nvim/build/index.js	/^var CodeAction;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(title, commandOrEdit, kind) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { title: title };$/;"	O
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
CodeLens	nvim/plugged/coc.nvim/build/index.js	/^var CodeLens;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, data) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = { range: range };$/;"	O
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
FormattingOptions	nvim/plugged/coc.nvim/build/index.js	/^var FormattingOptions;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(tabSize, insertSpaces) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
DocumentLink	nvim/plugged/coc.nvim/build/index.js	/^var DocumentLink = \/** @class *\/ (function () {$/;"	V
DocumentLink	nvim/plugged/coc.nvim/build/index.js	/^    function DocumentLink() {$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, target, data) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
SelectionRange	nvim/plugged/coc.nvim/build/index.js	/^var SelectionRange;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(range, parent) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
EOL	nvim/plugged/coc.nvim/build/index.js	/^var EOL = ['\\n', '\\r\\n', '\\r'];$/;"	A
TextDocument	nvim/plugged/coc.nvim/build/index.js	/^var TextDocument;$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    function create(uri, languageId, version, content) {$/;"	F
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
applyEdits	nvim/plugged/coc.nvim/build/index.js	/^    function applyEdits(document, edits) {$/;"	F
mergeSort	nvim/plugged/coc.nvim/build/index.js	/^    function mergeSort(data, compare) {$/;"	F
leftIdx	nvim/plugged/coc.nvim/build/index.js	/^        var leftIdx = 0;$/;"	V
rightIdx	nvim/plugged/coc.nvim/build/index.js	/^        var rightIdx = 0;$/;"	V
i	nvim/plugged/coc.nvim/build/index.js	/^        var i = 0;$/;"	V
TextDocumentSaveReason	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentSaveReason;$/;"	V
FullTextDocument	nvim/plugged/coc.nvim/build/index.js	/^var FullTextDocument = \/** @class *\/ (function () {$/;"	V
FullTextDocument	nvim/plugged/coc.nvim/build/index.js	/^    function FullTextDocument(uri, languageId, version, content) {$/;"	F
get	nvim/plugged/coc.nvim/build/index.js	/^        get: function () {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^        get: function () {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^        get: function () {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
getText	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.getText = function (range) {$/;"	M
update	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.update = function (event, version) {$/;"	M
getLineOffsets	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.getLineOffsets = function () {$/;"	M
lineOffsets	nvim/plugged/coc.nvim/build/index.js	/^            var lineOffsets = [];$/;"	A
isLineStart	nvim/plugged/coc.nvim/build/index.js	/^                isLineStart = (ch === '\\r' || ch === '\\n');$/;"	M
positionAt	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.positionAt = function (offset) {$/;"	M
low	nvim/plugged/coc.nvim/build/index.js	/^        var low = 0, high = lineOffsets.length;$/;"	V
offsetAt	nvim/plugged/coc.nvim/build/index.js	/^    FullTextDocument.prototype.offsetAt = function (position) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^        get: function () {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
Is	nvim/plugged/coc.nvim/build/index.js	/^var Is;$/;"	V
defined	nvim/plugged/coc.nvim/build/index.js	/^    function defined(value) {$/;"	F
undefined	nvim/plugged/coc.nvim/build/index.js	/^    function undefined(value) {$/;"	F
boolean	nvim/plugged/coc.nvim/build/index.js	/^    function boolean(value) {$/;"	F
string	nvim/plugged/coc.nvim/build/index.js	/^    function string(value) {$/;"	F
number	nvim/plugged/coc.nvim/build/index.js	/^    function number(value) {$/;"	F
func	nvim/plugged/coc.nvim/build/index.js	/^    function func(value) {$/;"	F
objectLiteral	nvim/plugged/coc.nvim/build/index.js	/^    function objectLiteral(value) {$/;"	F
typedArray	nvim/plugged/coc.nvim/build/index.js	/^    function typedArray(value, check) {$/;"	F
__noDynamicImport	nvim/plugged/coc.nvim/build/index.js	/^let __noDynamicImport;$/;"	V
DocumentFilter	nvim/plugged/coc.nvim/build/index.js	/^var DocumentFilter;$/;"	V
is	nvim/plugged/coc.nvim/build/index.js	/^    function is(value) {$/;"	F
RegistrationRequest	nvim/plugged/coc.nvim/build/index.js	/^var RegistrationRequest;$/;"	V
UnregistrationRequest	nvim/plugged/coc.nvim/build/index.js	/^var UnregistrationRequest;$/;"	V
ResourceOperationKind	nvim/plugged/coc.nvim/build/index.js	/^var ResourceOperationKind;$/;"	V
FailureHandlingKind	nvim/plugged/coc.nvim/build/index.js	/^var FailureHandlingKind;$/;"	V
TextDocumentSyncKind	nvim/plugged/coc.nvim/build/index.js	/^var TextDocumentSyncKind;$/;"	V
InitializeRequest	nvim/plugged/coc.nvim/build/index.js	/^var InitializeRequest;$/;"	V
InitializeError	nvim/plugged/coc.nvim/build/index.js	/^var InitializeError;$/;"	V
InitializedNotification	nvim/plugged/coc.nvim/build/index.js	/^var InitializedNotification;$/;"	V
ShutdownRequest	nvim/plugged/coc.nvim/build/index.js	/^var ShutdownRequest;$/;"	V
ExitNotification	nvim/plugged/coc.nvim/build/index.js	/^var ExitNotification;$/;"	V
DidChangeConfigurationNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidChangeConfigurationNotification;$/;"	V
MessageType	nvim/plugged/coc.nvim/build/index.js	/^var MessageType;$/;"	V
ShowMessageNotification	nvim/plugged/coc.nvim/build/index.js	/^var ShowMessageNotification;$/;"	V
ShowMessageRequest	nvim/plugged/coc.nvim/build/index.js	/^var ShowMessageRequest;$/;"	V
LogMessageNotification	nvim/plugged/coc.nvim/build/index.js	/^var LogMessageNotification;$/;"	V
TelemetryEventNotification	nvim/plugged/coc.nvim/build/index.js	/^var TelemetryEventNotification;$/;"	V
DidOpenTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidOpenTextDocumentNotification;$/;"	V
DidChangeTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidChangeTextDocumentNotification;$/;"	V
DidCloseTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidCloseTextDocumentNotification;$/;"	V
DidSaveTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidSaveTextDocumentNotification;$/;"	V
WillSaveTextDocumentNotification	nvim/plugged/coc.nvim/build/index.js	/^var WillSaveTextDocumentNotification;$/;"	V
WillSaveTextDocumentWaitUntilRequest	nvim/plugged/coc.nvim/build/index.js	/^var WillSaveTextDocumentWaitUntilRequest;$/;"	V
DidChangeWatchedFilesNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidChangeWatchedFilesNotification;$/;"	V
FileChangeType	nvim/plugged/coc.nvim/build/index.js	/^var FileChangeType;$/;"	V
WatchKind	nvim/plugged/coc.nvim/build/index.js	/^var WatchKind;$/;"	V
PublishDiagnosticsNotification	nvim/plugged/coc.nvim/build/index.js	/^var PublishDiagnosticsNotification;$/;"	V
CompletionTriggerKind	nvim/plugged/coc.nvim/build/index.js	/^var CompletionTriggerKind;$/;"	V
CompletionRequest	nvim/plugged/coc.nvim/build/index.js	/^var CompletionRequest;$/;"	V
CompletionResolveRequest	nvim/plugged/coc.nvim/build/index.js	/^var CompletionResolveRequest;$/;"	V
HoverRequest	nvim/plugged/coc.nvim/build/index.js	/^var HoverRequest;$/;"	V
SignatureHelpRequest	nvim/plugged/coc.nvim/build/index.js	/^var SignatureHelpRequest;$/;"	V
DefinitionRequest	nvim/plugged/coc.nvim/build/index.js	/^var DefinitionRequest;$/;"	V
ReferencesRequest	nvim/plugged/coc.nvim/build/index.js	/^var ReferencesRequest;$/;"	V
DocumentHighlightRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentHighlightRequest;$/;"	V
DocumentSymbolRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentSymbolRequest;$/;"	V
WorkspaceSymbolRequest	nvim/plugged/coc.nvim/build/index.js	/^var WorkspaceSymbolRequest;$/;"	V
CodeActionRequest	nvim/plugged/coc.nvim/build/index.js	/^var CodeActionRequest;$/;"	V
CodeLensRequest	nvim/plugged/coc.nvim/build/index.js	/^var CodeLensRequest;$/;"	V
CodeLensResolveRequest	nvim/plugged/coc.nvim/build/index.js	/^var CodeLensResolveRequest;$/;"	V
DocumentFormattingRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentFormattingRequest;$/;"	V
DocumentRangeFormattingRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentRangeFormattingRequest;$/;"	V
DocumentOnTypeFormattingRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentOnTypeFormattingRequest;$/;"	V
RenameRequest	nvim/plugged/coc.nvim/build/index.js	/^var RenameRequest;$/;"	V
PrepareRenameRequest	nvim/plugged/coc.nvim/build/index.js	/^var PrepareRenameRequest;$/;"	V
DocumentLinkRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentLinkRequest;$/;"	V
DocumentLinkResolveRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentLinkResolveRequest;$/;"	V
ExecuteCommandRequest	nvim/plugged/coc.nvim/build/index.js	/^var ExecuteCommandRequest;$/;"	V
ApplyWorkspaceEditRequest	nvim/plugged/coc.nvim/build/index.js	/^var ApplyWorkspaceEditRequest;$/;"	V
boolean	nvim/plugged/coc.nvim/build/index.js	/^function boolean(value) {$/;"	F
string	nvim/plugged/coc.nvim/build/index.js	/^function string(value) {$/;"	F
number	nvim/plugged/coc.nvim/build/index.js	/^function number(value) {$/;"	F
error	nvim/plugged/coc.nvim/build/index.js	/^function error(value) {$/;"	F
func	nvim/plugged/coc.nvim/build/index.js	/^function func(value) {$/;"	F
array	nvim/plugged/coc.nvim/build/index.js	/^function array(value) {$/;"	F
stringArray	nvim/plugged/coc.nvim/build/index.js	/^function stringArray(value) {$/;"	F
typedArray	nvim/plugged/coc.nvim/build/index.js	/^function typedArray(value, check) {$/;"	F
thenable	nvim/plugged/coc.nvim/build/index.js	/^function thenable(value) {$/;"	F
__noDynamicImport	nvim/plugged/coc.nvim/build/index.js	/^let __noDynamicImport;$/;"	V
ImplementationRequest	nvim/plugged/coc.nvim/build/index.js	/^var ImplementationRequest;$/;"	V
__noDynamicImport	nvim/plugged/coc.nvim/build/index.js	/^let __noDynamicImport;$/;"	V
TypeDefinitionRequest	nvim/plugged/coc.nvim/build/index.js	/^var TypeDefinitionRequest;$/;"	V
WorkspaceFoldersRequest	nvim/plugged/coc.nvim/build/index.js	/^var WorkspaceFoldersRequest;$/;"	V
DidChangeWorkspaceFoldersNotification	nvim/plugged/coc.nvim/build/index.js	/^var DidChangeWorkspaceFoldersNotification;$/;"	V
ConfigurationRequest	nvim/plugged/coc.nvim/build/index.js	/^var ConfigurationRequest;$/;"	V
DocumentColorRequest	nvim/plugged/coc.nvim/build/index.js	/^var DocumentColorRequest;$/;"	V
ColorPresentationRequest	nvim/plugged/coc.nvim/build/index.js	/^var ColorPresentationRequest;$/;"	V
FoldingRangeKind	nvim/plugged/coc.nvim/build/index.js	/^var FoldingRangeKind;$/;"	V
FoldingRangeRequest	nvim/plugged/coc.nvim/build/index.js	/^var FoldingRangeRequest;$/;"	V
__noDynamicImport	nvim/plugged/coc.nvim/build/index.js	/^let __noDynamicImport;$/;"	V
DeclarationRequest	nvim/plugged/coc.nvim/build/index.js	/^var DeclarationRequest;$/;"	V
SelectionRangeRequest	nvim/plugged/coc.nvim/build/index.js	/^var SelectionRangeRequest;$/;"	V
CallHierarchyDirection	nvim/plugged/coc.nvim/build/index.js	/^var CallHierarchyDirection;$/;"	V
CallHierarchyRequest	nvim/plugged/coc.nvim/build/index.js	/^var CallHierarchyRequest;$/;"	V
ProgressStartNotification	nvim/plugged/coc.nvim/build/index.js	/^var ProgressStartNotification;$/;"	V
ProgressReportNotification	nvim/plugged/coc.nvim/build/index.js	/^var ProgressReportNotification;$/;"	V
ProgressDoneNotification	nvim/plugged/coc.nvim/build/index.js	/^var ProgressDoneNotification;$/;"	V
ProgressCancelNotification	nvim/plugged/coc.nvim/build/index.js	/^var ProgressCancelNotification;$/;"	V
prefix	nvim/plugged/coc.nvim/build/index.js	/^const prefix = '[coc.nvim] ';$/;"	V
escapeSingleQuote	nvim/plugged/coc.nvim/build/index.js	/^function escapeSingleQuote(str) {$/;"	F
echoErr	nvim/plugged/coc.nvim/build/index.js	/^function echoErr(nvim, msg) {$/;"	F
echoWarning	nvim/plugged/coc.nvim/build/index.js	/^function echoWarning(nvim, msg) {$/;"	F
echoMessage	nvim/plugged/coc.nvim/build/index.js	/^function echoMessage(nvim, msg) {$/;"	F
wait	nvim/plugged/coc.nvim/build/index.js	/^function wait(ms) {$/;"	F
echoMsg	nvim/plugged/coc.nvim/build/index.js	/^function echoMsg(nvim, msg, hl) {$/;"	F
getUri	nvim/plugged/coc.nvim/build/index.js	/^function getUri(fullpath, id, buftype, isCygwin) {$/;"	F
disposeAll	nvim/plugged/coc.nvim/build/index.js	/^function disposeAll(disposables) {$/;"	F
executable	nvim/plugged/coc.nvim/build/index.js	/^function executable(command) {$/;"	F
runCommand	nvim/plugged/coc.nvim/build/index.js	/^function runCommand(cmd, opts = {}, timeout) {$/;"	F
timer	nvim/plugged/coc.nvim/build/index.js	/^        let timer;$/;"	V
watchFile	nvim/plugged/coc.nvim/build/index.js	/^function watchFile(filepath, onChange) {$/;"	F
persistent	nvim/plugged/coc.nvim/build/index.js	/^            persistent: true,$/;"	P
recursive	nvim/plugged/coc.nvim/build/index.js	/^            recursive: false,$/;"	P
isRunning	nvim/plugged/coc.nvim/build/index.js	/^function isRunning(pid) {$/;"	F
getKeymapModifier	nvim/plugged/coc.nvim/build/index.js	/^function getKeymapModifier(mode) {$/;"	F
mkdirp	nvim/plugged/coc.nvim/build/index.js	/^async function mkdirp(path, mode) {$/;"	F
isDocumentEdit	nvim/plugged/coc.nvim/build/index.js	/^function isDocumentEdit(edit) {$/;"	F
concurrent	nvim/plugged/coc.nvim/build/index.js	/^function concurrent(fns, limit = Infinity) {$/;"	F
results	nvim/plugged/coc.nvim/build/index.js	/^        let results = [];$/;"	A
next	nvim/plugged/coc.nvim/build/index.js	/^        let next = () => {$/;"	F
debounce	nvim/plugged/coc.nvim/build/index.js	/^function debounce(func, wait, immediate){$/;"	F
timeout	nvim/plugged/coc.nvim/build/index.js	/^  var timeout, args, context, timestamp, result;$/;"	V
args	nvim/plugged/coc.nvim/build/index.js	/^  var timeout, args, context, timestamp, result;$/;"	V
context	nvim/plugged/coc.nvim/build/index.js	/^  var timeout, args, context, timestamp, result;$/;"	V
later	nvim/plugged/coc.nvim/build/index.js	/^  function later() {$/;"	F
debounced	nvim/plugged/coc.nvim/build/index.js	/^  var debounced = function(){$/;"	F
clear	nvim/plugged/coc.nvim/build/index.js	/^  debounced.clear = function() {$/;"	M
flush	nvim/plugged/coc.nvim/build/index.js	/^  debounced.flush = function() {$/;"	M
escapeRegex	nvim/plugged/coc.nvim/build/index.js	/^function escapeRegex(string) {$/;"	F
internals	nvim/plugged/coc.nvim/build/index.js	/^var internals = {$/;"	O
Uri	nvim/plugged/coc.nvim/build/index.js	/^    Uri: {$/;"	P
createUriRegex	nvim/plugged/coc.nvim/build/index.js	/^        createUriRegex: function (options) {$/;"	M
customScheme	nvim/plugged/coc.nvim/build/index.js	/^            var customScheme = '';$/;"	V
scheme	nvim/plugged/coc.nvim/build/index.js	/^            var scheme = '(?:' + (customScheme || rfc3986.scheme) + ')';$/;"	V
isValid	nvim/plugged/coc.nvim/build/index.js	/^internals.Uri.isValid = function (val) {$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
internals	nvim/plugged/coc.nvim/build/index.js	/^var internals = {$/;"	O
rfc3986	nvim/plugged/coc.nvim/build/index.js	/^    rfc3986: {}$/;"	P
generate	nvim/plugged/coc.nvim/build/index.js	/^internals.generate = function () {$/;"	M
or	nvim/plugged/coc.nvim/build/index.js	/^    var or = '|';$/;"	V
digit	nvim/plugged/coc.nvim/build/index.js	/^    var digit = '0-9';$/;"	V
digitOnly	nvim/plugged/coc.nvim/build/index.js	/^    var digitOnly = '[' + digit + ']';$/;"	V
alpha	nvim/plugged/coc.nvim/build/index.js	/^    var alpha = 'a-zA-Z';$/;"	V
alphaOnly	nvim/plugged/coc.nvim/build/index.js	/^    var alphaOnly = '[' + alpha + ']';$/;"	V
hexDigitOnly	nvim/plugged/coc.nvim/build/index.js	/^    var hexDigitOnly = '[' + hexDigit + ']';$/;"	V
subDelims	nvim/plugged/coc.nvim/build/index.js	/^    var subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=';$/;"	V
pctEncoded	nvim/plugged/coc.nvim/build/index.js	/^    var pctEncoded = '%' + hexDigit;$/;"	V
pcharOnly	nvim/plugged/coc.nvim/build/index.js	/^    var pcharOnly = '[' + pchar + ']';$/;"	V
zeroPad	nvim/plugged/coc.nvim/build/index.js	/^    var zeroPad = '0?';$/;"	V
decOctect	nvim/plugged/coc.nvim/build/index.js	/^    var decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';$/;"	V
ls32	nvim/plugged/coc.nvim/build/index.js	/^    var ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';$/;"	V
IPv6SixHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;$/;"	V
IPv6FiveHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;$/;"	V
IPv6FourHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;$/;"	V
IPv6ThreeHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;$/;"	V
IPv6TwoHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;$/;"	V
IPv6OneHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;$/;"	V
IPv6NoneHex	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;$/;"	V
IPv6NoneHex2	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;$/;"	V
IPv6NoneHex3	nvim/plugged/coc.nvim/build/index.js	/^    var IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';$/;"	V
userinfo	nvim/plugged/coc.nvim/build/index.js	/^    var userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';$/;"	V
regName	nvim/plugged/coc.nvim/build/index.js	/^    var regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';$/;"	V
host	nvim/plugged/coc.nvim/build/index.js	/^    var host = '(?:' + internals.rfc3986.IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';$/;"	V
authority	nvim/plugged/coc.nvim/build/index.js	/^    var authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';$/;"	V
pathAbEmpty	nvim/plugged/coc.nvim/build/index.js	/^    var pathAbEmpty = '(?:\\\\\/' + segment + ')*';$/;"	V
pathAbsolute	nvim/plugged/coc.nvim/build/index.js	/^    var pathAbsolute = '\\\\\/(?:' + segmentNz + pathAbEmpty + ')?';$/;"	V
mkdirP	nvim/plugged/coc.nvim/build/index.js	/^function mkdirP (p, opts, f, made) {$/;"	F
mkdirP	nvim/plugged/coc.nvim/build/index.js	/^                mkdirP(path.dirname(p), opts, function (er, made) {$/;"	M
sync	nvim/plugged/coc.nvim/build/index.js	/^mkdirP.sync = function sync (p, opts, made) {$/;"	M
stat	nvim/plugged/coc.nvim/build/index.js	/^                var stat;$/;"	V
__	nvim/plugged/coc.nvim/build/index.js	/^        function __() { this.constructor = d; }$/;"	F
isWindows	nvim/plugged/coc.nvim/build/index.js	/^var isWindows;$/;"	V
_schemePattern	nvim/plugged/coc.nvim/build/index.js	/^var _schemePattern = \/^\\w[\\w\\d+.-]*$\/;$/;"	V
_singleSlashStart	nvim/plugged/coc.nvim/build/index.js	/^var _singleSlashStart = \/^\\\/\/;$/;"	V
_doubleSlashStart	nvim/plugged/coc.nvim/build/index.js	/^var _doubleSlashStart = \/^\\\/\\\/\/;$/;"	V
setUriThrowOnMissingScheme	nvim/plugged/coc.nvim/build/index.js	/^function setUriThrowOnMissingScheme(value) {$/;"	F
_validateUri	nvim/plugged/coc.nvim/build/index.js	/^function _validateUri(ret, _strict) {$/;"	F
_schemeFix	nvim/plugged/coc.nvim/build/index.js	/^function _schemeFix(scheme, _strict) {$/;"	F
_referenceResolution	nvim/plugged/coc.nvim/build/index.js	/^function _referenceResolution(scheme, path) {$/;"	F
_empty	nvim/plugged/coc.nvim/build/index.js	/^var _empty = '';$/;"	V
_slash	nvim/plugged/coc.nvim/build/index.js	/^var _slash = '\/';$/;"	V
_regexp	nvim/plugged/coc.nvim/build/index.js	/^var _regexp = \/^(([^:\/?#]+?):)?(\\\/\\\/([^\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\/;$/;"	V
URI	nvim/plugged/coc.nvim/build/index.js	/^    function URI(schemeOrData, authority, path, query, fragment, _strict) {$/;"	F
isUri	nvim/plugged/coc.nvim/build/index.js	/^    URI.isUri = function (thing) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^        get: function () {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
with	nvim/plugged/coc.nvim/build/index.js	/^    URI.prototype.with = function (change) {$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^    URI.parse = function (value, _strict) {$/;"	M
file	nvim/plugged/coc.nvim/build/index.js	/^    URI.file = function (path) {$/;"	M
from	nvim/plugged/coc.nvim/build/index.js	/^    URI.from = function (components) {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^    URI.prototype.toString = function (skipEncoding) {$/;"	M
toJSON	nvim/plugged/coc.nvim/build/index.js	/^    URI.prototype.toJSON = function () {$/;"	M
revive	nvim/plugged/coc.nvim/build/index.js	/^    URI.revive = function (data) {$/;"	M
result	nvim/plugged/coc.nvim/build/index.js	/^            var result = new _URI(data);$/;"	V
_URI	nvim/plugged/coc.nvim/build/index.js	/^    function _URI() {$/;"	F
get	nvim/plugged/coc.nvim/build/index.js	/^        get: function () {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
toString	nvim/plugged/coc.nvim/build/index.js	/^    _URI.prototype.toString = function (skipEncoding) {$/;"	M
toJSON	nvim/plugged/coc.nvim/build/index.js	/^    _URI.prototype.toJSON = function () {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        var res = {$/;"	O
$mid	nvim/plugged/coc.nvim/build/index.js	/^            $mid: 1$/;"	P
encodeTable	nvim/plugged/coc.nvim/build/index.js	/^var encodeTable = (_a = {},$/;"	F
encodeURIComponentFast	nvim/plugged/coc.nvim/build/index.js	/^function encodeURIComponentFast(uriComponent, allowSlash) {$/;"	F
encodeURIComponentMinimal	nvim/plugged/coc.nvim/build/index.js	/^function encodeURIComponentMinimal(path) {$/;"	F
_makeFsPath	nvim/plugged/coc.nvim/build/index.js	/^function _makeFsPath(uri) {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^    var value;$/;"	V
_asFormatted	nvim/plugged/coc.nvim/build/index.js	/^function _asFormatted(uri, skipEncoding) {$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^    var res = '';$/;"	V
_a	nvim/plugged/coc.nvim/build/index.js	/^var _a;$/;"	V
getNotFoundError	nvim/plugged/coc.nvim/build/index.js	/^function getNotFoundError (cmd) {$/;"	F
er	nvim/plugged/coc.nvim/build/index.js	/^  var er = new Error('not found: ' + cmd)$/;"	V
getPathInfo	nvim/plugged/coc.nvim/build/index.js	/^function getPathInfo (cmd, opt) {$/;"	F
pathExt	nvim/plugged/coc.nvim/build/index.js	/^  var pathExt = ['']$/;"	A
pathExtExe	nvim/plugged/coc.nvim/build/index.js	/^  var pathExtExe = ''$/;"	V
pathExtExe	nvim/plugged/coc.nvim/build/index.js	/^    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')$/;"	M
env	nvim/plugged/coc.nvim/build/index.js	/^    env: pathEnv,$/;"	P
ext	nvim/plugged/coc.nvim/build/index.js	/^    ext: pathExt,$/;"	P
extExe	nvim/plugged/coc.nvim/build/index.js	/^    extExe: pathExtExe$/;"	P
which	nvim/plugged/coc.nvim/build/index.js	/^function which (cmd, opt, cb) {$/;"	F
found	nvim/plugged/coc.nvim/build/index.js	/^  var found = []$/;"	A
isexe	nvim/plugged/coc.nvim/build/index.js	/^      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {$/;"	M
whichSync	nvim/plugged/coc.nvim/build/index.js	/^function whichSync (cmd, opt) {$/;"	F
found	nvim/plugged/coc.nvim/build/index.js	/^  var found = []$/;"	A
isexe	nvim/plugged/coc.nvim/build/index.js	/^function isexe (path, options, cb) {$/;"	F
isexe	nvim/plugged/coc.nvim/build/index.js	/^      isexe(path, options || {}, function (er, is) {$/;"	M
core	nvim/plugged/coc.nvim/build/index.js	/^  core(path, options || {}, function (er, is) {$/;"	M
sync	nvim/plugged/coc.nvim/build/index.js	/^function sync (path, options) {$/;"	F
checkPathExt	nvim/plugged/coc.nvim/build/index.js	/^function checkPathExt (path, options) {$/;"	F
checkStat	nvim/plugged/coc.nvim/build/index.js	/^function checkStat (stat, path, options) {$/;"	F
isexe	nvim/plugged/coc.nvim/build/index.js	/^function isexe (path, options, cb) {$/;"	F
sync	nvim/plugged/coc.nvim/build/index.js	/^function sync (path, options) {$/;"	F
isexe	nvim/plugged/coc.nvim/build/index.js	/^function isexe (path, options, cb) {$/;"	F
sync	nvim/plugged/coc.nvim/build/index.js	/^function sync (path, options) {$/;"	F
checkStat	nvim/plugged/coc.nvim/build/index.js	/^function checkStat (stat, options) {$/;"	F
checkMode	nvim/plugged/coc.nvim/build/index.js	/^function checkMode (stat, options) {$/;"	F
Platform	nvim/plugged/coc.nvim/build/index.js	/^var Platform;$/;"	V
CONFIG_FILE_NAME	nvim/plugged/coc.nvim/build/index.js	/^const CONFIG_FILE_NAME = 'coc-settings.json';$/;"	V
NAME_SPACE	nvim/plugged/coc.nvim/build/index.js	/^let NAME_SPACE = 1080;$/;"	V
Workspace	nvim/plugged/coc.nvim/build/index.js	/^class Workspace {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
provider	nvim/plugged/coc.nvim/build/index.js	/^        let provider = {$/;"	O
onDidChange	nvim/plugged/coc.nvim/build/index.js	/^            onDidChange: null,$/;"	P
getConfigFile	nvim/plugged/coc.nvim/build/index.js	/^    getConfigFile(target) {$/;"	M
registerAutocmd	nvim/plugged/coc.nvim/build/index.js	/^    registerAutocmd(autocmd) {$/;"	M
watchOption	nvim/plugged/coc.nvim/build/index.js	/^    watchOption(key, callback, disposables) {$/;"	M
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = events_1.default.on('OptionSet', async (changed, oldValue, newValue) => {$/;"	F
watchGlobal	nvim/plugged/coc.nvim/build/index.js	/^    watchGlobal(key, callback, disposables) {$/;"	M
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = events_1.default.on('GlobalChange', async (changed, oldValue, newValue) => {$/;"	F
docs	nvim/plugged/coc.nvim/build/index.js	/^        let docs = [];$/;"	A
createNameSpace	nvim/plugged/coc.nvim/build/index.js	/^    createNameSpace(name = '') {$/;"	M
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = this.onDidWorkspaceInitialized(() => {$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = new Set();$/;"	V
match	nvim/plugged/coc.nvim/build/index.js	/^    match(selector, document) {$/;"	M
createFileSystemWatcher	nvim/plugged/coc.nvim/build/index.js	/^    createFileSystemWatcher(globPattern, ignoreCreate, ignoreChange, ignoreDelete) {$/;"	M
watcher	nvim/plugged/coc.nvim/build/index.js	/^        let watcher = new fileSystemWatcher_1.default(promise, globPattern, !!ignoreCreate, !!ignoreChange, !!ignoreDelete);$/;"	V
getWatchmanPath	nvim/plugged/coc.nvim/build/index.js	/^    getWatchmanPath() {$/;"	M
getConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    getConfiguration(section, resource) {$/;"	M
getDocument	nvim/plugged/coc.nvim/build/index.js	/^    getDocument(uri) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = {$/;"	O
createMru	nvim/plugged/coc.nvim/build/index.js	/^    createMru(name) {$/;"	M
isVisual	nvim/plugged/coc.nvim/build/index.js	/^        let isVisual = ['v', 'V', '\\x16'].indexOf(mode) != -1;$/;"	A
move_cmd	nvim/plugged/coc.nvim/build/index.js	/^        let move_cmd = '';$/;"	V
items	nvim/plugged/coc.nvim/build/index.js	/^        let items = await Promise.all(locations.map(loc => {$/;"	F
getWorkspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^    getWorkspaceFolder(uri) {$/;"	M
getFilepath	nvim/plugged/coc.nvim/build/index.js	/^    getFilepath(filepath) {$/;"	M
onWillSaveUntil	nvim/plugged/coc.nvim/build/index.js	/^    onWillSaveUntil(callback, thisArg, clientId) {$/;"	M
showMessage	nvim/plugged/coc.nvim/build/index.js	/^    showMessage(msg, identify = 'more') {$/;"	M
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = this.onDidOpenTextDocument(doc => {$/;"	F
doc	nvim/plugged/coc.nvim/build/index.js	/^        let doc;$/;"	V
moveCmd	nvim/plugged/coc.nvim/build/index.js	/^            let moveCmd = '';$/;"	V
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = this.onDidOpenTextDocument(textDocument => {$/;"	F
timer	nvim/plugged/coc.nvim/build/index.js	/^            let timer = setTimeout(() => {$/;"	F
bufnrs	nvim/plugged/coc.nvim/build/index.js	/^        let bufnrs = await this.nvim.call('coc#util#open_files', [uris.map(u => vscode_uri_1.URI.parse(u).fsPath)]);$/;"	F
create	nvim/plugged/coc.nvim/build/index.js	/^        let create = bufnrs.filter(bufnr => this.getDocument(bufnr) == null);$/;"	F
timer	nvim/plugged/coc.nvim/build/index.js	/^            let timer = setTimeout(() => {$/;"	F
disposable	nvim/plugged/coc.nvim/build/index.js	/^            let disposable = this.onDidOpenTextDocument(() => {$/;"	F
createOutputChannel	nvim/plugged/coc.nvim/build/index.js	/^    createOutputChannel(name) {$/;"	M
channel	nvim/plugged/coc.nvim/build/index.js	/^        let channel = new outputChannel_1.default(name, this.nvim);$/;"	V
showOutputChannel	nvim/plugged/coc.nvim/build/index.js	/^    showOutputChannel(name, preserveFocus) {$/;"	M
terminal	nvim/plugged/coc.nvim/build/index.js	/^        let terminal = new terminal_1.default(cmd, args || [], this.nvim, opts.name);$/;"	V
msgs	nvim/plugged/coc.nvim/build/index.js	/^        let msgs = [placeholder + ':'];$/;"	A
registerTextDocumentContentProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerTextDocumentContentProvider(scheme, provider) {$/;"	M
disposables	nvim/plugged/coc.nvim/build/index.js	/^        let disposables = [];$/;"	A
tokenSource	nvim/plugged/coc.nvim/build/index.js	/^                    let tokenSource = new vscode_languageserver_protocol_1.CancellationTokenSource();$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^                        start: 0,$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^                        strictIndexing: false$/;"	P
registerKeymap	nvim/plugged/coc.nvim/build/index.js	/^    registerKeymap(modes, key, fn, opts = {}) {$/;"	M
registerExprKeymap	nvim/plugged/coc.nvim/build/index.js	/^    registerExprKeymap(mode, key, fn, buffer = false) {$/;"	M
registerLocalKeymap	nvim/plugged/coc.nvim/build/index.js	/^    registerLocalKeymap(mode, key, fn, notify = false) {$/;"	M
createStatusBarItem	nvim/plugged/coc.nvim/build/index.js	/^    createStatusBarItem(priority = 0, opt = {}) {$/;"	M
fn	nvim/plugged/coc.nvim/build/index.js	/^            let fn = () => { };$/;"	F
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
createDatabase	nvim/plugged/coc.nvim/build/index.js	/^    createDatabase(name) {$/;"	M
root	nvim/plugged/coc.nvim/build/index.js	/^        let root;$/;"	V
createTask	nvim/plugged/coc.nvim/build/index.js	/^    createTask(id) {$/;"	M
cmds	nvim/plugged/coc.nvim/build/index.js	/^        let cmds = [];$/;"	A
pattern	nvim/plugged/coc.nvim/build/index.js	/^            let pattern = '*';$/;"	V
tokenSource	nvim/plugged/coc.nvim/build/index.js	/^        let tokenSource = new vscode_languageserver_protocol_1.CancellationTokenSource();$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^            start: 0,$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^            strictIndexing: false$/;"	P
validteDocumentChanges	nvim/plugged/coc.nvim/build/index.js	/^    validteDocumentChanges(documentChanges) {$/;"	M
createConfigurations	nvim/plugged/coc.nvim/build/index.js	/^    createConfigurations() {$/;"	M
attachChangedEvents	nvim/plugged/coc.nvim/build/index.js	/^    attachChangedEvents() {$/;"	M
onChange	nvim/plugged/coc.nvim/build/index.js	/^            const onChange = async (bufnr) => {$/;"	F
source	nvim/plugged/coc.nvim/build/index.js	/^        let source = new vscode_languageserver_protocol_1.CancellationTokenSource();$/;"	V
event	nvim/plugged/coc.nvim/build/index.js	/^        let event = {$/;"	O
onDirChanged	nvim/plugged/coc.nvim/build/index.js	/^    onDirChanged(cwd) {$/;"	M
onFileTypeChange	nvim/plugged/coc.nvim/build/index.js	/^    onFileTypeChange(filetype, bufnr) {$/;"	M
resolveRoot	nvim/plugged/coc.nvim/build/index.js	/^    resolveRoot(document) {$/;"	M
types	nvim/plugged/coc.nvim/build/index.js	/^        let types = [types_1.PatternType.Buffer, types_1.PatternType.LanguageServer, types_1.PatternType.Global];$/;"	A
getRootPatterns	nvim/plugged/coc.nvim/build/index.js	/^    getRootPatterns(document, patternType) {$/;"	M
setMessageLevel	nvim/plugged/coc.nvim/build/index.js	/^    setMessageLevel() {$/;"	M
mergeDocumentChanges	nvim/plugged/coc.nvim/build/index.js	/^    mergeDocumentChanges(changes) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
documentEdits	nvim/plugged/coc.nvim/build/index.js	/^        let documentEdits = [];$/;"	A
documentEdit	nvim/plugged/coc.nvim/build/index.js	/^                let documentEdit = documentEdits.find(o => o.textDocument.uri == textDocument.uri && o.textDocument.version === textDocument.version);$/;"	F
removeWorkspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^    removeWorkspaceFolder(fsPath) {$/;"	M
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this._workspaceFolders.findIndex(f => vscode_uri_1.URI.parse(f.uri).fsPath == fsPath);$/;"	F
removed	nvim/plugged/coc.nvim/build/index.js	/^                removed: [folder],$/;"	P
added	nvim/plugged/coc.nvim/build/index.js	/^                added: []$/;"	P
renameWorkspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^    renameWorkspaceFolder(oldPath, newPath) {$/;"	M
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this._workspaceFolders.findIndex(f => vscode_uri_1.URI.parse(f.uri).fsPath == oldPath);$/;"	F
added	nvim/plugged/coc.nvim/build/index.js	/^        let added = {$/;"	O
removed	nvim/plugged/coc.nvim/build/index.js	/^            removed: [removed],$/;"	P
added	nvim/plugged/coc.nvim/build/index.js	/^            added: [added]$/;"	P
addRootPatterns	nvim/plugged/coc.nvim/build/index.js	/^    addRootPatterns(filetype, rootPatterns) {$/;"	M
getDocumentOption	nvim/plugged/coc.nvim/build/index.js	/^    getDocumentOption(name, doc) {$/;"	M
addWorkspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^    addWorkspaceFolder(rootPath) {$/;"	M
workspaceFolder	nvim/plugged/coc.nvim/build/index.js	/^        let workspaceFolder = { uri, name: path_1.default.basename(rootPath) };$/;"	O
added	nvim/plugged/coc.nvim/build/index.js	/^                    added: [workspaceFolder],$/;"	P
removed	nvim/plugged/coc.nvim/build/index.js	/^                    removed: []$/;"	P
getServerRootPatterns	nvim/plugged/coc.nvim/build/index.js	/^    getServerRootPatterns(filetype) {$/;"	M
patterns	nvim/plugged/coc.nvim/build/index.js	/^        let patterns = [];$/;"	A
lookUp	nvim/plugged/coc.nvim/build/index.js	/^function lookUp(tree, key) {$/;"	F
Configurations	nvim/plugged/coc.nvim/build/index.js	/^class Configurations {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(userConfigFile, _proxy) {$/;"	M
data	nvim/plugged/coc.nvim/build/index.js	/^        let data = {$/;"	O
workspace	nvim/plugged/coc.nvim/build/index.js	/^            workspace: { contents: {} }$/;"	P
parseContentFromFile	nvim/plugged/coc.nvim/build/index.js	/^    parseContentFromFile(filepath) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = util_2.parseContentFromFile(filepath, errors => {$/;"	F
extendsDefaults	nvim/plugged/coc.nvim/build/index.js	/^    extendsDefaults(props) {$/;"	M
data	nvim/plugged/coc.nvim/build/index.js	/^        let data = {$/;"	O
defaults	nvim/plugged/coc.nvim/build/index.js	/^            defaults: { contents },$/;"	P
updateUserConfig	nvim/plugged/coc.nvim/build/index.js	/^    updateUserConfig(props) {$/;"	M
addFolderFile	nvim/plugged/coc.nvim/build/index.js	/^    addFolderFile(filepath) {$/;"	M
watchFile	nvim/plugged/coc.nvim/build/index.js	/^    watchFile(filepath, target) {$/;"	M
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = util_1.watchFile(filepath, () => {$/;"	F
changeConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    changeConfiguration(target, model, configFile) {$/;"	M
data	nvim/plugged/coc.nvim/build/index.js	/^        let data = {$/;"	O
affectsConfiguration	nvim/plugged/coc.nvim/build/index.js	/^            affectsConfiguration: (section, resource) => {$/;"	M
setFolderConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    setFolderConfiguration(uri) {$/;"	M
hasFolderConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    hasFolderConfiguration(filepath) {$/;"	M
getConfigFile	nvim/plugged/coc.nvim/build/index.js	/^    getConfigFile(target) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
getConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    getConfiguration(section, resource) {$/;"	M
configuration	nvim/plugged/coc.nvim/build/index.js	/^        let configuration;$/;"	V
result	nvim/plugged/coc.nvim/build/index.js	/^        const result = {$/;"	O
has	nvim/plugged/coc.nvim/build/index.js	/^            has(key) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^            get: (key, defaultValue) => {$/;"	M
update	nvim/plugged/coc.nvim/build/index.js	/^            update: (key, value, isUser = false) => {$/;"	M
inspect	nvim/plugged/coc.nvim/build/index.js	/^            inspect: (key) => {$/;"	M
enumerable	nvim/plugged/coc.nvim/build/index.js	/^            enumerable: false$/;"	P
enumerable	nvim/plugged/coc.nvim/build/index.js	/^            enumerable: false$/;"	P
enumerable	nvim/plugged/coc.nvim/build/index.js	/^            enumerable: false$/;"	P
enumerable	nvim/plugged/coc.nvim/build/index.js	/^            enumerable: false$/;"	P
getFolderConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    getFolderConfiguration(uri) {$/;"	M
checkFolderConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    checkFolderConfiguration(uri) {$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^    static parse(data) {$/;"	M
defaultConfiguration	nvim/plugged/coc.nvim/build/index.js	/^        const defaultConfiguration = new model_1.ConfigurationModel(data.defaults.contents);$/;"	V
userConfiguration	nvim/plugged/coc.nvim/build/index.js	/^        const userConfiguration = new model_1.ConfigurationModel(data.user.contents);$/;"	V
workspaceConfiguration	nvim/plugged/coc.nvim/build/index.js	/^        const workspaceConfiguration = new model_1.ConfigurationModel(data.workspace.contents);$/;"	V
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
PatternType	nvim/plugged/coc.nvim/build/index.js	/^var PatternType;$/;"	V
SourceType	nvim/plugged/coc.nvim/build/index.js	/^var SourceType;$/;"	V
MessageLevel	nvim/plugged/coc.nvim/build/index.js	/^var MessageLevel;$/;"	V
ConfigurationTarget	nvim/plugged/coc.nvim/build/index.js	/^var ConfigurationTarget;$/;"	V
DiagnosticKind	nvim/plugged/coc.nvim/build/index.js	/^var DiagnosticKind;$/;"	V
ServiceStat	nvim/plugged/coc.nvim/build/index.js	/^var ServiceStat;$/;"	V
deepClone	nvim/plugged/coc.nvim/build/index.js	/^function deepClone(obj) {$/;"	F
deepFreeze	nvim/plugged/coc.nvim/build/index.js	/^function deepFreeze(obj) {$/;"	F
stack	nvim/plugged/coc.nvim/build/index.js	/^    const stack = [obj];$/;"	A
mixin	nvim/plugged/coc.nvim/build/index.js	/^function mixin(destination, source, overwrite = true) {$/;"	F
equals	nvim/plugged/coc.nvim/build/index.js	/^function equals(one, other) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^    let i;$/;"	V
key	nvim/plugged/coc.nvim/build/index.js	/^    let key;$/;"	V
oneKeys	nvim/plugged/coc.nvim/build/index.js	/^        const oneKeys = [];$/;"	A
otherKeys	nvim/plugged/coc.nvim/build/index.js	/^        const otherKeys = [];$/;"	A
boolean	nvim/plugged/coc.nvim/build/index.js	/^function boolean(value) {$/;"	F
string	nvim/plugged/coc.nvim/build/index.js	/^function string(value) {$/;"	F
number	nvim/plugged/coc.nvim/build/index.js	/^function number(value) {$/;"	F
array	nvim/plugged/coc.nvim/build/index.js	/^function array(array) {$/;"	F
func	nvim/plugged/coc.nvim/build/index.js	/^function func(value) {$/;"	F
objectLiteral	nvim/plugged/coc.nvim/build/index.js	/^function objectLiteral(obj) {$/;"	F
emptyObject	nvim/plugged/coc.nvim/build/index.js	/^function emptyObject(obj) {$/;"	F
typedArray	nvim/plugged/coc.nvim/build/index.js	/^function typedArray(value, check) {$/;"	F
Configuration	nvim/plugged/coc.nvim/build/index.js	/^class Configuration {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_defaultConfiguration, _userConfiguration, _workspaceConfiguration, _memoryConfiguration = new model_1.ConfigurationModel()) {$/;"	M
getConsolidateConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    getConsolidateConfiguration() {$/;"	M
getValue	nvim/plugged/coc.nvim/build/index.js	/^    getValue(section) {$/;"	M
inspect	nvim/plugged/coc.nvim/build/index.js	/^    inspect(key) {$/;"	M
toData	nvim/plugged/coc.nvim/build/index.js	/^    toData() {$/;"	M
defaults	nvim/plugged/coc.nvim/build/index.js	/^            defaults: {$/;"	P
user	nvim/plugged/coc.nvim/build/index.js	/^            user: {$/;"	P
workspace	nvim/plugged/coc.nvim/build/index.js	/^            workspace: {$/;"	P
ConfigurationModel	nvim/plugged/coc.nvim/build/index.js	/^class ConfigurationModel {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(_contents = {}) {$/;"	M
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
getValue	nvim/plugged/coc.nvim/build/index.js	/^    getValue(section) {$/;"	M
merge	nvim/plugged/coc.nvim/build/index.js	/^    merge(...others) {$/;"	M
freeze	nvim/plugged/coc.nvim/build/index.js	/^    freeze() {$/;"	M
mergeContents	nvim/plugged/coc.nvim/build/index.js	/^    mergeContents(source, target) {$/;"	M
setValue	nvim/plugged/coc.nvim/build/index.js	/^    setValue(key, value) {$/;"	M
removeValue	nvim/plugged/coc.nvim/build/index.js	/^    removeValue(key) {$/;"	M
parseContentFromFile	nvim/plugged/coc.nvim/build/index.js	/^function parseContentFromFile(filepath, onError) {$/;"	F
content	nvim/plugged/coc.nvim/build/index.js	/^    let content;$/;"	V
parseConfiguration	nvim/plugged/coc.nvim/build/index.js	/^function parseConfiguration(content) {$/;"	F
errors	nvim/plugged/coc.nvim/build/index.js	/^    let errors = [];$/;"	A
addProperty	nvim/plugged/coc.nvim/build/index.js	/^    function addProperty(current, key, remains, value) {$/;"	F
convert	nvim/plugged/coc.nvim/build/index.js	/^    function convert(obj, split = false) {$/;"	F
dest	nvim/plugged/coc.nvim/build/index.js	/^        let dest = {};$/;"	O
convertErrors	nvim/plugged/coc.nvim/build/index.js	/^function convertErrors(uri, content, errors) {$/;"	F
items	nvim/plugged/coc.nvim/build/index.js	/^    let items = [];$/;"	A
msg	nvim/plugged/coc.nvim/build/index.js	/^        let msg = 'parse error';$/;"	V
range	nvim/plugged/coc.nvim/build/index.js	/^        let range = {$/;"	O
addToValueTree	nvim/plugged/coc.nvim/build/index.js	/^function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {$/;"	F
removeFromValueTree	nvim/plugged/coc.nvim/build/index.js	/^function removeFromValueTree(valueTree, key) {$/;"	F
doRemoveFromValueTree	nvim/plugged/coc.nvim/build/index.js	/^function doRemoveFromValueTree(valueTree, segments) {$/;"	F
getConfigurationValue	nvim/plugged/coc.nvim/build/index.js	/^function getConfigurationValue(config, settingPath, defaultValue) {$/;"	F
accessSetting	nvim/plugged/coc.nvim/build/index.js	/^    function accessSetting(config, path) {$/;"	F
loadDefaultConfigurations	nvim/plugged/coc.nvim/build/index.js	/^function loadDefaultConfigurations() {$/;"	F
config	nvim/plugged/coc.nvim/build/index.js	/^    let config = {};$/;"	O
getKeys	nvim/plugged/coc.nvim/build/index.js	/^function getKeys(obj, curr) {$/;"	F
keys	nvim/plugged/coc.nvim/build/index.js	/^    let keys = [];$/;"	A
getChangedKeys	nvim/plugged/coc.nvim/build/index.js	/^function getChangedKeys(from, to) {$/;"	F
keys	nvim/plugged/coc.nvim/build/index.js	/^    let keys = [];$/;"	A
added	nvim/plugged/coc.nvim/build/index.js	/^    const added = toKeys.filter(key => fromKeys.indexOf(key) === -1);$/;"	F
removed	nvim/plugged/coc.nvim/build/index.js	/^    const removed = fromKeys.filter(key => toKeys.indexOf(key) === -1);$/;"	F
printParseErrorCode	nvim/plugged/coc.nvim/build/index.js	/^function printParseErrorCode(code) {$/;"	F
format	nvim/plugged/coc.nvim/build/index.js	/^function format(documentText, range, options) {$/;"	F
modify	nvim/plugged/coc.nvim/build/index.js	/^function modify(text, path, value, options) {$/;"	F
applyEdits	nvim/plugged/coc.nvim/build/index.js	/^function applyEdits(text, edits) {$/;"	F
format	nvim/plugged/coc.nvim/build/index.js	/^function format(documentText, range, options) {$/;"	F
initialIndentLevel	nvim/plugged/coc.nvim/build/index.js	/^    var initialIndentLevel;$/;"	V
formatText	nvim/plugged/coc.nvim/build/index.js	/^    var formatText;$/;"	V
formatTextStart	nvim/plugged/coc.nvim/build/index.js	/^    var formatTextStart;$/;"	V
rangeStart	nvim/plugged/coc.nvim/build/index.js	/^    var rangeStart;$/;"	V
rangeEnd	nvim/plugged/coc.nvim/build/index.js	/^    var rangeEnd;$/;"	V
indentLevel	nvim/plugged/coc.nvim/build/index.js	/^    var indentLevel = 0;$/;"	V
indentValue	nvim/plugged/coc.nvim/build/index.js	/^    var indentValue;$/;"	V
newLineAndIndent	nvim/plugged/coc.nvim/build/index.js	/^    function newLineAndIndent() {$/;"	F
scanNext	nvim/plugged/coc.nvim/build/index.js	/^    function scanNext() {$/;"	F
editOperations	nvim/plugged/coc.nvim/build/index.js	/^    var editOperations = [];$/;"	A
addEdit	nvim/plugged/coc.nvim/build/index.js	/^    function addEdit(text, startOffset, endOffset) {$/;"	F
replaceContent	nvim/plugged/coc.nvim/build/index.js	/^        var replaceContent = '';$/;"	V
repeat	nvim/plugged/coc.nvim/build/index.js	/^function repeat(s, count) {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^    var result = '';$/;"	V
computeIndentLevel	nvim/plugged/coc.nvim/build/index.js	/^function computeIndentLevel(content, options) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^    var i = 0;$/;"	V
nChars	nvim/plugged/coc.nvim/build/index.js	/^    var nChars = 0;$/;"	V
getEOL	nvim/plugged/coc.nvim/build/index.js	/^function getEOL(options, text) {$/;"	F
isEOL	nvim/plugged/coc.nvim/build/index.js	/^function isEOL(text, offset) {$/;"	F
createScanner	nvim/plugged/coc.nvim/build/index.js	/^function createScanner(text, ignoreTrivia) {$/;"	F
pos	nvim/plugged/coc.nvim/build/index.js	/^    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 \/* Unknown *\/, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 \/* None *\/;$/;"	V
scanHexDigits	nvim/plugged/coc.nvim/build/index.js	/^    function scanHexDigits(count, exact) {$/;"	F
digits	nvim/plugged/coc.nvim/build/index.js	/^        var digits = 0;$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^        var value = 0;$/;"	V
setPosition	nvim/plugged/coc.nvim/build/index.js	/^    function setPosition(newPosition) {$/;"	F
scanNumber	nvim/plugged/coc.nvim/build/index.js	/^    function scanNumber() {$/;"	F
scanString	nvim/plugged/coc.nvim/build/index.js	/^    function scanString() {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result = '', start = pos;$/;"	V
scanNext	nvim/plugged/coc.nvim/build/index.js	/^    function scanNext() {$/;"	F
isUnknownContentCharacter	nvim/plugged/coc.nvim/build/index.js	/^    function isUnknownContentCharacter(code) {$/;"	F
scanNextNonTrivia	nvim/plugged/coc.nvim/build/index.js	/^    function scanNextNonTrivia() {$/;"	F
result	nvim/plugged/coc.nvim/build/index.js	/^        var result;$/;"	V
setPosition	nvim/plugged/coc.nvim/build/index.js	/^        setPosition: setPosition,$/;"	P
getPosition	nvim/plugged/coc.nvim/build/index.js	/^        getPosition: function () { return pos; },$/;"	M
getToken	nvim/plugged/coc.nvim/build/index.js	/^        getToken: function () { return token; },$/;"	M
getTokenValue	nvim/plugged/coc.nvim/build/index.js	/^        getTokenValue: function () { return value; },$/;"	M
getTokenOffset	nvim/plugged/coc.nvim/build/index.js	/^        getTokenOffset: function () { return tokenOffset; },$/;"	M
getTokenLength	nvim/plugged/coc.nvim/build/index.js	/^        getTokenLength: function () { return pos - tokenOffset; },$/;"	M
getTokenStartLine	nvim/plugged/coc.nvim/build/index.js	/^        getTokenStartLine: function () { return lineStartOffset; },$/;"	M
getTokenStartCharacter	nvim/plugged/coc.nvim/build/index.js	/^        getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },$/;"	M
getTokenError	nvim/plugged/coc.nvim/build/index.js	/^        getTokenError: function () { return scanError; },$/;"	M
isWhiteSpace	nvim/plugged/coc.nvim/build/index.js	/^function isWhiteSpace(ch) {$/;"	F
isLineBreak	nvim/plugged/coc.nvim/build/index.js	/^function isLineBreak(ch) {$/;"	F
isDigit	nvim/plugged/coc.nvim/build/index.js	/^function isDigit(ch) {$/;"	F
removeProperty	nvim/plugged/coc.nvim/build/index.js	/^function removeProperty(text, path, formattingOptions) {$/;"	F
setProperty	nvim/plugged/coc.nvim/build/index.js	/^function setProperty(text, originalPath, value, formattingOptions, getInsertionIndex) {$/;"	F
_a	nvim/plugged/coc.nvim/build/index.js	/^    var _a;$/;"	V
errors	nvim/plugged/coc.nvim/build/index.js	/^    var errors = [];$/;"	A
value	nvim/plugged/coc.nvim/build/index.js	/^                value = (_a = {}, _a[lastSegment] = value, _a);$/;"	M
newProperty	nvim/plugged/coc.nvim/build/index.js	/^            var newProperty = "" + JSON.stringify(value);$/;"	V
withFormatting	nvim/plugged/coc.nvim/build/index.js	/^function withFormatting(text, edit, formattingOptions) {$/;"	F
applyEdit	nvim/plugged/coc.nvim/build/index.js	/^function applyEdit(text, edit) {$/;"	F
isWS	nvim/plugged/coc.nvim/build/index.js	/^function isWS(text, offset) {$/;"	F
ParseOptions	nvim/plugged/coc.nvim/build/index.js	/^var ParseOptions;$/;"	V
DEFAULT	nvim/plugged/coc.nvim/build/index.js	/^    ParseOptions.DEFAULT = {$/;"	P
allowTrailingComma	nvim/plugged/coc.nvim/build/index.js	/^        allowTrailingComma: false$/;"	P
getLocation	nvim/plugged/coc.nvim/build/index.js	/^function getLocation(text, position) {$/;"	F
segments	nvim/plugged/coc.nvim/build/index.js	/^    var segments = []; \/\/ strings or numbers$/;"	A
earlyReturnException	nvim/plugged/coc.nvim/build/index.js	/^    var earlyReturnException = new Object();$/;"	V
previousNodeInst	nvim/plugged/coc.nvim/build/index.js	/^    var previousNodeInst = {$/;"	O
value	nvim/plugged/coc.nvim/build/index.js	/^        value: {},$/;"	P
offset	nvim/plugged/coc.nvim/build/index.js	/^        offset: 0,$/;"	P
length	nvim/plugged/coc.nvim/build/index.js	/^        length: 0,$/;"	P
setPreviousNode	nvim/plugged/coc.nvim/build/index.js	/^    function setPreviousNode(value, offset, length, type) {$/;"	F
onObjectBegin	nvim/plugged/coc.nvim/build/index.js	/^            onObjectBegin: function (offset, length) {$/;"	M
onObjectProperty	nvim/plugged/coc.nvim/build/index.js	/^            onObjectProperty: function (name, offset, length) {$/;"	M
onObjectEnd	nvim/plugged/coc.nvim/build/index.js	/^            onObjectEnd: function (offset, length) {$/;"	M
onArrayBegin	nvim/plugged/coc.nvim/build/index.js	/^            onArrayBegin: function (offset, length) {$/;"	M
onArrayEnd	nvim/plugged/coc.nvim/build/index.js	/^            onArrayEnd: function (offset, length) {$/;"	M
onLiteralValue	nvim/plugged/coc.nvim/build/index.js	/^            onLiteralValue: function (value, offset, length) {$/;"	M
onSeparator	nvim/plugged/coc.nvim/build/index.js	/^            onSeparator: function (sep, offset, length) {$/;"	M
path	nvim/plugged/coc.nvim/build/index.js	/^        path: segments,$/;"	P
previousNode	nvim/plugged/coc.nvim/build/index.js	/^        previousNode: previousNode,$/;"	P
isAtPropertyKey	nvim/plugged/coc.nvim/build/index.js	/^        isAtPropertyKey: isAtPropertyKey,$/;"	P
matches	nvim/plugged/coc.nvim/build/index.js	/^        matches: function (pattern) {$/;"	M
k	nvim/plugged/coc.nvim/build/index.js	/^            var k = 0;$/;"	V
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse(text, errors, options) {$/;"	F
currentParent	nvim/plugged/coc.nvim/build/index.js	/^    var currentParent = [];$/;"	A
previousParents	nvim/plugged/coc.nvim/build/index.js	/^    var previousParents = [];$/;"	A
onValue	nvim/plugged/coc.nvim/build/index.js	/^    function onValue(value) {$/;"	F
visitor	nvim/plugged/coc.nvim/build/index.js	/^    var visitor = {$/;"	O
onObjectBegin	nvim/plugged/coc.nvim/build/index.js	/^        onObjectBegin: function () {$/;"	M
object	nvim/plugged/coc.nvim/build/index.js	/^            var object = {};$/;"	O
onObjectProperty	nvim/plugged/coc.nvim/build/index.js	/^        onObjectProperty: function (name) {$/;"	M
onObjectEnd	nvim/plugged/coc.nvim/build/index.js	/^        onObjectEnd: function () {$/;"	M
onArrayBegin	nvim/plugged/coc.nvim/build/index.js	/^        onArrayBegin: function () {$/;"	M
array	nvim/plugged/coc.nvim/build/index.js	/^            var array = [];$/;"	A
onArrayEnd	nvim/plugged/coc.nvim/build/index.js	/^        onArrayEnd: function () {$/;"	M
onLiteralValue	nvim/plugged/coc.nvim/build/index.js	/^        onLiteralValue: onValue,$/;"	P
onError	nvim/plugged/coc.nvim/build/index.js	/^        onError: function (error, offset, length) {$/;"	M
parseTree	nvim/plugged/coc.nvim/build/index.js	/^function parseTree(text, errors, options) {$/;"	F
currentParent	nvim/plugged/coc.nvim/build/index.js	/^    var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: void 0 }; \/\/ artificial root$/;"	O
ensurePropertyComplete	nvim/plugged/coc.nvim/build/index.js	/^    function ensurePropertyComplete(endOffset) {$/;"	F
onValue	nvim/plugged/coc.nvim/build/index.js	/^    function onValue(valueNode) {$/;"	F
visitor	nvim/plugged/coc.nvim/build/index.js	/^    var visitor = {$/;"	O
onObjectBegin	nvim/plugged/coc.nvim/build/index.js	/^        onObjectBegin: function (offset) {$/;"	M
onObjectProperty	nvim/plugged/coc.nvim/build/index.js	/^        onObjectProperty: function (name, offset, length) {$/;"	M
onObjectEnd	nvim/plugged/coc.nvim/build/index.js	/^        onObjectEnd: function (offset, length) {$/;"	M
onArrayBegin	nvim/plugged/coc.nvim/build/index.js	/^        onArrayBegin: function (offset, length) {$/;"	M
onArrayEnd	nvim/plugged/coc.nvim/build/index.js	/^        onArrayEnd: function (offset, length) {$/;"	M
onLiteralValue	nvim/plugged/coc.nvim/build/index.js	/^        onLiteralValue: function (value, offset, length) {$/;"	M
onSeparator	nvim/plugged/coc.nvim/build/index.js	/^        onSeparator: function (sep, offset, length) {$/;"	M
onError	nvim/plugged/coc.nvim/build/index.js	/^        onError: function (error, offset, length) {$/;"	M
findNodeAtLocation	nvim/plugged/coc.nvim/build/index.js	/^function findNodeAtLocation(root, path) {$/;"	F
getNodePath	nvim/plugged/coc.nvim/build/index.js	/^function getNodePath(node) {$/;"	F
getNodeValue	nvim/plugged/coc.nvim/build/index.js	/^function getNodeValue(node) {$/;"	F
contains	nvim/plugged/coc.nvim/build/index.js	/^function contains(node, offset, includeRightBound) {$/;"	F
findNodeAtOffset	nvim/plugged/coc.nvim/build/index.js	/^function findNodeAtOffset(node, offset, includeRightBound) {$/;"	F
visit	nvim/plugged/coc.nvim/build/index.js	/^function visit(text, visitor, options) {$/;"	F
toNoArgVisit	nvim/plugged/coc.nvim/build/index.js	/^    function toNoArgVisit(visitFunction) {$/;"	F
toOneArgVisit	nvim/plugged/coc.nvim/build/index.js	/^    function toOneArgVisit(visitFunction) {$/;"	F
scanNext	nvim/plugged/coc.nvim/build/index.js	/^    function scanNext() {$/;"	F
handleError	nvim/plugged/coc.nvim/build/index.js	/^    function handleError(error, skipUntilAfter, skipUntil) {$/;"	F
parseString	nvim/plugged/coc.nvim/build/index.js	/^    function parseString(isValue) {$/;"	F
parseLiteral	nvim/plugged/coc.nvim/build/index.js	/^    function parseLiteral() {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^                var value = 0;$/;"	V
parseProperty	nvim/plugged/coc.nvim/build/index.js	/^    function parseProperty() {$/;"	F
parseObject	nvim/plugged/coc.nvim/build/index.js	/^    function parseObject() {$/;"	F
parseArray	nvim/plugged/coc.nvim/build/index.js	/^    function parseArray() {$/;"	F
parseValue	nvim/plugged/coc.nvim/build/index.js	/^    function parseValue() {$/;"	F
stripComments	nvim/plugged/coc.nvim/build/index.js	/^function stripComments(text, replaceCh) {$/;"	F
getLiteralNodeType	nvim/plugged/coc.nvim/build/index.js	/^function getLiteralNodeType(value) {$/;"	F
statAsync	nvim/plugged/coc.nvim/build/index.js	/^async function statAsync(filepath) {$/;"	F
isDirectory	nvim/plugged/coc.nvim/build/index.js	/^async function isDirectory(filepath) {$/;"	F
unlinkAsync	nvim/plugged/coc.nvim/build/index.js	/^async function unlinkAsync(filepath) {$/;"	F
renameAsync	nvim/plugged/coc.nvim/build/index.js	/^function renameAsync(oldPath, newPath) {$/;"	F
isGitIgnored	nvim/plugged/coc.nvim/build/index.js	/^async function isGitIgnored(fullpath) {$/;"	F
resolveRoot	nvim/plugged/coc.nvim/build/index.js	/^function resolveRoot(dir, subs, cwd) {$/;"	F
curr	nvim/plugged/coc.nvim/build/index.js	/^    let curr = [parts.shift()];$/;"	A
inDirectory	nvim/plugged/coc.nvim/build/index.js	/^function inDirectory(dir, subs) {$/;"	F
findUp	nvim/plugged/coc.nvim/build/index.js	/^function findUp(name, cwd) {$/;"	F
readFile	nvim/plugged/coc.nvim/build/index.js	/^function readFile(fullpath, encoding) {$/;"	F
getFileLineCount	nvim/plugged/coc.nvim/build/index.js	/^function getFileLineCount(filepath) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^    let i;$/;"	V
count	nvim/plugged/coc.nvim/build/index.js	/^    let count = 0;$/;"	V
readFileLines	nvim/plugged/coc.nvim/build/index.js	/^function readFileLines(fullpath, start, end) {$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^    let res = [];$/;"	A
crlfDelay	nvim/plugged/coc.nvim/build/index.js	/^        crlfDelay: Infinity,$/;"	P
terminal	nvim/plugged/coc.nvim/build/index.js	/^        terminal: false$/;"	P
n	nvim/plugged/coc.nvim/build/index.js	/^    let n = 0;$/;"	V
readFileLine	nvim/plugged/coc.nvim/build/index.js	/^function readFileLine(fullpath, count) {$/;"	F
crlfDelay	nvim/plugged/coc.nvim/build/index.js	/^        crlfDelay: Infinity,$/;"	P
terminal	nvim/plugged/coc.nvim/build/index.js	/^        terminal: false$/;"	P
n	nvim/plugged/coc.nvim/build/index.js	/^    let n = 0;$/;"	V
writeFile	nvim/plugged/coc.nvim/build/index.js	/^async function writeFile(fullpath, content) {$/;"	F
validSocket	nvim/plugged/coc.nvim/build/index.js	/^function validSocket(path) {$/;"	F
clientSocket	nvim/plugged/coc.nvim/build/index.js	/^    let clientSocket = new net_1.default.Socket();$/;"	V
isFile	nvim/plugged/coc.nvim/build/index.js	/^function isFile(uri) {$/;"	F
parentDirs	nvim/plugged/coc.nvim/build/index.js	/^function parentDirs(pth) {$/;"	F
dirs	nvim/plugged/coc.nvim/build/index.js	/^    const dirs = [root];$/;"	A
isParentFolder	nvim/plugged/coc.nvim/build/index.js	/^function isParentFolder(folder, filepath, checkEqual = false) {$/;"	F
fixDriver	nvim/plugged/coc.nvim/build/index.js	/^function fixDriver(filepath) {$/;"	F
path	nvim/plugged/coc.nvim/build/index.js	/^var path = { sep: '\/' }$/;"	O
plTypes	nvim/plugged/coc.nvim/build/index.js	/^var plTypes = {$/;"	O
qmark	nvim/plugged/coc.nvim/build/index.js	/^var qmark = '[^\/]'$/;"	V
twoStarDot	nvim/plugged/coc.nvim/build/index.js	/^var twoStarDot = '(?:(?!(?:\\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\\/)).)*?'$/;"	V
twoStarNoDot	nvim/plugged/coc.nvim/build/index.js	/^var twoStarNoDot = '(?:(?!(?:\\\\\\\/|^)\\\\.).)*?'$/;"	V
charSet	nvim/plugged/coc.nvim/build/index.js	/^function charSet (s) {$/;"	F
slashSplit	nvim/plugged/coc.nvim/build/index.js	/^var slashSplit = \/\\\/+\/$/;"	V
filter	nvim/plugged/coc.nvim/build/index.js	/^function filter (pattern, options) {$/;"	F
ext	nvim/plugged/coc.nvim/build/index.js	/^function ext (a, b) {$/;"	F
t	nvim/plugged/coc.nvim/build/index.js	/^  var t = {}$/;"	O
defaults	nvim/plugged/coc.nvim/build/index.js	/^minimatch.defaults = function (def) {$/;"	M
Minimatch	nvim/plugged/coc.nvim/build/index.js	/^  m.Minimatch = function Minimatch (pattern, options) {$/;"	M
defaults	nvim/plugged/coc.nvim/build/index.js	/^Minimatch.defaults = function (def) {$/;"	M
minimatch	nvim/plugged/coc.nvim/build/index.js	/^function minimatch (p, pattern, options) {$/;"	F
Minimatch	nvim/plugged/coc.nvim/build/index.js	/^function Minimatch (pattern, options) {$/;"	F
debug	nvim/plugged/coc.nvim/build/index.js	/^Minimatch.prototype.debug = function () {}$/;"	M
make	nvim/plugged/coc.nvim/build/index.js	/^function make () {$/;"	F
parseNegate	nvim/plugged/coc.nvim/build/index.js	/^function parseNegate () {$/;"	F
negateOffset	nvim/plugged/coc.nvim/build/index.js	/^  var negateOffset = 0$/;"	V
braceExpand	nvim/plugged/coc.nvim/build/index.js	/^minimatch.braceExpand = function (pattern, options) {$/;"	M
braceExpand	nvim/plugged/coc.nvim/build/index.js	/^function braceExpand (pattern, options) {$/;"	F
SUBPARSE	nvim/plugged/coc.nvim/build/index.js	/^var SUBPARSE = {}$/;"	O
parse	nvim/plugged/coc.nvim/build/index.js	/^function parse (pattern, isSub) {$/;"	F
re	nvim/plugged/coc.nvim/build/index.js	/^  var re = ''$/;"	V
patternListStack	nvim/plugged/coc.nvim/build/index.js	/^  var patternListStack = []$/;"	A
negativeLists	nvim/plugged/coc.nvim/build/index.js	/^  var negativeLists = []$/;"	A
clearStateChar	nvim/plugged/coc.nvim/build/index.js	/^  function clearStateChar () {$/;"	F
type	nvim/plugged/coc.nvim/build/index.js	/^          type: stateChar,$/;"	P
TODO	nvim/plugged/coc.nvim/build/index.js	/^          \/\/ TODO: It would probably be faster to determine this$/;"	T
dollar	nvim/plugged/coc.nvim/build/index.js	/^    var dollar = ''$/;"	V
regExp	nvim/plugged/coc.nvim/build/index.js	/^    var regExp = new RegExp('^' + re + '$', flags)$/;"	V
makeRe	nvim/plugged/coc.nvim/build/index.js	/^minimatch.makeRe = function (pattern, options) {$/;"	M
makeRe	nvim/plugged/coc.nvim/build/index.js	/^function makeRe () {$/;"	F
match	nvim/plugged/coc.nvim/build/index.js	/^minimatch.match = function (list, pattern, options) {$/;"	M
mm	nvim/plugged/coc.nvim/build/index.js	/^  var mm = new Minimatch(pattern, options)$/;"	V
match	nvim/plugged/coc.nvim/build/index.js	/^function match (f, partial) {$/;"	F
matchOne	nvim/plugged/coc.nvim/build/index.js	/^Minimatch.prototype.matchOne = function (file, pattern, partial) {$/;"	M
XXX	nvim/plugged/coc.nvim/build/index.js	/^        \/\/ XXX remove this slice.  Just pass the start index.$/;"	T
globUnescape	nvim/plugged/coc.nvim/build/index.js	/^function globUnescape (s) {$/;"	F
regExpEscape	nvim/plugged/coc.nvim/build/index.js	/^function regExpEscape (s) {$/;"	F
escSlash	nvim/plugged/coc.nvim/build/index.js	/^var escSlash = '\\0SLASH'+Math.random()+'\\0';$/;"	V
escOpen	nvim/plugged/coc.nvim/build/index.js	/^var escOpen = '\\0OPEN'+Math.random()+'\\0';$/;"	V
escClose	nvim/plugged/coc.nvim/build/index.js	/^var escClose = '\\0CLOSE'+Math.random()+'\\0';$/;"	V
escComma	nvim/plugged/coc.nvim/build/index.js	/^var escComma = '\\0COMMA'+Math.random()+'\\0';$/;"	V
escPeriod	nvim/plugged/coc.nvim/build/index.js	/^var escPeriod = '\\0PERIOD'+Math.random()+'\\0';$/;"	V
numeric	nvim/plugged/coc.nvim/build/index.js	/^function numeric(str) {$/;"	F
escapeBraces	nvim/plugged/coc.nvim/build/index.js	/^function escapeBraces(str) {$/;"	F
unescapeBraces	nvim/plugged/coc.nvim/build/index.js	/^function unescapeBraces(str) {$/;"	F
parseCommaParts	nvim/plugged/coc.nvim/build/index.js	/^function parseCommaParts(str) {$/;"	F
parts	nvim/plugged/coc.nvim/build/index.js	/^  var parts = [];$/;"	A
expandTop	nvim/plugged/coc.nvim/build/index.js	/^function expandTop(str) {$/;"	F
identity	nvim/plugged/coc.nvim/build/index.js	/^function identity(e) {$/;"	F
embrace	nvim/plugged/coc.nvim/build/index.js	/^function embrace(str) {$/;"	F
isPadded	nvim/plugged/coc.nvim/build/index.js	/^function isPadded(el) {$/;"	F
lte	nvim/plugged/coc.nvim/build/index.js	/^function lte(i, y) {$/;"	F
gte	nvim/plugged/coc.nvim/build/index.js	/^function gte(i, y) {$/;"	F
expand	nvim/plugged/coc.nvim/build/index.js	/^function expand(str, isTop) {$/;"	F
expansions	nvim/plugged/coc.nvim/build/index.js	/^  var expansions = [];$/;"	A
isNumericSequence	nvim/plugged/coc.nvim/build/index.js	/^  var isNumericSequence = \/^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$\/.test(m.body);$/;"	V
isAlphaSequence	nvim/plugged/coc.nvim/build/index.js	/^  var isAlphaSequence = \/^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$\/.test(m.body);$/;"	V
n	nvim/plugged/coc.nvim/build/index.js	/^  var n;$/;"	V
N	nvim/plugged/coc.nvim/build/index.js	/^  var N;$/;"	V
c	nvim/plugged/coc.nvim/build/index.js	/^      var c;$/;"	V
z	nvim/plugged/coc.nvim/build/index.js	/^            var z = new Array(need + 1).join('0');$/;"	V
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (xs, fn) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^    var res = [];$/;"	A
balanced	nvim/plugged/coc.nvim/build/index.js	/^function balanced(a, b, str) {$/;"	F
maybeMatch	nvim/plugged/coc.nvim/build/index.js	/^function maybeMatch(reg, str) {$/;"	F
range	nvim/plugged/coc.nvim/build/index.js	/^function range(a, b, str) {$/;"	F
begs	nvim/plugged/coc.nvim/build/index.js	/^  var begs, beg, left, right, result;$/;"	V
beg	nvim/plugged/coc.nvim/build/index.js	/^  var begs, beg, left, right, result;$/;"	V
left	nvim/plugged/coc.nvim/build/index.js	/^  var begs, beg, left, right, result;$/;"	V
ConfigurationProxy	nvim/plugged/coc.nvim/build/index.js	/^class ConfigurationProxy {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(workspace) {$/;"	M
formattingOptions	nvim/plugged/coc.nvim/build/index.js	/^        let formattingOptions = { tabSize: 2, insertSpaces: true };$/;"	O
$updateConfigurationOption	nvim/plugged/coc.nvim/build/index.js	/^    $updateConfigurationOption(target, key, value) {$/;"	M
$removeConfigurationOption	nvim/plugged/coc.nvim/build/index.js	/^    $removeConfigurationOption(target, key) {$/;"	M
DB	nvim/plugged/coc.nvim/build/index.js	/^class DB {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(filepath) {$/;"	M
fetch	nvim/plugged/coc.nvim/build/index.js	/^    fetch(key) {$/;"	M
exists	nvim/plugged/coc.nvim/build/index.js	/^    exists(key) {$/;"	M
delete	nvim/plugged/coc.nvim/build/index.js	/^    delete(key) {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^    push(key, data) {$/;"	M
load	nvim/plugged/coc.nvim/build/index.js	/^    load() {$/;"	M
clear	nvim/plugged/coc.nvim/build/index.js	/^    clear() {$/;"	M
destroy	nvim/plugged/coc.nvim/build/index.js	/^    destroy() {$/;"	M
Document	nvim/plugged/coc.nvim/build/index.js	/^class Document {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(buffer, env) {$/;"	M
convertFiletype	nvim/plugged/coc.nvim/build/index.js	/^    convertFiletype(filetype) {$/;"	M
_fireContentChanges	nvim/plugged/coc.nvim/build/index.js	/^    _fireContentChanges(force = false) {$/;"	M
changes	nvim/plugged/coc.nvim/build/index.js	/^            let changes = [{$/;"	A
range	nvim/plugged/coc.nvim/build/index.js	/^                    range: { start, end },$/;"	P
textDocument	nvim/plugged/coc.nvim/build/index.js	/^                textDocument: { version, uri },$/;"	P
contentChanges	nvim/plugged/coc.nvim/build/index.js	/^                contentChanges: changes$/;"	P
edits	nvim/plugged/coc.nvim/build/index.js	/^        let edits = [];$/;"	A
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^                strictIndexing: false$/;"	P
lines	nvim/plugged/coc.nvim/build/index.js	/^            this.lines = (this.eol && content.endsWith('\\n') ? content.slice(0, -1) : content).split('\\n');$/;"	M
changeLines	nvim/plugged/coc.nvim/build/index.js	/^    changeLines(lines, sync = true, check = false) {$/;"	M
filtered	nvim/plugged/coc.nvim/build/index.js	/^        let filtered = [];$/;"	A
forceSync	nvim/plugged/coc.nvim/build/index.js	/^    forceSync(ignorePause = true) {$/;"	M
getOffset	nvim/plugged/coc.nvim/build/index.js	/^    getOffset(lnum, col) {$/;"	M
character	nvim/plugged/coc.nvim/build/index.js	/^            character: col$/;"	P
isWord	nvim/plugged/coc.nvim/build/index.js	/^    isWord(word) {$/;"	M
getMoreWords	nvim/plugged/coc.nvim/build/index.js	/^    getMoreWords() {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
getWordRangeAtPosition	nvim/plugged/coc.nvim/build/index.js	/^    getWordRangeAtPosition(position, extraChars, current = true) {$/;"	M
gitCheck	nvim/plugged/coc.nvim/build/index.js	/^    gitCheck() {$/;"	M
createDocument	nvim/plugged/coc.nvim/build/index.js	/^    createDocument(changeCount = 1) {$/;"	M
getSymbolRanges	nvim/plugged/coc.nvim/build/index.js	/^    getSymbolRanges(word) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
str	nvim/plugged/coc.nvim/build/index.js	/^        let str = '';$/;"	V
fixStartcol	nvim/plugged/coc.nvim/build/index.js	/^    fixStartcol(position, valids) {$/;"	M
matchAddRanges	nvim/plugged/coc.nvim/build/index.js	/^    matchAddRanges(ranges, hlGroup, priority = 10) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
arr	nvim/plugged/coc.nvim/build/index.js	/^        let arr = [];$/;"	A
splited	nvim/plugged/coc.nvim/build/index.js	/^        let splited = ranges.reduce((p, c) => {$/;"	F
highlightRanges	nvim/plugged/coc.nvim/build/index.js	/^    highlightRanges(ranges, hlGroup, srcId, priority = 10) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
lineRanges	nvim/plugged/coc.nvim/build/index.js	/^            let lineRanges = [];$/;"	A
clearMatchIds	nvim/plugged/coc.nvim/build/index.js	/^    clearMatchIds(ids) {$/;"	M
getline	nvim/plugged/coc.nvim/build/index.js	/^    getline(line, current = true) {$/;"	M
getLines	nvim/plugged/coc.nvim/build/index.js	/^    getLines(start, end) {$/;"	M
getDocumentContent	nvim/plugged/coc.nvim/build/index.js	/^    getDocumentContent() {$/;"	M
getVar	nvim/plugged/coc.nvim/build/index.js	/^    getVar(key, defaultValue) {$/;"	M
getPosition	nvim/plugged/coc.nvim/build/index.js	/^    getPosition(lnum, col) {$/;"	M
getEndOffset	nvim/plugged/coc.nvim/build/index.js	/^    getEndOffset(lnum, col, insert) {$/;"	M
total	nvim/plugged/coc.nvim/build/index.js	/^        let total = 0;$/;"	V
setFiletype	nvim/plugged/coc.nvim/build/index.js	/^    setFiletype(filetype) {$/;"	M
setIskeyword	nvim/plugged/coc.nvim/build/index.js	/^    setIskeyword(iskeyword) {$/;"	M
detach	nvim/plugged/coc.nvim/build/index.js	/^    detach() {$/;"	M
getLocalifyBonus	nvim/plugged/coc.nvim/build/index.js	/^    getLocalifyBonus(sp, ep) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = new Map();$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^        let start = 0;$/;"	V
diffLines	nvim/plugged/coc.nvim/build/index.js	/^function diffLines(from, to) {$/;"	F
start	nvim/plugged/coc.nvim/build/index.js	/^    let start = 0;$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^    let len = newLines.length;$/;"	V
getChange	nvim/plugged/coc.nvim/build/index.js	/^function getChange(oldStr, newStr, cursorEnd) {$/;"	F
start	nvim/plugged/coc.nvim/build/index.js	/^    let start = 0;$/;"	V
nl	nvim/plugged/coc.nvim/build/index.js	/^    let nl = newStr.length;$/;"	V
newText	nvim/plugged/coc.nvim/build/index.js	/^    let newText = '';$/;"	V
patchLine	nvim/plugged/coc.nvim/build/index.js	/^function patchLine(from, to, fill = ' ') {$/;"	F
str	nvim/plugged/coc.nvim/build/index.js	/^    let str = '';$/;"	V
DIFF_INSERT	nvim/plugged/coc.nvim/build/index.js	/^var DIFF_INSERT = 1;$/;"	V
DIFF_EQUAL	nvim/plugged/coc.nvim/build/index.js	/^var DIFF_EQUAL = 0;$/;"	V
diff_main	nvim/plugged/coc.nvim/build/index.js	/^function diff_main(text1, text2, cursor_pos, _fix_unicode) {$/;"	F
diff_compute_	nvim/plugged/coc.nvim/build/index.js	/^function diff_compute_(text1, text2) {$/;"	F
diffs	nvim/plugged/coc.nvim/build/index.js	/^  var diffs;$/;"	V
diff_bisect_	nvim/plugged/coc.nvim/build/index.js	/^function diff_bisect_(text1, text2) {$/;"	F
v_length	nvim/plugged/coc.nvim/build/index.js	/^  var v_length = 2 * max_d;$/;"	V
v1	nvim/plugged/coc.nvim/build/index.js	/^  var v1 = new Array(v_length);$/;"	V
v2	nvim/plugged/coc.nvim/build/index.js	/^  var v2 = new Array(v_length);$/;"	V
k1start	nvim/plugged/coc.nvim/build/index.js	/^  var k1start = 0;$/;"	V
k1end	nvim/plugged/coc.nvim/build/index.js	/^  var k1end = 0;$/;"	V
k2start	nvim/plugged/coc.nvim/build/index.js	/^  var k2start = 0;$/;"	V
k2end	nvim/plugged/coc.nvim/build/index.js	/^  var k2end = 0;$/;"	V
x1	nvim/plugged/coc.nvim/build/index.js	/^      var x1;$/;"	V
x2	nvim/plugged/coc.nvim/build/index.js	/^      var x2;$/;"	V
diff_bisectSplit_	nvim/plugged/coc.nvim/build/index.js	/^function diff_bisectSplit_(text1, text2, x, y) {$/;"	F
diff_commonPrefix	nvim/plugged/coc.nvim/build/index.js	/^function diff_commonPrefix(text1, text2) {$/;"	F
pointermin	nvim/plugged/coc.nvim/build/index.js	/^  var pointermin = 0;$/;"	V
pointerstart	nvim/plugged/coc.nvim/build/index.js	/^  var pointerstart = 0;$/;"	V
diff_commonSuffix	nvim/plugged/coc.nvim/build/index.js	/^function diff_commonSuffix(text1, text2) {$/;"	F
pointermin	nvim/plugged/coc.nvim/build/index.js	/^  var pointermin = 0;$/;"	V
pointerend	nvim/plugged/coc.nvim/build/index.js	/^  var pointerend = 0;$/;"	V
diff_halfMatch_	nvim/plugged/coc.nvim/build/index.js	/^function diff_halfMatch_(text1, text2) {$/;"	F
diff_halfMatchI_	nvim/plugged/coc.nvim/build/index.js	/^  function diff_halfMatchI_(longtext, shorttext, i) {$/;"	F
best_common	nvim/plugged/coc.nvim/build/index.js	/^    var best_common = '';$/;"	V
best_longtext_a	nvim/plugged/coc.nvim/build/index.js	/^    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;$/;"	V
best_longtext_b	nvim/plugged/coc.nvim/build/index.js	/^    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;$/;"	V
best_shorttext_a	nvim/plugged/coc.nvim/build/index.js	/^    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;$/;"	V
hm	nvim/plugged/coc.nvim/build/index.js	/^  var hm;$/;"	V
text1_a	nvim/plugged/coc.nvim/build/index.js	/^  var text1_a, text1_b, text2_a, text2_b;$/;"	V
text1_b	nvim/plugged/coc.nvim/build/index.js	/^  var text1_a, text1_b, text2_a, text2_b;$/;"	V
text2_a	nvim/plugged/coc.nvim/build/index.js	/^  var text1_a, text1_b, text2_a, text2_b;$/;"	V
diff_cleanupMerge	nvim/plugged/coc.nvim/build/index.js	/^function diff_cleanupMerge(diffs, fix_unicode) {$/;"	F
pointer	nvim/plugged/coc.nvim/build/index.js	/^  var pointer = 0;$/;"	V
count_delete	nvim/plugged/coc.nvim/build/index.js	/^  var count_delete = 0;$/;"	V
count_insert	nvim/plugged/coc.nvim/build/index.js	/^  var count_insert = 0;$/;"	V
text_delete	nvim/plugged/coc.nvim/build/index.js	/^  var text_delete = '';$/;"	V
text_insert	nvim/plugged/coc.nvim/build/index.js	/^  var text_insert = '';$/;"	V
commonlength	nvim/plugged/coc.nvim/build/index.js	/^  var commonlength;$/;"	V
is_surrogate_pair_start	nvim/plugged/coc.nvim/build/index.js	/^function is_surrogate_pair_start(charCode) {$/;"	F
is_surrogate_pair_end	nvim/plugged/coc.nvim/build/index.js	/^function is_surrogate_pair_end(charCode) {$/;"	F
starts_with_pair_end	nvim/plugged/coc.nvim/build/index.js	/^function starts_with_pair_end(str) {$/;"	F
ends_with_pair_start	nvim/plugged/coc.nvim/build/index.js	/^function ends_with_pair_start(str) {$/;"	F
remove_empty_tuples	nvim/plugged/coc.nvim/build/index.js	/^function remove_empty_tuples(tuples) {$/;"	F
ret	nvim/plugged/coc.nvim/build/index.js	/^  var ret = [];$/;"	A
make_edit_splice	nvim/plugged/coc.nvim/build/index.js	/^function make_edit_splice(before, oldMiddle, newMiddle, after) {$/;"	F
find_cursor_edit_diff	nvim/plugged/coc.nvim/build/index.js	/^function find_cursor_edit_diff(oldText, newText, cursor_pos) {$/;"	F
newLength	nvim/plugged/coc.nvim/build/index.js	/^  var newLength = newText.length;$/;"	V
maybeNewCursor	nvim/plugged/coc.nvim/build/index.js	/^    var maybeNewCursor = newRange ? newRange.index : null;$/;"	V
editBefore	nvim/plugged/coc.nvim/build/index.js	/^    editBefore: {$/;"	P
newBefore	nvim/plugged/coc.nvim/build/index.js	/^      var newBefore = newText.slice(0, newCursor);$/;"	V
newAfter	nvim/plugged/coc.nvim/build/index.js	/^      var newAfter = newText.slice(newCursor);$/;"	V
newPrefix	nvim/plugged/coc.nvim/build/index.js	/^      var newPrefix = newBefore.slice(0, prefixLength);$/;"	V
newMiddle	nvim/plugged/coc.nvim/build/index.js	/^      var newMiddle = newBefore.slice(prefixLength);$/;"	V
editAfter	nvim/plugged/coc.nvim/build/index.js	/^    editAfter: {$/;"	P
newBefore	nvim/plugged/coc.nvim/build/index.js	/^      var newBefore = newText.slice(0, cursor);$/;"	V
newAfter	nvim/plugged/coc.nvim/build/index.js	/^      var newAfter = newText.slice(cursor);$/;"	V
newSuffix	nvim/plugged/coc.nvim/build/index.js	/^      var newSuffix = newAfter.slice(newAfter.length - suffixLength);$/;"	V
newMiddle	nvim/plugged/coc.nvim/build/index.js	/^      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);$/;"	V
replaceRange	nvim/plugged/coc.nvim/build/index.js	/^    replaceRange: {$/;"	P
newPrefix	nvim/plugged/coc.nvim/build/index.js	/^      var newPrefix = newText.slice(0, prefixLength);$/;"	V
newSuffix	nvim/plugged/coc.nvim/build/index.js	/^      var newSuffix = newText.slice(newLength - suffixLength);$/;"	V
newMiddle	nvim/plugged/coc.nvim/build/index.js	/^      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);$/;"	V
diff	nvim/plugged/coc.nvim/build/index.js	/^function diff(text1, text2, cursor_pos) {$/;"	F
byteLength	nvim/plugged/coc.nvim/build/index.js	/^function byteLength(str) {$/;"	F
upperFirst	nvim/plugged/coc.nvim/build/index.js	/^function upperFirst(str) {$/;"	F
byteIndex	nvim/plugged/coc.nvim/build/index.js	/^function byteIndex(content, index) {$/;"	F
indexOf	nvim/plugged/coc.nvim/build/index.js	/^function indexOf(str, ch, count = 1) {$/;"	F
curr	nvim/plugged/coc.nvim/build/index.js	/^    let curr = 0;$/;"	V
characterIndex	nvim/plugged/coc.nvim/build/index.js	/^function characterIndex(content, byteIndex) {$/;"	F
byteSlice	nvim/plugged/coc.nvim/build/index.js	/^function byteSlice(content, start, end) {$/;"	F
isWord	nvim/plugged/coc.nvim/build/index.js	/^function isWord(character) {$/;"	F
isTriggerCharacter	nvim/plugged/coc.nvim/build/index.js	/^function isTriggerCharacter(character) {$/;"	F
resolveVariables	nvim/plugged/coc.nvim/build/index.js	/^function resolveVariables(str, variables) {$/;"	F
regexp	nvim/plugged/coc.nvim/build/index.js	/^    const regexp = \/\\$\\{(.*?)\\}\/g;$/;"	V
isAsciiLetter	nvim/plugged/coc.nvim/build/index.js	/^function isAsciiLetter(code) {$/;"	F
doEqualsIgnoreCase	nvim/plugged/coc.nvim/build/index.js	/^function doEqualsIgnoreCase(a, b, stopAt = a.length) {$/;"	F
equalsIgnoreCase	nvim/plugged/coc.nvim/build/index.js	/^function equalsIgnoreCase(a, b) {$/;"	F
Range	nvim/plugged/coc.nvim/build/index.js	/^class Range {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(start, end) {$/;"	M
fromKeywordOption	nvim/plugged/coc.nvim/build/index.js	/^    static fromKeywordOption(keywordOption) {$/;"	M
ranges	nvim/plugged/coc.nvim/build/index.js	/^        let ranges = [];$/;"	A
contains	nvim/plugged/coc.nvim/build/index.js	/^    contains(c) {$/;"	M
Chars	nvim/plugged/coc.nvim/build/index.js	/^class Chars {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(keywordOption) {$/;"	M
addKeyword	nvim/plugged/coc.nvim/build/index.js	/^    addKeyword(ch) {$/;"	M
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
chars	nvim/plugged/coc.nvim/build/index.js	/^        let chars = new Chars();$/;"	V
setKeywordOption	nvim/plugged/coc.nvim/build/index.js	/^    setKeywordOption(keywordOption) {$/;"	M
matchKeywords	nvim/plugged/coc.nvim/build/index.js	/^    matchKeywords(content, min = 3) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = new Set();$/;"	V
str	nvim/plugged/coc.nvim/build/index.js	/^        let str = '';$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^        let len = 0;$/;"	V
isKeywordCode	nvim/plugged/coc.nvim/build/index.js	/^    isKeywordCode(code) {$/;"	M
isKeywordChar	nvim/plugged/coc.nvim/build/index.js	/^    isKeywordChar(ch) {$/;"	M
isKeyword	nvim/plugged/coc.nvim/build/index.js	/^    isKeyword(word) {$/;"	M
intersect	nvim/plugged/coc.nvim/build/index.js	/^function intersect(array, other) {$/;"	F
tail	nvim/plugged/coc.nvim/build/index.js	/^function tail(array, n = 0) {$/;"	F
group	nvim/plugged/coc.nvim/build/index.js	/^function group(array, size) {$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^    let res = [];$/;"	A
distinct	nvim/plugged/coc.nvim/build/index.js	/^function distinct(array, keyFn) {$/;"	F
lastIndex	nvim/plugged/coc.nvim/build/index.js	/^function lastIndex(array, fn) {$/;"	F
flatMap	nvim/plugged/coc.nvim/build/index.js	/^exports.flatMap = (xs, f) => xs.reduce((x, y) => [...x, ...f(y)], []);$/;"	M
rangeInRange	nvim/plugged/coc.nvim/build/index.js	/^function rangeInRange(r, range) {$/;"	F
rangeOverlap	nvim/plugged/coc.nvim/build/index.js	/^function rangeOverlap(r, range) {$/;"	F
rangeIntersect	nvim/plugged/coc.nvim/build/index.js	/^function rangeIntersect(r, range) {$/;"	F
lineInRange	nvim/plugged/coc.nvim/build/index.js	/^function lineInRange(line, range) {$/;"	F
emptyRange	nvim/plugged/coc.nvim/build/index.js	/^function emptyRange(range) {$/;"	F
positionInRange	nvim/plugged/coc.nvim/build/index.js	/^function positionInRange(position, range) {$/;"	F
comparePosition	nvim/plugged/coc.nvim/build/index.js	/^function comparePosition(position, other) {$/;"	F
isSingleLine	nvim/plugged/coc.nvim/build/index.js	/^function isSingleLine(range) {$/;"	F
getChangedPosition	nvim/plugged/coc.nvim/build/index.js	/^function getChangedPosition(start, edit) {$/;"	F
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = newText.split('\\n');$/;"	V
characterCount	nvim/plugged/coc.nvim/build/index.js	/^        let characterCount = 0;$/;"	V
adjustPosition	nvim/plugged/coc.nvim/build/index.js	/^function adjustPosition(pos, edit) {$/;"	F
newLines	nvim/plugged/coc.nvim/build/index.js	/^    let newLines = newText.split('\\n');$/;"	V
lastLine	nvim/plugged/coc.nvim/build/index.js	/^    let lastLine = newLines[newLines.length - 1];$/;"	V
pre	nvim/plugged/coc.nvim/build/index.js	/^    let pre = newLines.length == 1 && start.line != end.line ? start.character : 0;$/;"	V
positionToOffset	nvim/plugged/coc.nvim/build/index.js	/^function positionToOffset(lines, line, character) {$/;"	F
offset	nvim/plugged/coc.nvim/build/index.js	/^    let offset = 0;$/;"	V
editRange	nvim/plugged/coc.nvim/build/index.js	/^function editRange(range, text, edit) {$/;"	F
getChangedFromEdits	nvim/plugged/coc.nvim/build/index.js	/^function getChangedFromEdits(start, edits) {$/;"	F
changed	nvim/plugged/coc.nvim/build/index.js	/^    let changed = { line: 0, character: 0 };$/;"	O
FileSystemWatcher	nvim/plugged/coc.nvim/build/index.js	/^class FileSystemWatcher {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(clientPromise, globPattern, ignoreCreateEvents, ignoreChangeEvents, ignoreDeleteEvents) {$/;"	M
disposable	nvim/plugged/coc.nvim/build/index.js	/^        let disposable = await client.subscribe(globPattern, (change) => {$/;"	F
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
Mru	nvim/plugged/coc.nvim/build/index.js	/^class Mru {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(name, base) {$/;"	M
BufferChannel	nvim/plugged/coc.nvim/build/index.js	/^class BufferChannel {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(name, nvim) {$/;"	M
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^                        strictIndexing: false$/;"	P
append	nvim/plugged/coc.nvim/build/index.js	/^    append(value) {$/;"	M
appendLine	nvim/plugged/coc.nvim/build/index.js	/^    appendLine(value) {$/;"	M
clear	nvim/plugged/coc.nvim/build/index.js	/^    clear() {$/;"	M
start	nvim/plugged/coc.nvim/build/index.js	/^                start: 0,$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^                strictIndexing: false$/;"	P
hide	nvim/plugged/coc.nvim/build/index.js	/^    hide() {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
show	nvim/plugged/coc.nvim/build/index.js	/^    show(preserveFocus) {$/;"	M
Resolver	nvim/plugged/coc.nvim/build/index.js	/^class Resolver {$/;"	C
memorize	nvim/plugged/coc.nvim/build/index.js	/^function memorize(_target, key, descriptor) {$/;"	F
memoKey	nvim/plugged/coc.nvim/build/index.js	/^    let memoKey = '$' + key;$/;"	V
get	nvim/plugged/coc.nvim/build/index.js	/^    descriptor.get = function (...args) {$/;"	M
frames	nvim/plugged/coc.nvim/build/index.js	/^const frames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];$/;"	A
StatusLine	nvim/plugged/coc.nvim/build/index.js	/^class StatusLine {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
createStatusBarItem	nvim/plugged/coc.nvim/build/index.js	/^    createStatusBarItem(priority = 0, isProgress = false) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = {$/;"	O
show	nvim/plugged/coc.nvim/build/index.js	/^            show: () => {$/;"	M
hide	nvim/plugged/coc.nvim/build/index.js	/^            hide: () => {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^            dispose: () => {$/;"	M
getText	nvim/plugged/coc.nvim/build/index.js	/^    getText() {$/;"	M
d	nvim/plugged/coc.nvim/build/index.js	/^        let d = new Date();$/;"	V
text	nvim/plugged/coc.nvim/build/index.js	/^        let text = '';$/;"	V
items	nvim/plugged/coc.nvim/build/index.js	/^        let items = [];$/;"	A
_nodeId	nvim/plugged/coc.nvim/build/index.js	/^var _nodeId;$/;"	V
_clockseq	nvim/plugged/coc.nvim/build/index.js	/^var _clockseq;$/;"	V
_lastMSecs	nvim/plugged/coc.nvim/build/index.js	/^var _lastMSecs = 0;$/;"	V
_lastNSecs	nvim/plugged/coc.nvim/build/index.js	/^var _lastNSecs = 0;$/;"	V
v1	nvim/plugged/coc.nvim/build/index.js	/^function v1(options, buf, offset) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function nodeRNG() {$/;"	M
byteToHex	nvim/plugged/coc.nvim/build/index.js	/^var byteToHex = [];$/;"	A
bytesToUuid	nvim/plugged/coc.nvim/build/index.js	/^function bytesToUuid(buf, offset) {$/;"	F
Task	nvim/plugged/coc.nvim/build/index.js	/^class Task {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, id) {$/;"	M
stdout	nvim/plugged/coc.nvim/build/index.js	/^        let stdout = [];$/;"	A
timer	nvim/plugged/coc.nvim/build/index.js	/^        let timer;$/;"	V
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
TerminalModel	nvim/plugged/coc.nvim/build/index.js	/^class TerminalModel {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(cmd, args, nvim, _name) {$/;"	M
cmd	nvim/plugged/coc.nvim/build/index.js	/^        let cmd = [this.cmd, ...this.args];$/;"	A
sendText	nvim/plugged/coc.nvim/build/index.js	/^    sendText(text, addNewLine = true) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
WillSaveUntilHandler	nvim/plugged/coc.nvim/build/index.js	/^class WillSaveUntilHandler {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(workspace) {$/;"	M
addCallback	nvim/plugged/coc.nvim/build/index.js	/^    addCallback(callback, thisArg, clientId) {$/;"	M
fn	nvim/plugged/coc.nvim/build/index.js	/^        let fn = (event) => {$/;"	F
waitUntil	nvim/plugged/coc.nvim/build/index.js	/^                ev.waitUntil = (thenable) => {$/;"	M
timer	nvim/plugged/coc.nvim/build/index.js	/^                    let timer = setTimeout(() => {$/;"	F
score	nvim/plugged/coc.nvim/build/index.js	/^function score(selector, uri, languageId) {$/;"	F
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = 0;$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = 0;$/;"	V
requiredCapabilities	nvim/plugged/coc.nvim/build/index.js	/^const requiredCapabilities = ['relative_root', 'cmd-watch-project', 'wildmatch'];$/;"	A
clientsMap	nvim/plugged/coc.nvim/build/index.js	/^const clientsMap = new Map();$/;"	V
Watchman	nvim/plugged/coc.nvim/build/index.js	/^class Watchman {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(binaryPath, channel) {$/;"	M
watchmanBinaryPath	nvim/plugged/coc.nvim/build/index.js	/^            watchmanBinaryPath: binaryPath$/;"	P
checkCapability	nvim/plugged/coc.nvim/build/index.js	/^    checkCapability() {$/;"	M
optional	nvim/plugged/coc.nvim/build/index.js	/^                optional: [],$/;"	P
required	nvim/plugged/coc.nvim/build/index.js	/^                required: requiredCapabilities$/;"	P
command	nvim/plugged/coc.nvim/build/index.js	/^    command(args) {$/;"	M
sub	nvim/plugged/coc.nvim/build/index.js	/^        let sub = {$/;"	O
expression	nvim/plugged/coc.nvim/build/index.js	/^            expression: ['allof', ['match', '**\/*', 'wholename']],$/;"	P
fields	nvim/plugged/coc.nvim/build/index.js	/^            fields: ['name', 'size', 'exists', 'type', 'mtime_ms', 'ctime_ms'],$/;"	P
since	nvim/plugged/coc.nvim/build/index.js	/^            since: clock,$/;"	P
unsubscribe	nvim/plugged/coc.nvim/build/index.js	/^    unsubscribe(subscription) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
appendOutput	nvim/plugged/coc.nvim/build/index.js	/^    appendOutput(message, type = "Info") {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    static dispose() {$/;"	M
createClient	nvim/plugged/coc.nvim/build/index.js	/^    static createClient(binaryPath, root, channel) {$/;"	M
promise	nvim/plugged/coc.nvim/build/index.js	/^        let promise = new Promise(async (resolve, reject) => {$/;"	F
promise	nvim/plugged/coc.nvim/build/index.js	/^        let promise = new Promise(async (resolve, reject) => {$/;"	V
watchman	nvim/plugged/coc.nvim/build/index.js	/^                let watchman = new Watchman(binaryPath, channel);$/;"	V
unilateralTags	nvim/plugged/coc.nvim/build/index.js	/^var unilateralTags = ['subscription', 'log'];$/;"	A
Client	nvim/plugged/coc.nvim/build/index.js	/^function Client(options) {$/;"	F
sendNextCommand	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.sendNextCommand = function() {$/;"	M
cancelCommands	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.cancelCommands = function(why) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^  var error = new Error(why);$/;"	V
connect	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.connect = function() {$/;"	M
makeSock	nvim/plugged/coc.nvim/build/index.js	/^  function makeSock(sockname) {$/;"	F
error	nvim/plugged/coc.nvim/build/index.js	/^          var error = new Error(obj.error);$/;"	V
args	nvim/plugged/coc.nvim/build/index.js	/^  var args = ['--no-pretty', 'get-sockname'];$/;"	A
spawnError	nvim/plugged/coc.nvim/build/index.js	/^  function spawnError(error) {$/;"	F
stdio	nvim/plugged/coc.nvim/build/index.js	/^      stdio: ['ignore', 'pipe', 'pipe']$/;"	P
stdout	nvim/plugged/coc.nvim/build/index.js	/^  var stdout = [];$/;"	A
stderr	nvim/plugged/coc.nvim/build/index.js	/^  var stderr = [];$/;"	A
error	nvim/plugged/coc.nvim/build/index.js	/^        var error = new Error(obj.error);$/;"	V
command	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.command = function(args, done) {$/;"	M
cap_versions	nvim/plugged/coc.nvim/build/index.js	/^var cap_versions = {$/;"	O
vers_compare	nvim/plugged/coc.nvim/build/index.js	/^function vers_compare(a, b) {$/;"	F
have_cap	nvim/plugged/coc.nvim/build/index.js	/^function have_cap(vers, name) {$/;"	F
_synthesizeCapabilityCheck	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype._synthesizeCapabilityCheck = function($/;"	M
capabilities	nvim/plugged/coc.nvim/build/index.js	/^  resp.capabilities = {}$/;"	P
capabilityCheck	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.capabilityCheck = function(caps, done) {$/;"	M
optional	nvim/plugged/coc.nvim/build/index.js	/^      optional: optional,$/;"	P
required	nvim/plugged/coc.nvim/build/index.js	/^      required: required$/;"	P
end	nvim/plugged/coc.nvim/build/index.js	/^Client.prototype.end = function() {$/;"	M
nextPow2	nvim/plugged/coc.nvim/build/index.js	/^function nextPow2(size) {$/;"	F
Accumulator	nvim/plugged/coc.nvim/build/index.js	/^function Accumulator(initsize) {$/;"	F
writeAvail	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.writeAvail = function() {$/;"	M
readAvail	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readAvail = function() {$/;"	M
reserve	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.reserve = function(size) {$/;"	M
buf	nvim/plugged/coc.nvim/build/index.js	/^  var buf = new Buffer(nextPow2(this.buf.length + size - this.writeAvail()));$/;"	V
append	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.append = function(buf) {$/;"	M
assertReadableSize	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.assertReadableSize = function(size) {$/;"	M
peekString	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.peekString = function(size) {$/;"	M
readString	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readString = function(size) {$/;"	M
peekInt	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.peekInt = function(size) {$/;"	M
readInt	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readInt = function(bytes) {$/;"	M
peekDouble	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.peekDouble = function() {$/;"	M
readDouble	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readDouble = function() {$/;"	M
readAdvance	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.readAdvance = function(size) {$/;"	M
writeByte	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.writeByte = function(value) {$/;"	M
writeInt	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.writeInt = function(value, size) {$/;"	M
writeDouble	nvim/plugged/coc.nvim/build/index.js	/^Accumulator.prototype.writeDouble = function(value) {$/;"	M
BSER_ARRAY	nvim/plugged/coc.nvim/build/index.js	/^var BSER_ARRAY     = 0x00;$/;"	V
BSER_OBJECT	nvim/plugged/coc.nvim/build/index.js	/^var BSER_OBJECT    = 0x01;$/;"	V
BSER_STRING	nvim/plugged/coc.nvim/build/index.js	/^var BSER_STRING    = 0x02;$/;"	V
BSER_INT8	nvim/plugged/coc.nvim/build/index.js	/^var BSER_INT8      = 0x03;$/;"	V
BSER_INT16	nvim/plugged/coc.nvim/build/index.js	/^var BSER_INT16     = 0x04;$/;"	V
BSER_INT32	nvim/plugged/coc.nvim/build/index.js	/^var BSER_INT32     = 0x05;$/;"	V
BSER_INT64	nvim/plugged/coc.nvim/build/index.js	/^var BSER_INT64     = 0x06;$/;"	V
BSER_REAL	nvim/plugged/coc.nvim/build/index.js	/^var BSER_REAL      = 0x07;$/;"	V
BSER_TRUE	nvim/plugged/coc.nvim/build/index.js	/^var BSER_TRUE      = 0x08;$/;"	V
BSER_FALSE	nvim/plugged/coc.nvim/build/index.js	/^var BSER_FALSE     = 0x09;$/;"	V
BSER_NULL	nvim/plugged/coc.nvim/build/index.js	/^var BSER_NULL      = 0x0a;$/;"	V
BSER_TEMPLATE	nvim/plugged/coc.nvim/build/index.js	/^var BSER_TEMPLATE  = 0x0b;$/;"	V
BSER_SKIP	nvim/plugged/coc.nvim/build/index.js	/^var BSER_SKIP      = 0x0c;$/;"	V
ST_NEED_PDU	nvim/plugged/coc.nvim/build/index.js	/^var ST_NEED_PDU = 0; \/\/ Need to read and decode PDU length$/;"	V
ST_FILL_PDU	nvim/plugged/coc.nvim/build/index.js	/^var ST_FILL_PDU = 1; \/\/ Know the length, need to read whole content$/;"	V
MAX_INT8	nvim/plugged/coc.nvim/build/index.js	/^var MAX_INT8 = 127;$/;"	V
MAX_INT16	nvim/plugged/coc.nvim/build/index.js	/^var MAX_INT16 = 32767;$/;"	V
MAX_INT32	nvim/plugged/coc.nvim/build/index.js	/^var MAX_INT32 = 2147483647;$/;"	V
BunserBuf	nvim/plugged/coc.nvim/build/index.js	/^function BunserBuf() {$/;"	F
append	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.append = function(buf, synchronous) {$/;"	M
processLater	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.processLater = function() {$/;"	M
process	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.process = function(synchronous) {$/;"	M
raise	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.raise = function(reason) {$/;"	M
expectCode	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.expectCode = function(expected) {$/;"	M
decodeAny	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeAny = function() {$/;"	M
decodeArray	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeArray = function() {$/;"	M
arr	nvim/plugged/coc.nvim/build/index.js	/^  var arr = [];$/;"	A
decodeObject	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeObject = function() {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^  var res = {};$/;"	O
decodeTemplate	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeTemplate = function() {$/;"	M
arr	nvim/plugged/coc.nvim/build/index.js	/^  var arr = [];$/;"	A
obj	nvim/plugged/coc.nvim/build/index.js	/^    var obj = {};$/;"	O
decodeString	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeString = function() {$/;"	M
decodeInt	nvim/plugged/coc.nvim/build/index.js	/^BunserBuf.prototype.decodeInt = function(relaxSizeAsserts) {$/;"	M
size	nvim/plugged/coc.nvim/build/index.js	/^  var size = 0;$/;"	V
loadFromBuffer	nvim/plugged/coc.nvim/build/index.js	/^function loadFromBuffer(input) {$/;"	F
buf	nvim/plugged/coc.nvim/build/index.js	/^  var buf = new BunserBuf();$/;"	V
byteswap64	nvim/plugged/coc.nvim/build/index.js	/^function byteswap64(buf) {$/;"	F
swap	nvim/plugged/coc.nvim/build/index.js	/^  var swap = new Buffer(buf.length);$/;"	V
dump_int64	nvim/plugged/coc.nvim/build/index.js	/^function dump_int64(buf, val) {$/;"	F
dump_int	nvim/plugged/coc.nvim/build/index.js	/^function dump_int(buf, val) {$/;"	F
dump_any	nvim/plugged/coc.nvim/build/index.js	/^function dump_any(buf, val) {$/;"	F
dumpToBuffer	nvim/plugged/coc.nvim/build/index.js	/^function dumpToBuffer(val) {$/;"	F
buf	nvim/plugged/coc.nvim/build/index.js	/^  var buf = new Accumulator();$/;"	V
MASK31	nvim/plugged/coc.nvim/build/index.js	/^var MASK31 =  0x7fffffff, VAL31 = 0x80000000;$/;"	V
MASK32	nvim/plugged/coc.nvim/build/index.js	/^var MASK32 =  0xffffffff, VAL32 = 0x100000000;$/;"	V
_HEX	nvim/plugged/coc.nvim/build/index.js	/^var _HEX = [];$/;"	A
prototype	nvim/plugged/coc.nvim/build/index.js	/^Int64.prototype = {$/;"	P
constructor	nvim/plugged/coc.nvim/build/index.js	/^  constructor: Int64,$/;"	P
_2scomp	nvim/plugged/coc.nvim/build/index.js	/^  _2scomp: function() {$/;"	M
setValue	nvim/plugged/coc.nvim/build/index.js	/^  setValue: function(hi, lo) {$/;"	M
hi	nvim/plugged/coc.nvim/build/index.js	/^        hi = (hi + '').replace(\/^0x\/, '');$/;"	M
toNumber	nvim/plugged/coc.nvim/build/index.js	/^  toNumber: function(allowImprecise) {$/;"	M
v	nvim/plugged/coc.nvim/build/index.js	/^        v = (v ^ 0xff) + carry;$/;"	M
valueOf	nvim/plugged/coc.nvim/build/index.js	/^  valueOf: function() {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^  toString: function(radix) {$/;"	M
toOctetString	nvim/plugged/coc.nvim/build/index.js	/^  toOctetString: function(sep) {$/;"	M
out	nvim/plugged/coc.nvim/build/index.js	/^    var out = new Array(8);$/;"	V
toBuffer	nvim/plugged/coc.nvim/build/index.js	/^  toBuffer: function(rawBuffer) {$/;"	M
out	nvim/plugged/coc.nvim/build/index.js	/^    var out = new Buffer(8);$/;"	V
copy	nvim/plugged/coc.nvim/build/index.js	/^  copy: function(targetBuffer, targetOffset) {$/;"	M
compare	nvim/plugged/coc.nvim/build/index.js	/^  compare: function(other) {$/;"	M
equals	nvim/plugged/coc.nvim/build/index.js	/^  equals: function(other) {$/;"	M
inspect	nvim/plugged/coc.nvim/build/index.js	/^  inspect: function() {$/;"	M
Plugin	nvim/plugged/coc.nvim/build/index.js	/^class Plugin extends events_1.EventEmitter {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^            get: () => this.nvim$/;"	M
addMethod	nvim/plugged/coc.nvim/build/index.js	/^    addMethod(name, fn) {$/;"	M
addCommand	nvim/plugged/coc.nvim/build/index.js	/^    addCommand(cmd) {$/;"	M
textDocument	nvim/plugged/coc.nvim/build/index.js	/^            textDocument: { uri: document.uri },$/;"	P
locations	nvim/plugged/coc.nvim/build/index.js	/^        let locations = [];$/;"	A
getLocation	nvim/plugged/coc.nvim/build/index.js	/^            function getLocation(item) {$/;"	F
CommandItem	nvim/plugged/coc.nvim/build/index.js	/^class CommandItem {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(id, impl, thisArg, internal = false) {$/;"	M
execute	nvim/plugged/coc.nvim/build/index.js	/^    execute(...args) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
CommandManager	nvim/plugged/coc.nvim/build/index.js	/^class CommandManager {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
init	nvim/plugged/coc.nvim/build/index.js	/^    init(nvim, plugin) {$/;"	M
execute	nvim/plugged/coc.nvim/build/index.js	/^            execute: () => {$/;"	M
lines	nvim/plugged/coc.nvim/build/index.js	/^                let lines = folders.map(folder => vscode_uri_1.URI.parse(folder.uri).fsPath);$/;"	F
execute	nvim/plugged/coc.nvim/build/index.js	/^            execute: () => {$/;"	M
ranges	nvim/plugged/coc.nvim/build/index.js	/^                let ranges = [];$/;"	A
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
execute	nvim/plugged/coc.nvim/build/index.js	/^    execute(command) {$/;"	M
args	nvim/plugged/coc.nvim/build/index.js	/^        let args = [command.command];$/;"	A
register	nvim/plugged/coc.nvim/build/index.js	/^    register(command, internal = false, description) {$/;"	M
has	nvim/plugged/coc.nvim/build/index.js	/^    has(id) {$/;"	M
unregister	nvim/plugged/coc.nvim/build/index.js	/^    unregister(id) {$/;"	M
registerCommand	nvim/plugged/coc.nvim/build/index.js	/^    registerCommand(id, impl, thisArg, internal = false) {$/;"	M
executeCommand	nvim/plugged/coc.nvim/build/index.js	/^    executeCommand(command, ...rest) {$/;"	M
SnippetManager	nvim/plugged/coc.nvim/build/index.js	/^class SnippetManager {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
isPlainText	nvim/plugged/coc.nvim/build/index.js	/^    isPlainText(text) {$/;"	M
cancel	nvim/plugged/coc.nvim/build/index.js	/^    cancel() {$/;"	M
isActived	nvim/plugged/coc.nvim/build/index.js	/^    isActived(bufnr) {$/;"	M
jumpable	nvim/plugged/coc.nvim/build/index.js	/^    jumpable() {$/;"	M
getSession	nvim/plugged/coc.nvim/build/index.js	/^    getSession(bufnr) {$/;"	M
parser	nvim/plugged/coc.nvim/build/index.js	/^        let parser = new Snippets.SnippetParser();$/;"	V
resolver	nvim/plugged/coc.nvim/build/index.js	/^        const resolver = new variableResolve_1.SnippetVariableResolver();$/;"	V
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
Scanner	nvim/plugged/coc.nvim/build/index.js	/^class Scanner {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
isDigitCharacter	nvim/plugged/coc.nvim/build/index.js	/^    static isDigitCharacter(ch) {$/;"	M
isVariableCharacter	nvim/plugged/coc.nvim/build/index.js	/^    static isVariableCharacter(ch) {$/;"	M
text	nvim/plugged/coc.nvim/build/index.js	/^    text(value) {$/;"	M
tokenText	nvim/plugged/coc.nvim/build/index.js	/^    tokenText(token) {$/;"	M
next	nvim/plugged/coc.nvim/build/index.js	/^    next() {$/;"	M
len	nvim/plugged/coc.nvim/build/index.js	/^        let len = 0;$/;"	V
type	nvim/plugged/coc.nvim/build/index.js	/^        let type;$/;"	V
_table	nvim/plugged/coc.nvim/build/index.js	/^Scanner._table = {$/;"	P
Marker	nvim/plugged/coc.nvim/build/index.js	/^class Marker {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
appendChild	nvim/plugged/coc.nvim/build/index.js	/^    appendChild(child) {$/;"	M
setOnlyChild	nvim/plugged/coc.nvim/build/index.js	/^    setOnlyChild(child) {$/;"	M
replace	nvim/plugged/coc.nvim/build/index.js	/^    replace(child, others) {$/;"	M
_fixParent	nvim/plugged/coc.nvim/build/index.js	/^        (function _fixParent(children, parent) {$/;"	F
toString	nvim/plugged/coc.nvim/build/index.js	/^    toString() {$/;"	M
len	nvim/plugged/coc.nvim/build/index.js	/^    len() {$/;"	M
Text	nvim/plugged/coc.nvim/build/index.js	/^class Text extends Marker {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(value) {$/;"	M
escape	nvim/plugged/coc.nvim/build/index.js	/^    static escape(value) {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^    toString() {$/;"	M
toTextmateString	nvim/plugged/coc.nvim/build/index.js	/^    toTextmateString() {$/;"	M
len	nvim/plugged/coc.nvim/build/index.js	/^    len() {$/;"	M
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
TransformableMarker	nvim/plugged/coc.nvim/build/index.js	/^class TransformableMarker extends Marker {$/;"	C
Placeholder	nvim/plugged/coc.nvim/build/index.js	/^class Placeholder extends TransformableMarker {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(index) {$/;"	M
compareByIndex	nvim/plugged/coc.nvim/build/index.js	/^    static compareByIndex(a, b) {$/;"	M
toTextmateString	nvim/plugged/coc.nvim/build/index.js	/^    toTextmateString() {$/;"	M
transformString	nvim/plugged/coc.nvim/build/index.js	/^        let transformString = '';$/;"	V
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new Placeholder(this.index);$/;"	V
Choice	nvim/plugged/coc.nvim/build/index.js	/^class Choice extends Marker {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
appendChild	nvim/plugged/coc.nvim/build/index.js	/^    appendChild(marker) {$/;"	M
toString	nvim/plugged/coc.nvim/build/index.js	/^    toString() {$/;"	M
toTextmateString	nvim/plugged/coc.nvim/build/index.js	/^    toTextmateString() {$/;"	M
len	nvim/plugged/coc.nvim/build/index.js	/^    len() {$/;"	M
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new Choice();$/;"	V
Transform	nvim/plugged/coc.nvim/build/index.js	/^class Transform extends Marker {$/;"	C
resolve	nvim/plugged/coc.nvim/build/index.js	/^    resolve(value) {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = value.replace(this.regexp, (...args) => {$/;"	F
_replace	nvim/plugged/coc.nvim/build/index.js	/^    _replace(groups) {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = '';$/;"	V
toString	nvim/plugged/coc.nvim/build/index.js	/^    toString() {$/;"	M
toTextmateString	nvim/plugged/coc.nvim/build/index.js	/^    toTextmateString() {$/;"	M
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new Transform();$/;"	V
FormatString	nvim/plugged/coc.nvim/build/index.js	/^class FormatString extends Marker {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(index, shorthandName, ifValue, elseValue) {$/;"	M
resolve	nvim/plugged/coc.nvim/build/index.js	/^    resolve(value) {$/;"	M
_toPascalCase	nvim/plugged/coc.nvim/build/index.js	/^    _toPascalCase(value) {$/;"	M
toTextmateString	nvim/plugged/coc.nvim/build/index.js	/^    toTextmateString() {$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^        let value = '${';$/;"	V
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);$/;"	V
Variable	nvim/plugged/coc.nvim/build/index.js	/^class Variable extends TransformableMarker {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(name) {$/;"	M
resolve	nvim/plugged/coc.nvim/build/index.js	/^    resolve(resolver) {$/;"	M
newLines	nvim/plugged/coc.nvim/build/index.js	/^                    let newLines = value.split('\\n').map((s, i) => {$/;"	F
toTextmateString	nvim/plugged/coc.nvim/build/index.js	/^    toTextmateString() {$/;"	M
transformString	nvim/plugged/coc.nvim/build/index.js	/^        let transformString = '';$/;"	V
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        const ret = new Variable(this.name);$/;"	V
walk	nvim/plugged/coc.nvim/build/index.js	/^function walk(marker, visitor) {$/;"	F
stack	nvim/plugged/coc.nvim/build/index.js	/^    const stack = [...marker];$/;"	A
TextmateSnippet	nvim/plugged/coc.nvim/build/index.js	/^class TextmateSnippet extends Marker {$/;"	C
all	nvim/plugged/coc.nvim/build/index.js	/^            let all = [];$/;"	A
last	nvim/plugged/coc.nvim/build/index.js	/^            let last;$/;"	V
_placeholders	nvim/plugged/coc.nvim/build/index.js	/^            this._placeholders = { all, last };$/;"	P
nums	nvim/plugged/coc.nvim/build/index.js	/^        let nums = placeholders.map(p => p.index);$/;"	F
insertSnippet	nvim/plugged/coc.nvim/build/index.js	/^    insertSnippet(snippet, id, range) {$/;"	M
nested	nvim/plugged/coc.nvim/build/index.js	/^        let nested = new SnippetParser().parse(snippet, false);$/;"	V
updatePlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    updatePlaceholder(id, val) {$/;"	M
getPlaceholderText	nvim/plugged/coc.nvim/build/index.js	/^    getPlaceholderText(id, value) {$/;"	M
offset	nvim/plugged/coc.nvim/build/index.js	/^    offset(marker) {$/;"	M
pos	nvim/plugged/coc.nvim/build/index.js	/^        let pos = 0;$/;"	V
fullLen	nvim/plugged/coc.nvim/build/index.js	/^    fullLen(marker) {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = 0;$/;"	V
enclosingPlaceholders	nvim/plugged/coc.nvim/build/index.js	/^    enclosingPlaceholders(placeholder) {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = [];$/;"	A
resolveVariables	nvim/plugged/coc.nvim/build/index.js	/^    resolveVariables(resolver) {$/;"	M
appendChild	nvim/plugged/coc.nvim/build/index.js	/^    appendChild(child) {$/;"	M
replace	nvim/plugged/coc.nvim/build/index.js	/^    replace(child, others) {$/;"	M
toTextmateString	nvim/plugged/coc.nvim/build/index.js	/^    toTextmateString() {$/;"	M
clone	nvim/plugged/coc.nvim/build/index.js	/^    clone() {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^        let ret = new TextmateSnippet();$/;"	V
walk	nvim/plugged/coc.nvim/build/index.js	/^    walk(visitor) {$/;"	M
SnippetParser	nvim/plugged/coc.nvim/build/index.js	/^class SnippetParser {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
escape	nvim/plugged/coc.nvim/build/index.js	/^    static escape(value) {$/;"	M
text	nvim/plugged/coc.nvim/build/index.js	/^    text(value) {$/;"	M
parse	nvim/plugged/coc.nvim/build/index.js	/^    parse(value, insertFinalTabstop) {$/;"	M
snippet	nvim/plugged/coc.nvim/build/index.js	/^        const snippet = new TextmateSnippet();$/;"	V
placeholderDefaultValues	nvim/plugged/coc.nvim/build/index.js	/^        const placeholderDefaultValues = new Map();$/;"	V
incompletePlaceholders	nvim/plugged/coc.nvim/build/index.js	/^        const incompletePlaceholders = [];$/;"	A
clone	nvim/plugged/coc.nvim/build/index.js	/^                const clone = new Placeholder(placeholder.index);$/;"	V
_accept	nvim/plugged/coc.nvim/build/index.js	/^    _accept(type, value) {$/;"	M
_backTo	nvim/plugged/coc.nvim/build/index.js	/^    _backTo(token) {$/;"	M
_until	nvim/plugged/coc.nvim/build/index.js	/^    _until(type) {$/;"	M
_parse	nvim/plugged/coc.nvim/build/index.js	/^    _parse(marker) {$/;"	M
_parseEscaped	nvim/plugged/coc.nvim/build/index.js	/^    _parseEscaped(marker) {$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^        let value;$/;"	V
_parseTabstopOrVariableName	nvim/plugged/coc.nvim/build/index.js	/^    _parseTabstopOrVariableName(parent) {$/;"	M
value	nvim/plugged/coc.nvim/build/index.js	/^        let value;$/;"	V
_parseComplexPlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    _parseComplexPlaceholder(parent) {$/;"	M
index	nvim/plugged/coc.nvim/build/index.js	/^        let index;$/;"	V
placeholder	nvim/plugged/coc.nvim/build/index.js	/^        const placeholder = new Placeholder(Number(index));$/;"	V
choice	nvim/plugged/coc.nvim/build/index.js	/^            const choice = new Choice();$/;"	V
_parseChoiceElement	nvim/plugged/coc.nvim/build/index.js	/^    _parseChoiceElement(parent) {$/;"	M
values	nvim/plugged/coc.nvim/build/index.js	/^        const values = [];$/;"	A
value	nvim/plugged/coc.nvim/build/index.js	/^            let value;$/;"	V
_parseComplexVariable	nvim/plugged/coc.nvim/build/index.js	/^    _parseComplexVariable(parent) {$/;"	M
name	nvim/plugged/coc.nvim/build/index.js	/^        let name;$/;"	V
variable	nvim/plugged/coc.nvim/build/index.js	/^        const variable = new Variable(name);$/;"	V
_parseTransform	nvim/plugged/coc.nvim/build/index.js	/^    _parseTransform(parent) {$/;"	M
transform	nvim/plugged/coc.nvim/build/index.js	/^        let transform = new Transform();$/;"	V
regexValue	nvim/plugged/coc.nvim/build/index.js	/^        let regexValue = '';$/;"	V
regexOptions	nvim/plugged/coc.nvim/build/index.js	/^        let regexOptions = '';$/;"	V
escaped	nvim/plugged/coc.nvim/build/index.js	/^            let escaped;$/;"	V
escaped	nvim/plugged/coc.nvim/build/index.js	/^            let escaped;$/;"	V
_parseFormatString	nvim/plugged/coc.nvim/build/index.js	/^    _parseFormatString(parent) {$/;"	M
_parseAnything	nvim/plugged/coc.nvim/build/index.js	/^    _parseAnything(marker) {$/;"	M
SnippetSession	nvim/plugged/coc.nvim/build/index.js	/^class SnippetSession {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, bufnr) {$/;"	M
resolver	nvim/plugged/coc.nvim/build/index.js	/^        const resolver = new variableResolve_1.SnippetVariableResolver();$/;"	V
snippet	nvim/plugged/coc.nvim/build/index.js	/^        const snippet = new snippet_1.CocSnippet(inserted, position, resolver);$/;"	V
activate	nvim/plugged/coc.nvim/build/index.js	/^    activate() {$/;"	M
deactivate	nvim/plugged/coc.nvim/build/index.js	/^    deactivate() {$/;"	M
edit	nvim/plugged/coc.nvim/build/index.js	/^        let edit = { range: change.range, newText: change.text };$/;"	O
current_text	nvim/plugged/coc.nvim/build/index.js	/^            current_text: text,$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^            start: { line: start.line, col },$/;"	P
end	nvim/plugged/coc.nvim/build/index.js	/^            end: { line: end.line, col: endCol }$/;"	P
move_cmd	nvim/plugged/coc.nvim/build/index.js	/^        let move_cmd = '';$/;"	V
findPlaceholder	nvim/plugged/coc.nvim/build/index.js	/^    findPlaceholder(range) {$/;"	M
normalizeSnippetString	nvim/plugged/coc.nvim/build/index.js	/^function normalizeSnippetString(snippet, indent, opts) {$/;"	F
completeItemKeys	nvim/plugged/coc.nvim/build/index.js	/^const completeItemKeys = ['abbr', 'menu', 'info', 'kind', 'icase', 'dup', 'empty', 'user_data'];$/;"	A
Completion	nvim/plugged/coc.nvim/build/index.js	/^class Completion {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
recentScores	nvim/plugged/coc.nvim/build/index.js	/^        this.recentScores = {};$/;"	P
init	nvim/plugged/coc.nvim/build/index.js	/^    init() {$/;"	M
addRecent	nvim/plugged/coc.nvim/build/index.js	/^    addRecent(word, bufnr) {$/;"	M
getResumeInput	nvim/plugged/coc.nvim/build/index.js	/^    getResumeInput(pre) {$/;"	M
getCompleteConfig	nvim/plugged/coc.nvim/build/index.js	/^    getCompleteConfig() {$/;"	M
getConfig	nvim/plugged/coc.nvim/build/index.js	/^        function getConfig(key, defaultValue) {$/;"	F
items	nvim/plugged/coc.nvim/build/index.js	/^        let items;$/;"	V
hasSelected	nvim/plugged/coc.nvim/build/index.js	/^    hasSelected() {$/;"	M
preselect	nvim/plugged/coc.nvim/build/index.js	/^        let preselect = this.config.enablePreselect ? items.findIndex(o => o.preselect == true) : -1;$/;"	F
vimItems	nvim/plugged/coc.nvim/build/index.js	/^        let vimItems = items.map(item => {$/;"	F
obj	nvim/plugged/coc.nvim/build/index.js	/^            let obj = { word: item.word, equal: 1 };$/;"	O
arr	nvim/plugged/coc.nvim/build/index.js	/^        let arr = [];$/;"	A
complete	nvim/plugged/coc.nvim/build/index.js	/^        let complete = new complete_1.default(option, document, this.recentScores, config, arr, nvim);$/;"	V
fixCompleteOption	nvim/plugged/coc.nvim/build/index.js	/^    fixCompleteOption(opt) {$/;"	M
lastInsert	nvim/plugged/coc.nvim/build/index.js	/^        this.lastInsert = {$/;"	P
bounding	nvim/plugged/coc.nvim/build/index.js	/^        let bounding = { col, row, height, width, scrollbar };$/;"	O
isText	nvim/plugged/coc.nvim/build/index.js	/^            let isText = \/^[\\w-\\s.,\\t]+$\/.test(info);$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^    start(complete) {$/;"	M
cancel	nvim/plugged/coc.nvim/build/index.js	/^    cancel() {$/;"	M
stop	nvim/plugged/coc.nvim/build/index.js	/^    stop() {$/;"	M
getInput	nvim/plugged/coc.nvim/build/index.js	/^    getInput(document, pre) {$/;"	M
input	nvim/plugged/coc.nvim/build/index.js	/^        let input = '';$/;"	V
getCompleteItem	nvim/plugged/coc.nvim/build/index.js	/^    getCompleteItem(item) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
Sources	nvim/plugged/coc.nvim/build/index.js	/^class Sources {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
packageJSON	nvim/plugged/coc.nvim/build/index.js	/^            let packageJSON = {$/;"	O
engines	nvim/plugged/coc.nvim/build/index.js	/^                engines: {$/;"	P
coc	nvim/plugged/coc.nvim/build/index.js	/^                    coc: ">= 0.0.1"$/;"	P
contributes	nvim/plugged/coc.nvim/build/index.js	/^                contributes: {$/;"	P
configuration	nvim/plugged/coc.nvim/build/index.js	/^                    configuration: {$/;"	P
properties	nvim/plugged/coc.nvim/build/index.js	/^                        properties: {$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^                                default: true$/;"	P
default	nvim/plugged/coc.nvim/build/index.js	/^                                default: [],$/;"	P
items	nvim/plugged/coc.nvim/build/index.js	/^                                items: {$/;"	P
items	nvim/plugged/coc.nvim/build/index.js	/^                                items: {$/;"	P
source	nvim/plugged/coc.nvim/build/index.js	/^            let source = new source_vim_1.default({$/;"	V
extension	nvim/plugged/coc.nvim/build/index.js	/^            let extension = {$/;"	O
extensionPath	nvim/plugged/coc.nvim/build/index.js	/^                extensionPath: filepath,$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => {$/;"	M
files	nvim/plugged/coc.nvim/build/index.js	/^            let files = arr.map(s => path_1.default.join(folder, s));$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^    init() {$/;"	M
has	nvim/plugged/coc.nvim/build/index.js	/^    has(name) {$/;"	M
getSource	nvim/plugged/coc.nvim/build/index.js	/^    getSource(name) {$/;"	M
shouldCommit	nvim/plugged/coc.nvim/build/index.js	/^    shouldCommit(item, commitCharacter) {$/;"	M
getCompleteSources	nvim/plugged/coc.nvim/build/index.js	/^    getCompleteSources(opt) {$/;"	M
checkTrigger	nvim/plugged/coc.nvim/build/index.js	/^    checkTrigger(source, pre, character) {$/;"	M
shouldTrigger	nvim/plugged/coc.nvim/build/index.js	/^    shouldTrigger(pre, languageId) {$/;"	M
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.sources.findIndex(s => {$/;"	F
getTriggerSources	nvim/plugged/coc.nvim/build/index.js	/^    getTriggerSources(pre, languageId) {$/;"	M
getSourcesForFiletype	nvim/plugged/coc.nvim/build/index.js	/^    getSourcesForFiletype(filetype, isTriggered) {$/;"	M
addSource	nvim/plugged/coc.nvim/build/index.js	/^    addSource(source) {$/;"	M
removeSource	nvim/plugged/coc.nvim/build/index.js	/^    removeSource(source) {$/;"	M
toggleSource	nvim/plugged/coc.nvim/build/index.js	/^    toggleSource(name) {$/;"	M
sourceStats	nvim/plugged/coc.nvim/build/index.js	/^    sourceStats() {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
onDocumentEnter	nvim/plugged/coc.nvim/build/index.js	/^    onDocumentEnter(bufnr) {$/;"	M
createSource	nvim/plugged/coc.nvim/build/index.js	/^    createSource(config) {$/;"	M
source	nvim/plugged/coc.nvim/build/index.js	/^        let source = new source_1.default(Object.assign({ sourceType: types_1.SourceType.Service }, config));$/;"	V
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
loadJson	nvim/plugged/coc.nvim/build/index.js	/^function loadJson(file) {$/;"	F
Extensions	nvim/plugged/coc.nvim/build/index.js	/^class Extensions {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
_additionalSchemes	nvim/plugged/coc.nvim/build/index.js	/^        this._additionalSchemes = {};$/;"	P
now	nvim/plugged/coc.nvim/build/index.js	/^            let now = new Date();$/;"	V
day	nvim/plugged/coc.nvim/build/index.js	/^            let day = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (interval == 'daily' ? 0 : 7));$/;"	V
names	nvim/plugged/coc.nvim/build/index.js	/^        let names = stats.map(o => o.id);$/;"	F
names	nvim/plugged/coc.nvim/build/index.js	/^            let names = globalExtensions.filter(name => !this.isDisabled(name));$/;"	F
stat	nvim/plugged/coc.nvim/build/index.js	/^                let stat = stats.find(s => s.id == name);$/;"	F
getMissingExtensions	nvim/plugged/coc.nvim/build/index.js	/^    getMissingExtensions() {$/;"	M
ids	nvim/plugged/coc.nvim/build/index.js	/^        let ids = [];$/;"	A
getExtension	nvim/plugged/coc.nvim/build/index.js	/^    getExtension(id) {$/;"	M
getExtensionState	nvim/plugged/coc.nvim/build/index.js	/^    getExtensionState(id) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = this.list.find(o => o.id == id);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^            let idx = this.list.findIndex(o => o.id == id);$/;"	F
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.list.findIndex(o => o.id == id);$/;"	F
removed	nvim/plugged/coc.nvim/build/index.js	/^            let removed = [];$/;"	A
idx	nvim/plugged/coc.nvim/build/index.js	/^                let idx = this.list.findIndex(o => o.id == id);$/;"	F
sortedObj	nvim/plugged/coc.nvim/build/index.js	/^            const sortedObj = { dependencies: {} };$/;"	O
isDisabled	nvim/plugged/coc.nvim/build/index.js	/^    isDisabled(id) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = this.list.find(o => o.id == id);$/;"	F
has	nvim/plugged/coc.nvim/build/index.js	/^    has(id) {$/;"	M
isActivated	nvim/plugged/coc.nvim/build/index.js	/^    isActivated(id) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = this.list.find(o => o.id == id);$/;"	F
loadExtensionFile	nvim/plugged/coc.nvim/build/index.js	/^    loadExtensionFile(filepath) {$/;"	M
packageJSON	nvim/plugged/coc.nvim/build/index.js	/^        let packageJSON = {$/;"	O
main	nvim/plugged/coc.nvim/build/index.js	/^            main: filename,$/;"	P
activate	nvim/plugged/coc.nvim/build/index.js	/^    activate(id, silent = true) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = this.list.find(o => o.id == id);$/;"	F
deactivate	nvim/plugged/coc.nvim/build/index.js	/^    deactivate(id) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = this.list.find(o => o.id == id);$/;"	F
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = this.list.find(o => o.id == id);$/;"	F
getExtensionApi	nvim/plugged/coc.nvim/build/index.js	/^    getExtensionApi(id) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^        let item = this.list.find(o => o.id == id);$/;"	F
registerExtension	nvim/plugged/coc.nvim/build/index.js	/^    registerExtension(extension, deactivate) {$/;"	M
props	nvim/plugged/coc.nvim/build/index.js	/^                let props = {};$/;"	O
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = await Promise.all(Object.keys(json.dependencies).map(key => {$/;"	F
id	nvim/plugged/coc.nvim/build/index.js	/^                        id: key,$/;"	P
isLocal	nvim/plugged/coc.nvim/build/index.js	/^                        isLocal: false,$/;"	P
exotic	nvim/plugged/coc.nvim/build/index.js	/^                        exotic: \/^https?:\/.test(val),$/;"	P
included	nvim/plugged/coc.nvim/build/index.js	/^        let included = exclude.map(o => o.root);$/;"	F
names	nvim/plugged/coc.nvim/build/index.js	/^        let names = exclude.map(o => o.id);$/;"	F
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = await Promise.all(paths.map(root => {$/;"	F
isLocal	nvim/plugged/coc.nvim/build/index.js	/^                        isLocal: true,$/;"	P
exotic	nvim/plugged/coc.nvim/build/index.js	/^                        exotic: false,$/;"	P
isGlobalExtension	nvim/plugged/coc.nvim/build/index.js	/^    isGlobalExtension(id) {$/;"	M
loadJson	nvim/plugged/coc.nvim/build/index.js	/^    loadJson() {$/;"	M
addSchemeProperty	nvim/plugged/coc.nvim/build/index.js	/^    addSchemeProperty(key, def) {$/;"	M
setupActiveEvents	nvim/plugged/coc.nvim/build/index.js	/^    setupActiveEvents(id, packageJSON) {$/;"	M
active	nvim/plugged/coc.nvim/build/index.js	/^        let active = () => {$/;"	F
active	nvim/plugged/coc.nvim/build/index.js	/^            active = () => { }; \/\/ tslint:disable-line$/;"	M
disposables	nvim/plugged/coc.nvim/build/index.js	/^        let disposables = [];$/;"	A
check	nvim/plugged/coc.nvim/build/index.js	/^                let check = () => {$/;"	F
folders	nvim/plugged/coc.nvim/build/index.js	/^                    let folders = workspace_1.default.workspaceFolders.map(o => vscode_uri_1.URI.parse(o.uri).fsPath);$/;"	F
createExtension	nvim/plugged/coc.nvim/build/index.js	/^    createExtension(root, packageJSON, isLocal = false) {$/;"	M
ext	nvim/plugged/coc.nvim/build/index.js	/^        let ext;$/;"	V
subscriptions	nvim/plugged/coc.nvim/build/index.js	/^        let subscriptions = [];$/;"	A
extension	nvim/plugged/coc.nvim/build/index.js	/^        let extension = {$/;"	O
context	nvim/plugged/coc.nvim/build/index.js	/^                let context = {$/;"	O
extensionPath	nvim/plugged/coc.nvim/build/index.js	/^                    extensionPath: root,$/;"	P
id	nvim/plugged/coc.nvim/build/index.js	/^            id: {$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => id$/;"	M
packageJSON	nvim/plugged/coc.nvim/build/index.js	/^            packageJSON: {$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => packageJSON$/;"	M
extensionPath	nvim/plugged/coc.nvim/build/index.js	/^            extensionPath: {$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => root$/;"	M
isActive	nvim/plugged/coc.nvim/build/index.js	/^            isActive: {$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => isActive$/;"	M
exports	nvim/plugged/coc.nvim/build/index.js	/^            exports: {$/;"	P
get	nvim/plugged/coc.nvim/build/index.js	/^                get: () => exports$/;"	M
directory	nvim/plugged/coc.nvim/build/index.js	/^            directory: root,$/;"	P
deactivate	nvim/plugged/coc.nvim/build/index.js	/^            deactivate: () => {$/;"	M
props	nvim/plugged/coc.nvim/build/index.js	/^                let props = {};$/;"	O
defaultGlobOpts	nvim/plugged/coc.nvim/build/index.js	/^const defaultGlobOpts = {$/;"	O
nosort	nvim/plugged/coc.nvim/build/index.js	/^  nosort: true,$/;"	P
silent	nvim/plugged/coc.nvim/build/index.js	/^  silent: true$/;"	P
timeout	nvim/plugged/coc.nvim/build/index.js	/^let timeout = 0$/;"	V
defaults	nvim/plugged/coc.nvim/build/index.js	/^const defaults = options => {$/;"	F
methods	nvim/plugged/coc.nvim/build/index.js	/^  const methods = [$/;"	A
rimraf	nvim/plugged/coc.nvim/build/index.js	/^const rimraf = (p, options, cb) => {$/;"	F
busyTries	nvim/plugged/coc.nvim/build/index.js	/^  let busyTries = 0$/;"	V
n	nvim/plugged/coc.nvim/build/index.js	/^  let n = 0$/;"	V
next	nvim/plugged/coc.nvim/build/index.js	/^  const next = (er) => {$/;"	F
afterGlob	nvim/plugged/coc.nvim/build/index.js	/^  const afterGlob = (er, results) => {$/;"	F
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^const rimraf_ = (p, options, cb) => {$/;"	F
fixWinEPERM	nvim/plugged/coc.nvim/build/index.js	/^const fixWinEPERM = (p, options, er, cb) => {$/;"	F
fixWinEPERMSync	nvim/plugged/coc.nvim/build/index.js	/^const fixWinEPERMSync = (p, options, er) => {$/;"	F
rmdir	nvim/plugged/coc.nvim/build/index.js	/^const rmdir = (p, options, originalEr, cb) => {$/;"	F
rmkids	nvim/plugged/coc.nvim/build/index.js	/^const rmkids = (p, options, cb) => {$/;"	F
rimrafSync	nvim/plugged/coc.nvim/build/index.js	/^const rimrafSync = (p, options) => {$/;"	F
rmdirSync	nvim/plugged/coc.nvim/build/index.js	/^const rmdirSync = (p, options, originalEr) => {$/;"	F
rmkidsSync	nvim/plugged/coc.nvim/build/index.js	/^const rmkidsSync = (p, options) => {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^  let i = 0$/;"	V
glob	nvim/plugged/coc.nvim/build/index.js	/^function glob (pattern, options, cb) {$/;"	F
extend	nvim/plugged/coc.nvim/build/index.js	/^function extend (origin, add) {$/;"	F
hasMagic	nvim/plugged/coc.nvim/build/index.js	/^glob.hasMagic = function (pattern, options_) {$/;"	M
g	nvim/plugged/coc.nvim/build/index.js	/^  var g = new Glob(pattern, options)$/;"	V
Glob	nvim/plugged/coc.nvim/build/index.js	/^function Glob (pattern, options, cb) {$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^  function done () {$/;"	F
_finish	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._finish = function () {$/;"	M
_realpath	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._realpath = function () {$/;"	M
next	nvim/plugged/coc.nvim/build/index.js	/^  function next () {$/;"	F
_realpathSet	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._realpathSet = function (index, cb) {$/;"	M
_mark	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._mark = function (p) {$/;"	M
_makeAbs	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._makeAbs = function (f) {$/;"	M
abort	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.abort = function () {$/;"	M
pause	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.pause = function () {$/;"	M
resume	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.resume = function () {$/;"	M
_process	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._process = function (pattern, index, inGlobStar, cb) {$/;"	M
n	nvim/plugged/coc.nvim/build/index.js	/^  var n = 0$/;"	V
_processReaddir	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {$/;"	M
_processReaddir2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {$/;"	M
matchedEntries	nvim/plugged/coc.nvim/build/index.js	/^  var matchedEntries = []$/;"	A
_emitMatch	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._emitMatch = function (index, e) {$/;"	M
_readdirInGlobStar	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirInGlobStar = function (abs, cb) {$/;"	M
lstatkey	nvim/plugged/coc.nvim/build/index.js	/^  var lstatkey = 'lstat\\0' + abs$/;"	V
lstatcb_	nvim/plugged/coc.nvim/build/index.js	/^  function lstatcb_ (er, lstat) {$/;"	F
_readdir	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdir = function (abs, inGlobStar, cb) {$/;"	M
readdirCb	nvim/plugged/coc.nvim/build/index.js	/^function readdirCb (self, abs, cb) {$/;"	F
_readdirEntries	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirEntries = function (abs, entries, cb) {$/;"	M
_readdirError	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirError = function (f, er, cb) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^        var error = new Error(er.code + ' invalid cwd ' + this.cwd)$/;"	V
default	nvim/plugged/coc.nvim/build/index.js	/^    default: \/\/ some unusual error.  Treat as failure.$/;"	P
_processGlobStar	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {$/;"	M
_processGlobStar2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {$/;"	M
_processSimple	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processSimple = function (prefix, index, cb) {$/;"	M
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX review this.  Shouldn't it be doing the mounting etc$/;"	T
_processSimple2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {$/;"	M
trail	nvim/plugged/coc.nvim/build/index.js	/^    var trail = \/[\\\/\\\\]$\/.test(prefix)$/;"	V
_stat	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._stat = function (f, cb) {$/;"	M
lstatcb_	nvim/plugged/coc.nvim/build/index.js	/^  function lstatcb_ (er, lstat) {$/;"	F
_stat2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._stat2 = function (f, abs, er, stat, cb) {$/;"	M
ok	nvim/plugged/coc.nvim/build/index.js	/^var ok = \/^v[0-5]\\.\/.test(version)$/;"	V
newError	nvim/plugged/coc.nvim/build/index.js	/^function newError (er) {$/;"	F
realpath	nvim/plugged/coc.nvim/build/index.js	/^function realpath (p, cache, cb) {$/;"	F
origRealpath	nvim/plugged/coc.nvim/build/index.js	/^  origRealpath(p, cache, function (er, result) {$/;"	M
realpathSync	nvim/plugged/coc.nvim/build/index.js	/^function realpathSync (p, cache) {$/;"	F
monkeypatch	nvim/plugged/coc.nvim/build/index.js	/^function monkeypatch () {$/;"	F
unmonkeypatch	nvim/plugged/coc.nvim/build/index.js	/^function unmonkeypatch () {$/;"	F
rethrow	nvim/plugged/coc.nvim/build/index.js	/^function rethrow() {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^  var callback;$/;"	V
backtrace	nvim/plugged/coc.nvim/build/index.js	/^    var backtrace = new Error;$/;"	V
debugCallback	nvim/plugged/coc.nvim/build/index.js	/^  function debugCallback(err) {$/;"	F
missingCallback	nvim/plugged/coc.nvim/build/index.js	/^  function missingCallback(err) {$/;"	F
msg	nvim/plugged/coc.nvim/build/index.js	/^        var msg = 'fs: missing callback ' + (err.stack || err.message);$/;"	V
maybeCallback	nvim/plugged/coc.nvim/build/index.js	/^function maybeCallback(cb) {$/;"	F
nextPartRe	nvim/plugged/coc.nvim/build/index.js	/^  var nextPartRe = \/(.*?)(?:[\\\/\\\\]+|$)\/g;$/;"	V
nextPartRe	nvim/plugged/coc.nvim/build/index.js	/^  var nextPartRe = \/(.*?)(?:[\\\/]+|$)\/g;$/;"	V
splitRootRe	nvim/plugged/coc.nvim/build/index.js	/^  var splitRootRe = \/^(?:[a-zA-Z]:|[\\\\\\\/]{2}[^\\\\\\\/]+[\\\\\\\/][^\\\\\\\/]+)?[\\\\\\\/]*\/;$/;"	V
splitRootRe	nvim/plugged/coc.nvim/build/index.js	/^  var splitRootRe = \/^[\\\/]*\/;$/;"	V
realpathSync	nvim/plugged/coc.nvim/build/index.js	/^exports.realpathSync = function realpathSync(p, cache) {$/;"	M
pos	nvim/plugged/coc.nvim/build/index.js	/^  var pos;$/;"	V
current	nvim/plugged/coc.nvim/build/index.js	/^  var current;$/;"	V
base	nvim/plugged/coc.nvim/build/index.js	/^  var base;$/;"	V
previous	nvim/plugged/coc.nvim/build/index.js	/^  var previous;$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^  function start() {$/;"	F
resolvedLink	nvim/plugged/coc.nvim/build/index.js	/^    var resolvedLink;$/;"	V
realpath	nvim/plugged/coc.nvim/build/index.js	/^exports.realpath = function realpath(p, cache, cb) {$/;"	M
pos	nvim/plugged/coc.nvim/build/index.js	/^  var pos;$/;"	V
current	nvim/plugged/coc.nvim/build/index.js	/^  var current;$/;"	V
base	nvim/plugged/coc.nvim/build/index.js	/^  var base;$/;"	V
previous	nvim/plugged/coc.nvim/build/index.js	/^  var previous;$/;"	V
start	nvim/plugged/coc.nvim/build/index.js	/^  function start() {$/;"	F
LOOP	nvim/plugged/coc.nvim/build/index.js	/^  function LOOP() {$/;"	F
gotStat	nvim/plugged/coc.nvim/build/index.js	/^  function gotStat(err, stat) {$/;"	F
gotTarget	nvim/plugged/coc.nvim/build/index.js	/^  function gotTarget(err, target, base) {$/;"	F
gotResolvedLink	nvim/plugged/coc.nvim/build/index.js	/^  function gotResolvedLink(resolvedLink) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^  module.exports = function inherits(ctor, superCtor) {$/;"	M
constructor	nvim/plugged/coc.nvim/build/index.js	/^      constructor: {$/;"	P
value	nvim/plugged/coc.nvim/build/index.js	/^        value: ctor,$/;"	P
enumerable	nvim/plugged/coc.nvim/build/index.js	/^        enumerable: false,$/;"	P
writable	nvim/plugged/coc.nvim/build/index.js	/^        writable: true,$/;"	P
configurable	nvim/plugged/coc.nvim/build/index.js	/^        configurable: true$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^  module.exports = function inherits(ctor, superCtor) {$/;"	M
TempCtor	nvim/plugged/coc.nvim/build/index.js	/^    var TempCtor = function () {}$/;"	C
posix	nvim/plugged/coc.nvim/build/index.js	/^function posix(path) {$/;"	F
win32	nvim/plugged/coc.nvim/build/index.js	/^function win32(path) {$/;"	F
splitDeviceRe	nvim/plugged/coc.nvim/build/index.js	/^	var splitDeviceRe = \/^([a-zA-Z]:|[\\\\\\\/]{2}[^\\\\\\\/]+[\\\\\\\/]+[^\\\\\\\/]+)?([\\\\\\\/])?([\\s\\S]*?)$\/;$/;"	V
globSync	nvim/plugged/coc.nvim/build/index.js	/^function globSync (pattern, options) {$/;"	F
GlobSync	nvim/plugged/coc.nvim/build/index.js	/^function GlobSync (pattern, options) {$/;"	F
_finish	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._finish = function () {$/;"	M
_process	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._process = function (pattern, index, inGlobStar) {$/;"	M
n	nvim/plugged/coc.nvim/build/index.js	/^  var n = 0$/;"	V
_processReaddir	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {$/;"	M
matchedEntries	nvim/plugged/coc.nvim/build/index.js	/^  var matchedEntries = []$/;"	A
_emitMatch	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._emitMatch = function (index, e) {$/;"	M
_readdirInGlobStar	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirInGlobStar = function (abs) {$/;"	M
_readdir	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdir = function (abs, inGlobStar) {$/;"	M
_readdirEntries	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirEntries = function (abs, entries) {$/;"	M
_readdirError	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirError = function (f, er) {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^        var error = new Error(er.code + ' invalid cwd ' + this.cwd)$/;"	V
default	nvim/plugged/coc.nvim/build/index.js	/^    default: \/\/ some unusual error.  Treat as failure.$/;"	P
_processGlobStar	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {$/;"	M
_processSimple	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processSimple = function (prefix, index) {$/;"	M
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX review this.  Shouldn't it be doing the mounting etc$/;"	T
trail	nvim/plugged/coc.nvim/build/index.js	/^    var trail = \/[\\\/\\\\]$\/.test(prefix)$/;"	V
_stat	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._stat = function (f) {$/;"	M
_mark	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._mark = function (p) {$/;"	M
_makeAbs	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._makeAbs = function (f) {$/;"	M
ownProp	nvim/plugged/coc.nvim/build/index.js	/^function ownProp (obj, field) {$/;"	F
alphasorti	nvim/plugged/coc.nvim/build/index.js	/^function alphasorti (a, b) {$/;"	F
alphasort	nvim/plugged/coc.nvim/build/index.js	/^function alphasort (a, b) {$/;"	F
setupIgnores	nvim/plugged/coc.nvim/build/index.js	/^function setupIgnores (self, options) {$/;"	F
ignoreMap	nvim/plugged/coc.nvim/build/index.js	/^function ignoreMap (pattern) {$/;"	F
gmatcher	nvim/plugged/coc.nvim/build/index.js	/^    gmatcher: gmatcher$/;"	P
setopts	nvim/plugged/coc.nvim/build/index.js	/^function setopts (self, pattern, options) {$/;"	F
TODO	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ TODO: is an absolute `cwd` supposed to be resolved against `root`?$/;"	T
finish	nvim/plugged/coc.nvim/build/index.js	/^function finish (self) {$/;"	F
mark	nvim/plugged/coc.nvim/build/index.js	/^function mark (self, p) {$/;"	F
makeAbs	nvim/plugged/coc.nvim/build/index.js	/^function makeAbs (self, f) {$/;"	F
isIgnored	nvim/plugged/coc.nvim/build/index.js	/^function isIgnored (self, path) {$/;"	F
childrenIgnored	nvim/plugged/coc.nvim/build/index.js	/^function childrenIgnored (self, path) {$/;"	F
inflight	nvim/plugged/coc.nvim/build/index.js	/^function inflight (key, cb) {$/;"	F
makeres	nvim/plugged/coc.nvim/build/index.js	/^function makeres (key) {$/;"	F
XXX	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ XXX It's somewhat ambiguous whether a new callback added in this$/;"	T
slice	nvim/plugged/coc.nvim/build/index.js	/^function slice (args) {$/;"	F
array	nvim/plugged/coc.nvim/build/index.js	/^  var array = []$/;"	A
wrappy	nvim/plugged/coc.nvim/build/index.js	/^function wrappy (fn, cb) {$/;"	F
wrapper	nvim/plugged/coc.nvim/build/index.js	/^  function wrapper() {$/;"	F
args	nvim/plugged/coc.nvim/build/index.js	/^    var args = new Array(arguments.length)$/;"	V
value	nvim/plugged/coc.nvim/build/index.js	/^    value: function () {$/;"	M
configurable	nvim/plugged/coc.nvim/build/index.js	/^    configurable: true$/;"	P
value	nvim/plugged/coc.nvim/build/index.js	/^    value: function () {$/;"	M
configurable	nvim/plugged/coc.nvim/build/index.js	/^    configurable: true$/;"	P
once	nvim/plugged/coc.nvim/build/index.js	/^function once (fn) {$/;"	F
onceStrict	nvim/plugged/coc.nvim/build/index.js	/^function onceStrict (fn) {$/;"	F
registryUrl	nvim/plugged/coc.nvim/build/index.js	/^function registryUrl(scope = '') {$/;"	F
ExtensionManager	nvim/plugged/coc.nvim/build/index.js	/^class ExtensionManager {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(root) {$/;"	M
checkFolder	nvim/plugged/coc.nvim/build/index.js	/^    checkFolder() {$/;"	M
name	nvim/plugged/coc.nvim/build/index.js	/^        let name;$/;"	V
version	nvim/plugged/coc.nvim/build/index.js	/^        let version;$/;"	V
p	nvim/plugged/coc.nvim/build/index.js	/^            let p = new Promise((resolve, reject) => {$/;"	V
args	nvim/plugged/coc.nvim/build/index.js	/^                let args = ['install', '--ignore-scripts', '--no-lockfile', '--no-bin-links', '--production'];$/;"	A
err	nvim/plugged/coc.nvim/build/index.js	/^                let err = '';$/;"	V
sortedObj	nvim/plugged/coc.nvim/build/index.js	/^        const sortedObj = { dependencies: {} };$/;"	O
version	nvim/plugged/coc.nvim/build/index.js	/^        let version;$/;"	V
mv	nvim/plugged/coc.nvim/build/index.js	/^function mv(source, dest, options, cb){$/;"	F
mkdirs	nvim/plugged/coc.nvim/build/index.js	/^  function mkdirs() {$/;"	F
mkdirp	nvim/plugged/coc.nvim/build/index.js	/^    mkdirp(path.dirname(dest), function(err) {$/;"	M
doRename	nvim/plugged/coc.nvim/build/index.js	/^  function doRename() {$/;"	F
moveFileAcrossDevice	nvim/plugged/coc.nvim/build/index.js	/^function moveFileAcrossDevice(source, dest, clobber, limit, cb) {$/;"	F
onClose	nvim/plugged/coc.nvim/build/index.js	/^  function onClose(){$/;"	F
moveDirAcrossDevice	nvim/plugged/coc.nvim/build/index.js	/^function moveDirAcrossDevice(source, dest, clobber, limit, cb) {$/;"	F
options	nvim/plugged/coc.nvim/build/index.js	/^  var options = {$/;"	O
stopOnErr	nvim/plugged/coc.nvim/build/index.js	/^    stopOnErr: true,$/;"	P
clobber	nvim/plugged/coc.nvim/build/index.js	/^    clobber: false,$/;"	P
limit	nvim/plugged/coc.nvim/build/index.js	/^    limit: limit,$/;"	P
rimraf	nvim/plugged/coc.nvim/build/index.js	/^    rimraf(dest, { disableGlob: true }, function(err) {$/;"	M
startNcp	nvim/plugged/coc.nvim/build/index.js	/^  function startNcp() {$/;"	F
ncp	nvim/plugged/coc.nvim/build/index.js	/^    ncp(source, dest, options, function(errList) {$/;"	M
ncp	nvim/plugged/coc.nvim/build/index.js	/^function ncp (source, dest, options, callback) {$/;"	F
limit	nvim/plugged/coc.nvim/build/index.js	/^  limit = (limit < 1) ? 1 : (limit > 512) ? 512 : limit;$/;"	M
startCopy	nvim/plugged/coc.nvim/build/index.js	/^  function startCopy(source) {$/;"	F
getStats	nvim/plugged/coc.nvim/build/index.js	/^  function getStats(source) {$/;"	F
stat	nvim/plugged/coc.nvim/build/index.js	/^    stat(source, function (err, stats) {$/;"	M
item	nvim/plugged/coc.nvim/build/index.js	/^      var item = {};$/;"	O
onFile	nvim/plugged/coc.nvim/build/index.js	/^  function onFile(file) {$/;"	F
if	nvim/plugged/coc.nvim/build/index.js	/^    if(rename) {$/;"	M
isWritable	nvim/plugged/coc.nvim/build/index.js	/^    isWritable(target, function (writable) {$/;"	M
if	nvim/plugged/coc.nvim/build/index.js	/^      if(clobber) {$/;"	M
rmFile	nvim/plugged/coc.nvim/build/index.js	/^        rmFile(target, function () {$/;"	M
stat	nvim/plugged/coc.nvim/build/index.js	/^        stat(target, function(err, stats) {$/;"	M
copyFile	nvim/plugged/coc.nvim/build/index.js	/^  function copyFile(file, target) {$/;"	F
if	nvim/plugged/coc.nvim/build/index.js	/^    if(transform) {$/;"	M
rmFile	nvim/plugged/coc.nvim/build/index.js	/^  function rmFile(file, done) {$/;"	F
onDir	nvim/plugged/coc.nvim/build/index.js	/^  function onDir(dir) {$/;"	F
isWritable	nvim/plugged/coc.nvim/build/index.js	/^    isWritable(target, function (writable) {$/;"	M
mkDir	nvim/plugged/coc.nvim/build/index.js	/^  function mkDir(dir, target) {$/;"	F
copyDir	nvim/plugged/coc.nvim/build/index.js	/^  function copyDir(dir) {$/;"	F
onLink	nvim/plugged/coc.nvim/build/index.js	/^  function onLink(link) {$/;"	F
checkLink	nvim/plugged/coc.nvim/build/index.js	/^  function checkLink(resolvedPath, target) {$/;"	F
isWritable	nvim/plugged/coc.nvim/build/index.js	/^    isWritable(target, function (writable) {$/;"	M
makeLink	nvim/plugged/coc.nvim/build/index.js	/^  function makeLink(linkPath, target) {$/;"	F
isWritable	nvim/plugged/coc.nvim/build/index.js	/^  function isWritable(path, done) {$/;"	F
onError	nvim/plugged/coc.nvim/build/index.js	/^  function onError(err) {$/;"	F
cb	nvim/plugged/coc.nvim/build/index.js	/^  function cb(skipped) {$/;"	F
globOpts	nvim/plugged/coc.nvim/build/index.js	/^var globOpts = {$/;"	O
nosort	nvim/plugged/coc.nvim/build/index.js	/^  nosort: true,$/;"	P
nocomment	nvim/plugged/coc.nvim/build/index.js	/^  nocomment: true,$/;"	P
nonegate	nvim/plugged/coc.nvim/build/index.js	/^  nonegate: true,$/;"	P
silent	nvim/plugged/coc.nvim/build/index.js	/^  silent: true$/;"	P
timeout	nvim/plugged/coc.nvim/build/index.js	/^var timeout = 0$/;"	V
defaults	nvim/plugged/coc.nvim/build/index.js	/^function defaults (options) {$/;"	F
methods	nvim/plugged/coc.nvim/build/index.js	/^  var methods = [$/;"	A
rimraf	nvim/plugged/coc.nvim/build/index.js	/^function rimraf (p, options, cb) {$/;"	F
busyTries	nvim/plugged/coc.nvim/build/index.js	/^  var busyTries = 0$/;"	V
n	nvim/plugged/coc.nvim/build/index.js	/^  var n = 0$/;"	V
next	nvim/plugged/coc.nvim/build/index.js	/^  function next (er) {$/;"	F
afterGlob	nvim/plugged/coc.nvim/build/index.js	/^  function afterGlob (er, results) {$/;"	F
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^      rimraf_(p, options, function CB (er) {$/;"	M
rimraf_	nvim/plugged/coc.nvim/build/index.js	/^function rimraf_ (p, options, cb) {$/;"	F
fixWinEPERM	nvim/plugged/coc.nvim/build/index.js	/^function fixWinEPERM (p, options, er, cb) {$/;"	F
fixWinEPERMSync	nvim/plugged/coc.nvim/build/index.js	/^function fixWinEPERMSync (p, options, er) {$/;"	F
rmdir	nvim/plugged/coc.nvim/build/index.js	/^function rmdir (p, options, originalEr, cb) {$/;"	F
rmkids	nvim/plugged/coc.nvim/build/index.js	/^function rmkids(p, options, cb) {$/;"	F
rimraf	nvim/plugged/coc.nvim/build/index.js	/^      rimraf(path.join(p, f), options, function (er) {$/;"	M
rimrafSync	nvim/plugged/coc.nvim/build/index.js	/^function rimrafSync (p, options) {$/;"	F
rmdirSync	nvim/plugged/coc.nvim/build/index.js	/^function rmdirSync (p, options, originalEr) {$/;"	F
rmkidsSync	nvim/plugged/coc.nvim/build/index.js	/^function rmkidsSync (p, options) {$/;"	F
glob	nvim/plugged/coc.nvim/build/index.js	/^function glob (pattern, options, cb) {$/;"	F
extend	nvim/plugged/coc.nvim/build/index.js	/^function extend (origin, add) {$/;"	F
hasMagic	nvim/plugged/coc.nvim/build/index.js	/^glob.hasMagic = function (pattern, options_) {$/;"	M
g	nvim/plugged/coc.nvim/build/index.js	/^  var g = new Glob(pattern, options)$/;"	V
Glob	nvim/plugged/coc.nvim/build/index.js	/^function Glob (pattern, options, cb) {$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^  function done () {$/;"	F
_finish	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._finish = function () {$/;"	M
_realpath	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._realpath = function () {$/;"	M
next	nvim/plugged/coc.nvim/build/index.js	/^  function next () {$/;"	F
_realpathSet	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._realpathSet = function (index, cb) {$/;"	M
_mark	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._mark = function (p) {$/;"	M
_makeAbs	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._makeAbs = function (f) {$/;"	M
abort	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.abort = function () {$/;"	M
pause	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.pause = function () {$/;"	M
resume	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype.resume = function () {$/;"	M
_process	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._process = function (pattern, index, inGlobStar, cb) {$/;"	M
n	nvim/plugged/coc.nvim/build/index.js	/^  var n = 0$/;"	V
_processReaddir	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {$/;"	M
_processReaddir2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {$/;"	M
matchedEntries	nvim/plugged/coc.nvim/build/index.js	/^  var matchedEntries = []$/;"	A
_emitMatch	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._emitMatch = function (index, e) {$/;"	M
_readdirInGlobStar	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirInGlobStar = function (abs, cb) {$/;"	M
lstatkey	nvim/plugged/coc.nvim/build/index.js	/^  var lstatkey = 'lstat\\0' + abs$/;"	V
lstatcb_	nvim/plugged/coc.nvim/build/index.js	/^  function lstatcb_ (er, lstat) {$/;"	F
_readdir	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdir = function (abs, inGlobStar, cb) {$/;"	M
readdirCb	nvim/plugged/coc.nvim/build/index.js	/^function readdirCb (self, abs, cb) {$/;"	F
_readdirEntries	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirEntries = function (abs, entries, cb) {$/;"	M
_readdirError	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._readdirError = function (f, er, cb) {$/;"	M
default	nvim/plugged/coc.nvim/build/index.js	/^    default: \/\/ some unusual error.  Treat as failure.$/;"	P
_processGlobStar	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {$/;"	M
_processGlobStar2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {$/;"	M
_processSimple	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processSimple = function (prefix, index, cb) {$/;"	M
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX review this.  Shouldn't it be doing the mounting etc$/;"	T
_processSimple2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {$/;"	M
trail	nvim/plugged/coc.nvim/build/index.js	/^    var trail = \/[\\\/\\\\]$\/.test(prefix)$/;"	V
_stat	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._stat = function (f, cb) {$/;"	M
lstatcb_	nvim/plugged/coc.nvim/build/index.js	/^  function lstatcb_ (er, lstat) {$/;"	F
_stat2	nvim/plugged/coc.nvim/build/index.js	/^Glob.prototype._stat2 = function (f, abs, er, stat, cb) {$/;"	M
globSync	nvim/plugged/coc.nvim/build/index.js	/^function globSync (pattern, options) {$/;"	F
GlobSync	nvim/plugged/coc.nvim/build/index.js	/^function GlobSync (pattern, options) {$/;"	F
_finish	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._finish = function () {$/;"	M
_process	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._process = function (pattern, index, inGlobStar) {$/;"	M
n	nvim/plugged/coc.nvim/build/index.js	/^  var n = 0$/;"	V
_processReaddir	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {$/;"	M
matchedEntries	nvim/plugged/coc.nvim/build/index.js	/^  var matchedEntries = []$/;"	A
_emitMatch	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._emitMatch = function (index, e) {$/;"	M
_readdirInGlobStar	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirInGlobStar = function (abs) {$/;"	M
_readdir	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdir = function (abs, inGlobStar) {$/;"	M
_readdirEntries	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirEntries = function (abs, entries) {$/;"	M
_readdirError	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._readdirError = function (f, er) {$/;"	M
default	nvim/plugged/coc.nvim/build/index.js	/^    default: \/\/ some unusual error.  Treat as failure.$/;"	P
_processGlobStar	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {$/;"	M
_processSimple	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._processSimple = function (prefix, index) {$/;"	M
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX review this.  Shouldn't it be doing the mounting etc$/;"	T
trail	nvim/plugged/coc.nvim/build/index.js	/^    var trail = \/[\\\/\\\\]$\/.test(prefix)$/;"	V
_stat	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._stat = function (f) {$/;"	M
_mark	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._mark = function (p) {$/;"	M
_makeAbs	nvim/plugged/coc.nvim/build/index.js	/^GlobSync.prototype._makeAbs = function (f) {$/;"	M
ownProp	nvim/plugged/coc.nvim/build/index.js	/^function ownProp (obj, field) {$/;"	F
alphasorti	nvim/plugged/coc.nvim/build/index.js	/^function alphasorti (a, b) {$/;"	F
alphasort	nvim/plugged/coc.nvim/build/index.js	/^function alphasort (a, b) {$/;"	F
setupIgnores	nvim/plugged/coc.nvim/build/index.js	/^function setupIgnores (self, options) {$/;"	F
ignoreMap	nvim/plugged/coc.nvim/build/index.js	/^function ignoreMap (pattern) {$/;"	F
gmatcher	nvim/plugged/coc.nvim/build/index.js	/^    gmatcher: gmatcher$/;"	P
setopts	nvim/plugged/coc.nvim/build/index.js	/^function setopts (self, pattern, options) {$/;"	F
finish	nvim/plugged/coc.nvim/build/index.js	/^function finish (self) {$/;"	F
mark	nvim/plugged/coc.nvim/build/index.js	/^function mark (self, p) {$/;"	F
makeAbs	nvim/plugged/coc.nvim/build/index.js	/^function makeAbs (self, f) {$/;"	F
isIgnored	nvim/plugged/coc.nvim/build/index.js	/^function isIgnored (self, path) {$/;"	F
childrenIgnored	nvim/plugged/coc.nvim/build/index.js	/^function childrenIgnored (self, path) {$/;"	F
etc	nvim/plugged/coc.nvim/build/index.js	/^var etc = '\/etc'$/;"	V
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (name, defaults, argv, parse) {$/;"	M
defaults	nvim/plugged/coc.nvim/build/index.js	/^  defaults = ($/;"	M
configs	nvim/plugged/coc.nvim/build/index.js	/^  var configs = [defaults]$/;"	A
configFiles	nvim/plugged/coc.nvim/build/index.js	/^  var configFiles = []$/;"	A
addConfigFile	nvim/plugged/coc.nvim/build/index.js	/^  function addConfigFile (file) {$/;"	F
args	nvim/plugged/coc.nvim/build/index.js	/^  var args = [].slice.call(arguments).filter(function (arg) { return arg != null })$/;"	A
obj	nvim/plugged/coc.nvim/build/index.js	/^  var obj = {}$/;"	O
for	nvim/plugged/coc.nvim/build/index.js	/^  for(var k in env) {$/;"	M
if	nvim/plugged/coc.nvim/build/index.js	/^    if(k.toLowerCase().indexOf(prefix.toLowerCase()) === 0) {$/;"	M
find	nvim/plugged/coc.nvim/build/index.js	/^  function find(start, rel) {$/;"	F
encode	nvim/plugged/coc.nvim/build/index.js	/^function encode (obj, opt) {$/;"	F
children	nvim/plugged/coc.nvim/build/index.js	/^  var children = []$/;"	A
out	nvim/plugged/coc.nvim/build/index.js	/^  var out = ''$/;"	V
section	nvim/plugged/coc.nvim/build/index.js	/^      section: opt,$/;"	P
whitespace	nvim/plugged/coc.nvim/build/index.js	/^      whitespace: false$/;"	P
section	nvim/plugged/coc.nvim/build/index.js	/^      section: section,$/;"	P
dotSplit	nvim/plugged/coc.nvim/build/index.js	/^function dotSplit (str) {$/;"	F
decode	nvim/plugged/coc.nvim/build/index.js	/^function decode (str) {$/;"	F
out	nvim/plugged/coc.nvim/build/index.js	/^  var out = {}$/;"	O
re	nvim/plugged/coc.nvim/build/index.js	/^  var re = \/^\\[([^\\]]*)\\]$|^([^=]+)(=(.*))?$\/i$/;"	V
isQuoted	nvim/plugged/coc.nvim/build/index.js	/^function isQuoted (val) {$/;"	F
safe	nvim/plugged/coc.nvim/build/index.js	/^function safe (val) {$/;"	F
unsafe	nvim/plugged/coc.nvim/build/index.js	/^function unsafe (val, doUnesc) {$/;"	F
val	nvim/plugged/coc.nvim/build/index.js	/^  val = (val || '').trim()$/;"	M
unesc	nvim/plugged/coc.nvim/build/index.js	/^    var unesc = ''$/;"	V
singleComment	nvim/plugged/coc.nvim/build/index.js	/^var singleComment = 1;$/;"	V
multiComment	nvim/plugged/coc.nvim/build/index.js	/^var multiComment = 2;$/;"	V
stripWithoutWhitespace	nvim/plugged/coc.nvim/build/index.js	/^function stripWithoutWhitespace() {$/;"	F
stripWithWhitespace	nvim/plugged/coc.nvim/build/index.js	/^function stripWithWhitespace(str, start, end) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (str, opts) {$/;"	M
currentChar	nvim/plugged/coc.nvim/build/index.js	/^	var currentChar;$/;"	V
nextChar	nvim/plugged/coc.nvim/build/index.js	/^	var nextChar;$/;"	V
offset	nvim/plugged/coc.nvim/build/index.js	/^	var offset = 0;$/;"	V
ret	nvim/plugged/coc.nvim/build/index.js	/^	var ret = '';$/;"	V
isSpecificValue	nvim/plugged/coc.nvim/build/index.js	/^function isSpecificValue(val) {$/;"	F
cloneSpecificValue	nvim/plugged/coc.nvim/build/index.js	/^function cloneSpecificValue(val) {$/;"	F
deepCloneArray	nvim/plugged/coc.nvim/build/index.js	/^function deepCloneArray(arr) {$/;"	F
clone	nvim/plugged/coc.nvim/build/index.js	/^	var clone = [];$/;"	A
safeGetProperty	nvim/plugged/coc.nvim/build/index.js	/^function safeGetProperty(object, property) {$/;"	F
val	nvim/plugged/coc.nvim/build/index.js	/^	var val, src, clone;$/;"	V
src	nvim/plugged/coc.nvim/build/index.js	/^	var val, src, clone;$/;"	V
clone	nvim/plugged/coc.nvim/build/index.js	/^	var val, src, clone;$/;"	V
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (args, opts) {$/;"	M
flags	nvim/plugged/coc.nvim/build/index.js	/^    var flags = { bools : {}, strings : {}, unknownFn: null };$/;"	O
aliases	nvim/plugged/coc.nvim/build/index.js	/^    var aliases = {};$/;"	O
argv	nvim/plugged/coc.nvim/build/index.js	/^    var argv = { _ : [] };$/;"	O
notFlags	nvim/plugged/coc.nvim/build/index.js	/^    var notFlags = [];$/;"	A
argDefined	nvim/plugged/coc.nvim/build/index.js	/^    function argDefined(key, arg) {$/;"	F
setArg	nvim/plugged/coc.nvim/build/index.js	/^    function setArg (key, val, arg) {$/;"	F
setKey	nvim/plugged/coc.nvim/build/index.js	/^    function setKey (obj, keys, value) {$/;"	F
aliasIsBoolean	nvim/plugged/coc.nvim/build/index.js	/^    function aliasIsBoolean(key) {$/;"	F
hasKey	nvim/plugged/coc.nvim/build/index.js	/^function hasKey (obj, keys) {$/;"	F
o	nvim/plugged/coc.nvim/build/index.js	/^        o = (o[key] || {});$/;"	M
isNumber	nvim/plugged/coc.nvim/build/index.js	/^function isNumber (x) {$/;"	F
download	nvim/plugged/coc.nvim/build/index.js	/^function download(url, options) {$/;"	F
headers	nvim/plugged/coc.nvim/build/index.js	/^        headers: {$/;"	P
req	nvim/plugged/coc.nvim/build/index.js	/^        const req = mod.request(opts, (res) => {$/;"	F
cur	nvim/plugged/coc.nvim/build/index.js	/^                let cur = 0;$/;"	V
SAFE_METHODS	nvim/plugged/coc.nvim/build/index.js	/^var SAFE_METHODS = { GET: true, HEAD: true, OPTIONS: true, TRACE: true };$/;"	O
RedirectableRequest	nvim/plugged/coc.nvim/build/index.js	/^function RedirectableRequest(options, responseCallback) {$/;"	F
_onNativeResponse	nvim/plugged/coc.nvim/build/index.js	/^  this._onNativeResponse = function (response) {$/;"	M
write	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.write = function (data, encoding, callback) {$/;"	M
end	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.end = function (data, encoding, callback) {$/;"	M
setHeader	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.setHeader = function (name, value) {$/;"	M
removeHeader	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.removeHeader = function (name) {$/;"	M
setTimeout	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype.setTimeout = function (msecs, callback) {$/;"	M
startTimer	nvim/plugged/coc.nvim/build/index.js	/^function startTimer(request, msecs) {$/;"	F
clearTimer	nvim/plugged/coc.nvim/build/index.js	/^function clearTimer() {$/;"	F
get	nvim/plugged/coc.nvim/build/index.js	/^    get: function () { return this._currentRequest[property]; },$/;"	M
_sanitizeOptions	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype._sanitizeOptions = function (options) {$/;"	M
headers	nvim/plugged/coc.nvim/build/index.js	/^    options.headers = {};$/;"	P
_performRequest	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype._performRequest = function () {$/;"	M
i	nvim/plugged/coc.nvim/build/index.js	/^    var i = 0;$/;"	V
writeNext	nvim/plugged/coc.nvim/build/index.js	/^    (function writeNext(error) {$/;"	F
_processResponse	nvim/plugged/coc.nvim/build/index.js	/^RedirectableRequest.prototype._processResponse = function (response) {$/;"	M
statusCode	nvim/plugged/coc.nvim/build/index.js	/^      statusCode: statusCode,$/;"	P
header	nvim/plugged/coc.nvim/build/index.js	/^    var header;$/;"	V
wrap	nvim/plugged/coc.nvim/build/index.js	/^function wrap(protocols) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^  var exports = {$/;"	O
maxRedirects	nvim/plugged/coc.nvim/build/index.js	/^    maxRedirects: 21,$/;"	P
nativeProtocols	nvim/plugged/coc.nvim/build/index.js	/^  var nativeProtocols = {};$/;"	O
request	nvim/plugged/coc.nvim/build/index.js	/^    wrappedProtocol.request = function (input, options, callback) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^    wrappedProtocol.get = function (input, options, callback) {$/;"	M
noop	nvim/plugged/coc.nvim/build/index.js	/^function noop() { \/* empty *\/ }$/;"	F
urlToOptions	nvim/plugged/coc.nvim/build/index.js	/^function urlToOptions(urlObject) {$/;"	F
options	nvim/plugged/coc.nvim/build/index.js	/^  var options = {$/;"	O
_typeof	nvim/plugged/coc.nvim/build/index.js	/^function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }$/;"	F
useColors	nvim/plugged/coc.nvim/build/index.js	/^function useColors() {$/;"	F
formatArgs	nvim/plugged/coc.nvim/build/index.js	/^function formatArgs(args) {$/;"	F
c	nvim/plugged/coc.nvim/build/index.js	/^  var c = 'color: ' + this.color;$/;"	V
index	nvim/plugged/coc.nvim/build/index.js	/^  var index = 0;$/;"	V
lastC	nvim/plugged/coc.nvim/build/index.js	/^  var lastC = 0;$/;"	V
log	nvim/plugged/coc.nvim/build/index.js	/^function log() {$/;"	F
_console	nvim/plugged/coc.nvim/build/index.js	/^  var _console;$/;"	V
save	nvim/plugged/coc.nvim/build/index.js	/^function save(namespaces) {$/;"	F
XXX	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ XXX (@Qix-) should we be logging these?$/;"	T
load	nvim/plugged/coc.nvim/build/index.js	/^function load() {$/;"	F
r	nvim/plugged/coc.nvim/build/index.js	/^  var r;$/;"	V
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX (@Qix-) should we be logging these?$/;"	T
localstorage	nvim/plugged/coc.nvim/build/index.js	/^function localstorage() {$/;"	F
XXX	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ XXX (@Qix-) should we be logging these?$/;"	T
j	nvim/plugged/coc.nvim/build/index.js	/^formatters.j = function (v) {$/;"	M
setup	nvim/plugged/coc.nvim/build/index.js	/^function setup(env) {$/;"	F
formatters	nvim/plugged/coc.nvim/build/index.js	/^  createDebug.formatters = {};$/;"	P
selectColor	nvim/plugged/coc.nvim/build/index.js	/^  function selectColor(namespace) {$/;"	F
hash	nvim/plugged/coc.nvim/build/index.js	/^    var hash = 0;$/;"	V
hash	nvim/plugged/coc.nvim/build/index.js	/^      hash = (hash << 5) - hash + namespace.charCodeAt(i);$/;"	M
createDebug	nvim/plugged/coc.nvim/build/index.js	/^  function createDebug(namespace) {$/;"	F
prevTime	nvim/plugged/coc.nvim/build/index.js	/^    var prevTime;$/;"	V
debug	nvim/plugged/coc.nvim/build/index.js	/^    function debug() {$/;"	F
index	nvim/plugged/coc.nvim/build/index.js	/^      var index = 0;$/;"	V
destroy	nvim/plugged/coc.nvim/build/index.js	/^  function destroy() {$/;"	F
extend	nvim/plugged/coc.nvim/build/index.js	/^  function extend(namespace, delimiter) {$/;"	F
enable	nvim/plugged/coc.nvim/build/index.js	/^  function enable(namespaces) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^    var i;$/;"	V
disable	nvim/plugged/coc.nvim/build/index.js	/^  function disable() {$/;"	F
enabled	nvim/plugged/coc.nvim/build/index.js	/^  function enabled(name) {$/;"	F
i	nvim/plugged/coc.nvim/build/index.js	/^    var i;$/;"	V
len	nvim/plugged/coc.nvim/build/index.js	/^    var len;$/;"	V
coerce	nvim/plugged/coc.nvim/build/index.js	/^  function coerce(val) {$/;"	F
useColors	nvim/plugged/coc.nvim/build/index.js	/^function useColors() {$/;"	F
formatArgs	nvim/plugged/coc.nvim/build/index.js	/^function formatArgs(args) {$/;"	F
colorCode	nvim/plugged/coc.nvim/build/index.js	/^    var colorCode = "\\x1B[3" + (c < 8 ? c : '8;5;' + c);$/;"	V
prefix	nvim/plugged/coc.nvim/build/index.js	/^    var prefix = "  ".concat(colorCode, ";1m").concat(name, " \\x1B[0m");$/;"	V
getDate	nvim/plugged/coc.nvim/build/index.js	/^function getDate() {$/;"	F
log	nvim/plugged/coc.nvim/build/index.js	/^function log() {$/;"	F
save	nvim/plugged/coc.nvim/build/index.js	/^function save(namespaces) {$/;"	F
load	nvim/plugged/coc.nvim/build/index.js	/^function load() {$/;"	F
init	nvim/plugged/coc.nvim/build/index.js	/^function init(debug) {$/;"	F
inspectOpts	nvim/plugged/coc.nvim/build/index.js	/^  debug.inspectOpts = {};$/;"	P
o	nvim/plugged/coc.nvim/build/index.js	/^formatters.o = function (v) {$/;"	M
O	nvim/plugged/coc.nvim/build/index.js	/^formatters.O = function (v) {$/;"	M
createFileSync	nvim/plugged/coc.nvim/build/index.js	/^const createFileSync = (opt, files) => {$/;"	F
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Pack.Sync(opt)$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new fsm.WriteStreamSync(opt.file, {$/;"	V
createFile	nvim/plugged/coc.nvim/build/index.js	/^const createFile = (opt, files, cb) => {$/;"	F
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Pack(opt)$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new fsm.WriteStream(opt.file, {$/;"	V
promise	nvim/plugged/coc.nvim/build/index.js	/^  const promise = new Promise((res, rej) => {$/;"	F
promise	nvim/plugged/coc.nvim/build/index.js	/^  const promise = new Promise((res, rej) => {$/;"	V
addFilesSync	nvim/plugged/coc.nvim/build/index.js	/^const addFilesSync = (p, files) => {$/;"	F
sync	nvim/plugged/coc.nvim/build/index.js	/^        sync: true,$/;"	P
noResume	nvim/plugged/coc.nvim/build/index.js	/^        noResume: true,$/;"	P
addFilesAsync	nvim/plugged/coc.nvim/build/index.js	/^const addFilesAsync = (p, files) => {$/;"	F
noResume	nvim/plugged/coc.nvim/build/index.js	/^        noResume: true,$/;"	P
createSync	nvim/plugged/coc.nvim/build/index.js	/^const createSync = (opt, files) => {$/;"	F
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Pack.Sync(opt)$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^const create = (opt, files) => {$/;"	F
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Pack(opt)$/;"	V
argmap	nvim/plugged/coc.nvim/build/index.js	/^const argmap = new Map([$/;"	V
PackJob	nvim/plugged/coc.nvim/build/index.js	/^class PackJob {$/;"	C
prefix	nvim/plugged/coc.nvim/build/index.js	/^    this.prefix = (opt.prefix || '').replace(\/(\\\\|\\\/)+$\/, '')$/;"	M
gzip	nvim/plugged/coc.nvim/build/index.js	/^        opt.gzip = {}$/;"	P
job	nvim/plugged/coc.nvim/build/index.js	/^      const job = new PackJob(p.path, absolute, false)$/;"	V
onwarn	nvim/plugged/coc.nvim/build/index.js	/^      onwarn: (msg, data) => {$/;"	M
PackSync	nvim/plugged/coc.nvim/build/index.js	/^class PackSync extends Pack {$/;"	C
copyProps	nvim/plugged/coc.nvim/build/index.js	/^function copyProps (src, dst) {$/;"	F
SafeBuffer	nvim/plugged/coc.nvim/build/index.js	/^function SafeBuffer (arg, encodingOrOffset, length) {$/;"	F
from	nvim/plugged/coc.nvim/build/index.js	/^SafeBuffer.from = function (arg, encodingOrOffset, length) {$/;"	M
alloc	nvim/plugged/coc.nvim/build/index.js	/^SafeBuffer.alloc = function (size, fill, encoding) {$/;"	M
allocUnsafe	nvim/plugged/coc.nvim/build/index.js	/^SafeBuffer.allocUnsafe = function (size) {$/;"	M
allocUnsafeSlow	nvim/plugged/coc.nvim/build/index.js	/^SafeBuffer.allocUnsafeSlow = function (size) {$/;"	M
p	nvim/plugged/coc.nvim/build/index.js	/^    const p = { dest: dest, opts: opts, ondrain: _ => this[RESUME]() }$/;"	O
args	nvim/plugged/coc.nvim/build/index.js	/^    const args = new Array(arguments.length)$/;"	V
buf	nvim/plugged/coc.nvim/build/index.js	/^      const buf = []$/;"	A
next	nvim/plugged/coc.nvim/build/index.js	/^    const next = () => {$/;"	F
onerr	nvim/plugged/coc.nvim/build/index.js	/^      const onerr = er => {$/;"	F
ondata	nvim/plugged/coc.nvim/build/index.js	/^      const ondata = value => {$/;"	F
onend	nvim/plugged/coc.nvim/build/index.js	/^      const onend = () => {$/;"	F
next	nvim/plugged/coc.nvim/build/index.js	/^    const next = () => {$/;"	F
Yallist	nvim/plugged/coc.nvim/build/index.js	/^function Yallist (list) {$/;"	F
removeNode	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.removeNode = function (node) {$/;"	M
unshiftNode	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.unshiftNode = function (node) {$/;"	M
pushNode	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.pushNode = function (node) {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.push = function () {$/;"	M
unshift	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.unshift = function () {$/;"	M
pop	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.pop = function () {$/;"	M
shift	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.shift = function () {$/;"	M
forEach	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.forEach = function (fn, thisp) {$/;"	M
forEachReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.forEachReverse = function (fn, thisp) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.get = function (n) {$/;"	M
getReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.getReverse = function (n) {$/;"	M
map	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.map = function (fn, thisp) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^  var res = new Yallist()$/;"	V
mapReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.mapReverse = function (fn, thisp) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^  var res = new Yallist()$/;"	V
reduce	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.reduce = function (fn, initial) {$/;"	M
reduceReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.reduceReverse = function (fn, initial) {$/;"	M
toArray	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.toArray = function () {$/;"	M
arr	nvim/plugged/coc.nvim/build/index.js	/^  var arr = new Array(this.length)$/;"	V
toArrayReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.toArrayReverse = function () {$/;"	M
arr	nvim/plugged/coc.nvim/build/index.js	/^  var arr = new Array(this.length)$/;"	V
slice	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.slice = function (from, to) {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^  var ret = new Yallist()$/;"	V
sliceReverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.sliceReverse = function (from, to) {$/;"	M
ret	nvim/plugged/coc.nvim/build/index.js	/^  var ret = new Yallist()$/;"	V
reverse	nvim/plugged/coc.nvim/build/index.js	/^Yallist.prototype.reverse = function () {$/;"	M
push	nvim/plugged/coc.nvim/build/index.js	/^function push (self, item) {$/;"	F
unshift	nvim/plugged/coc.nvim/build/index.js	/^function unshift (self, item) {$/;"	F
Node	nvim/plugged/coc.nvim/build/index.js	/^function Node (value, prev, next, list) {$/;"	F
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = function (Yallist) {$/;"	M
ZlibError	nvim/plugged/coc.nvim/build/index.js	/^class ZlibError extends Error {$/;"	C
codes	nvim/plugged/coc.nvim/build/index.js	/^const codes = new Map([$/;"	V
validFlushFlags	nvim/plugged/coc.nvim/build/index.js	/^const validFlushFlags = new Set([$/;"	V
strategies	nvim/plugged/coc.nvim/build/index.js	/^const strategies = new Set([$/;"	V
Zlib	nvim/plugged/coc.nvim/build/index.js	/^class Zlib extends MiniPass {$/;"	C
error	nvim/plugged/coc.nvim/build/index.js	/^      const error = new ZlibError(err.message, err.errno)$/;"	V
close	nvim/plugged/coc.nvim/build/index.js	/^    nativeHandle.close = () => {}$/;"	M
concat	nvim/plugged/coc.nvim/build/index.js	/^    Buffer.concat = (args) => args$/;"	M
Deflate	nvim/plugged/coc.nvim/build/index.js	/^class Deflate extends Zlib {$/;"	C
Inflate	nvim/plugged/coc.nvim/build/index.js	/^class Inflate extends Zlib {$/;"	C
Gzip	nvim/plugged/coc.nvim/build/index.js	/^class Gzip extends Zlib {$/;"	C
Gunzip	nvim/plugged/coc.nvim/build/index.js	/^class Gunzip extends Zlib {$/;"	C
DeflateRaw	nvim/plugged/coc.nvim/build/index.js	/^class DeflateRaw extends Zlib {$/;"	C
InflateRaw	nvim/plugged/coc.nvim/build/index.js	/^class InflateRaw extends Zlib {$/;"	C
Unzip	nvim/plugged/coc.nvim/build/index.js	/^class Unzip extends Zlib {$/;"	C
Z_NO_FLUSH	nvim/plugged/coc.nvim/build/index.js	/^  Z_NO_FLUSH: 0,$/;"	P
Z_PARTIAL_FLUSH	nvim/plugged/coc.nvim/build/index.js	/^  Z_PARTIAL_FLUSH: 1,$/;"	P
Z_SYNC_FLUSH	nvim/plugged/coc.nvim/build/index.js	/^  Z_SYNC_FLUSH: 2,$/;"	P
Z_FULL_FLUSH	nvim/plugged/coc.nvim/build/index.js	/^  Z_FULL_FLUSH: 3,$/;"	P
Z_FINISH	nvim/plugged/coc.nvim/build/index.js	/^  Z_FINISH: 4,$/;"	P
Z_BLOCK	nvim/plugged/coc.nvim/build/index.js	/^  Z_BLOCK: 5,$/;"	P
Z_OK	nvim/plugged/coc.nvim/build/index.js	/^  Z_OK: 0,$/;"	P
Z_STREAM_END	nvim/plugged/coc.nvim/build/index.js	/^  Z_STREAM_END: 1,$/;"	P
Z_NEED_DICT	nvim/plugged/coc.nvim/build/index.js	/^  Z_NEED_DICT: 2,$/;"	P
Z_NO_COMPRESSION	nvim/plugged/coc.nvim/build/index.js	/^  Z_NO_COMPRESSION: 0,$/;"	P
Z_BEST_SPEED	nvim/plugged/coc.nvim/build/index.js	/^  Z_BEST_SPEED: 1,$/;"	P
Z_BEST_COMPRESSION	nvim/plugged/coc.nvim/build/index.js	/^  Z_BEST_COMPRESSION: 9,$/;"	P
Z_FILTERED	nvim/plugged/coc.nvim/build/index.js	/^  Z_FILTERED: 1,$/;"	P
Z_HUFFMAN_ONLY	nvim/plugged/coc.nvim/build/index.js	/^  Z_HUFFMAN_ONLY: 2,$/;"	P
Z_RLE	nvim/plugged/coc.nvim/build/index.js	/^  Z_RLE: 3,$/;"	P
Z_FIXED	nvim/plugged/coc.nvim/build/index.js	/^  Z_FIXED: 4,$/;"	P
Z_DEFAULT_STRATEGY	nvim/plugged/coc.nvim/build/index.js	/^  Z_DEFAULT_STRATEGY: 0,$/;"	P
ZLIB_VERNUM	nvim/plugged/coc.nvim/build/index.js	/^  ZLIB_VERNUM: 4736,$/;"	P
DEFLATE	nvim/plugged/coc.nvim/build/index.js	/^  DEFLATE: 1,$/;"	P
INFLATE	nvim/plugged/coc.nvim/build/index.js	/^  INFLATE: 2,$/;"	P
GZIP	nvim/plugged/coc.nvim/build/index.js	/^  GZIP: 3,$/;"	P
GUNZIP	nvim/plugged/coc.nvim/build/index.js	/^  GUNZIP: 4,$/;"	P
DEFLATERAW	nvim/plugged/coc.nvim/build/index.js	/^  DEFLATERAW: 5,$/;"	P
INFLATERAW	nvim/plugged/coc.nvim/build/index.js	/^  INFLATERAW: 6,$/;"	P
UNZIP	nvim/plugged/coc.nvim/build/index.js	/^  UNZIP: 7,$/;"	P
Z_MIN_WINDOWBITS	nvim/plugged/coc.nvim/build/index.js	/^  Z_MIN_WINDOWBITS: 8,$/;"	P
Z_MAX_WINDOWBITS	nvim/plugged/coc.nvim/build/index.js	/^  Z_MAX_WINDOWBITS: 15,$/;"	P
Z_DEFAULT_WINDOWBITS	nvim/plugged/coc.nvim/build/index.js	/^  Z_DEFAULT_WINDOWBITS: 15,$/;"	P
Z_MIN_CHUNK	nvim/plugged/coc.nvim/build/index.js	/^  Z_MIN_CHUNK: 64,$/;"	P
Z_MAX_CHUNK	nvim/plugged/coc.nvim/build/index.js	/^  Z_MAX_CHUNK: Infinity,$/;"	P
Z_DEFAULT_CHUNK	nvim/plugged/coc.nvim/build/index.js	/^  Z_DEFAULT_CHUNK: 16384,$/;"	P
Z_MIN_MEMLEVEL	nvim/plugged/coc.nvim/build/index.js	/^  Z_MIN_MEMLEVEL: 1,$/;"	P
Z_MAX_MEMLEVEL	nvim/plugged/coc.nvim/build/index.js	/^  Z_MAX_MEMLEVEL: 9,$/;"	P
Z_DEFAULT_MEMLEVEL	nvim/plugged/coc.nvim/build/index.js	/^  Z_DEFAULT_MEMLEVEL: 8,$/;"	P
Z_MAX_LEVEL	nvim/plugged/coc.nvim/build/index.js	/^  Z_MAX_LEVEL: 9,$/;"	P
maxReadSize	nvim/plugged/coc.nvim/build/index.js	/^const maxReadSize = 16 * 1024 * 1024$/;"	V
blockLen	nvim/plugged/coc.nvim/build/index.js	/^    const blockLen = 512 * Math.ceil(this.stat.size \/ 512)$/;"	V
er	nvim/plugged/coc.nvim/build/index.js	/^      const er = new Error('encountered unexpected EOF')$/;"	V
er	nvim/plugged/coc.nvim/build/index.js	/^      const er = new Error('did not encounter expected EOF')$/;"	V
WriteEntrySync	nvim/plugged/coc.nvim/build/index.js	/^class WriteEntrySync extends WriteEntry {$/;"	C
getType	nvim/plugged/coc.nvim/build/index.js	/^const getType = stat =>$/;"	F
Pax	nvim/plugged/coc.nvim/build/index.js	/^class Pax {$/;"	C
bufLen	nvim/plugged/coc.nvim/build/index.js	/^    const bufLen = 512 * Math.ceil(1 + bodyLen \/ 512)$/;"	V
XXX	nvim/plugged/coc.nvim/build/index.js	/^      \/\/ XXX split the path$/;"	T
path	nvim/plugged/coc.nvim/build/index.js	/^      path: ('PaxHeader\/' + path.basename(this.path)).slice(0, 99),$/;"	M
size	nvim/plugged/coc.nvim/build/index.js	/^      size: bodyLen,$/;"	P
devmaj	nvim/plugged/coc.nvim/build/index.js	/^      devmaj: 0,$/;"	P
devmin	nvim/plugged/coc.nvim/build/index.js	/^      devmin: 0,$/;"	P
s	nvim/plugged/coc.nvim/build/index.js	/^    const s = ' ' +$/;"	V
parse	nvim/plugged/coc.nvim/build/index.js	/^Pax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g)$/;"	M
merge	nvim/plugged/coc.nvim/build/index.js	/^const merge = (a, b) =>$/;"	F
parseKV	nvim/plugged/coc.nvim/build/index.js	/^const parseKV = string =>$/;"	F
parseKVLine	nvim/plugged/coc.nvim/build/index.js	/^const parseKVLine = (set, line) => {$/;"	F
XXX	nvim/plugged/coc.nvim/build/index.js	/^  \/\/ XXX Values with \\n in them will fail this.$/;"	T
Header	nvim/plugged/coc.nvim/build/index.js	/^class Header {$/;"	C
sum	nvim/plugged/coc.nvim/build/index.js	/^    let sum = 8 * 0x20$/;"	V
sum	nvim/plugged/coc.nvim/build/index.js	/^    let sum = 8 * 0x20$/;"	V
splitPrefix	nvim/plugged/coc.nvim/build/index.js	/^const splitPrefix = (p, prefixSize) => {$/;"	F
pathSize	nvim/plugged/coc.nvim/build/index.js	/^  const pathSize = 100$/;"	V
prefix	nvim/plugged/coc.nvim/build/index.js	/^  let prefix = ''$/;"	V
decString	nvim/plugged/coc.nvim/build/index.js	/^const decString = (buf, off, size) =>$/;"	F
decDate	nvim/plugged/coc.nvim/build/index.js	/^const decDate = (buf, off, size) =>$/;"	F
numToDate	nvim/plugged/coc.nvim/build/index.js	/^const numToDate = num => num === null ? null : new Date(num * 1000)$/;"	F
decNumber	nvim/plugged/coc.nvim/build/index.js	/^const decNumber = (buf, off, size) =>$/;"	F
nanNull	nvim/plugged/coc.nvim/build/index.js	/^const nanNull = value => isNaN(value) ? null : value$/;"	F
decSmallNumber	nvim/plugged/coc.nvim/build/index.js	/^const decSmallNumber = (buf, off, size) =>$/;"	F
MAXNUM	nvim/plugged/coc.nvim/build/index.js	/^const MAXNUM = {$/;"	O
12	nvim/plugged/coc.nvim/build/index.js	/^  12: 0o77777777777,$/;"	P
8	nvim/plugged/coc.nvim/build/index.js	/^  8 : 0o7777777$/;"	P
encNumber	nvim/plugged/coc.nvim/build/index.js	/^const encNumber = (buf, off, size, number) =>$/;"	F
encSmallNumber	nvim/plugged/coc.nvim/build/index.js	/^const encSmallNumber = (buf, off, size, number) =>$/;"	F
octalString	nvim/plugged/coc.nvim/build/index.js	/^const octalString = (number, size) =>$/;"	F
padOctal	nvim/plugged/coc.nvim/build/index.js	/^const padOctal = (string, size) =>$/;"	F
encDate	nvim/plugged/coc.nvim/build/index.js	/^const encDate = (buf, off, size, date) =>$/;"	F
NULLS	nvim/plugged/coc.nvim/build/index.js	/^const NULLS = new Array(156).join('\\0')$/;"	V
encString	nvim/plugged/coc.nvim/build/index.js	/^const encString = (buf, off, size, string) =>$/;"	F
encodePositive	nvim/plugged/coc.nvim/build/index.js	/^const encodePositive = (num, buf) => {$/;"	F
encodeNegative	nvim/plugged/coc.nvim/build/index.js	/^const encodeNegative = (num, buf) => {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^  var value;$/;"	V
twos	nvim/plugged/coc.nvim/build/index.js	/^const twos = (buf) => {$/;"	F
sum	nvim/plugged/coc.nvim/build/index.js	/^  var sum = 0$/;"	V
pos	nvim/plugged/coc.nvim/build/index.js	/^const pos = (buf) => {$/;"	F
sum	nvim/plugged/coc.nvim/build/index.js	/^  var sum = 0$/;"	V
onesComp	nvim/plugged/coc.nvim/build/index.js	/^const onesComp = byte => (0xff ^ byte) & 0xff$/;"	F
twosComp	nvim/plugged/coc.nvim/build/index.js	/^const twosComp = byte => ((0xff ^ byte) + 1) & 0xff$/;"	F
er	nvim/plugged/coc.nvim/build/index.js	/^      const er = new Error(msg)$/;"	V
raw	nvim/plugged/coc.nvim/build/index.js	/^const raw = [$/;"	A
win	nvim/plugged/coc.nvim/build/index.js	/^const win = raw.map(char =>$/;"	F
toWin	nvim/plugged/coc.nvim/build/index.js	/^const toWin = new Map(raw.map((char, i) => [char, win[i]]))$/;"	F
toWin	nvim/plugged/coc.nvim/build/index.js	/^const toWin = new Map(raw.map((char, i) => [char, win[i]]))$/;"	V
toRaw	nvim/plugged/coc.nvim/build/index.js	/^const toRaw = new Map(win.map((char, i) => [char, raw[i]]))$/;"	F
toRaw	nvim/plugged/coc.nvim/build/index.js	/^const toRaw = new Map(win.map((char, i) => [char, raw[i]]))$/;"	V
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = {$/;"	P
exports	nvim/plugged/coc.nvim/build/index.js	/^module.exports = (mode, isDir) => {$/;"	M
ReadStream	nvim/plugged/coc.nvim/build/index.js	/^class ReadStream extends MiniPass {$/;"	C
ReadStreamSync	nvim/plugged/coc.nvim/build/index.js	/^class ReadStreamSync extends ReadStream {$/;"	C
WriteStream	nvim/plugged/coc.nvim/build/index.js	/^class WriteStream extends EE {$/;"	C
WriteStreamSync	nvim/plugged/coc.nvim/build/index.js	/^class WriteStreamSync extends WriteStream {$/;"	C
writev	nvim/plugged/coc.nvim/build/index.js	/^const writev = (fd, iovec, pos, cb) => {$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^  const done = (er, bw) => cb(er, bw, iovec)$/;"	F
req	nvim/plugged/coc.nvim/build/index.js	/^  const req = new FSReqWrap()$/;"	V
XXX	nvim/plugged/coc.nvim/build/index.js	/^\/\/ XXX: This shares a lot in common with extract.js$/;"	T
onentryFunction	nvim/plugged/coc.nvim/build/index.js	/^const onentryFunction = opt => {$/;"	F
filesFilter	nvim/plugged/coc.nvim/build/index.js	/^const filesFilter = (opt, files) => {$/;"	F
map	nvim/plugged/coc.nvim/build/index.js	/^  const map = new Map(files.map(f => [f.replace(\/\\\/+$\/, ''), true]))$/;"	F
map	nvim/plugged/coc.nvim/build/index.js	/^  const map = new Map(files.map(f => [f.replace(\/\\\/+$\/, ''), true]))$/;"	V
mapHas	nvim/plugged/coc.nvim/build/index.js	/^  const mapHas = (file, r) => {$/;"	F
listFileSync	nvim/plugged/coc.nvim/build/index.js	/^const listFileSync = opt => {$/;"	F
pos	nvim/plugged/coc.nvim/build/index.js	/^      let pos = 0$/;"	V
listFile	nvim/plugged/coc.nvim/build/index.js	/^const listFile = (opt, cb) => {$/;"	F
parse	nvim/plugged/coc.nvim/build/index.js	/^  const parse = new Parser(opt)$/;"	V
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Promise((resolve, reject) => {$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^        const stream = new fsm.ReadStream(file, {$/;"	V
readSize	nvim/plugged/coc.nvim/build/index.js	/^          readSize: readSize,$/;"	P
list	nvim/plugged/coc.nvim/build/index.js	/^const list = opt => new Parser(opt)$/;"	F
maxMetaEntrySize	nvim/plugged/coc.nvim/build/index.js	/^const maxMetaEntrySize = 1024 * 1024$/;"	V
noop	nvim/plugged/coc.nvim/build/index.js	/^const noop = _ => true$/;"	F
header	nvim/plugged/coc.nvim/build/index.js	/^    const header = new Header(chunk, position, this[EX], this[GEX])$/;"	V
position	nvim/plugged/coc.nvim/build/index.js	/^    let position = 0$/;"	V
replaceSync	nvim/plugged/coc.nvim/build/index.js	/^const replaceSync = (opt, files) => {$/;"	F
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Pack.Sync(opt)$/;"	V
h	nvim/plugged/coc.nvim/build/index.js	/^      let h = new Header(headBuf)$/;"	V
entryBlockSize	nvim/plugged/coc.nvim/build/index.js	/^      let entryBlockSize = 512 * Math.ceil(h.size \/ 512)$/;"	V
streamSync	nvim/plugged/coc.nvim/build/index.js	/^const streamSync = (opt, p, position, fd, files) => {$/;"	F
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new fsm.WriteStreamSync(opt.file, {$/;"	V
fd	nvim/plugged/coc.nvim/build/index.js	/^    fd: fd,$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^    start: position$/;"	P
replace	nvim/plugged/coc.nvim/build/index.js	/^const replace = (opt, files, cb) => {$/;"	F
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Pack(opt)$/;"	V
getPos	nvim/plugged/coc.nvim/build/index.js	/^  const getPos = (fd, size, cb_) => {$/;"	F
cb	nvim/plugged/coc.nvim/build/index.js	/^    const cb = (er, pos) => {$/;"	F
position	nvim/plugged/coc.nvim/build/index.js	/^    let position = 0$/;"	V
bufPos	nvim/plugged/coc.nvim/build/index.js	/^    let bufPos = 0$/;"	V
onread	nvim/plugged/coc.nvim/build/index.js	/^    const onread = (er, bytes) => {$/;"	F
h	nvim/plugged/coc.nvim/build/index.js	/^      const h = new Header(headBuf)$/;"	V
entryBlockSize	nvim/plugged/coc.nvim/build/index.js	/^      const entryBlockSize = 512 * Math.ceil(h.size \/ 512)$/;"	V
promise	nvim/plugged/coc.nvim/build/index.js	/^  const promise = new Promise((resolve, reject) => {$/;"	F
promise	nvim/plugged/coc.nvim/build/index.js	/^  const promise = new Promise((resolve, reject) => {$/;"	V
flag	nvim/plugged/coc.nvim/build/index.js	/^    let flag = 'r+'$/;"	V
onopen	nvim/plugged/coc.nvim/build/index.js	/^    const onopen = (er, fd) => {$/;"	F
stream	nvim/plugged/coc.nvim/build/index.js	/^          const stream = new fsm.WriteStream(opt.file, {$/;"	V
fd	nvim/plugged/coc.nvim/build/index.js	/^            fd: fd,$/;"	P
start	nvim/plugged/coc.nvim/build/index.js	/^            start: position$/;"	P
addFilesSync	nvim/plugged/coc.nvim/build/index.js	/^const addFilesSync = (p, files) => {$/;"	F
sync	nvim/plugged/coc.nvim/build/index.js	/^        sync: true,$/;"	P
noResume	nvim/plugged/coc.nvim/build/index.js	/^        noResume: true,$/;"	P
addFilesAsync	nvim/plugged/coc.nvim/build/index.js	/^const addFilesAsync = (p, files) => {$/;"	F
noResume	nvim/plugged/coc.nvim/build/index.js	/^        noResume: true,$/;"	P
mtimeFilter	nvim/plugged/coc.nvim/build/index.js	/^const mtimeFilter = opt => {$/;"	F
filesFilter	nvim/plugged/coc.nvim/build/index.js	/^const filesFilter = (opt, files) => {$/;"	F
map	nvim/plugged/coc.nvim/build/index.js	/^  const map = new Map(files.map(f => [f.replace(\/\\\/+$\/, ''), true]))$/;"	F
map	nvim/plugged/coc.nvim/build/index.js	/^  const map = new Map(files.map(f => [f.replace(\/\\\/+$\/, ''), true]))$/;"	V
mapHas	nvim/plugged/coc.nvim/build/index.js	/^  const mapHas = (file, r) => {$/;"	F
extractFileSync	nvim/plugged/coc.nvim/build/index.js	/^const extractFileSync = opt => {$/;"	F
u	nvim/plugged/coc.nvim/build/index.js	/^  const u = new Unpack.Sync(opt)$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^  const stream = new fsm.ReadStreamSync(file, {$/;"	V
readSize	nvim/plugged/coc.nvim/build/index.js	/^    readSize: readSize,$/;"	P
extractFile	nvim/plugged/coc.nvim/build/index.js	/^const extractFile = (opt, cb) => {$/;"	F
u	nvim/plugged/coc.nvim/build/index.js	/^  const u = new Unpack(opt)$/;"	V
p	nvim/plugged/coc.nvim/build/index.js	/^  const p = new Promise((resolve, reject) => {$/;"	V
stream	nvim/plugged/coc.nvim/build/index.js	/^        const stream = new fsm.ReadStream(file, {$/;"	V
readSize	nvim/plugged/coc.nvim/build/index.js	/^          readSize: readSize,$/;"	P
extractSync	nvim/plugged/coc.nvim/build/index.js	/^const extractSync = opt => {$/;"	F
extract	nvim/plugged/coc.nvim/build/index.js	/^const extract = opt => {$/;"	F
unlinkFile	nvim/plugged/coc.nvim/build/index.js	/^const unlinkFile = (path, cb) => {$/;"	F
unlinkFileSync	nvim/plugged/coc.nvim/build/index.js	/^const unlinkFileSync = path => {$/;"	F
uint32	nvim/plugged/coc.nvim/build/index.js	/^const uint32 = (a, b, c) =>$/;"	F
Unpack	nvim/plugged/coc.nvim/build/index.js	/^class Unpack extends Parser {$/;"	C
processUid	nvim/plugged/coc.nvim/build/index.js	/^    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ?$/;"	M
processGid	nvim/plugged/coc.nvim/build/index.js	/^    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ?$/;"	M
mode	nvim/plugged/coc.nvim/build/index.js	/^      mode: mode$/;"	P
stream	nvim/plugged/coc.nvim/build/index.js	/^    const stream = new fsm.WriteStream(entry.absolute, {$/;"	V
mode	nvim/plugged/coc.nvim/build/index.js	/^      mode: mode,$/;"	P
autoClose	nvim/plugged/coc.nvim/build/index.js	/^      autoClose: false$/;"	P
actions	nvim/plugged/coc.nvim/build/index.js	/^    let actions = 1$/;"	V
done	nvim/plugged/coc.nvim/build/index.js	/^    const done = er => {$/;"	F
actions	nvim/plugged/coc.nvim/build/index.js	/^      let actions = 1$/;"	V
done	nvim/plugged/coc.nvim/build/index.js	/^      const done = _ => {$/;"	F
XXX	nvim/plugged/coc.nvim/build/index.js	/^    \/\/ XXX: get the type ('file' or 'dir') for windows$/;"	T
UnpackSync	nvim/plugged/coc.nvim/build/index.js	/^class UnpackSync extends Unpack {$/;"	C
oner	nvim/plugged/coc.nvim/build/index.js	/^    const oner = er => {$/;"	F
mode	nvim/plugged/coc.nvim/build/index.js	/^        mode: mode$/;"	P
TODO	nvim/plugged/coc.nvim/build/index.js	/^\/\/ TODO: This should probably be a class, not functionally$/;"	T
SymlinkError	nvim/plugged/coc.nvim/build/index.js	/^class SymlinkError extends Error {$/;"	C
CwdError	nvim/plugged/coc.nvim/build/index.js	/^class CwdError extends Error {$/;"	C
done	nvim/plugged/coc.nvim/build/index.js	/^  const done = (er, created) => {$/;"	F
mkdir_	nvim/plugged/coc.nvim/build/index.js	/^const mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {$/;"	F
onmkdir	nvim/plugged/coc.nvim/build/index.js	/^const onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => er => {$/;"	F
done	nvim/plugged/coc.nvim/build/index.js	/^  const done = (created) => {$/;"	F
code	nvim/plugged/coc.nvim/build/index.js	/^    let code = 'ENOTDIR'$/;"	V
readdir	nvim/plugged/coc.nvim/build/index.js	/^let readdir = (path, options, cb) => fs.readdir(path, options, cb)$/;"	F
readdirSync	nvim/plugged/coc.nvim/build/index.js	/^let readdirSync = (path, options) => fs.readdirSync(path, options)$/;"	F
readdir	nvim/plugged/coc.nvim/build/index.js	/^  readdir = (path, options, cb) => fs.readdir(path, cb)$/;"	M
chownrKid	nvim/plugged/coc.nvim/build/index.js	/^const chownrKid = (p, child, uid, gid, cb) => {$/;"	F
chownr	nvim/plugged/coc.nvim/build/index.js	/^const chownr = (p, uid, gid, cb) => {$/;"	F
then	nvim/plugged/coc.nvim/build/index.js	/^    const then = er => {$/;"	F
chownrKidSync	nvim/plugged/coc.nvim/build/index.js	/^const chownrKidSync = (p, child, uid, gid) => {$/;"	F
chownrSync	nvim/plugged/coc.nvim/build/index.js	/^const chownrSync = (p, uid, gid) => {$/;"	F
getAgent	nvim/plugged/coc.nvim/build/index.js	/^function getAgent(endpoint) {$/;"	F
proxy	nvim/plugged/coc.nvim/build/index.js	/^                proxy: {$/;"	P
headers	nvim/plugged/coc.nvim/build/index.js	/^                    headers: {},$/;"	P
proxyAuth	nvim/plugged/coc.nvim/build/index.js	/^                    proxyAuth: auth$/;"	P
fetch	nvim/plugged/coc.nvim/build/index.js	/^function fetch(url, data, options = {}) {$/;"	F
headers	nvim/plugged/coc.nvim/build/index.js	/^        headers: {$/;"	P
req	nvim/plugged/coc.nvim/build/index.js	/^            const req = mod.request(opts, res => {$/;"	F
chunks	nvim/plugged/coc.nvim/build/index.js	/^                let chunks = [];$/;"	A
httpOverHttp	nvim/plugged/coc.nvim/build/index.js	/^function httpOverHttp(options) {$/;"	F
agent	nvim/plugged/coc.nvim/build/index.js	/^  var agent = new TunnelingAgent(options);$/;"	V
httpsOverHttp	nvim/plugged/coc.nvim/build/index.js	/^function httpsOverHttp(options) {$/;"	F
agent	nvim/plugged/coc.nvim/build/index.js	/^  var agent = new TunnelingAgent(options);$/;"	V
httpOverHttps	nvim/plugged/coc.nvim/build/index.js	/^function httpOverHttps(options) {$/;"	F
agent	nvim/plugged/coc.nvim/build/index.js	/^  var agent = new TunnelingAgent(options);$/;"	V
httpsOverHttps	nvim/plugged/coc.nvim/build/index.js	/^function httpsOverHttps(options) {$/;"	F
agent	nvim/plugged/coc.nvim/build/index.js	/^  var agent = new TunnelingAgent(options);$/;"	V
TunnelingAgent	nvim/plugged/coc.nvim/build/index.js	/^function TunnelingAgent(options) {$/;"	F
addRequest	nvim/plugged/coc.nvim/build/index.js	/^TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {$/;"	M
onFree	nvim/plugged/coc.nvim/build/index.js	/^    function onFree() {$/;"	F
onCloseOrRemove	nvim/plugged/coc.nvim/build/index.js	/^    function onCloseOrRemove(err) {$/;"	F
createSocket	nvim/plugged/coc.nvim/build/index.js	/^TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {$/;"	M
placeholder	nvim/plugged/coc.nvim/build/index.js	/^  var placeholder = {};$/;"	O
agent	nvim/plugged/coc.nvim/build/index.js	/^    agent: false,$/;"	P
headers	nvim/plugged/coc.nvim/build/index.js	/^    headers: {$/;"	P
onResponse	nvim/plugged/coc.nvim/build/index.js	/^  function onResponse(res) {$/;"	F
onUpgrade	nvim/plugged/coc.nvim/build/index.js	/^  function onUpgrade(res, socket, head) {$/;"	F
onConnect	nvim/plugged/coc.nvim/build/index.js	/^  function onConnect(res, socket, head) {$/;"	F
error	nvim/plugged/coc.nvim/build/index.js	/^      var error = new Error('tunneling socket could not be established, ' +$/;"	V
error	nvim/plugged/coc.nvim/build/index.js	/^      var error = new Error('got illegal response body from proxy');$/;"	V
onError	nvim/plugged/coc.nvim/build/index.js	/^  function onError(cause) {$/;"	F
error	nvim/plugged/coc.nvim/build/index.js	/^    var error = new Error('tunneling socket could not be established, ' +$/;"	V
removeSocket	nvim/plugged/coc.nvim/build/index.js	/^TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {$/;"	M
createSecureSocket	nvim/plugged/coc.nvim/build/index.js	/^function createSecureSocket(options, cb) {$/;"	F
socket	nvim/plugged/coc.nvim/build/index.js	/^      socket: socket,$/;"	P
toOptions	nvim/plugged/coc.nvim/build/index.js	/^function toOptions(host, port, localAddress) {$/;"	F
host	nvim/plugged/coc.nvim/build/index.js	/^      host: host,$/;"	P
port	nvim/plugged/coc.nvim/build/index.js	/^      port: port,$/;"	P
localAddress	nvim/plugged/coc.nvim/build/index.js	/^      localAddress: localAddress$/;"	P
mergeOptions	nvim/plugged/coc.nvim/build/index.js	/^function mergeOptions(target) {$/;"	F
debug	nvim/plugged/coc.nvim/build/index.js	/^var debug;$/;"	V
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function() {$/;"	M
debug	nvim/plugged/coc.nvim/build/index.js	/^  debug = function() {};$/;"	M
Memos	nvim/plugged/coc.nvim/build/index.js	/^class Memos {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(filepath) {$/;"	M
fetchContent	nvim/plugged/coc.nvim/build/index.js	/^    fetchContent(id, key) {$/;"	M
createMemento	nvim/plugged/coc.nvim/build/index.js	/^    createMemento(id) {$/;"	M
get	nvim/plugged/coc.nvim/build/index.js	/^            get: (key, defaultValue) => {$/;"	M
logError	nvim/plugged/coc.nvim/build/index.js	/^Promise.prototype.logError = function () {$/;"	M
REMOVED_GLOBALS	nvim/plugged/coc.nvim/build/index.js	/^const REMOVED_GLOBALS = [$/;"	A
removedGlobalStub	nvim/plugged/coc.nvim/build/index.js	/^function removedGlobalStub(name) {$/;"	F
makeRequireFunction	nvim/plugged/coc.nvim/build/index.js	/^function makeRequireFunction() {$/;"	F
req	nvim/plugged/coc.nvim/build/index.js	/^    const req = (p) => {$/;"	F
resolve	nvim/plugged/coc.nvim/build/index.js	/^    req.resolve = (request) => Module._resolveFilename(request, this);$/;"	M
compileInSandbox	nvim/plugged/coc.nvim/build/index.js	/^function compileInSandbox(sandbox) {$/;"	F
args	nvim/plugged/coc.nvim/build/index.js	/^        const args = [this.exports, require, this, filename, dirname];$/;"	A
createSandbox	nvim/plugged/coc.nvim/build/index.js	/^function createSandbox(filename, logger) {$/;"	F
module	nvim/plugged/coc.nvim/build/index.js	/^    const module = new Module(filename);$/;"	V
console	nvim/plugged/coc.nvim/build/index.js	/^        console: {$/;"	P
log	nvim/plugged/coc.nvim/build/index.js	/^            log: (...args) => {$/;"	M
error	nvim/plugged/coc.nvim/build/index.js	/^            error: (...args) => {$/;"	M
info	nvim/plugged/coc.nvim/build/index.js	/^            info: (...args) => {$/;"	M
warn	nvim/plugged/coc.nvim/build/index.js	/^            warn: (...args) => {$/;"	M
require	nvim/plugged/coc.nvim/build/index.js	/^    sandbox.require = function sandboxRequire(p) {$/;"	M
umask	nvim/plugged/coc.nvim/build/index.js	/^    sandbox.process.umask = (mask) => {$/;"	M
createExtension	nvim/plugged/coc.nvim/build/index.js	/^function createExtension(id, filename) {$/;"	F
defaults	nvim/plugged/coc.nvim/build/index.js	/^function defaults(obj, ...sources) {$/;"	F
omit	nvim/plugged/coc.nvim/build/index.js	/^function omit(obj, properties) {$/;"	F
o	nvim/plugged/coc.nvim/build/index.js	/^    let o = {};$/;"	O
fixDocumentation	nvim/plugged/coc.nvim/build/index.js	/^function fixDocumentation(str) {$/;"	F
check	nvim/plugged/coc.nvim/build/index.js	/^function check(_target, key, descriptor) {$/;"	F
value	nvim/plugged/coc.nvim/build/index.js	/^    descriptor.value = function (...args) {$/;"	M
timer	nvim/plugged/coc.nvim/build/index.js	/^            let timer = setTimeout(() => {$/;"	F
Languages	nvim/plugged/coc.nvim/build/index.js	/^class Languages {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
willSaveWaitUntil	nvim/plugged/coc.nvim/build/index.js	/^                let willSaveWaitUntil = async () => {$/;"	F
loadCompleteConfig	nvim/plugged/coc.nvim/build/index.js	/^    loadCompleteConfig() {$/;"	M
getConfig	nvim/plugged/coc.nvim/build/index.js	/^        function getConfig(key, defaultValue) {$/;"	F
completeConfig	nvim/plugged/coc.nvim/build/index.js	/^        this.completeConfig = {$/;"	P
registerOnTypeFormattingEditProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerOnTypeFormattingEditProvider(selector, provider, triggerCharacters) {$/;"	M
registerCompletionItemProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerCompletionItemProvider(name, shortcut, languageIds, provider, triggerCharacters = [], priority) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^            dispose: () => {$/;"	M
registerCodeActionProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerCodeActionProvider(selector, provider, clientId, codeActionKinds) {$/;"	M
registerHoverProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerHoverProvider(selector, provider) {$/;"	M
registerSelectionRangeProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerSelectionRangeProvider(selector, provider) {$/;"	M
registerSignatureHelpProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerSignatureHelpProvider(selector, provider, triggerCharacters) {$/;"	M
registerDocumentSymbolProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentSymbolProvider(selector, provider) {$/;"	M
registerFoldingRangeProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerFoldingRangeProvider(selector, provider) {$/;"	M
registerDocumentHighlightProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentHighlightProvider(selector, provider) {$/;"	M
registerCodeLensProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerCodeLensProvider(selector, provider) {$/;"	M
registerDocumentLinkProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentLinkProvider(selector, provider) {$/;"	M
registerDocumentColorProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentColorProvider(selector, provider) {$/;"	M
registerDefinitionProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDefinitionProvider(selector, provider) {$/;"	M
registerDeclarationProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDeclarationProvider(selector, provider) {$/;"	M
registerTypeDefinitionProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerTypeDefinitionProvider(selector, provider) {$/;"	M
registerImplementationProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerImplementationProvider(selector, provider) {$/;"	M
registerReferencesProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerReferencesProvider(selector, provider) {$/;"	M
registerRenameProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerRenameProvider(selector, provider) {$/;"	M
registerWorkspaceSymbolProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerWorkspaceSymbolProvider(selector, provider) {$/;"	M
registerDocumentFormatProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentFormatProvider(selector, provider, priority = 0) {$/;"	M
registerDocumentRangeFormatProvider	nvim/plugged/coc.nvim/build/index.js	/^    registerDocumentRangeFormatProvider(selector, provider, priority = 0) {$/;"	M
shouldTriggerSignatureHelp	nvim/plugged/coc.nvim/build/index.js	/^    shouldTriggerSignatureHelp(document, triggerCharacter) {$/;"	M
hasOnTypeProvider	nvim/plugged/coc.nvim/build/index.js	/^    hasOnTypeProvider(character, document) {$/;"	M
hasProvider	nvim/plugged/coc.nvim/build/index.js	/^    hasProvider(id, document) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
createDiagnosticCollection	nvim/plugged/coc.nvim/build/index.js	/^    createDiagnosticCollection(owner) {$/;"	M
createCompleteSource	nvim/plugged/coc.nvim/build/index.js	/^    createCompleteSource(name, shortcut, provider, languageIds, triggerCharacters, priority) {$/;"	M
completeItems	nvim/plugged/coc.nvim/build/index.js	/^        let completeItems = [];$/;"	A
resolvedIndexes	nvim/plugged/coc.nvim/build/index.js	/^        let resolvedIndexes = new Set();$/;"	V
source	nvim/plugged/coc.nvim/build/index.js	/^        let source = {$/;"	O
enable	nvim/plugged/coc.nvim/build/index.js	/^            enable: true,$/;"	P
filetypes	nvim/plugged/coc.nvim/build/index.js	/^            filetypes: languageIds,$/;"	P
context	nvim/plugged/coc.nvim/build/index.js	/^                let context = { triggerKind, option: opt };$/;"	O
result	nvim/plugged/coc.nvim/build/index.js	/^                let result;$/;"	V
items	nvim/plugged/coc.nvim/build/index.js	/^                let items = completeItems.map((o, index) => {$/;"	F
docs	nvim/plugged/coc.nvim/build/index.js	/^                    let docs = [];$/;"	A
isText	nvim/plugged/coc.nvim/build/index.js	/^                            let isText = \/^[\\w-\\s.,\\t]+$\/.test(detail);$/;"	V
textEdit	nvim/plugged/coc.nvim/build/index.js	/^                    item.textEdit = {$/;"	P
shouldCommit	nvim/plugged/coc.nvim/build/index.js	/^            shouldCommit: (item, character) => {$/;"	M
end	nvim/plugged/coc.nvim/build/index.js	/^                end: linenr,$/;"	P
strictIndexing	nvim/plugged/coc.nvim/build/index.js	/^                strictIndexing: false$/;"	P
character	nvim/plugged/coc.nvim/build/index.js	/^            let character = newLines[newLines.length - 1].length - end.length;$/;"	V
convertVimCompleteItem	nvim/plugged/coc.nvim/build/index.js	/^    convertVimCompleteItem(item, shortcut, opt) {$/;"	M
obj	nvim/plugged/coc.nvim/build/index.js	/^        let obj = {$/;"	O
abbr	nvim/plugged/coc.nvim/build/index.js	/^            abbr: label,$/;"	P
fields	nvim/plugged/coc.nvim/build/index.js	/^            let fields = [item.detail || '', obj.abbr, obj.word];$/;"	A
DiagnosticManager	nvim/plugged/coc.nvim/build/index.js	/^class DiagnosticManager {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
init	nvim/plugged/coc.nvim/build/index.js	/^    init() {$/;"	M
d	nvim/plugged/coc.nvim/build/index.js	/^                let d = 300 - (Date.now() - this.lastChanageTs);$/;"	V
buf	nvim/plugged/coc.nvim/build/index.js	/^            let buf = this.buffers.find(buf => buf.bufnr == bufnr);$/;"	F
createDiagnosticBuffer	nvim/plugged/coc.nvim/build/index.js	/^    createDiagnosticBuffer(doc) {$/;"	M
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.buffers.findIndex(b => b.bufnr == doc.bufnr);$/;"	F
buf	nvim/plugged/coc.nvim/build/index.js	/^            let buf = new buffer_1.DiagnosticBuffer(doc.bufnr, this.config);$/;"	V
setConfigurationErrors	nvim/plugged/coc.nvim/build/index.js	/^    setConfigurationErrors(init) {$/;"	M
collection	nvim/plugged/coc.nvim/build/index.js	/^        let collection = collections.find(o => o.name == 'config');$/;"	F
entries	nvim/plugged/coc.nvim/build/index.js	/^            let entries = new Map();$/;"	V
create	nvim/plugged/coc.nvim/build/index.js	/^    create(name) {$/;"	M
collection	nvim/plugged/coc.nvim/build/index.js	/^        let collection = new collection_1.default(name);$/;"	V
idx	nvim/plugged/coc.nvim/build/index.js	/^            let idx = this.collections.findIndex(o => o == collection);$/;"	F
getSortedRanges	nvim/plugged/coc.nvim/build/index.js	/^    getSortedRanges(uri, severity) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
ranges	nvim/plugged/coc.nvim/build/index.js	/^            let ranges = diagnostics.map(o => o.range);$/;"	F
getDiagnostics	nvim/plugged/coc.nvim/build/index.js	/^    getDiagnostics(uri) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
getDiagnosticsInRange	nvim/plugged/coc.nvim/build/index.js	/^    getDiagnosticsInRange(document, range) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = [];$/;"	A
getDiagnosticList	nvim/plugged/coc.nvim/build/index.js	/^    getDiagnosticList() {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
o	nvim/plugged/coc.nvim/build/index.js	/^                    let o = {$/;"	O
buffer	nvim/plugged/coc.nvim/build/index.js	/^        let buffer = this.buffers.find(o => o.bufnr == bufnr);$/;"	F
diagnostics	nvim/plugged/coc.nvim/build/index.js	/^        let diagnostics = buffer.diagnostics.filter(o => {$/;"	F
docs	nvim/plugged/coc.nvim/build/index.js	/^        let docs = [];$/;"	A
ft	nvim/plugged/coc.nvim/build/index.js	/^        let ft = '';$/;"	V
filetype	nvim/plugged/coc.nvim/build/index.js	/^            let filetype = 'Error';$/;"	V
lines	nvim/plugged/coc.nvim/build/index.js	/^            let lines = docs.map(d => d.content).join('\\n').split(\/\\r?\\n\/);$/;"	F
diagnostic	nvim/plugged/coc.nvim/build/index.js	/^        let diagnostic = diagnostics.find(o => o.relatedInformation != null);$/;"	F
locations	nvim/plugged/coc.nvim/build/index.js	/^        let locations = diagnostic.relatedInformation.map(o => o.location);$/;"	F
disposeBuffer	nvim/plugged/coc.nvim/build/index.js	/^    disposeBuffer(bufnr) {$/;"	M
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = this.buffers.findIndex(buf => buf.bufnr == bufnr);$/;"	F
hideFloat	nvim/plugged/coc.nvim/build/index.js	/^    hideFloat() {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
setConfiguration	nvim/plugged/coc.nvim/build/index.js	/^    setConfiguration(event) {$/;"	M
getConfig	nvim/plugged/coc.nvim/build/index.js	/^        function getConfig(key, defaultValue) {$/;"	F
config	nvim/plugged/coc.nvim/build/index.js	/^        this.config = {$/;"	P
getCollections	nvim/plugged/coc.nvim/build/index.js	/^    getCollections(uri) {$/;"	M
shouldValidate	nvim/plugged/coc.nvim/build/index.js	/^    shouldValidate(doc) {$/;"	M
refreshBuffer	nvim/plugged/coc.nvim/build/index.js	/^    refreshBuffer(uri) {$/;"	M
buf	nvim/plugged/coc.nvim/build/index.js	/^        let buf = this.buffers.find(buf => buf.uri == uri);$/;"	F
aleItems	nvim/plugged/coc.nvim/build/index.js	/^                let aleItems = diagnostics.map(o => {$/;"	F
FloatFactory	nvim/plugged/coc.nvim/build/index.js	/^class FloatFactory {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, env, preferTop = false, maxHeight = 999, maxWidth, autoHide = true) {$/;"	M
onCursorMoved	nvim/plugged/coc.nvim/build/index.js	/^    onCursorMoved(insertMode, bufnr, cursor) {$/;"	M
padding	nvim/plugged/coc.nvim/build/index.js	/^                    padding: [0, 1, 0, 1],$/;"	P
filetypes	nvim/plugged/coc.nvim/build/index.js	/^            let filetypes = array_1.distinct(docs.map(d => d.filetype));$/;"	F
checkMode	nvim/plugged/coc.nvim/build/index.js	/^    checkMode(mode, allowSelection) {$/;"	M
close	nvim/plugged/coc.nvim/build/index.js	/^    close(cancel = true) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
cursorPostion	nvim/plugged/coc.nvim/build/index.js	/^function cursorPostion(n) {$/;"	F
FloatBuffer	nvim/plugged/coc.nvim/build/index.js	/^class FloatBuffer {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim, buffer, window) {$/;"	M
getHeight	nvim/plugged/coc.nvim/build/index.js	/^    getHeight(docs, maxWidth) {$/;"	M
l	nvim/plugged/coc.nvim/build/index.js	/^        let l = 0;$/;"	V
calculateFragments	nvim/plugged/coc.nvim/build/index.js	/^    calculateFragments(docs, maxWidth) {$/;"	M
fragments	nvim/plugged/coc.nvim/build/index.js	/^        let fragments = [];$/;"	A
idx	nvim/plugged/coc.nvim/build/index.js	/^        let idx = 0;$/;"	V
currLine	nvim/plugged/coc.nvim/build/index.js	/^        let currLine = 0;$/;"	V
newLines	nvim/plugged/coc.nvim/build/index.js	/^        let newLines = [];$/;"	A
lines	nvim/plugged/coc.nvim/build/index.js	/^            let lines = [];$/;"	A
start	nvim/plugged/coc.nvim/build/index.js	/^                start: currLine,$/;"	P
getWidth	nvim/plugged/coc.nvim/build/index.js	/^    getWidth(line) {$/;"	M
arr	nvim/plugged/coc.nvim/build/index.js	/^            let arr = await Promise.all(fragments.map(f => {$/;"	F
splitFragment	nvim/plugged/coc.nvim/build/index.js	/^    splitFragment(fragment, defaultFileType) {$/;"	M
res	nvim/plugged/coc.nvim/build/index.js	/^        let res = [];$/;"	A
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = [];$/;"	A
fixFiletype	nvim/plugged/coc.nvim/build/index.js	/^    fixFiletype(filetype) {$/;"	M
setLines	nvim/plugged/coc.nvim/build/index.js	/^    setLines() {$/;"	M
positions	nvim/plugged/coc.nvim/build/index.js	/^            let positions = [];$/;"	A
diagnosticFiletypes	nvim/plugged/coc.nvim/build/index.js	/^const diagnosticFiletypes = ['Error', 'Warning', 'Info', 'Hint'];$/;"	A
cache	nvim/plugged/coc.nvim/build/index.js	/^const cache = {};$/;"	O
getHiglights	nvim/plugged/coc.nvim/build/index.js	/^function getHiglights(lines, filetype) {$/;"	F
hlMap	nvim/plugged/coc.nvim/build/index.js	/^    const hlMap = new Map();$/;"	V
highlights	nvim/plugged/coc.nvim/build/index.js	/^        let highlights = lines.map((line, i) => {$/;"	F
line	nvim/plugged/coc.nvim/build/index.js	/^                line: i,$/;"	P
colStart	nvim/plugged/coc.nvim/build/index.js	/^                colStart: 0,$/;"	P
res	nvim/plugged/coc.nvim/build/index.js	/^    const res = [];$/;"	A
nvim	nvim/plugged/coc.nvim/build/index.js	/^    let nvim;$/;"	V
dirs	nvim/plugged/coc.nvim/build/index.js	/^            let dirs = paths.filter(p => {$/;"	F
shell	nvim/plugged/coc.nvim/build/index.js	/^            shell: false,$/;"	P
timer	nvim/plugged/coc.nvim/build/index.js	/^        let timer;$/;"	V
exit	nvim/plugged/coc.nvim/build/index.js	/^        const exit = () => {$/;"	F
callback	nvim/plugged/coc.nvim/build/index.js	/^            const callback = (method, args) => {$/;"	F
colStart	nvim/plugged/coc.nvim/build/index.js	/^                                let colStart = 0;$/;"	V
hlGroup	nvim/plugged/coc.nvim/build/index.js	/^                                let hlGroup = '';$/;"	V
currId	nvim/plugged/coc.nvim/build/index.js	/^                                let currId = 0;$/;"	V
colEnd	nvim/plugged/coc.nvim/build/index.js	/^                                                colEnd: col,$/;"	P
colEnd	nvim/plugged/coc.nvim/build/index.js	/^                                        colEnd: col,$/;"	P
ext_hlstate	nvim/plugged/coc.nvim/build/index.js	/^                ext_hlstate: true,$/;"	P
ext_linegrid	nvim/plugged/coc.nvim/build/index.js	/^                ext_linegrid: true$/;"	P
terminate	nvim/plugged/coc.nvim/build/index.js	/^function terminate(process, cwd) {$/;"	F
options	nvim/plugged/coc.nvim/build/index.js	/^            let options = {$/;"	O
stdio	nvim/plugged/coc.nvim/build/index.js	/^                stdio: ['pipe', 'pipe', 'ignore']$/;"	P
v4	nvim/plugged/coc.nvim/build/index.js	/^function v4(options, buf, offset) {$/;"	F
Popup	nvim/plugged/coc.nvim/build/index.js	/^class Popup {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(nvim) {$/;"	M
hide	nvim/plugged/coc.nvim/build/index.js	/^    hide() {$/;"	M
show	nvim/plugged/coc.nvim/build/index.js	/^    show() {$/;"	M
move	nvim/plugged/coc.nvim/build/index.js	/^    move(options) {$/;"	M
setFiletype	nvim/plugged/coc.nvim/build/index.js	/^    setFiletype(filetype) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
createPopup	nvim/plugged/coc.nvim/build/index.js	/^async function createPopup(nvim, text, options) {$/;"	F
popup	nvim/plugged/coc.nvim/build/index.js	/^    let popup = new Popup(nvim);$/;"	V
severityNames	nvim/plugged/coc.nvim/build/index.js	/^const severityNames = ['CocError', 'CocWarning', 'CocInfo', 'CocHint'];$/;"	A
DiagnosticBuffer	nvim/plugged/coc.nvim/build/index.js	/^class DiagnosticBuffer {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor(bufnr, config) {$/;"	M
refresh	nvim/plugged/coc.nvim/build/index.js	/^        this.refresh = (diagnostics) => {$/;"	M
_refresh	nvim/plugged/coc.nvim/build/index.js	/^    _refresh(diagnostics) {$/;"	M
winid	nvim/plugged/coc.nvim/build/index.js	/^        let winid;$/;"	V
bufnr	nvim/plugged/coc.nvim/build/index.js	/^        let bufnr;$/;"	V
setLocationlist	nvim/plugged/coc.nvim/build/index.js	/^    setLocationlist(diagnostics, winid) {$/;"	M
items	nvim/plugged/coc.nvim/build/index.js	/^        let items = [];$/;"	A
clearSigns	nvim/plugged/coc.nvim/build/index.js	/^    clearSigns() {$/;"	M
ids	nvim/plugged/coc.nvim/build/index.js	/^            let ids = [];$/;"	A
addSigns	nvim/plugged/coc.nvim/build/index.js	/^    addSigns(diagnostics) {$/;"	M
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = new Set();$/;"	V
setDiagnosticInfo	nvim/plugged/coc.nvim/build/index.js	/^    setDiagnosticInfo(bufnr, diagnostics) {$/;"	M
lnums	nvim/plugged/coc.nvim/build/index.js	/^        let lnums = [0, 0, 0, 0];$/;"	A
info	nvim/plugged/coc.nvim/build/index.js	/^        let info = { error: 0, warning: 0, information: 0, hint: 0, lnums };$/;"	O
addDiagnosticVText	nvim/plugged/coc.nvim/build/index.js	/^    addDiagnosticVText(diagnostics) {$/;"	M
lines	nvim/plugged/coc.nvim/build/index.js	/^        let lines = new Set();$/;"	V
clearHighlight	nvim/plugged/coc.nvim/build/index.js	/^    clearHighlight() {$/;"	M
addHighlight	nvim/plugged/coc.nvim/build/index.js	/^    addHighlight(diagnostics, winid) {$/;"	M
highlights	nvim/plugged/coc.nvim/build/index.js	/^        const highlights = new Map();$/;"	V
fixRange	nvim/plugged/coc.nvim/build/index.js	/^    fixRange(range) {$/;"	M
dispose	nvim/plugged/coc.nvim/build/index.js	/^    dispose() {$/;"	M
CallSequence	nvim/plugged/coc.nvim/build/index.js	/^class CallSequence {$/;"	C
constructor	nvim/plugged/coc.nvim/build/index.js	/^    constructor() {$/;"	M
addFuncti